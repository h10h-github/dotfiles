var search_data = {"index":{"searchIndex":["abstractcontroller","actionnotfound","assetpaths","base","callbacks","classmethods","collector","mime","doublerendererror","error","helpers","classmethods","missinghelpererror","logger","railties","routeshelpers","rendering","translation","urlfor","classmethods","actioncontroller","actioncontroller","actioncontroller","urlgenerationerror","actioncontrollererror","badrequest","base","caching","classmethods","configmethods","fragments","conditionalget","classmethods","cookies","datastreaming","filebody","etagwithtemplatedigest","flash","classmethods","forcessl","classmethods","head","helpers","classmethods","hideactions","classmethods","httpauthentication","basic","controllermethods","classmethods","digest","controllermethods","token","controllermethods","implicitrender","instrumentation","classmethods","invalidauthenticitytoken","invalidcrossoriginrequest","live","buffer","clientdisconnected","response","header","sse","livetestresponse","logsubscriber","metal","methodnotallowed","middleware","actionmiddleware","middlewarestack","middleware","mimeresponds","classmethods","collector","variantcollector","missingfile","missingrenderer","modelnaming","notimplemented","parametermissing","parameters","paramswrapper","classmethods","options","rackdelegation","railtie","activesupport","railties","helpers","redirectbackerror","redirecting","rendererror","renderers","all","classmethods","mime","rendering","requestforgeryprotection","classmethods","protectionmethods","exception","nullsession","nullcookiejar","nullsessionhash","resetsession","rescue","routingerror","sessionoverflowerror","streaming","strongparameters","templateassertions","testcase","behavior","classmethods","testrequest","testresponse","testsession","testing","classmethods","functional","unknowncontroller","unknownformat","unknownhttpmethod","unpermittedparameters","urlfor","actiondispatch","assertions","responseassertions","routingassertions","callbacks","cookies","chainedcookiejars","cookiejar","encryptedcookiejar","jsonserializer","permanentcookiejar","serializedcookiejars","signedcookiejar","upgradelegacyencryptedcookiejar","upgradelegacysignedcookiejar","verifyandupgradelegacysignedmessage","debugexceptions","exceptionwrapper","filehandler","flash","flashhash","flashnow","http","cache","request","response","filterparameters","filterredirect","headers","mimenegotiation","parameterfilter","compiledfilter","parameters","url","uploadedfile","illegalstateerror","integration","requesthelpers","runner","session","integrationtest","journey","format","parameter","formatter","gtg","builder","matchdata","simulator","transitiontable","nfa","builder","dot","matchdata","simulator","transitiontable","visitor","nodes","binary","cat","dummy","group","literal","node","or","star","symbol","terminal","unary","parser","path","pattern","anchoredregexp","matchdata","regexpoffsets","unanchoredregexp","route","router","routingerror","strexp","utils","uriencoder","routes","scanner","visitors","dot","each","formatbuilder","string","visitor","middlewarestack","middleware","paramsparser","parseerror","publicexceptions","railsentitystore","railsmetastore","railtie","activesupport","reloader","remoteip","getip","ipspoofattackerror","request","session","options","utils","requestid","response","buffer","rackbody","routing","consoleformatter","endpoint","htmltableformatter","mapper","base","concerns","constraints","httphelpers","mapping","resources","resource","singletonresource","scope","scoping","optionredirect","pathredirect","polymorphicroutes","helpermethodbuilder","redirect","redirection","routeset","dispatcher","generator","mountedhelpers","namedroutecollection","urlhelper","optimizedurlhelper","routewrapper","routesinspector","routesproxy","urlfor","ssl","session","abstractstore","cachestore","compatibility","cookiestore","memcachestore","sessionobject","sessionrestoreerror","stalesessioncheck","showexceptions","static","testprocess","testrequest","testresponse","actionpack","version","actionview","template","activesupport","mime","mimes","nulltype","type","acceptitem","acceptlist","rack","cache","entitystore","metastore","mount","==()","==()","===()","=~()","get()","post()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","_extract_parameters()","_extract_redirect_to_status()","_find_action_name()","_generate_paths_by_default()","_handle_action_missing()","_insert_callbacks()","_mock_session()","_normalize_args()","_normalize_callback_options()","_normalize_options()","_normalize_render()","_normalize_text()","_process_format()","_process_format()","_process_options()","_reduce_1()","_reduce_10()","_reduce_15()","_reduce_16()","_reduce_17()","_reduce_18()","_reduce_2()","_reduce_7()","_reduce_8()","_reduce_9()","_reduce_none()","_render_in_priorities()","_render_to_body_with_renderer()","_render_with_renderer_method_name()","_routes()","_routes()","_routes_context()","_set_wrapper_options()","_valid_action_name?()","_with_routes()","_wrap_parameters()","_wrapper_enabled?()","_wrapper_formats()","_wrapper_key()","abort()","abstract!()","accept=()","accepts()","action()","action()","action=()","action_method?()","action_methods()","action_methods()","action_methods()","add()","add_anchor()","add_flash_types()","add_params()","add_renderer()","add_route()","add_template_helper()","add_trailing_slash()","after()","after_action()","alert()","alert=()","all()","all_application_helpers()","all_helpers_from_path()","any()","app()","app()","app()","app=()","append()","append_after_action()","append_around_action()","append_before_action()","append_charset?()","application_trace()","around_action()","array_of_permitted_scalars?()","array_of_permitted_scalars_filter()","assert_generates()","assert_index()","assert_recognizes()","assert_redirected_to()","assert_response()","assert_routing()","assert_template()","assign_default_content_type_and_charset!()","assigns()","auth_param()","auth_scheme()","authenticate()","authenticate()","authenticate()","authenticate_or_request_with_http_basic()","authenticate_or_request_with_http_digest()","authenticate_or_request_with_http_token()","authenticate_with_http_basic()","authenticate_with_http_digest()","authenticate_with_http_token()","authentication_header()","authentication_request()","authentication_request()","authentication_request()","authorization()","available_action?()","await_commit()","await_sent()","backtrace()","backtrace_cleaner()","before()","before_action()","before_committed()","before_filters()","before_sending()","body()","body()","body()","body()","body=()","body_parts()","build()","build()","build_buffer()","build_conditions()","build_full_uri()","build_host_url()","build_path()","build_request()","build_request_uri()","build_response()","cache()","cache_configured?()","cache_control_headers()","cache_control_segments()","cache_key()","cache_store()","cache_store=()","calculate_ip()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","check_method()","check_path_parameters!()","check_required_ivars()","clean_backtrace()","cleanup!()","clear()","clear!()","clear_action_methods!()","clear_helpers()","close()","close()","close()","close()","code()","collection()","combine_etags()","commit!()","committed?()","compare_with_real_token()","compiled_filter()","concern()","concerns()","const_missing()","constraints()","constraints()","content_length()","content_mime_type()","content_type()","content_type()","content_type()","content_type=()","content_type=()","controller()","controller()","controller_class()","controller_class=()","controller_name()","controller_name()","controller_path()","convert_hashes_to_parameters()","convert_to_model()","convert_value_to_parameters()","converted_arrays()","cookie_jar()","cookie_jar()","cookies()","cookies()","cookies()","cookies()","cookies()","custom()","date()","date=()","date?()","decode_credentials()","decode_credentials()","decode_credentials_header()","deep_munge()","deep_munge()","default_env()","default_helper_module!()","default_hsts_options()","default_render()","default_resources_path_names()","default_url_options()","default_url_options()","default_url_options=()","default_url_options=()","defaults()","define_generate_prefix()","define_mounted_helper()","delete()","delete()","delete()","delete()","delete()","delete()","delete?()","delete_cookie()","delete_via_redirect()","deserialize()","destroy_session()","destroy_session()","determine_default_controller_class()","determine_template_etag()","digest()","discard()","dispatch()","dispatcher()","document_root_element()","document_root_element()","domain()","draw()","draw_header()","draw_section()","dump()","dup()","each()","each()","each()","each()","each()","each_element()","each_pair()","eager_load!()","empty?()","empty?()","encode_credentials()","encode_credentials()","encode_credentials()","encrypted()","endpoint()","engine?()","env()","env_filter()","env_name()","eof?()","escape()","etag()","etag=()","etag_matches?()","eval_block()","evaluate()","exist?()","expand_backtrace()","expected_response()","expire_fragment()","expires_in()","expires_now()","ext()","external_request_id()","extra_keys()","extract!()","extract_domain()","extract_domain_from()","extract_session_id()","extract_session_id()","extract_subdomain()","extract_subdomains()","extract_subdomains_from()","fail_on()","fetch()","fetch()","fetch()","fields_for_style?()","filter()","filter_proxies()","filtered_env()","filtered_location()","filtered_parameters()","filtered_path()","filtered_query_string()","finalize!()","find_script_name()","fixture_file_upload()","flag_cookies_as_secure!()","flash()","flash()","follow_redirect!()","force_ssl()","force_ssl_redirect()","form_authenticity_param()","form_authenticity_token()","form_data?()","format()","format=()","formats()","formats=()","fragment_cache_key()","fragment_exist?()","framework_trace()","fresh?()","fresh_when()","from_response()","full_trace()","full_url_for()","fullpath()","gem_version()","generate()","generate_extras()","generate_method_for_mime()","generate_sid()","get()","get()","get()","get?()","get_cookie()","get_session()","get_via_redirect()","gzip_encoding_accepted?()","gzip_file_path()","ha1()","halted_callback()","halted_callback_hook()","handle_conditional_get!()","handle_unverified_request()","handle_unverified_request()","handle_unverified_request()","handle_unverified_request()","has_basic_credentials?()","has_named_route?()","hash_filter()","head()","head()","head()","head?()","header()","header()","headers()","headers=()","helper()","helper_attr()","helper_method()","helpers()","hidden_actions()","hide_action()","host()","host()","host=()","host_with_port()","hsts_headers()","html?()","html_document()","html_format?()","http_basic_authenticate_with()","https!()","https?()","if_modified_since()","if_modified_since=()","if_none_match()","if_none_match=()","if_none_match_etags()","include?()","index()","inherited()","inherited()","inherited()","initialize_copy()","initialize_copy()","initialize_sid()","insert()","insert_after()","insert_before()","inspect()","inspect()","integration_session()","internal?()","internal_methods()","internal_request_id()","interpolation_required?()","ip()","ips_from()","json_regexp()","keep()","key?()","key?()","key?()","keys()","klass()","l()","last()","last_modified()","last_modified=()","last_modified?()","load()","load_session()","load_session()","local?()","localize()","location()","location()","location=()","location=()","location_filter()","location_filter_match?()","log_error()","log_error()","logger()","logger()","logger()","lookup()","lookup_and_digest_template()","lookup_by_extension()","map_method()","mark_for_same_origin_verification!()","marked_for_same_origin_verification?()","masked_authenticity_token()","match()","match()","match?()","media_type()","member()","merge()","merge!()","merge_default_headers()","message()","method()","method_added()","method_for_action()","method_for_action()","method_for_action()","method_missing()","method_missing()","method_missing()","method_missing()","method_symbol()","middleware()","model_name_from_record_or_class()","modules_for_helpers()","modules_for_helpers()","mount()","mounted_helpers()","munge_body_object()","name()","named_host?()","namespace()","namespace()","needs_migration?()","negotiate_format()","negotiate_mime()","nested()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_instance_with_inherited_permitted_status()","no_routes()","no_routes()","non_xhr_javascript_response?()","nonce()","normalize()","normalize_argument_to_redirection()","normalize_encode_params()","normalize_host()","normalize_name()","normalize_path()","normalize_port()","normalize_protocol()","not_modified?()","notice()","notice=()","now()","now_is_loaded?()","opaque()","open()","open()","open_session()","optimize_routes_generation?()","optimize_routes_generation?()","optimize_routes_generation?()","optional_port()","original_exception()","original_fullpath()","original_url()","parameter_filter()","parameter_filter_for()","parameterize()","parameters()","paramify_values()","params()","params()","params()","params=()","params=()","params_array_from()","parse()","parse_data_with_trailing_star()","parse_formatted_parameters()","parse_query()","parse_trailing_star()","pass_response()","patch()","patch()","patch()","patch?()","patch_via_redirect()","path()","path()","path()","path=()","path_for()","path_parameters()","perform_write()","performed?()","permanent()","permit()","permit!()","permitted=()","permitted?()","permitted_scalar?()","permitted_scalar_filter()","persistent_session_id!()","pick_template_for_etag()","polymorphic_path()","polymorphic_path_for_action()","polymorphic_url()","polymorphic_url_for_action()","port()","port=()","port_string()","post()","post()","post()","post?()","post_via_redirect()","prepare!()","prepare!()","prepare_cache_control!()","prepend()","prepend_after_action()","prepend_around_action()","prepend_before_action()","process()","process()","process()","process()","process()","process()","process_action()","process_action()","process_action()","process_action()","process_action()","process_action()","protect_against_forgery?()","protect_from_forgery()","protected_instance_variables()","protection_method_class()","protocol()","put()","put()","put()","put?()","put_via_redirect()","query_parameters()","rack_app()","rack_cookies()","rack_response()","rails_app?()","raw_host_with_port()","raw_params()","raw_post()","read()","read()","read()","read_fragment()","real_csrf_token()","recognize_path()","recognized_request_for()","recycle!()","recycle!()","redirect()","redirect_to()","redirect_to()","redirect_to()","redirect_to()","redirect_to_https()","redirect_to_url()","redirect_url()","ref()","regexp()","register()","register_alias()","register_callback()","registered_original_exception?()","remote_addr=()","remote_ip()","remove()","remove_renderer()","render()","render()","render()","render()","render_exception()","render_exception()","render_format()","render_html()","render_to_body()","render_to_body()","render_to_body()","render_to_string()","render_to_string()","rendered_format()","reqs()","request()","request_http_basic_authentication()","request_http_digest_authentication()","request_http_token_authentication()","request_method()","request_method=()","request_method_symbol()","request_parameters()","request_uri=()","request_via_redirect()","require()","required()","required_path()","required_segment()","rescue_template()","rescue_with_handler()","reset!()","reset!()","reset_session()","reset_session()","reset_template_assertion()","resolve()","resolve()","resource()","resources()","resources_path_names()","respond_to()","respond_to()","respond_to?()","respond_to?()","respond_with()","response()","response()","response_body=()","response_body=()","response_body=()","response_code()","result()","result()","rewind()","rewrite_param_values()","root()","root()","routes_inspector()","scope()","secret_token()","section()","section()","section_title()","section_title()","select!()","send_action()","send_data()","send_data()","send_data()","send_file()","send_file()","send_file()","send_file_headers!()","sending!()","sending?()","sent!()","sent?()","serialize()","serializer()","server_port()","server_software()","session()","session_options=()","set_conditional_cache_control!()","set_cookie()","set_cookie()","set_member_mappings_for_resource()","set_response!()","set_response!()","set_session()","set_session()","setup_controller_request_and_response()","setup_subscriptions()","shallow()","shallow?()","show_detailed_exceptions?()","signed()","signed_or_encrypted()","size()","size()","skip_action_callback()","skip_after_action()","skip_around_action()","skip_before_action()","skip_filter()","slice()","source_extracts()","source_fragment()","stale?()","stale_session_check!()","standard_port()","standard_port?()","start_processing()","status()","status=()","status=()","status_code()","status_code_for_exception()","status_message()","stderr_logger()","stringify_array()","subdomain()","subdomains()","supports_path?()","swap()","symbolized_path_parameters()","symbols()","t()","teardown_subscriptions()","tests()","to_a()","to_a()","to_ary()","to_ary()","to_ary()","to_cleanup()","to_h()","to_hash()","to_path()","to_prepare()","to_s()","to_s()","to_str()","to_sym()","token_and_options()","token_params_from()","traces()","transform_values()","translate()","unpacked_cookie_data()","unpermitted_keys()","unpermitted_parameters()","unpermitted_parameters!()","unregister()","unshift()","url()","url_for()","url_for()","url_for()","url_for()","url_helpers()","url_options()","url_options()","url_options()","url_options()","url_options()","use()","use()","use_accept_header()","use_renderer()","use_renderers()","user_agent=()","user_name_and_password()","using_match_shorthand?()","uuid()","valid_accept_header()","valid_authenticity_token?()","validate_digest_response()","validate_nonce()","variant=()","verb()","verified_request?()","verify_and_upgrade_legacy_signed_message()","verify_authenticity_token()","verify_same_origin_request()","version()","view_assigns()","view_cache_dependencies()","view_cache_dependency()","visible_action?()","widths()","with()","with_default_scope()","with_exclusive_scope()","with_routing()","with_scope_level()","without_modules()","wrap_parameters()","write()","write()","write()","write_fragment()","xhr()","xhr()","xhr?()","xml_http_request()","xml_http_request()","xml_http_request?()","xor_byte_strings()","fsm.css","fsm.js"],"longSearchIndex":["abstractcontroller","abstractcontroller::actionnotfound","abstractcontroller::assetpaths","abstractcontroller::base","abstractcontroller::callbacks","abstractcontroller::callbacks::classmethods","abstractcontroller::collector","abstractcontroller::collector::mime","abstractcontroller::doublerendererror","abstractcontroller::error","abstractcontroller::helpers","abstractcontroller::helpers::classmethods","abstractcontroller::helpers::missinghelpererror","abstractcontroller::logger","abstractcontroller::railties","abstractcontroller::railties::routeshelpers","abstractcontroller::rendering","abstractcontroller::translation","abstractcontroller::urlfor","abstractcontroller::urlfor::classmethods","actioncontroller","actioncontroller::actioncontroller","actioncontroller::actioncontroller::actioncontroller","actioncontroller::actioncontroller::actioncontroller::urlgenerationerror","actioncontroller::actioncontrollererror","actioncontroller::badrequest","actioncontroller::base","actioncontroller::caching","actioncontroller::caching::classmethods","actioncontroller::caching::configmethods","actioncontroller::caching::fragments","actioncontroller::conditionalget","actioncontroller::conditionalget::classmethods","actioncontroller::cookies","actioncontroller::datastreaming","actioncontroller::datastreaming::filebody","actioncontroller::etagwithtemplatedigest","actioncontroller::flash","actioncontroller::flash::classmethods","actioncontroller::forcessl","actioncontroller::forcessl::classmethods","actioncontroller::head","actioncontroller::helpers","actioncontroller::helpers::classmethods","actioncontroller::hideactions","actioncontroller::hideactions::classmethods","actioncontroller::httpauthentication","actioncontroller::httpauthentication::basic","actioncontroller::httpauthentication::basic::controllermethods","actioncontroller::httpauthentication::basic::controllermethods::classmethods","actioncontroller::httpauthentication::digest","actioncontroller::httpauthentication::digest::controllermethods","actioncontroller::httpauthentication::token","actioncontroller::httpauthentication::token::controllermethods","actioncontroller::implicitrender","actioncontroller::instrumentation","actioncontroller::instrumentation::classmethods","actioncontroller::invalidauthenticitytoken","actioncontroller::invalidcrossoriginrequest","actioncontroller::live","actioncontroller::live::buffer","actioncontroller::live::clientdisconnected","actioncontroller::live::response","actioncontroller::live::response::header","actioncontroller::live::sse","actioncontroller::livetestresponse","actioncontroller::logsubscriber","actioncontroller::metal","actioncontroller::methodnotallowed","actioncontroller::middleware","actioncontroller::middleware::actionmiddleware","actioncontroller::middlewarestack","actioncontroller::middlewarestack::middleware","actioncontroller::mimeresponds","actioncontroller::mimeresponds::classmethods","actioncontroller::mimeresponds::collector","actioncontroller::mimeresponds::collector::variantcollector","actioncontroller::missingfile","actioncontroller::missingrenderer","actioncontroller::modelnaming","actioncontroller::notimplemented","actioncontroller::parametermissing","actioncontroller::parameters","actioncontroller::paramswrapper","actioncontroller::paramswrapper::classmethods","actioncontroller::paramswrapper::options","actioncontroller::rackdelegation","actioncontroller::railtie","actioncontroller::railtie::activesupport","actioncontroller::railties","actioncontroller::railties::helpers","actioncontroller::redirectbackerror","actioncontroller::redirecting","actioncontroller::rendererror","actioncontroller::renderers","actioncontroller::renderers::all","actioncontroller::renderers::classmethods","actioncontroller::renderers::mime","actioncontroller::rendering","actioncontroller::requestforgeryprotection","actioncontroller::requestforgeryprotection::classmethods","actioncontroller::requestforgeryprotection::protectionmethods","actioncontroller::requestforgeryprotection::protectionmethods::exception","actioncontroller::requestforgeryprotection::protectionmethods::nullsession","actioncontroller::requestforgeryprotection::protectionmethods::nullsession::nullcookiejar","actioncontroller::requestforgeryprotection::protectionmethods::nullsession::nullsessionhash","actioncontroller::requestforgeryprotection::protectionmethods::resetsession","actioncontroller::rescue","actioncontroller::routingerror","actioncontroller::sessionoverflowerror","actioncontroller::streaming","actioncontroller::strongparameters","actioncontroller::templateassertions","actioncontroller::testcase","actioncontroller::testcase::behavior","actioncontroller::testcase::behavior::classmethods","actioncontroller::testrequest","actioncontroller::testresponse","actioncontroller::testsession","actioncontroller::testing","actioncontroller::testing::classmethods","actioncontroller::testing::functional","actioncontroller::unknowncontroller","actioncontroller::unknownformat","actioncontroller::unknownhttpmethod","actioncontroller::unpermittedparameters","actioncontroller::urlfor","actiondispatch","actiondispatch::assertions","actiondispatch::assertions::responseassertions","actiondispatch::assertions::routingassertions","actiondispatch::callbacks","actiondispatch::cookies","actiondispatch::cookies::chainedcookiejars","actiondispatch::cookies::cookiejar","actiondispatch::cookies::encryptedcookiejar","actiondispatch::cookies::jsonserializer","actiondispatch::cookies::permanentcookiejar","actiondispatch::cookies::serializedcookiejars","actiondispatch::cookies::signedcookiejar","actiondispatch::cookies::upgradelegacyencryptedcookiejar","actiondispatch::cookies::upgradelegacysignedcookiejar","actiondispatch::cookies::verifyandupgradelegacysignedmessage","actiondispatch::debugexceptions","actiondispatch::exceptionwrapper","actiondispatch::filehandler","actiondispatch::flash","actiondispatch::flash::flashhash","actiondispatch::flash::flashnow","actiondispatch::http","actiondispatch::http::cache","actiondispatch::http::cache::request","actiondispatch::http::cache::response","actiondispatch::http::filterparameters","actiondispatch::http::filterredirect","actiondispatch::http::headers","actiondispatch::http::mimenegotiation","actiondispatch::http::parameterfilter","actiondispatch::http::parameterfilter::compiledfilter","actiondispatch::http::parameters","actiondispatch::http::url","actiondispatch::http::uploadedfile","actiondispatch::illegalstateerror","actiondispatch::integration","actiondispatch::integration::requesthelpers","actiondispatch::integration::runner","actiondispatch::integration::session","actiondispatch::integrationtest","actiondispatch::journey","actiondispatch::journey::format","actiondispatch::journey::format::parameter","actiondispatch::journey::formatter","actiondispatch::journey::gtg","actiondispatch::journey::gtg::builder","actiondispatch::journey::gtg::matchdata","actiondispatch::journey::gtg::simulator","actiondispatch::journey::gtg::transitiontable","actiondispatch::journey::nfa","actiondispatch::journey::nfa::builder","actiondispatch::journey::nfa::dot","actiondispatch::journey::nfa::matchdata","actiondispatch::journey::nfa::simulator","actiondispatch::journey::nfa::transitiontable","actiondispatch::journey::nfa::visitor","actiondispatch::journey::nodes","actiondispatch::journey::nodes::binary","actiondispatch::journey::nodes::cat","actiondispatch::journey::nodes::dummy","actiondispatch::journey::nodes::group","actiondispatch::journey::nodes::literal","actiondispatch::journey::nodes::node","actiondispatch::journey::nodes::or","actiondispatch::journey::nodes::star","actiondispatch::journey::nodes::symbol","actiondispatch::journey::nodes::terminal","actiondispatch::journey::nodes::unary","actiondispatch::journey::parser","actiondispatch::journey::path","actiondispatch::journey::path::pattern","actiondispatch::journey::path::pattern::anchoredregexp","actiondispatch::journey::path::pattern::matchdata","actiondispatch::journey::path::pattern::regexpoffsets","actiondispatch::journey::path::pattern::unanchoredregexp","actiondispatch::journey::route","actiondispatch::journey::router","actiondispatch::journey::router::routingerror","actiondispatch::journey::router::strexp","actiondispatch::journey::router::utils","actiondispatch::journey::router::utils::uriencoder","actiondispatch::journey::routes","actiondispatch::journey::scanner","actiondispatch::journey::visitors","actiondispatch::journey::visitors::dot","actiondispatch::journey::visitors::each","actiondispatch::journey::visitors::formatbuilder","actiondispatch::journey::visitors::string","actiondispatch::journey::visitors::visitor","actiondispatch::middlewarestack","actiondispatch::middlewarestack::middleware","actiondispatch::paramsparser","actiondispatch::paramsparser::parseerror","actiondispatch::publicexceptions","actiondispatch::railsentitystore","actiondispatch::railsmetastore","actiondispatch::railtie","actiondispatch::railtie::activesupport","actiondispatch::reloader","actiondispatch::remoteip","actiondispatch::remoteip::getip","actiondispatch::remoteip::ipspoofattackerror","actiondispatch::request","actiondispatch::request::session","actiondispatch::request::session::options","actiondispatch::request::utils","actiondispatch::requestid","actiondispatch::response","actiondispatch::response::buffer","actiondispatch::response::rackbody","actiondispatch::routing","actiondispatch::routing::consoleformatter","actiondispatch::routing::endpoint","actiondispatch::routing::htmltableformatter","actiondispatch::routing::mapper","actiondispatch::routing::mapper::base","actiondispatch::routing::mapper::concerns","actiondispatch::routing::mapper::constraints","actiondispatch::routing::mapper::httphelpers","actiondispatch::routing::mapper::mapping","actiondispatch::routing::mapper::resources","actiondispatch::routing::mapper::resources::resource","actiondispatch::routing::mapper::resources::singletonresource","actiondispatch::routing::mapper::scope","actiondispatch::routing::mapper::scoping","actiondispatch::routing::optionredirect","actiondispatch::routing::pathredirect","actiondispatch::routing::polymorphicroutes","actiondispatch::routing::polymorphicroutes::helpermethodbuilder","actiondispatch::routing::redirect","actiondispatch::routing::redirection","actiondispatch::routing::routeset","actiondispatch::routing::routeset::dispatcher","actiondispatch::routing::routeset::generator","actiondispatch::routing::routeset::mountedhelpers","actiondispatch::routing::routeset::namedroutecollection","actiondispatch::routing::routeset::namedroutecollection::urlhelper","actiondispatch::routing::routeset::namedroutecollection::urlhelper::optimizedurlhelper","actiondispatch::routing::routewrapper","actiondispatch::routing::routesinspector","actiondispatch::routing::routesproxy","actiondispatch::routing::urlfor","actiondispatch::ssl","actiondispatch::session","actiondispatch::session::abstractstore","actiondispatch::session::cachestore","actiondispatch::session::compatibility","actiondispatch::session::cookiestore","actiondispatch::session::memcachestore","actiondispatch::session::sessionobject","actiondispatch::session::sessionrestoreerror","actiondispatch::session::stalesessioncheck","actiondispatch::showexceptions","actiondispatch::static","actiondispatch::testprocess","actiondispatch::testrequest","actiondispatch::testresponse","actionpack","actionpack::version","actionview","actionview::template","activesupport","mime","mime::mimes","mime::nulltype","mime::type","mime::type::acceptitem","mime::type::acceptlist","rack","rack::cache","rack::cache::entitystore","rack::cache::metastore","rack::mount","actiondispatch::middlewarestack::middleware#==()","mime::type#==()","mime::type#===()","mime::type#=~()","actiondispatch::request#get()","actiondispatch::request#post()","actioncontroller::parameters#[]()","actiondispatch::flash::flashhash#[]()","actiondispatch::http::headers#[]()","actiondispatch::middlewarestack#[]()","mime#[]()","actiondispatch::flash::flashhash#[]=()","actiondispatch::http::headers#[]=()","actioncontroller::paramswrapper#_extract_parameters()","actioncontroller::redirecting#_extract_redirect_to_status()","abstractcontroller::base#_find_action_name()","actiondispatch::routing::urlfor#_generate_paths_by_default()","abstractcontroller::base#_handle_action_missing()","abstractcontroller::callbacks::classmethods#_insert_callbacks()","actiondispatch::integration::session#_mock_session()","abstractcontroller::rendering#_normalize_args()","abstractcontroller::callbacks::classmethods#_normalize_callback_options()","abstractcontroller::rendering#_normalize_options()","abstractcontroller::rendering#_normalize_render()","actioncontroller::rendering#_normalize_text()","abstractcontroller::rendering#_process_format()","actioncontroller::rendering#_process_format()","abstractcontroller::rendering#_process_options()","actiondispatch::journey::parser#_reduce_1()","actiondispatch::journey::parser#_reduce_10()","actiondispatch::journey::parser#_reduce_15()","actiondispatch::journey::parser#_reduce_16()","actiondispatch::journey::parser#_reduce_17()","actiondispatch::journey::parser#_reduce_18()","actiondispatch::journey::parser#_reduce_2()","actiondispatch::journey::parser#_reduce_7()","actiondispatch::journey::parser#_reduce_8()","actiondispatch::journey::parser#_reduce_9()","actiondispatch::journey::parser#_reduce_none()","actioncontroller::rendering#_render_in_priorities()","actioncontroller::renderers#_render_to_body_with_renderer()","actioncontroller::renderers::_render_with_renderer_method_name()","abstractcontroller::urlfor#_routes()","abstractcontroller::urlfor::classmethods#_routes()","actiondispatch::routing::urlfor#_routes_context()","actioncontroller::paramswrapper::classmethods#_set_wrapper_options()","abstractcontroller::base#_valid_action_name?()","actiondispatch::routing::urlfor#_with_routes()","actioncontroller::paramswrapper#_wrap_parameters()","actioncontroller::paramswrapper#_wrapper_enabled?()","actioncontroller::paramswrapper#_wrapper_formats()","actioncontroller::paramswrapper#_wrapper_key()","actiondispatch::response#abort()","abstractcontroller::base#abstract!()","actiondispatch::testrequest#accept=()","actiondispatch::http::mimenegotiation#accepts()","actioncontroller::metal::action()","actiondispatch::routing::routewrapper#action()","actiondispatch::testrequest#action=()","abstractcontroller::base#action_method?()","abstractcontroller::base#action_methods()","abstractcontroller::urlfor::classmethods#action_methods()","actioncontroller::hideactions::classmethods#action_methods()","actioncontroller::renderers::add()","actiondispatch::http::url#add_anchor()","actioncontroller::flash::classmethods#add_flash_types()","actiondispatch::http::url#add_params()","actioncontroller::add_renderer()","actiondispatch::routing::routeset#add_route()","abstractcontroller::helpers::classmethods#add_template_helper()","actiondispatch::http::url#add_trailing_slash()","actiondispatch::callbacks#after()","abstractcontroller::callbacks::classmethods#after_action()","actiondispatch::flash::flashhash#alert()","actiondispatch::flash::flashhash#alert=()","actioncontroller::mimeresponds::collector#all()","actioncontroller::helpers::classmethods#all_application_helpers()","actioncontroller::helpers::classmethods#all_helpers_from_path()","actioncontroller::mimeresponds::collector#any()","actiondispatch::integration::runner#app()","actiondispatch::integrationtest#app()","actiondispatch::integrationtest::app()","actiondispatch::integrationtest::app=()","actiondispatch::routing::routeset#append()","abstractcontroller::callbacks::classmethods#append_after_action()","abstractcontroller::callbacks::classmethods#append_around_action()","abstractcontroller::callbacks::classmethods#append_before_action()","actiondispatch::response#append_charset?()","actiondispatch::exceptionwrapper#application_trace()","abstractcontroller::callbacks::classmethods#around_action()","actioncontroller::parameters#array_of_permitted_scalars?()","actioncontroller::parameters#array_of_permitted_scalars_filter()","actiondispatch::assertions::routingassertions#assert_generates()","actiondispatch::middlewarestack#assert_index()","actiondispatch::assertions::routingassertions#assert_recognizes()","actiondispatch::assertions::responseassertions#assert_redirected_to()","actiondispatch::assertions::responseassertions#assert_response()","actiondispatch::assertions::routingassertions#assert_routing()","actioncontroller::templateassertions#assert_template()","actiondispatch::response#assign_default_content_type_and_charset!()","actiondispatch::testprocess#assigns()","actioncontroller::httpauthentication::basic#auth_param()","actioncontroller::httpauthentication::basic#auth_scheme()","actioncontroller::httpauthentication::basic#authenticate()","actioncontroller::httpauthentication::digest#authenticate()","actioncontroller::httpauthentication::token#authenticate()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_or_request_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_or_request_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_or_request_with_http_token()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_with_http_token()","actioncontroller::httpauthentication::digest#authentication_header()","actioncontroller::httpauthentication::basic#authentication_request()","actioncontroller::httpauthentication::digest#authentication_request()","actioncontroller::httpauthentication::token#authentication_request()","actiondispatch::request#authorization()","abstractcontroller::base#available_action?()","actiondispatch::response#await_commit()","actiondispatch::response#await_sent()","actiondispatch::exceptionwrapper#backtrace()","actiondispatch::exceptionwrapper#backtrace_cleaner()","actiondispatch::callbacks#before()","abstractcontroller::callbacks::classmethods#before_action()","actiondispatch::response#before_committed()","actioncontroller::testing::classmethods#before_filters()","actiondispatch::response#before_sending()","actioncontroller::livetestresponse#body()","actiondispatch::request#body()","actiondispatch::response#body()","actiondispatch::response::rackbody#body()","actiondispatch::response#body=()","actiondispatch::response#body_parts()","actiondispatch::middlewarestack#build()","actiondispatch::middlewarestack::middleware#build()","actiondispatch::response#build_buffer()","actiondispatch::routing::routeset#build_conditions()","actiondispatch::integration::session#build_full_uri()","actiondispatch::http::url#build_host_url()","actiondispatch::routing::routeset#build_path()","actioncontroller::testcase::behavior#build_request()","actioncontroller::testcase::behavior#build_request_uri()","actioncontroller::testcase::behavior#build_response()","actioncontroller::caching#cache()","actioncontroller::caching::configmethods#cache_configured?()","actiondispatch::http::cache::response#cache_control_headers()","actiondispatch::http::cache::response#cache_control_segments()","actiondispatch::session::cachestore#cache_key()","actioncontroller::caching::configmethods#cache_store()","actioncontroller::caching::configmethods#cache_store=()","actiondispatch::remoteip::getip#calculate_ip()","actioncontroller::metal::call()","actioncontroller::middleware::actionmiddleware#call()","actiondispatch::callbacks#call()","actiondispatch::cookies#call()","actiondispatch::debugexceptions#call()","actiondispatch::filehandler#call()","actiondispatch::flash#call()","actiondispatch::paramsparser#call()","actiondispatch::publicexceptions#call()","actiondispatch::reloader#call()","actiondispatch::remoteip#call()","actiondispatch::requestid#call()","actiondispatch::routing::routeset#call()","actiondispatch::ssl#call()","actiondispatch::showexceptions#call()","actiondispatch::static#call()","actiondispatch::request#check_method()","actiondispatch::request#check_path_parameters!()","actioncontroller::testcase::behavior#check_required_ivars()","actiondispatch::exceptionwrapper#clean_backtrace()","actiondispatch::reloader::cleanup!()","actiondispatch::flash::flashhash#clear()","actiondispatch::routing::routeset#clear!()","abstractcontroller::base#clear_action_methods!()","abstractcontroller::helpers::classmethods#clear_helpers()","actioncontroller::live::sse#close()","actiondispatch::http::uploadedfile#close()","actiondispatch::response#close()","actiondispatch::response::rackbody#close()","actiondispatch::response#code()","actiondispatch::routing::mapper::resources#collection()","actioncontroller::conditionalget#combine_etags()","actiondispatch::response#commit!()","actiondispatch::response#committed?()","actioncontroller::requestforgeryprotection#compare_with_real_token()","actiondispatch::http::parameterfilter#compiled_filter()","actiondispatch::routing::mapper::concerns#concern()","actiondispatch::routing::mapper::concerns#concerns()","actioncontroller::parameters::const_missing()","actiondispatch::routing::mapper::scoping#constraints()","actiondispatch::routing::routewrapper#constraints()","actiondispatch::request#content_length()","actiondispatch::http::mimenegotiation#content_mime_type()","actioncontroller::metal#content_type()","actiondispatch::filehandler#content_type()","actiondispatch::http::mimenegotiation#content_type()","actioncontroller::metal#content_type=()","actiondispatch::response#content_type=()","actiondispatch::routing::mapper::scoping#controller()","actiondispatch::routing::routewrapper#controller()","actioncontroller::testcase::behavior::classmethods#controller_class()","actioncontroller::testcase::behavior::classmethods#controller_class=()","actioncontroller::metal::controller_name()","actioncontroller::metal#controller_name()","abstractcontroller::base#controller_path()","actioncontroller::parameters#convert_hashes_to_parameters()","actioncontroller::modelnaming#convert_to_model()","actioncontroller::parameters#convert_value_to_parameters()","actioncontroller::parameters#converted_arrays()","actiondispatch::request#cookie_jar()","actiondispatch::session::cookiestore#cookie_jar()","actioncontroller::cookies#cookies()","actiondispatch::integration::session#cookies()","actiondispatch::response#cookies()","actiondispatch::testprocess#cookies()","actiondispatch::testrequest#cookies()","actioncontroller::mimeresponds::collector#custom()","actiondispatch::http::cache::response#date()","actiondispatch::http::cache::response#date=()","actiondispatch::http::cache::response#date?()","actioncontroller::httpauthentication::basic#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials_header()","actioncontroller::logsubscriber#deep_munge()","actiondispatch::request#deep_munge()","actiondispatch::testrequest#default_env()","abstractcontroller::helpers::classmethods#default_helper_module!()","actiondispatch::ssl::default_hsts_options()","actioncontroller::implicitrender#default_render()","actiondispatch::routing::routeset::default_resources_path_names()","actiondispatch::integration::runner#default_url_options()","actiondispatch::routing::mapper::base#default_url_options()","actiondispatch::integration::runner#default_url_options=()","actiondispatch::routing::mapper::base#default_url_options=()","actiondispatch::routing::mapper::scoping#defaults()","actiondispatch::routing::mapper::base#define_generate_prefix()","actiondispatch::routing::routeset#define_mounted_helper()","actioncontroller::parameters#delete()","actioncontroller::testcase::behavior#delete()","actiondispatch::flash::flashhash#delete()","actiondispatch::integration::requesthelpers#delete()","actiondispatch::middlewarestack#delete()","actiondispatch::routing::mapper::httphelpers#delete()","actiondispatch::request#delete?()","actiondispatch::response#delete_cookie()","actiondispatch::integration::requesthelpers#delete_via_redirect()","actiondispatch::cookies::serializedcookiejars#deserialize()","actiondispatch::session::cachestore#destroy_session()","actiondispatch::session::cookiestore#destroy_session()","actioncontroller::testcase::behavior::classmethods#determine_default_controller_class()","actioncontroller::etagwithtemplatedigest#determine_template_etag()","actiondispatch::cookies::serializedcookiejars#digest()","actiondispatch::flash::flashhash#discard()","actioncontroller::rackdelegation#dispatch()","actiondispatch::routing::routeset#dispatcher()","actioncontroller::testcase::behavior#document_root_element()","actiondispatch::integrationtest#document_root_element()","actiondispatch::http::url#domain()","actiondispatch::routing::routeset#draw()","actiondispatch::routing::consoleformatter#draw_header()","actiondispatch::routing::consoleformatter#draw_section()","actiondispatch::cookies::jsonserializer::dump()","actioncontroller::parameters#dup()","actioncontroller::parameters#each()","actiondispatch::flash::flashhash#each()","actiondispatch::http::headers#each()","actiondispatch::middlewarestack#each()","actiondispatch::response::rackbody#each()","actioncontroller::parameters#each_element()","actioncontroller::parameters#each_pair()","actioncontroller::eager_load!()","actiondispatch::flash::flashhash#empty?()","actiondispatch::routing::routeset#empty?()","actioncontroller::httpauthentication::basic#encode_credentials()","actioncontroller::httpauthentication::digest#encode_credentials()","actioncontroller::httpauthentication::token#encode_credentials()","actiondispatch::cookies::chainedcookiejars#encrypted()","actiondispatch::routing::routewrapper#endpoint()","actiondispatch::routing::routewrapper#engine?()","actioncontroller::metal#env()","actiondispatch::http::filterparameters#env_filter()","actiondispatch::http::headers#env_name()","actiondispatch::http::uploadedfile#eof?()","actiondispatch::journey::format::parameter#escape()","actioncontroller::conditionalget::classmethods#etag()","actiondispatch::http::cache::response#etag=()","actiondispatch::http::cache::request#etag_matches?()","actiondispatch::routing::routeset#eval_block()","actiondispatch::journey::format#evaluate()","actiondispatch::railsentitystore#exist?()","actiondispatch::exceptionwrapper#expand_backtrace()","actioncontroller::httpauthentication::digest#expected_response()","actioncontroller::caching::fragments#expire_fragment()","actioncontroller::conditionalget#expires_in()","actioncontroller::conditionalget#expires_now()","actiondispatch::filehandler#ext()","actiondispatch::requestid#external_request_id()","actiondispatch::routing::routeset#extra_keys()","actioncontroller::parameters#extract!()","actiondispatch::http::url#extract_domain()","actiondispatch::http::url#extract_domain_from()","actiondispatch::session::cookiestore#extract_session_id()","actiondispatch::session::stalesessioncheck#extract_session_id()","actiondispatch::http::url#extract_subdomain()","actiondispatch::http::url#extract_subdomains()","actiondispatch::http::url#extract_subdomains_from()","actiondispatch::assertions::routingassertions#fail_on()","actioncontroller::parameters#fetch()","actiondispatch::http::headers#fetch()","mime#fetch()","actioncontroller::parameters#fields_for_style?()","actiondispatch::http::parameterfilter#filter()","actiondispatch::remoteip::getip#filter_proxies()","actiondispatch::http::filterparameters#filtered_env()","actiondispatch::http::filterredirect#filtered_location()","actiondispatch::http::filterparameters#filtered_parameters()","actiondispatch::http::filterparameters#filtered_path()","actiondispatch::http::filterparameters#filtered_query_string()","actiondispatch::routing::routeset#finalize!()","actiondispatch::routing::routeset#find_script_name()","actiondispatch::testprocess#fixture_file_upload()","actiondispatch::ssl#flag_cookies_as_secure!()","actiondispatch::request#flash()","actiondispatch::testprocess#flash()","actiondispatch::integration::requesthelpers#follow_redirect!()","actioncontroller::forcessl::classmethods#force_ssl()","actioncontroller::forcessl#force_ssl_redirect()","actioncontroller::requestforgeryprotection#form_authenticity_param()","actioncontroller::requestforgeryprotection#form_authenticity_token()","actiondispatch::request#form_data?()","actiondispatch::http::mimenegotiation#format()","actiondispatch::http::mimenegotiation#format=()","actiondispatch::http::mimenegotiation#formats()","actiondispatch::http::mimenegotiation#formats=()","actioncontroller::caching::fragments#fragment_cache_key()","actioncontroller::caching::fragments#fragment_exist?()","actiondispatch::exceptionwrapper#framework_trace()","actiondispatch::http::cache::request#fresh?()","actioncontroller::conditionalget#fresh_when()","actiondispatch::testresponse::from_response()","actiondispatch::exceptionwrapper#full_trace()","actiondispatch::http::url#full_url_for()","actiondispatch::request#fullpath()","actionpack::gem_version()","actiondispatch::routing::routeset#generate()","actiondispatch::routing::routeset#generate_extras()","abstractcontroller::collector::generate_method_for_mime()","actiondispatch::session::compatibility#generate_sid()","actioncontroller::testcase::behavior#get()","actiondispatch::integration::requesthelpers#get()","actiondispatch::routing::mapper::httphelpers#get()","actiondispatch::request#get?()","actiondispatch::session::cookiestore#get_cookie()","actiondispatch::session::cachestore#get_session()","actiondispatch::integration::requesthelpers#get_via_redirect()","actiondispatch::filehandler#gzip_encoding_accepted?()","actiondispatch::filehandler#gzip_file_path()","actioncontroller::httpauthentication::digest#ha1()","actioncontroller::logsubscriber#halted_callback()","actioncontroller::instrumentation#halted_callback_hook()","actiondispatch::http::cache::response#handle_conditional_get!()","actioncontroller::requestforgeryprotection#handle_unverified_request()","actioncontroller::requestforgeryprotection::protectionmethods::exception#handle_unverified_request()","actioncontroller::requestforgeryprotection::protectionmethods::nullsession#handle_unverified_request()","actioncontroller::requestforgeryprotection::protectionmethods::resetsession#handle_unverified_request()","actioncontroller::httpauthentication::basic#has_basic_credentials?()","actiondispatch::routing::mapper::base#has_named_route?()","actioncontroller::parameters#hash_filter()","actioncontroller::head#head()","actioncontroller::testcase::behavior#head()","actiondispatch::integration::requesthelpers#head()","actiondispatch::request#head?()","actiondispatch::routing::consoleformatter#header()","actiondispatch::routing::htmltableformatter#header()","actiondispatch::request#headers()","actioncontroller::testing#headers=()","abstractcontroller::helpers::classmethods#helper()","actioncontroller::helpers::classmethods#helper_attr()","abstractcontroller::helpers::classmethods#helper_method()","actioncontroller::helpers::classmethods#helpers()","abstractcontroller::base#hidden_actions()","actioncontroller::hideactions::classmethods#hide_action()","actiondispatch::http::url#host()","actiondispatch::integration::session#host()","actiondispatch::testrequest#host=()","actiondispatch::http::url#host_with_port()","actiondispatch::ssl#hsts_headers()","mime::type#html?()","actiondispatch::assertions#html_document()","actioncontroller::testcase::behavior#html_format?()","actioncontroller::httpauthentication::basic::controllermethods::classmethods#http_basic_authenticate_with()","actiondispatch::integration::session#https!()","actiondispatch::integration::session#https?()","actiondispatch::http::cache::request#if_modified_since()","actiondispatch::testrequest#if_modified_since=()","actiondispatch::http::cache::request#if_none_match()","actiondispatch::testrequest#if_none_match=()","actiondispatch::http::cache::request#if_none_match_etags()","actiondispatch::http::headers#include?()","actioncontroller::middleware#index()","abstractcontroller::helpers::classmethods#inherited()","actioncontroller::paramswrapper::classmethods#inherited()","actioncontroller::railties::helpers#inherited()","actiondispatch::flash::flashhash#initialize_copy()","actiondispatch::middlewarestack#initialize_copy()","actiondispatch::session::compatibility#initialize_sid()","actiondispatch::middlewarestack#insert()","actiondispatch::middlewarestack#insert_after()","actiondispatch::middlewarestack#insert_before()","actiondispatch::middlewarestack::middleware#inspect()","actiondispatch::routing::pathredirect#inspect()","actiondispatch::integration::runner#integration_session()","actiondispatch::routing::routewrapper#internal?()","abstractcontroller::base#internal_methods()","actiondispatch::requestid#internal_request_id()","actiondispatch::routing::pathredirect#interpolation_required?()","actiondispatch::request#ip()","actiondispatch::remoteip::getip#ips_from()","actiondispatch::routing::routewrapper#json_regexp()","actiondispatch::flash::flashhash#keep()","actiondispatch::flash::flashhash#key?()","actiondispatch::http::headers#key?()","actiondispatch::request#key?()","actiondispatch::flash::flashhash#keys()","actiondispatch::middlewarestack::middleware#klass()","abstractcontroller::translation#l()","actiondispatch::middlewarestack#last()","actiondispatch::http::cache::response#last_modified()","actiondispatch::http::cache::response#last_modified=()","actiondispatch::http::cache::response#last_modified?()","actiondispatch::cookies::jsonserializer::load()","actiondispatch::session::cookiestore#load_session()","actiondispatch::session::stalesessioncheck#load_session()","actiondispatch::request#local?()","abstractcontroller::translation#localize()","actioncontroller::metal#location()","actiondispatch::response#location()","actioncontroller::metal#location=()","actiondispatch::response#location=()","actiondispatch::http::filterredirect#location_filter()","actiondispatch::http::filterredirect#location_filter_match?()","actioncontroller::live#log_error()","actiondispatch::debugexceptions#log_error()","actioncontroller::logsubscriber#logger()","actiondispatch::debugexceptions#logger()","actiondispatch::paramsparser#logger()","mime::type#lookup()","actioncontroller::etagwithtemplatedigest#lookup_and_digest_template()","mime::type#lookup_by_extension()","actiondispatch::routing::mapper::httphelpers#map_method()","actioncontroller::requestforgeryprotection#mark_for_same_origin_verification!()","actioncontroller::requestforgeryprotection#marked_for_same_origin_verification?()","actioncontroller::requestforgeryprotection#masked_authenticity_token()","actiondispatch::routing::mapper::base#match()","actiondispatch::routing::mapper::resources#match()","actiondispatch::filehandler#match?()","actiondispatch::request#media_type()","actiondispatch::routing::mapper::resources#member()","actiondispatch::http::headers#merge()","actiondispatch::http::headers#merge!()","actiondispatch::response#merge_default_headers()","actiondispatch::response#message()","actiondispatch::request#method()","abstractcontroller::base#method_added()","abstractcontroller::base#method_for_action()","actioncontroller::hideactions#method_for_action()","actioncontroller::implicitrender#method_for_action()","abstractcontroller::collector#method_missing()","actiondispatch::assertions::routingassertions#method_missing()","actiondispatch::integration::runner#method_missing()","mime::type#method_missing()","actiondispatch::request#method_symbol()","actioncontroller::metal::middleware()","actioncontroller::modelnaming#model_name_from_record_or_class()","abstractcontroller::helpers::classmethods#modules_for_helpers()","actioncontroller::helpers::classmethods#modules_for_helpers()","actiondispatch::routing::mapper::base#mount()","actiondispatch::routing::routeset#mounted_helpers()","actiondispatch::response#munge_body_object()","actiondispatch::routing::routewrapper#name()","actiondispatch::http::url#named_host?()","actiondispatch::routing::mapper::resources#namespace()","actiondispatch::routing::mapper::scoping#namespace()","actiondispatch::cookies::serializedcookiejars#needs_migration?()","actioncontroller::mimeresponds::collector#negotiate_format()","actiondispatch::http::mimenegotiation#negotiate_mime()","actiondispatch::routing::mapper::resources#nested()","abstractcontroller::doublerendererror::new()","abstractcontroller::helpers::missinghelpererror::new()","actioncontroller::live::sse::new()","actioncontroller::metal::new()","actioncontroller::middleware::new()","actioncontroller::middleware#new()","actioncontroller::middleware::actionmiddleware::new()","actioncontroller::mimeresponds::collector::new()","actioncontroller::missingrenderer::new()","actioncontroller::parameters::new()","actioncontroller::requestforgeryprotection::protectionmethods::exception::new()","actioncontroller::requestforgeryprotection::protectionmethods::nullsession::new()","actioncontroller::requestforgeryprotection::protectionmethods::resetsession::new()","actiondispatch::callbacks::new()","actiondispatch::cookies::new()","actiondispatch::cookies::verifyandupgradelegacysignedmessage::new()","actiondispatch::debugexceptions::new()","actiondispatch::exceptionwrapper::new()","actiondispatch::filehandler::new()","actiondispatch::flash::new()","actiondispatch::http::filterparameters::new()","actiondispatch::http::parameterfilter::new()","actiondispatch::http::url::new()","actiondispatch::integration::session::new()","actiondispatch::journey::format::new()","actiondispatch::middlewarestack::new()","actiondispatch::middlewarestack::middleware::new()","actiondispatch::paramsparser::new()","actiondispatch::paramsparser::parseerror::new()","actiondispatch::publicexceptions::new()","actiondispatch::railsentitystore::new()","actiondispatch::railsmetastore::new()","actiondispatch::reloader::new()","actiondispatch::remoteip::new()","actiondispatch::remoteip::getip::new()","actiondispatch::request::new()","actiondispatch::requestid::new()","actiondispatch::response::new()","actiondispatch::response::rackbody::new()","actiondispatch::routing::consoleformatter::new()","actiondispatch::routing::htmltableformatter::new()","actiondispatch::routing::mapper::resources#new()","actiondispatch::routing::routeset::new()","actiondispatch::routing::urlfor::new()","actiondispatch::ssl::new()","actiondispatch::session::cachestore::new()","actiondispatch::session::compatibility::new()","actiondispatch::session::cookiestore::new()","actiondispatch::session::memcachestore::new()","actiondispatch::showexceptions::new()","actiondispatch::static::new()","actiondispatch::testrequest::new()","actiondispatch::testrequest::new()","mime::type::new()","actioncontroller::parameters#new_instance_with_inherited_permitted_status()","actiondispatch::routing::consoleformatter#no_routes()","actiondispatch::routing::htmltableformatter#no_routes()","actioncontroller::requestforgeryprotection#non_xhr_javascript_response?()","actioncontroller::httpauthentication::digest#nonce()","actiondispatch::middlewarestack::middleware#normalize()","actiondispatch::assertions::responseassertions#normalize_argument_to_redirection()","actiondispatch::http::parameters#normalize_encode_params()","actiondispatch::http::url#normalize_host()","actiondispatch::routing::mapper::normalize_name()","actiondispatch::routing::mapper::normalize_path()","actiondispatch::http::url#normalize_port()","actiondispatch::http::url#normalize_protocol()","actiondispatch::http::cache::request#not_modified?()","actiondispatch::flash::flashhash#notice()","actiondispatch::flash::flashhash#notice=()","actiondispatch::flash::flashhash#now()","actiondispatch::flash::flashhash#now_is_loaded?()","actioncontroller::httpauthentication::digest#opaque()","actiondispatch::http::uploadedfile#open()","actiondispatch::railsentitystore#open()","actiondispatch::integration::runner#open_session()","actiondispatch::routing::mapper::base#optimize_routes_generation?()","actiondispatch::routing::routeset#optimize_routes_generation?()","actiondispatch::routing::urlfor#optimize_routes_generation?()","actiondispatch::http::url#optional_port()","actiondispatch::exceptionwrapper#original_exception()","actiondispatch::request#original_fullpath()","actiondispatch::request#original_url()","actiondispatch::http::filterparameters#parameter_filter()","actiondispatch::http::filterparameters#parameter_filter_for()","actiondispatch::assertions::responseassertions#parameterize()","actiondispatch::http::parameters#parameters()","actioncontroller::testcase::behavior#paramify_values()","actioncontroller::metal#params()","actioncontroller::strongparameters#params()","actiondispatch::http::parameters#params()","actioncontroller::metal#params=()","actioncontroller::strongparameters#params=()","actioncontroller::httpauthentication::token#params_array_from()","mime::type#parse()","mime::type#parse_data_with_trailing_star()","actiondispatch::paramsparser#parse_formatted_parameters()","actiondispatch::request#parse_query()","mime::type#parse_trailing_star()","actiondispatch::showexceptions#pass_response()","actioncontroller::testcase::behavior#patch()","actiondispatch::integration::requesthelpers#patch()","actiondispatch::routing::mapper::httphelpers#patch()","actiondispatch::request#patch?()","actiondispatch::integration::requesthelpers#patch_via_redirect()","actiondispatch::http::uploadedfile#path()","actiondispatch::routing::pathredirect#path()","actiondispatch::routing::routewrapper#path()","actiondispatch::testrequest#path=()","actiondispatch::http::url#path_for()","actiondispatch::http::parameters#path_parameters()","actioncontroller::live::sse#perform_write()","actioncontroller::metal#performed?()","actiondispatch::cookies::chainedcookiejars#permanent()","actioncontroller::parameters#permit()","actioncontroller::parameters#permit!()","actioncontroller::parameters#permitted=()","actioncontroller::parameters#permitted?()","actioncontroller::parameters#permitted_scalar?()","actioncontroller::parameters#permitted_scalar_filter()","actiondispatch::session::cookiestore#persistent_session_id!()","actioncontroller::etagwithtemplatedigest#pick_template_for_etag()","actiondispatch::routing::polymorphicroutes#polymorphic_path()","actiondispatch::routing::polymorphicroutes#polymorphic_path_for_action()","actiondispatch::routing::polymorphicroutes#polymorphic_url()","actiondispatch::routing::polymorphicroutes#polymorphic_url_for_action()","actiondispatch::http::url#port()","actiondispatch::testrequest#port=()","actiondispatch::http::url#port_string()","actioncontroller::testcase::behavior#post()","actiondispatch::integration::requesthelpers#post()","actiondispatch::routing::mapper::httphelpers#post()","actiondispatch::request#post?()","actiondispatch::integration::requesthelpers#post_via_redirect()","actiondispatch::reloader::prepare!()","actiondispatch::response#prepare!()","actiondispatch::http::cache::response#prepare_cache_control!()","actiondispatch::routing::routeset#prepend()","abstractcontroller::callbacks::classmethods#prepend_after_action()","abstractcontroller::callbacks::classmethods#prepend_around_action()","abstractcontroller::callbacks::classmethods#prepend_before_action()","abstractcontroller::base#process()","actioncontroller::live#process()","actioncontroller::middleware#process()","actioncontroller::templateassertions#process()","actioncontroller::testcase::behavior#process()","actiondispatch::integration::session#process()","abstractcontroller::base#process_action()","abstractcontroller::callbacks#process_action()","actioncontroller::instrumentation#process_action()","actioncontroller::logsubscriber#process_action()","actioncontroller::paramswrapper#process_action()","actioncontroller::rescue#process_action()","actioncontroller::requestforgeryprotection#protect_against_forgery?()","actioncontroller::requestforgeryprotection::classmethods#protect_from_forgery()","actioncontroller::base::protected_instance_variables()","actioncontroller::requestforgeryprotection::classmethods#protection_method_class()","actiondispatch::http::url#protocol()","actioncontroller::testcase::behavior#put()","actiondispatch::integration::requesthelpers#put()","actiondispatch::routing::mapper::httphelpers#put()","actiondispatch::request#put?()","actiondispatch::integration::requesthelpers#put_via_redirect()","actiondispatch::request#query_parameters()","actiondispatch::routing::routewrapper#rack_app()","actiondispatch::testrequest#rack_cookies()","actiondispatch::response#rack_response()","actiondispatch::routing::mapper::base#rails_app?()","actiondispatch::http::url#raw_host_with_port()","actioncontroller::httpauthentication::token#raw_params()","actiondispatch::request#raw_post()","actiondispatch::http::uploadedfile#read()","actiondispatch::railsentitystore#read()","actiondispatch::railsmetastore#read()","actioncontroller::caching::fragments#read_fragment()","actioncontroller::requestforgeryprotection#real_csrf_token()","actiondispatch::routing::routeset#recognize_path()","actiondispatch::assertions::routingassertions#recognized_request_for()","actioncontroller::livetestresponse#recycle!()","actioncontroller::testresponse#recycle!()","actiondispatch::routing::redirection#redirect()","actioncontroller::flash#redirect_to()","actioncontroller::instrumentation#redirect_to()","actioncontroller::logsubscriber#redirect_to()","actioncontroller::redirecting#redirect_to()","actiondispatch::ssl#redirect_to_https()","actiondispatch::testprocess#redirect_to_url()","actiondispatch::response#redirect_url()","mime::type#ref()","actiondispatch::routing::routewrapper#regexp()","mime::type#register()","mime::type#register_alias()","mime::type#register_callback()","actiondispatch::exceptionwrapper#registered_original_exception?()","actiondispatch::testrequest#remote_addr=()","actiondispatch::request#remote_ip()","actioncontroller::renderers::remove()","actioncontroller::remove_renderer()","abstractcontroller::rendering#render()","actioncontroller::instrumentation#render()","actiondispatch::debugexceptions#render()","actiondispatch::publicexceptions#render()","actiondispatch::debugexceptions#render_exception()","actiondispatch::showexceptions#render_exception()","actiondispatch::publicexceptions#render_format()","actiondispatch::publicexceptions#render_html()","abstractcontroller::rendering#render_to_body()","actioncontroller::renderers#render_to_body()","actioncontroller::rendering#render_to_body()","abstractcontroller::rendering#render_to_string()","actioncontroller::rendering#render_to_string()","abstractcontroller::rendering#rendered_format()","actiondispatch::routing::routewrapper#reqs()","actioncontroller::base#request()","actioncontroller::httpauthentication::basic::controllermethods#request_http_basic_authentication()","actioncontroller::httpauthentication::digest::controllermethods#request_http_digest_authentication()","actioncontroller::httpauthentication::token::controllermethods#request_http_token_authentication()","actiondispatch::request#request_method()","actiondispatch::testrequest#request_method=()","actiondispatch::request#request_method_symbol()","actiondispatch::request#request_parameters()","actiondispatch::testrequest#request_uri=()","actiondispatch::integration::requesthelpers#request_via_redirect()","actioncontroller::parameters#require()","actioncontroller::parameters#required()","actiondispatch::journey::format::required_path()","actiondispatch::journey::format::required_segment()","actiondispatch::exceptionwrapper#rescue_template()","actioncontroller::rescue#rescue_with_handler()","actiondispatch::integration::runner#reset!()","actiondispatch::integration::session#reset!()","actioncontroller::rackdelegation#reset_session()","actiondispatch::request#reset_session()","actioncontroller::templateassertions#reset_template_assertion()","actiondispatch::railsentitystore::resolve()","actiondispatch::railsmetastore::resolve()","actiondispatch::routing::mapper::resources#resource()","actiondispatch::routing::mapper::resources#resources()","actiondispatch::routing::mapper::resources#resources_path_names()","actioncontroller::mimeresponds#respond_to()","actioncontroller::mimeresponds::classmethods#respond_to()","actiondispatch::integration::runner#respond_to?()","actiondispatch::response::rackbody#respond_to?()","actioncontroller::mimeresponds#respond_with()","actioncontroller::base#response()","actioncontroller::mimeresponds::collector#response()","actioncontroller::live#response_body=()","actioncontroller::metal#response_body=()","actioncontroller::rackdelegation#response_body=()","actiondispatch::response#response_code()","actiondispatch::routing::consoleformatter#result()","actiondispatch::routing::htmltableformatter#result()","actiondispatch::http::uploadedfile#rewind()","actioncontroller::httpauthentication::token#rewrite_param_values()","actiondispatch::routing::mapper::base#root()","actiondispatch::routing::mapper::resources#root()","actiondispatch::debugexceptions#routes_inspector()","actiondispatch::routing::mapper::scoping#scope()","actioncontroller::httpauthentication::digest#secret_token()","actiondispatch::routing::consoleformatter#section()","actiondispatch::routing::htmltableformatter#section()","actiondispatch::routing::consoleformatter#section_title()","actiondispatch::routing::htmltableformatter#section_title()","actioncontroller::parameters#select!()","actioncontroller::implicitrender#send_action()","actioncontroller::datastreaming#send_data()","actioncontroller::instrumentation#send_data()","actioncontroller::logsubscriber#send_data()","actioncontroller::datastreaming#send_file()","actioncontroller::instrumentation#send_file()","actioncontroller::logsubscriber#send_file()","actioncontroller::datastreaming#send_file_headers!()","actiondispatch::response#sending!()","actiondispatch::response#sending?()","actiondispatch::response#sent!()","actiondispatch::response#sent?()","actiondispatch::cookies::serializedcookiejars#serialize()","actiondispatch::cookies::serializedcookiejars#serializer()","actiondispatch::http::url#server_port()","actiondispatch::request#server_software()","actiondispatch::testprocess#session()","actiondispatch::request#session_options=()","actiondispatch::http::cache::response#set_conditional_cache_control!()","actiondispatch::response#set_cookie()","actiondispatch::session::cookiestore#set_cookie()","actiondispatch::routing::mapper::resources#set_member_mappings_for_resource()","actioncontroller::live#set_response!()","actioncontroller::rackdelegation#set_response!()","actiondispatch::session::cachestore#set_session()","actiondispatch::session::cookiestore#set_session()","actioncontroller::testcase::behavior#setup_controller_request_and_response()","actioncontroller::templateassertions#setup_subscriptions()","actiondispatch::routing::mapper::resources#shallow()","actiondispatch::routing::mapper::resources#shallow?()","actioncontroller::rescue#show_detailed_exceptions?()","actiondispatch::cookies::chainedcookiejars#signed()","actiondispatch::cookies::chainedcookiejars#signed_or_encrypted()","actiondispatch::http::uploadedfile#size()","actiondispatch::middlewarestack#size()","abstractcontroller::callbacks::classmethods#skip_action_callback()","abstractcontroller::callbacks::classmethods#skip_after_action()","abstractcontroller::callbacks::classmethods#skip_around_action()","abstractcontroller::callbacks::classmethods#skip_before_action()","abstractcontroller::callbacks::classmethods#skip_filter()","actioncontroller::parameters#slice()","actiondispatch::exceptionwrapper#source_extracts()","actiondispatch::exceptionwrapper#source_fragment()","actioncontroller::conditionalget#stale?()","actiondispatch::session::stalesessioncheck#stale_session_check!()","actiondispatch::http::url#standard_port()","actiondispatch::http::url#standard_port?()","actioncontroller::logsubscriber#start_processing()","actioncontroller::metal#status()","actioncontroller::metal#status=()","actiondispatch::response#status=()","actiondispatch::exceptionwrapper#status_code()","actiondispatch::exceptionwrapper::status_code_for_exception()","actiondispatch::response#status_message()","actiondispatch::debugexceptions#stderr_logger()","actiondispatch::flash::flashhash#stringify_array()","actiondispatch::http::url#subdomain()","actiondispatch::http::url#subdomains()","abstractcontroller::base::supports_path?()","actiondispatch::middlewarestack#swap()","actiondispatch::http::parameters#symbolized_path_parameters()","mime::mimes#symbols()","abstractcontroller::translation#t()","actioncontroller::templateassertions#teardown_subscriptions()","actioncontroller::testcase::behavior::classmethods#tests()","actiondispatch::response#to_a()","mime::type#to_a()","actiondispatch::response#to_ary()","actiondispatch::response::rackbody#to_ary()","mime::type#to_ary()","actiondispatch::reloader::to_cleanup()","actioncontroller::parameters#to_h()","actiondispatch::flash::flashhash#to_hash()","actiondispatch::response::rackbody#to_path()","actiondispatch::reloader::to_prepare()","actiondispatch::remoteip::getip#to_s()","mime::type#to_s()","mime::type#to_str()","mime::type#to_sym()","actioncontroller::httpauthentication::token#token_and_options()","actioncontroller::httpauthentication::token#token_params_from()","actiondispatch::exceptionwrapper#traces()","actioncontroller::parameters#transform_values()","abstractcontroller::translation#translate()","actiondispatch::session::cookiestore#unpacked_cookie_data()","actioncontroller::parameters#unpermitted_keys()","actioncontroller::logsubscriber#unpermitted_parameters()","actioncontroller::parameters#unpermitted_parameters!()","mime::type#unregister()","actiondispatch::middlewarestack#unshift()","actiondispatch::http::url#url()","actioncontroller::metal#url_for()","actiondispatch::http::url#url_for()","actiondispatch::routing::routeset#url_for()","actiondispatch::routing::urlfor#url_for()","actiondispatch::routing::routeset#url_helpers()","actioncontroller::urlfor#url_options()","actiondispatch::integration::session#url_options()","actiondispatch::integrationtest#url_options()","actiondispatch::routing::routeset#url_options()","actiondispatch::routing::urlfor#url_options()","actioncontroller::metal::use()","actiondispatch::middlewarestack#use()","actiondispatch::http::mimenegotiation#use_accept_header()","actioncontroller::renderers::classmethods#use_renderer()","actioncontroller::renderers::classmethods#use_renderers()","actiondispatch::testrequest#user_agent=()","actioncontroller::httpauthentication::basic#user_name_and_password()","actiondispatch::routing::mapper::resources#using_match_shorthand?()","actiondispatch::request#uuid()","actiondispatch::http::mimenegotiation#valid_accept_header()","actioncontroller::requestforgeryprotection#valid_authenticity_token?()","actioncontroller::httpauthentication::digest#validate_digest_response()","actioncontroller::httpauthentication::digest#validate_nonce()","actiondispatch::http::mimenegotiation#variant=()","actiondispatch::routing::routewrapper#verb()","actioncontroller::requestforgeryprotection#verified_request?()","actiondispatch::cookies::verifyandupgradelegacysignedmessage#verify_and_upgrade_legacy_signed_message()","actioncontroller::requestforgeryprotection#verify_authenticity_token()","actioncontroller::requestforgeryprotection#verify_same_origin_request()","actionpack::version()","abstractcontroller::rendering#view_assigns()","actioncontroller::caching#view_cache_dependencies()","actioncontroller::caching::classmethods#view_cache_dependency()","actioncontroller::hideactions::classmethods#visible_action?()","actiondispatch::routing::consoleformatter#widths()","abstractcontroller::railties::routeshelpers::with()","actiondispatch::routing::mapper::base#with_default_scope()","actiondispatch::routing::mapper::resources#with_exclusive_scope()","actiondispatch::assertions::routingassertions#with_routing()","actiondispatch::routing::mapper::resources#with_scope_level()","actioncontroller::base::without_modules()","actioncontroller::paramswrapper::classmethods#wrap_parameters()","actioncontroller::live::sse#write()","actiondispatch::railsentitystore#write()","actiondispatch::railsmetastore#write()","actioncontroller::caching::fragments#write_fragment()","actioncontroller::testcase::behavior#xhr()","actiondispatch::integration::requesthelpers#xhr()","actiondispatch::request#xhr?()","actioncontroller::testcase::behavior#xml_http_request()","actiondispatch::integration::requesthelpers#xml_http_request()","actiondispatch::request#xml_http_request?()","actioncontroller::requestforgeryprotection#xor_byte_strings()","",""],"info":[["AbstractController","","AbstractController.html","",""],["AbstractController::ActionNotFound","","AbstractController/ActionNotFound.html","","<p>Raised when a non-existing controller action is triggered.\n"],["AbstractController::AssetPaths","","AbstractController/AssetPaths.html","",""],["AbstractController::Base","","AbstractController/Base.html","","<p><code>AbstractController::Base</code> is a low-level API. Nobody should be\nusing it directly, and subclasses (like …\n"],["AbstractController::Callbacks","","AbstractController/Callbacks.html","",""],["AbstractController::Callbacks::ClassMethods","","AbstractController/Callbacks/ClassMethods.html","",""],["AbstractController::Collector","","AbstractController/Collector.html","",""],["AbstractController::Collector::Mime","","AbstractController/Collector/Mime.html","",""],["AbstractController::DoubleRenderError","","AbstractController/DoubleRenderError.html","",""],["AbstractController::Error","","AbstractController/Error.html","",""],["AbstractController::Helpers","","AbstractController/Helpers.html","",""],["AbstractController::Helpers::ClassMethods","","AbstractController/Helpers/ClassMethods.html","",""],["AbstractController::Helpers::MissingHelperError","","AbstractController/Helpers/MissingHelperError.html","",""],["AbstractController::Logger","","AbstractController/Logger.html","",""],["AbstractController::Railties","","AbstractController/Railties.html","",""],["AbstractController::Railties::RoutesHelpers","","AbstractController/Railties/RoutesHelpers.html","",""],["AbstractController::Rendering","","AbstractController/Rendering.html","",""],["AbstractController::Translation","","AbstractController/Translation.html","",""],["AbstractController::UrlFor","","AbstractController/UrlFor.html","","<p>Includes <code>url_for</code> into the host class (e.g. an abstract\ncontroller or mailer). The class has to provide …\n"],["AbstractController::UrlFor::ClassMethods","","AbstractController/UrlFor/ClassMethods.html","",""],["ActionController","","ActionController.html","",""],["ActionController::ActionController","","ActionController/ActionController.html","",""],["ActionController::ActionController::ActionController","","ActionController/ActionController/ActionController.html","",""],["ActionController::ActionController::ActionController::UrlGenerationError","","ActionController/ActionController/ActionController/UrlGenerationError.html","",""],["ActionController::ActionControllerError","","ActionController/ActionControllerError.html","",""],["ActionController::BadRequest","","ActionController/BadRequest.html","",""],["ActionController::Base","","ActionController/Base.html","","<p>Action Controllers are the core of a web request in Rails. They are made up\nof one or more actions that …\n"],["ActionController::Caching","","ActionController/Caching.html","","<p>Caching is a cheap way of speeding up slow applications by keeping the\nresult of calculations, renderings, …\n"],["ActionController::Caching::ClassMethods","","ActionController/Caching/ClassMethods.html","",""],["ActionController::Caching::ConfigMethods","","ActionController/Caching/ConfigMethods.html","",""],["ActionController::Caching::Fragments","","ActionController/Caching/Fragments.html","","<p>Fragment caching is used for caching various blocks within views without\ncaching the entire action as …\n"],["ActionController::ConditionalGet","","ActionController/ConditionalGet.html","",""],["ActionController::ConditionalGet::ClassMethods","","ActionController/ConditionalGet/ClassMethods.html","",""],["ActionController::Cookies","","ActionController/Cookies.html","",""],["ActionController::DataStreaming","","ActionController/DataStreaming.html","","<p>Methods for sending arbitrary data and for streaming files to the browser,\ninstead of rendering.\n"],["ActionController::DataStreaming::FileBody","","ActionController/DataStreaming/FileBody.html","",""],["ActionController::EtagWithTemplateDigest","","ActionController/EtagWithTemplateDigest.html","","<p>When our views change, they should bubble up into HTTP cache freshness and\nbust browser caches. So the …\n"],["ActionController::Flash","","ActionController/Flash.html","",""],["ActionController::Flash::ClassMethods","","ActionController/Flash/ClassMethods.html","",""],["ActionController::ForceSSL","","ActionController/ForceSSL.html","","<p>This module provides a method which will redirect browser to use HTTPS\nprotocol. This will ensure that …\n"],["ActionController::ForceSSL::ClassMethods","","ActionController/ForceSSL/ClassMethods.html","",""],["ActionController::Head","","ActionController/Head.html","",""],["ActionController::Helpers","","ActionController/Helpers.html","","<p>The Rails framework provides a large number of helpers for working with\nassets, dates, forms, numbers …\n"],["ActionController::Helpers::ClassMethods","","ActionController/Helpers/ClassMethods.html","",""],["ActionController::HideActions","","ActionController/HideActions.html","","<p>Adds the ability to prevent public methods on a controller to be called as\nactions.\n"],["ActionController::HideActions::ClassMethods","","ActionController/HideActions/ClassMethods.html","",""],["ActionController::HttpAuthentication","","ActionController/HttpAuthentication.html","","<p>Makes it dead easy to do HTTP Basic, Digest and Token authentication.\n"],["ActionController::HttpAuthentication::Basic","","ActionController/HttpAuthentication/Basic.html","","<p>Makes it dead easy to do HTTP Basic authentication.\n<p>Simple Basic example\n\n<pre class=\"ruby\"> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ApplicationController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Basic::ControllerMethods","","ActionController/HttpAuthentication/Basic/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","","ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html","",""],["ActionController::HttpAuthentication::Digest","","ActionController/HttpAuthentication/Digest.html","","<p>Makes it dead easy to do HTTP Digest authentication.\n<p>Simple Digest example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;digest/md5&#39;</span>\n<span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Digest::ControllerMethods","","ActionController/HttpAuthentication/Digest/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Token","","ActionController/HttpAuthentication/Token.html","","<p>Makes it dead easy to do HTTP Token authentication.\n<p>Simple Token example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ApplicationController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Token::ControllerMethods","","ActionController/HttpAuthentication/Token/ControllerMethods.html","",""],["ActionController::ImplicitRender","","ActionController/ImplicitRender.html","",""],["ActionController::Instrumentation","","ActionController/Instrumentation.html","","<p>Adds instrumentation to several ends in ActionController::Base. It also\nprovides some hooks related with …\n"],["ActionController::Instrumentation::ClassMethods","","ActionController/Instrumentation/ClassMethods.html","",""],["ActionController::InvalidAuthenticityToken","","ActionController/InvalidAuthenticityToken.html","",""],["ActionController::InvalidCrossOriginRequest","","ActionController/InvalidCrossOriginRequest.html","",""],["ActionController::Live","","ActionController/Live.html","","<p>Mix this module in to your controller, and all actions in that controller\nwill be able to stream data …\n"],["ActionController::Live::Buffer","","ActionController/Live/Buffer.html","",""],["ActionController::Live::ClientDisconnected","","ActionController/Live/ClientDisconnected.html","",""],["ActionController::Live::Response","","ActionController/Live/Response.html","",""],["ActionController::Live::Response::Header","","ActionController/Live/Response/Header.html","",""],["ActionController::Live::SSE","","ActionController/Live/SSE.html","","<p>This class provides the ability to write an SSE (Server Sent Event) to an\nIO stream. The class is initialized …\n"],["ActionController::LiveTestResponse","","ActionController/LiveTestResponse.html","",""],["ActionController::LogSubscriber","","ActionController/LogSubscriber.html","",""],["ActionController::Metal","","ActionController/Metal.html","","<p><code>ActionController::Metal</code> is the simplest possible controller,\nproviding a valid Rack interface without …\n"],["ActionController::MethodNotAllowed","","ActionController/MethodNotAllowed.html","",""],["ActionController::Middleware","","ActionController/Middleware.html","",""],["ActionController::Middleware::ActionMiddleware","","ActionController/Middleware/ActionMiddleware.html","",""],["ActionController::MiddlewareStack","","ActionController/MiddlewareStack.html","",""],["ActionController::MiddlewareStack::Middleware","","ActionController/MiddlewareStack/Middleware.html","",""],["ActionController::MimeResponds","","ActionController/MimeResponds.html","",""],["ActionController::MimeResponds::ClassMethods","","ActionController/MimeResponds/ClassMethods.html","",""],["ActionController::MimeResponds::Collector","","ActionController/MimeResponds/Collector.html","","<p>A container for responses available from the current controller for\nrequests for different mime-types …\n"],["ActionController::MimeResponds::Collector::VariantCollector","","ActionController/MimeResponds/Collector/VariantCollector.html","",""],["ActionController::MissingFile","","ActionController/MissingFile.html","",""],["ActionController::MissingRenderer","","ActionController/MissingRenderer.html","",""],["ActionController::ModelNaming","","ActionController/ModelNaming.html","",""],["ActionController::NotImplemented","","ActionController/NotImplemented.html","",""],["ActionController::ParameterMissing","","ActionController/ParameterMissing.html","","<p>Raised when a required parameter is missing.\n\n<pre>params = ActionController::Parameters.new(a: {})\nparams.fetch(:b) ...</pre>\n"],["ActionController::Parameters","","ActionController/Parameters.html","","<p>Action Controller Parameters\n<p>Allows to choose which attributes should be whitelisted for mass updating …\n"],["ActionController::ParamsWrapper","","ActionController/ParamsWrapper.html","","<p>Wraps the parameters hash into a nested hash. This will allow clients to\nsubmit POST requests without …\n"],["ActionController::ParamsWrapper::ClassMethods","","ActionController/ParamsWrapper/ClassMethods.html","",""],["ActionController::ParamsWrapper::Options","","ActionController/ParamsWrapper/Options.html","",""],["ActionController::RackDelegation","","ActionController/RackDelegation.html","",""],["ActionController::Railtie","","ActionController/Railtie.html","",""],["ActionController::Railtie::ActiveSupport","","ActionController/Railtie/ActiveSupport.html","",""],["ActionController::Railties","","ActionController/Railties.html","",""],["ActionController::Railties::Helpers","","ActionController/Railties/Helpers.html","",""],["ActionController::RedirectBackError","","ActionController/RedirectBackError.html","",""],["ActionController::Redirecting","","ActionController/Redirecting.html","",""],["ActionController::RenderError","","ActionController/RenderError.html","",""],["ActionController::Renderers","","ActionController/Renderers.html","",""],["ActionController::Renderers::All","","ActionController/Renderers/All.html","",""],["ActionController::Renderers::ClassMethods","","ActionController/Renderers/ClassMethods.html","",""],["ActionController::Renderers::Mime","","ActionController/Renderers/Mime.html","",""],["ActionController::Rendering","","ActionController/Rendering.html","",""],["ActionController::RequestForgeryProtection","","ActionController/RequestForgeryProtection.html","","<p>Controller actions are protected from Cross-Site Request Forgery (CSRF)\nattacks by including a token …\n"],["ActionController::RequestForgeryProtection::ClassMethods","","ActionController/RequestForgeryProtection/ClassMethods.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods","","ActionController/RequestForgeryProtection/ProtectionMethods.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::Exception","","ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::NullSession","","ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullCookieJar","","ActionController/RequestForgeryProtection/ProtectionMethods/NullSession/NullCookieJar.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::NullSession::NullSessionHash","","ActionController/RequestForgeryProtection/ProtectionMethods/NullSession/NullSessionHash.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession","","ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html","",""],["ActionController::Rescue","","ActionController/Rescue.html","","<p>This module is responsible to provide `rescue_from` helpers to controllers\nand configure when detailed …\n"],["ActionController::RoutingError","","ActionController/RoutingError.html","",""],["ActionController::SessionOverflowError","","ActionController/SessionOverflowError.html","",""],["ActionController::Streaming","","ActionController/Streaming.html","","<p>Allows views to be streamed back to the client as they are rendered.\n<p>The default way Rails renders views …\n"],["ActionController::StrongParameters","","ActionController/StrongParameters.html","","<p>Strong Parameters\n<p>It provides an interface for protecting attributes from end-user\nassignment. This makes …\n"],["ActionController::TemplateAssertions","","ActionController/TemplateAssertions.html","",""],["ActionController::TestCase","","ActionController/TestCase.html","","<p>Superclass for ActionController functional tests. Functional tests allow\nyou to test a single controller …\n"],["ActionController::TestCase::Behavior","","ActionController/TestCase/Behavior.html","",""],["ActionController::TestCase::Behavior::ClassMethods","","ActionController/TestCase/Behavior/ClassMethods.html","",""],["ActionController::TestRequest","","ActionController/TestRequest.html","",""],["ActionController::TestResponse","","ActionController/TestResponse.html","",""],["ActionController::TestSession","","ActionController/TestSession.html","",""],["ActionController::Testing","","ActionController/Testing.html","",""],["ActionController::Testing::ClassMethods","","ActionController/Testing/ClassMethods.html","",""],["ActionController::Testing::Functional","","ActionController/Testing/Functional.html","",""],["ActionController::UnknownController","","ActionController/UnknownController.html","",""],["ActionController::UnknownFormat","","ActionController/UnknownFormat.html","",""],["ActionController::UnknownHttpMethod","","ActionController/UnknownHttpMethod.html","",""],["ActionController::UnpermittedParameters","","ActionController/UnpermittedParameters.html","","<p>Raised when a supplied parameter is not expected.\n\n<pre>params = ActionController::Parameters.new(a: &quot;123&quot;, ...</pre>\n"],["ActionController::UrlFor","","ActionController/UrlFor.html","","<p>Includes <code>url_for</code> into the host class. The class has to provide\na <code>RouteSet</code> by implementing the <code>_routes</code> …\n"],["ActionDispatch","","ActionDispatch.html","",""],["ActionDispatch::Assertions","","ActionDispatch/Assertions.html","",""],["ActionDispatch::Assertions::ResponseAssertions","","ActionDispatch/Assertions/ResponseAssertions.html","","<p>A small suite of assertions that test responses from Rails applications.\n"],["ActionDispatch::Assertions::RoutingAssertions","","ActionDispatch/Assertions/RoutingAssertions.html","","<p>Suite of assertions to test routes generated by Rails and the handling of\nrequests made to them.\n"],["ActionDispatch::Callbacks","","ActionDispatch/Callbacks.html","","<p>Provides callbacks to be executed before and after dispatching the request.\n"],["ActionDispatch::Cookies","","ActionDispatch/Cookies.html","","<p>Cookies are read and written through ActionController#cookies.\n<p>The cookies being read are the ones received …\n"],["ActionDispatch::Cookies::ChainedCookieJars","","ActionDispatch/Cookies/ChainedCookieJars.html","","<p>Include in a cookie jar to allow chaining, e.g. cookies.permanent.signed\n"],["ActionDispatch::Cookies::CookieJar","","ActionDispatch/Cookies/CookieJar.html","",""],["ActionDispatch::Cookies::EncryptedCookieJar","","ActionDispatch/Cookies/EncryptedCookieJar.html","",""],["ActionDispatch::Cookies::JsonSerializer","","ActionDispatch/Cookies/JsonSerializer.html","",""],["ActionDispatch::Cookies::PermanentCookieJar","","ActionDispatch/Cookies/PermanentCookieJar.html","",""],["ActionDispatch::Cookies::SerializedCookieJars","","ActionDispatch/Cookies/SerializedCookieJars.html","",""],["ActionDispatch::Cookies::SignedCookieJar","","ActionDispatch/Cookies/SignedCookieJar.html","",""],["ActionDispatch::Cookies::UpgradeLegacyEncryptedCookieJar","","ActionDispatch/Cookies/UpgradeLegacyEncryptedCookieJar.html","",""],["ActionDispatch::Cookies::UpgradeLegacySignedCookieJar","","ActionDispatch/Cookies/UpgradeLegacySignedCookieJar.html","",""],["ActionDispatch::Cookies::VerifyAndUpgradeLegacySignedMessage","","ActionDispatch/Cookies/VerifyAndUpgradeLegacySignedMessage.html","","<p>Passing the ActiveSupport::MessageEncryptor::NullSerializer downstream to\nthe Message{Encryptor,Verifier} …\n"],["ActionDispatch::DebugExceptions","","ActionDispatch/DebugExceptions.html","","<p>This middleware is responsible for logging exceptions and showing a\ndebugging page in case the request …\n"],["ActionDispatch::ExceptionWrapper","","ActionDispatch/ExceptionWrapper.html","",""],["ActionDispatch::FileHandler","","ActionDispatch/FileHandler.html","","<p>This middleware returns a file&#39;s contents from disk in the body\nresponse. When initialized it can …\n"],["ActionDispatch::Flash","","ActionDispatch/Flash.html","","<p>The flash provides a way to pass temporary primitive-types (String, Array,\nHash) between actions. Anything …\n"],["ActionDispatch::Flash::FlashHash","","ActionDispatch/Flash/FlashHash.html","",""],["ActionDispatch::Flash::FlashNow","","ActionDispatch/Flash/FlashNow.html","",""],["ActionDispatch::Http","","ActionDispatch/Http.html","",""],["ActionDispatch::Http::Cache","","ActionDispatch/Http/Cache.html","",""],["ActionDispatch::Http::Cache::Request","","ActionDispatch/Http/Cache/Request.html","",""],["ActionDispatch::Http::Cache::Response","","ActionDispatch/Http/Cache/Response.html","",""],["ActionDispatch::Http::FilterParameters","","ActionDispatch/Http/FilterParameters.html","","<p>Allows you to specify sensitive parameters which will be replaced from the\nrequest log by looking in …\n"],["ActionDispatch::Http::FilterRedirect","","ActionDispatch/Http/FilterRedirect.html","",""],["ActionDispatch::Http::Headers","","ActionDispatch/Http/Headers.html","","<p>Provides access to the request&#39;s HTTP headers from the environment.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">env</span>     = { <span class=\"ruby-string\">&quot;CONTENT_TYPE&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionDispatch::Http::MimeNegotiation","","ActionDispatch/Http/MimeNegotiation.html","",""],["ActionDispatch::Http::ParameterFilter","","ActionDispatch/Http/ParameterFilter.html","",""],["ActionDispatch::Http::ParameterFilter::CompiledFilter","","ActionDispatch/Http/ParameterFilter/CompiledFilter.html","",""],["ActionDispatch::Http::Parameters","","ActionDispatch/Http/Parameters.html","",""],["ActionDispatch::Http::URL","","ActionDispatch/Http/URL.html","",""],["ActionDispatch::Http::UploadedFile","","ActionDispatch/Http/UploadedFile.html","","<p>Models uploaded files.\n<p>The actual file is accessible via the <code>tempfile</code> accessor,\nthough some of its interface …\n"],["ActionDispatch::IllegalStateError","","ActionDispatch/IllegalStateError.html","",""],["ActionDispatch::Integration","","ActionDispatch/Integration.html","",""],["ActionDispatch::Integration::RequestHelpers","","ActionDispatch/Integration/RequestHelpers.html","",""],["ActionDispatch::Integration::Runner","","ActionDispatch/Integration/Runner.html","",""],["ActionDispatch::Integration::Session","","ActionDispatch/Integration/Session.html","","<p>An instance of this class represents a set of requests and responses\nperformed sequentially by a test …\n"],["ActionDispatch::IntegrationTest","","ActionDispatch/IntegrationTest.html","","<p>An integration test spans multiple controllers and actions, tying them all\ntogether to ensure they work …\n"],["ActionDispatch::Journey","","ActionDispatch/Journey.html","",""],["ActionDispatch::Journey::Format","","ActionDispatch/Journey/Format.html","",""],["ActionDispatch::Journey::Format::Parameter","","ActionDispatch/Journey/Format/Parameter.html","",""],["ActionDispatch::Journey::Formatter","","ActionDispatch/Journey/Formatter.html","",""],["ActionDispatch::Journey::GTG","","ActionDispatch/Journey/GTG.html","",""],["ActionDispatch::Journey::GTG::Builder","","ActionDispatch/Journey/GTG/Builder.html","",""],["ActionDispatch::Journey::GTG::MatchData","","ActionDispatch/Journey/GTG/MatchData.html","",""],["ActionDispatch::Journey::GTG::Simulator","","ActionDispatch/Journey/GTG/Simulator.html","",""],["ActionDispatch::Journey::GTG::TransitionTable","","ActionDispatch/Journey/GTG/TransitionTable.html","",""],["ActionDispatch::Journey::NFA","","ActionDispatch/Journey/NFA.html","",""],["ActionDispatch::Journey::NFA::Builder","","ActionDispatch/Journey/NFA/Builder.html","",""],["ActionDispatch::Journey::NFA::Dot","","ActionDispatch/Journey/NFA/Dot.html","",""],["ActionDispatch::Journey::NFA::MatchData","","ActionDispatch/Journey/NFA/MatchData.html","",""],["ActionDispatch::Journey::NFA::Simulator","","ActionDispatch/Journey/NFA/Simulator.html","",""],["ActionDispatch::Journey::NFA::TransitionTable","","ActionDispatch/Journey/NFA/TransitionTable.html","",""],["ActionDispatch::Journey::NFA::Visitor","","ActionDispatch/Journey/NFA/Visitor.html","",""],["ActionDispatch::Journey::Nodes","","ActionDispatch/Journey/Nodes.html","",""],["ActionDispatch::Journey::Nodes::Binary","","ActionDispatch/Journey/Nodes/Binary.html","",""],["ActionDispatch::Journey::Nodes::Cat","","ActionDispatch/Journey/Nodes/Cat.html","",""],["ActionDispatch::Journey::Nodes::Dummy","","ActionDispatch/Journey/Nodes/Dummy.html","",""],["ActionDispatch::Journey::Nodes::Group","","ActionDispatch/Journey/Nodes/Group.html","",""],["ActionDispatch::Journey::Nodes::Literal","","ActionDispatch/Journey/Nodes/Literal.html","",""],["ActionDispatch::Journey::Nodes::Node","","ActionDispatch/Journey/Nodes/Node.html","",""],["ActionDispatch::Journey::Nodes::Or","","ActionDispatch/Journey/Nodes/Or.html","",""],["ActionDispatch::Journey::Nodes::Star","","ActionDispatch/Journey/Nodes/Star.html","",""],["ActionDispatch::Journey::Nodes::Symbol","","ActionDispatch/Journey/Nodes/Symbol.html","",""],["ActionDispatch::Journey::Nodes::Terminal","","ActionDispatch/Journey/Nodes/Terminal.html","",""],["ActionDispatch::Journey::Nodes::Unary","","ActionDispatch/Journey/Nodes/Unary.html","",""],["ActionDispatch::Journey::Parser","","ActionDispatch/Journey/Parser.html","",""],["ActionDispatch::Journey::Path","","ActionDispatch/Journey/Path.html","",""],["ActionDispatch::Journey::Path::Pattern","","ActionDispatch/Journey/Path/Pattern.html","",""],["ActionDispatch::Journey::Path::Pattern::AnchoredRegexp","","ActionDispatch/Journey/Path/Pattern/AnchoredRegexp.html","",""],["ActionDispatch::Journey::Path::Pattern::MatchData","","ActionDispatch/Journey/Path/Pattern/MatchData.html","",""],["ActionDispatch::Journey::Path::Pattern::RegexpOffsets","","ActionDispatch/Journey/Path/Pattern/RegexpOffsets.html","",""],["ActionDispatch::Journey::Path::Pattern::UnanchoredRegexp","","ActionDispatch/Journey/Path/Pattern/UnanchoredRegexp.html","",""],["ActionDispatch::Journey::Route","","ActionDispatch/Journey/Route.html","",""],["ActionDispatch::Journey::Router","","ActionDispatch/Journey/Router.html","",""],["ActionDispatch::Journey::Router::RoutingError","","ActionDispatch/Journey/Router/RoutingError.html","",""],["ActionDispatch::Journey::Router::Strexp","","ActionDispatch/Journey/Router/Strexp.html","",""],["ActionDispatch::Journey::Router::Utils","","ActionDispatch/Journey/Router/Utils.html","",""],["ActionDispatch::Journey::Router::Utils::UriEncoder","","ActionDispatch/Journey/Router/Utils/UriEncoder.html","",""],["ActionDispatch::Journey::Routes","","ActionDispatch/Journey/Routes.html","",""],["ActionDispatch::Journey::Scanner","","ActionDispatch/Journey/Scanner.html","",""],["ActionDispatch::Journey::Visitors","","ActionDispatch/Journey/Visitors.html","",""],["ActionDispatch::Journey::Visitors::Dot","","ActionDispatch/Journey/Visitors/Dot.html","",""],["ActionDispatch::Journey::Visitors::Each","","ActionDispatch/Journey/Visitors/Each.html","",""],["ActionDispatch::Journey::Visitors::FormatBuilder","","ActionDispatch/Journey/Visitors/FormatBuilder.html","",""],["ActionDispatch::Journey::Visitors::String","","ActionDispatch/Journey/Visitors/String.html","",""],["ActionDispatch::Journey::Visitors::Visitor","","ActionDispatch/Journey/Visitors/Visitor.html","",""],["ActionDispatch::MiddlewareStack","","ActionDispatch/MiddlewareStack.html","",""],["ActionDispatch::MiddlewareStack::Middleware","","ActionDispatch/MiddlewareStack/Middleware.html","",""],["ActionDispatch::ParamsParser","","ActionDispatch/ParamsParser.html","",""],["ActionDispatch::ParamsParser::ParseError","","ActionDispatch/ParamsParser/ParseError.html","",""],["ActionDispatch::PublicExceptions","","ActionDispatch/PublicExceptions.html","","<p>When called, this middleware renders an error page. By default if an HTML\nresponse is expected it will …\n"],["ActionDispatch::RailsEntityStore","","ActionDispatch/RailsEntityStore.html","",""],["ActionDispatch::RailsMetaStore","","ActionDispatch/RailsMetaStore.html","",""],["ActionDispatch::Railtie","","ActionDispatch/Railtie.html","",""],["ActionDispatch::Railtie::ActiveSupport","","ActionDispatch/Railtie/ActiveSupport.html","",""],["ActionDispatch::Reloader","","ActionDispatch/Reloader.html","","<p>ActionDispatch::Reloader provides prepare and cleanup callbacks, intended\nto assist with code reloading …\n"],["ActionDispatch::RemoteIp","","ActionDispatch/RemoteIp.html","","<p>This middleware calculates the IP address of the remote client that is\nmaking the request. It does this …\n"],["ActionDispatch::RemoteIp::GetIp","","ActionDispatch/RemoteIp/GetIp.html","","<p>The GetIp class exists as a way to defer processing of the request data\ninto an actual IP address. If …\n"],["ActionDispatch::RemoteIp::IpSpoofAttackError","","ActionDispatch/RemoteIp/IpSpoofAttackError.html","",""],["ActionDispatch::Request","","ActionDispatch/Request.html","",""],["ActionDispatch::Request::Session","","ActionDispatch/Request/Session.html","",""],["ActionDispatch::Request::Session::Options","","ActionDispatch/Request/Session/Options.html","",""],["ActionDispatch::Request::Utils","","ActionDispatch/Request/Utils.html","",""],["ActionDispatch::RequestId","","ActionDispatch/RequestId.html","","<p>Makes a unique request id available to the action_dispatch.request_id env\nvariable (which is then accessible …\n"],["ActionDispatch::Response","","ActionDispatch/Response.html","","<p>Represents an HTTP response generated by a controller action. Use it to\nretrieve the current state of …\n"],["ActionDispatch::Response::Buffer","","ActionDispatch/Response/Buffer.html","",""],["ActionDispatch::Response::RackBody","","ActionDispatch/Response/RackBody.html","",""],["ActionDispatch::Routing","","ActionDispatch/Routing.html","","<p>The routing module provides URL rewriting in native Ruby. It&#39;s a way to\nredirect incoming requests …\n"],["ActionDispatch::Routing::ConsoleFormatter","","ActionDispatch/Routing/ConsoleFormatter.html","",""],["ActionDispatch::Routing::Endpoint","","ActionDispatch/Routing/Endpoint.html","",""],["ActionDispatch::Routing::HtmlTableFormatter","","ActionDispatch/Routing/HtmlTableFormatter.html","",""],["ActionDispatch::Routing::Mapper","","ActionDispatch/Routing/Mapper.html","",""],["ActionDispatch::Routing::Mapper::Base","","ActionDispatch/Routing/Mapper/Base.html","",""],["ActionDispatch::Routing::Mapper::Concerns","","ActionDispatch/Routing/Mapper/Concerns.html","","<p>Routing Concerns allow you to declare common routes that can be reused\ninside others resources and routes. …\n"],["ActionDispatch::Routing::Mapper::Constraints","","ActionDispatch/Routing/Mapper/Constraints.html","",""],["ActionDispatch::Routing::Mapper::HttpHelpers","","ActionDispatch/Routing/Mapper/HttpHelpers.html","",""],["ActionDispatch::Routing::Mapper::Mapping","","ActionDispatch/Routing/Mapper/Mapping.html","",""],["ActionDispatch::Routing::Mapper::Resources","","ActionDispatch/Routing/Mapper/Resources.html","","<p>Resource routing allows you to quickly declare all of the common routes for\na given resourceful controller. …\n"],["ActionDispatch::Routing::Mapper::Resources::Resource","","ActionDispatch/Routing/Mapper/Resources/Resource.html","",""],["ActionDispatch::Routing::Mapper::Resources::SingletonResource","","ActionDispatch/Routing/Mapper/Resources/SingletonResource.html","",""],["ActionDispatch::Routing::Mapper::Scope","","ActionDispatch/Routing/Mapper/Scope.html","",""],["ActionDispatch::Routing::Mapper::Scoping","","ActionDispatch/Routing/Mapper/Scoping.html","","<p>You may wish to organize groups of controllers under a namespace. Most\ncommonly, you might group a number …\n"],["ActionDispatch::Routing::OptionRedirect","","ActionDispatch/Routing/OptionRedirect.html","",""],["ActionDispatch::Routing::PathRedirect","","ActionDispatch/Routing/PathRedirect.html","",""],["ActionDispatch::Routing::PolymorphicRoutes","","ActionDispatch/Routing/PolymorphicRoutes.html","","<p>Polymorphic URL helpers are methods for smart resolution to a named route\ncall when given an Active  …\n"],["ActionDispatch::Routing::PolymorphicRoutes::HelperMethodBuilder","","ActionDispatch/Routing/PolymorphicRoutes/HelperMethodBuilder.html","",""],["ActionDispatch::Routing::Redirect","","ActionDispatch/Routing/Redirect.html","",""],["ActionDispatch::Routing::Redirection","","ActionDispatch/Routing/Redirection.html","",""],["ActionDispatch::Routing::RouteSet","","ActionDispatch/Routing/RouteSet.html","",""],["ActionDispatch::Routing::RouteSet::Dispatcher","","ActionDispatch/Routing/RouteSet/Dispatcher.html","",""],["ActionDispatch::Routing::RouteSet::Generator","","ActionDispatch/Routing/RouteSet/Generator.html","",""],["ActionDispatch::Routing::RouteSet::MountedHelpers","","ActionDispatch/Routing/RouteSet/MountedHelpers.html","",""],["ActionDispatch::Routing::RouteSet::NamedRouteCollection","","ActionDispatch/Routing/RouteSet/NamedRouteCollection.html","",""],["ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper","","ActionDispatch/Routing/RouteSet/NamedRouteCollection/UrlHelper.html","",""],["ActionDispatch::Routing::RouteSet::NamedRouteCollection::UrlHelper::OptimizedUrlHelper","","ActionDispatch/Routing/RouteSet/NamedRouteCollection/UrlHelper/OptimizedUrlHelper.html","",""],["ActionDispatch::Routing::RouteWrapper","","ActionDispatch/Routing/RouteWrapper.html","",""],["ActionDispatch::Routing::RoutesInspector","","ActionDispatch/Routing/RoutesInspector.html","",""],["ActionDispatch::Routing::RoutesProxy","","ActionDispatch/Routing/RoutesProxy.html","",""],["ActionDispatch::Routing::UrlFor","","ActionDispatch/Routing/UrlFor.html","","<p>In <code>config/routes.rb</code> you define URL-to-controller mappings, but\nthe reverse is also possible: an URL can …\n"],["ActionDispatch::SSL","","ActionDispatch/SSL.html","",""],["ActionDispatch::Session","","ActionDispatch/Session.html","",""],["ActionDispatch::Session::AbstractStore","","ActionDispatch/Session/AbstractStore.html","",""],["ActionDispatch::Session::CacheStore","","ActionDispatch/Session/CacheStore.html","","<p>Session store that uses an ActiveSupport::Cache::Store to store the\nsessions. This store is most useful …\n"],["ActionDispatch::Session::Compatibility","","ActionDispatch/Session/Compatibility.html","",""],["ActionDispatch::Session::CookieStore","","ActionDispatch/Session/CookieStore.html","","<p>This cookie-based session store is the Rails default. It is dramatically\nfaster than the alternatives. …\n"],["ActionDispatch::Session::MemCacheStore","","ActionDispatch/Session/MemCacheStore.html","",""],["ActionDispatch::Session::SessionObject","","ActionDispatch/Session/SessionObject.html","",""],["ActionDispatch::Session::SessionRestoreError","","ActionDispatch/Session/SessionRestoreError.html","",""],["ActionDispatch::Session::StaleSessionCheck","","ActionDispatch/Session/StaleSessionCheck.html","",""],["ActionDispatch::ShowExceptions","","ActionDispatch/ShowExceptions.html","","<p>This middleware rescues any exception returned by the application and calls\nan exceptions app that will …\n"],["ActionDispatch::Static","","ActionDispatch/Static.html","","<p>This middleware will attempt to return the contents of a file&#39;s body\nfrom disk in the response.  …\n"],["ActionDispatch::TestProcess","","ActionDispatch/TestProcess.html","",""],["ActionDispatch::TestRequest","","ActionDispatch/TestRequest.html","",""],["ActionDispatch::TestResponse","","ActionDispatch/TestResponse.html","","<p>Integration test methods such as ActionDispatch::Integration::Session#get\nand ActionDispatch::Integration::Session#post …\n"],["ActionPack","","ActionPack.html","",""],["ActionPack::VERSION","","ActionPack/VERSION.html","",""],["ActionView","","ActionView.html","",""],["ActionView::Template","","ActionView/Template.html","",""],["ActiveSupport","","ActiveSupport.html","",""],["Mime","","Mime.html","",""],["Mime::Mimes","","Mime/Mimes.html","",""],["Mime::NullType","","Mime/NullType.html","",""],["Mime::Type","","Mime/Type.html","","<p>Encapsulates the notion of a mime type. Can be used at render time, for\nexample, with:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Mime::Type::AcceptItem","","Mime/Type/AcceptItem.html","",""],["Mime::Type::AcceptList","","Mime/Type/AcceptList.html","",""],["Rack","","Rack.html","",""],["Rack::Cache","","Rack/Cache.html","",""],["Rack::Cache::EntityStore","","Rack/Cache/EntityStore.html","",""],["Rack::Cache::MetaStore","","Rack/Cache/MetaStore.html","",""],["Rack::Mount","","Rack/Mount.html","",""],["==","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-i-3D-3D","(middleware)",""],["==","Mime::Type","Mime/Type.html#method-i-3D-3D","(mime_type)",""],["===","Mime::Type","Mime/Type.html#method-i-3D-3D-3D","(list)",""],["=~","Mime::Type","Mime/Type.html#method-i-3D-7E","(mime_type)",""],["GET","ActionDispatch::Request","ActionDispatch/Request.html#method-i-GET","()","<p>Override Rack&#39;s GET method to support indifferent access\n"],["POST","ActionDispatch::Request","ActionDispatch/Request.html#method-i-POST","()","<p>Override Rack&#39;s POST method to support indifferent access\n"],["[]","ActionController::Parameters","ActionController/Parameters.html#method-i-5B-5D","(key)","<p>Returns a parameter for the given <code>key</code>. If not found, returns\n<code>nil</code>.\n\n<pre>params = ActionController::Parameters.new(person: ...</pre>\n"],["[]","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-5B-5D","(k)",""],["[]","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-5B-5D","(key)","<p>Returns the value for the given key mapped to @env.\n"],["[]","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-5B-5D","(i)",""],["[]","Mime","Mime.html#method-i-5B-5D","(type)",""],["[]=","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-5B-5D-3D","(k, v)",""],["[]=","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-5B-5D-3D","(key, value)","<p>Sets the given value for the key mapped to @env.\n"],["_extract_parameters","ActionController::ParamsWrapper","ActionController/ParamsWrapper.html#method-i-_extract_parameters","(parameters)",""],["_extract_redirect_to_status","ActionController::Redirecting","ActionController/Redirecting.html#method-i-_extract_redirect_to_status","(options, response_status)",""],["_find_action_name","AbstractController::Base","AbstractController/Base.html#method-i-_find_action_name","(action_name)","<p>Takes an action name and returns the name of the method that will handle\nthe action.\n<p>It checks if the …\n"],["_generate_paths_by_default","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-_generate_paths_by_default","()",""],["_handle_action_missing","AbstractController::Base","AbstractController/Base.html#method-i-_handle_action_missing","(*args)","<p>If the action name was not found, but a method called “action_missing” was\nfound, #method_for_action …\n"],["_insert_callbacks","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-_insert_callbacks","(callbacks, block = nil)","<p>Take callback names and an optional callback proc, normalize them, then\ncall the block with each callback. …\n"],["_mock_session","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-_mock_session","()",""],["_normalize_args","AbstractController::Rendering","AbstractController/Rendering.html#method-i-_normalize_args","(action=nil, options={})","<p>Normalize args by converting render “foo” to render :action =&gt; “foo” and\nrender …\n"],["_normalize_callback_options","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options","(options)","<p>If :only or :except are used, convert the options into the :unless and :if\noptions of ActiveSupport::Callbacks …\n"],["_normalize_options","AbstractController::Rendering","AbstractController/Rendering.html#method-i-_normalize_options","(options)","<p>Normalize options. :api: plugin\n"],["_normalize_render","AbstractController::Rendering","AbstractController/Rendering.html#method-i-_normalize_render","(*args, &block)","<p>Normalize args and options. :api: private\n"],["_normalize_text","ActionController::Rendering","ActionController/Rendering.html#method-i-_normalize_text","(options)",""],["_process_format","AbstractController::Rendering","AbstractController/Rendering.html#method-i-_process_format","(format, options = {})","<p>Process the rendered format. :api: private\n"],["_process_format","ActionController::Rendering","ActionController/Rendering.html#method-i-_process_format","(format, options = {})",""],["_process_options","AbstractController::Rendering","AbstractController/Rendering.html#method-i-_process_options","(options)","<p>Process extra options. :api: plugin\n"],["_reduce_1","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_1","(val, _values)","<p>reduce 0 omitted\n"],["_reduce_10","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_10","(val, _values)",""],["_reduce_15","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_15","(val, _values)","<p>reduce 14 omitted\n"],["_reduce_16","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_16","(val, _values)",""],["_reduce_17","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_17","(val, _values)",""],["_reduce_18","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_18","(val, _values)",""],["_reduce_2","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_2","(val, _values)",""],["_reduce_7","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_7","(val, _values)","<p>reduce 6 omitted\n"],["_reduce_8","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_8","(val, _values)",""],["_reduce_9","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_9","(val, _values)",""],["_reduce_none","ActionDispatch::Journey::Parser","ActionDispatch/Journey/Parser.html#method-i-_reduce_none","(val, _values)",""],["_render_in_priorities","ActionController::Rendering","ActionController/Rendering.html#method-i-_render_in_priorities","(options)",""],["_render_to_body_with_renderer","ActionController::Renderers","ActionController/Renderers.html#method-i-_render_to_body_with_renderer","(options)",""],["_render_with_renderer_method_name","ActionController::Renderers","ActionController/Renderers.html#method-c-_render_with_renderer_method_name","(key)",""],["_routes","AbstractController::UrlFor","AbstractController/UrlFor.html#method-i-_routes","()",""],["_routes","AbstractController::UrlFor::ClassMethods","AbstractController/UrlFor/ClassMethods.html#method-i-_routes","()",""],["_routes_context","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-_routes_context","()",""],["_set_wrapper_options","ActionController::ParamsWrapper::ClassMethods","ActionController/ParamsWrapper/ClassMethods.html#method-i-_set_wrapper_options","(options)",""],["_valid_action_name?","AbstractController::Base","AbstractController/Base.html#method-i-_valid_action_name-3F","(action_name)","<p>Checks if the action name is valid and returns false otherwise.\n"],["_with_routes","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-_with_routes","(routes)",""],["_wrap_parameters","ActionController::ParamsWrapper","ActionController/ParamsWrapper.html#method-i-_wrap_parameters","(parameters)","<p>Returns the list of parameters which will be selected for wrapped.\n"],["_wrapper_enabled?","ActionController::ParamsWrapper","ActionController/ParamsWrapper.html#method-i-_wrapper_enabled-3F","()","<p>Checks if we should perform parameters wrapping.\n"],["_wrapper_formats","ActionController::ParamsWrapper","ActionController/ParamsWrapper.html#method-i-_wrapper_formats","()","<p>Returns the list of enabled formats.\n"],["_wrapper_key","ActionController::ParamsWrapper","ActionController/ParamsWrapper.html#method-i-_wrapper_key","()","<p>Returns the wrapper key which will be used to stored wrapped parameters.\n"],["abort","ActionDispatch::Response","ActionDispatch/Response.html#method-i-abort","()",""],["abstract!","AbstractController::Base","AbstractController/Base.html#method-i-abstract-21","()","<p>Define a controller as abstract. See internal_methods for more details.\n"],["accept=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-accept-3D","(mime_types)",""],["accepts","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-accepts","()","<p>Returns the accepted MIME type for the request.\n"],["action","ActionController::Metal","ActionController/Metal.html#method-c-action","(name, klass = ActionDispatch::Request)","<p>Returns a Rack endpoint for the given action name.\n"],["action","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-action","()",""],["action=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-action-3D","(action_name)",""],["action_method?","AbstractController::Base","AbstractController/Base.html#method-i-action_method-3F","(name)","<p>Returns true if the name can be considered an action because it has a\nmethod defined in the controller. …\n"],["action_methods","AbstractController::Base","AbstractController/Base.html#method-i-action_methods","()","<p>A list of method names that should be considered actions. This includes all\npublic instance methods on …\n"],["action_methods","AbstractController::UrlFor::ClassMethods","AbstractController/UrlFor/ClassMethods.html#method-i-action_methods","()",""],["action_methods","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-action_methods","()","<p>Overrides AbstractController::Base#action_methods to remove any methods\nthat are listed as hidden methods. …\n"],["add","ActionController::Renderers","ActionController/Renderers.html#method-c-add","(key, &block)","<p>Adds a new renderer to call within controller actions. A renderer is\ninvoked by passing its name as an …\n"],["add_anchor","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-add_anchor","(path, anchor)",""],["add_flash_types","ActionController::Flash::ClassMethods","ActionController/Flash/ClassMethods.html#method-i-add_flash_types","(*types)","<p>Creates new flash types. You can pass as many types as you want to create\nflash types other than the …\n"],["add_params","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-add_params","(path, params)",""],["add_renderer","ActionController","ActionController.html#method-c-add_renderer","(key, &block)","<p>See <code>Renderers.add</code>\n"],["add_route","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-add_route","(app, conditions = {}, requirements = {}, defaults = {}, name = nil, anchor = true)",""],["add_template_helper","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-add_template_helper","(mod)","<p>Makes all the (instance) methods in the helper module available to\ntemplates rendered through this controller. …\n"],["add_trailing_slash","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-add_trailing_slash","(path)",""],["after","ActionDispatch::Callbacks","ActionDispatch/Callbacks.html#method-i-after","(*args, &block)",""],["after_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-after_action","","<p>Append a callback after actions. See _insert_callbacks for parameter\ndetails.\n"],["alert","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-alert","()","<p>Convenience accessor for <code>flash[:alert]</code>.\n"],["alert=","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-alert-3D","(message)","<p>Convenience accessor for <code>flash[:alert]=</code>.\n"],["all","ActionController::MimeResponds::Collector","ActionController/MimeResponds/Collector.html#method-i-all","(*args, &block)",""],["all_application_helpers","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-all_application_helpers","()","<p>Extract helper names from files in <code>app/helpers   /*_helper.rb</code>\n"],["all_helpers_from_path","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-all_helpers_from_path","(path)",""],["any","ActionController::MimeResponds::Collector","ActionController/MimeResponds/Collector.html#method-i-any","(*args, &block)",""],["app","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-app","()",""],["app","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-app","()",""],["app","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-c-app","()",""],["app=","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-c-app-3D","(app)",""],["append","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-append","(&block)",""],["append_after_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-append_after_action","","<p>Append a callback after actions. See _insert_callbacks for parameter\ndetails.\n"],["append_around_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-append_around_action","","<p>Append a callback around actions. See _insert_callbacks for parameter\ndetails.\n"],["append_before_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-append_before_action","","<p>Append a callback before actions. See _insert_callbacks for parameter\ndetails.\n"],["append_charset?","ActionDispatch::Response","ActionDispatch/Response.html#method-i-append_charset-3F","()",""],["application_trace","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-application_trace","()",""],["around_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-around_action","","<p>Append a callback around actions. See _insert_callbacks for parameter\ndetails.\n"],["array_of_permitted_scalars?","ActionController::Parameters","ActionController/Parameters.html#method-i-array_of_permitted_scalars-3F","(value)",""],["array_of_permitted_scalars_filter","ActionController::Parameters","ActionController/Parameters.html#method-i-array_of_permitted_scalars_filter","(params, key)",""],["assert_generates","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_generates","(expected_path, options, defaults={}, extras={}, message=nil)","<p>Asserts that the provided options can be used to generate the provided\npath. This is the inverse of  …\n"],["assert_index","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-assert_index","(index, where)",""],["assert_recognizes","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_recognizes","(expected_options, path, extras={}, msg=nil)","<p>Asserts that the routing of the given <code>path</code> was handled\ncorrectly and that the parsed options (given in …\n"],["assert_redirected_to","ActionDispatch::Assertions::ResponseAssertions","ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_redirected_to","(options = {}, message=nil)","<p>Assert that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],["assert_response","ActionDispatch::Assertions::ResponseAssertions","ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_response","(type, message = nil)","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],["assert_routing","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_routing","(path, options, defaults={}, extras={}, message=nil)","<p>Asserts that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],["assert_template","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-assert_template","(options = {}, message = nil)","<p>Asserts that the request was rendered with the appropriate template file or\npartials.\n\n<pre># assert that the ...</pre>\n"],["assign_default_content_type_and_charset!","ActionDispatch::Response","ActionDispatch/Response.html#method-i-assign_default_content_type_and_charset-21","(headers)",""],["assigns","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-assigns","(key = nil)",""],["auth_param","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-auth_param","(request)",""],["auth_scheme","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-auth_scheme","(request)",""],["authenticate","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-authenticate","(request, &login_procedure)",""],["authenticate","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-authenticate","(request, realm, &password_procedure)","<p>Returns false on a valid response, true otherwise\n"],["authenticate","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-authenticate","(controller, &login_procedure)","<p>If token Authorization header is present, call the login procedure with the\npresent token and options. …\n"],["authenticate_or_request_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_or_request_with_http_basic","(realm = \"Application\", &login_procedure)",""],["authenticate_or_request_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_or_request_with_http_digest","(realm = \"Application\", &password_procedure)",""],["authenticate_or_request_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_or_request_with_http_token","(realm = \"Application\", &login_procedure)",""],["authenticate_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_with_http_basic","(&login_procedure)",""],["authenticate_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_with_http_digest","(realm = \"Application\", &password_procedure)","<p>Authenticate with HTTP Digest, returns true or false\n"],["authenticate_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_with_http_token","(&login_procedure)",""],["authentication_header","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-authentication_header","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-authentication_request","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-authentication_request","(controller, realm, message = nil)",""],["authentication_request","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-authentication_request","(controller, realm)","<p>Sets a WWW-Authenticate to let the client know a token is desired.\n<p>controller - ActionController::Base …\n"],["authorization","ActionDispatch::Request","ActionDispatch/Request.html#method-i-authorization","()","<p>Returns the authorization header regardless of whether it was specified\ndirectly or through one of the …\n"],["available_action?","AbstractController::Base","AbstractController/Base.html#method-i-available_action-3F","(action_name)","<p>Returns true if a method for the action is available and can be dispatched,\nfalse otherwise.\n<p>Notice that …\n"],["await_commit","ActionDispatch::Response","ActionDispatch/Response.html#method-i-await_commit","()",""],["await_sent","ActionDispatch::Response","ActionDispatch/Response.html#method-i-await_sent","()",""],["backtrace","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-backtrace","()",""],["backtrace_cleaner","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-backtrace_cleaner","()",""],["before","ActionDispatch::Callbacks","ActionDispatch/Callbacks.html#method-i-before","(*args, &block)",""],["before_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-before_action","","<p>Append a callback before actions. See _insert_callbacks for parameter\ndetails.\n"],["before_committed","ActionDispatch::Response","ActionDispatch/Response.html#method-i-before_committed","()",""],["before_filters","ActionController::Testing::ClassMethods","ActionController/Testing/ClassMethods.html#method-i-before_filters","()",""],["before_sending","ActionDispatch::Response","ActionDispatch/Response.html#method-i-before_sending","()",""],["body","ActionController::LiveTestResponse","ActionController/LiveTestResponse.html#method-i-body","()",""],["body","ActionDispatch::Request","ActionDispatch/Request.html#method-i-body","()","<p>The request body is an IO input stream. If the RAW_POST_DATA environment\nvariable is already set, wrap …\n"],["body","ActionDispatch::Response","ActionDispatch/Response.html#method-i-body","()","<p>Returns the content of the response as a string. This contains the contents\nof any calls to <code>render</code>.\n"],["body","ActionDispatch::Response::RackBody","ActionDispatch/Response/RackBody.html#method-i-body","()",""],["body=","ActionDispatch::Response","ActionDispatch/Response.html#method-i-body-3D","(body)","<p>Allows you to manually set or override the response body.\n"],["body_parts","ActionDispatch::Response","ActionDispatch/Response.html#method-i-body_parts","()",""],["build","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-build","(app = nil, &block)",""],["build","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-i-build","(app)",""],["build_buffer","ActionDispatch::Response","ActionDispatch/Response.html#method-i-build_buffer","(response, body)",""],["build_conditions","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-build_conditions","(current_conditions, path_values)",""],["build_full_uri","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-build_full_uri","(path, env)",""],["build_host_url","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-build_host_url","(host, port, protocol, options, path)",""],["build_path","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-build_path","(path, ast, requirements, anchor)",""],["build_request","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-build_request","()",""],["build_request_uri","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-build_request_uri","(action, parameters)",""],["build_response","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-build_response","(klass)",""],["cache","ActionController::Caching","ActionController/Caching.html#method-i-cache","(key, options = {}, &block)","<p>Convenience accessor.\n"],["cache_configured?","ActionController::Caching::ConfigMethods","ActionController/Caching/ConfigMethods.html#method-i-cache_configured-3F","()",""],["cache_control_headers","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-cache_control_headers","()",""],["cache_control_segments","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-cache_control_segments","()",""],["cache_key","ActionDispatch::Session::CacheStore","ActionDispatch/Session/CacheStore.html#method-i-cache_key","(sid)","<p>Turn the session id into a cache key.\n"],["cache_store","ActionController::Caching::ConfigMethods","ActionController/Caching/ConfigMethods.html#method-i-cache_store","()",""],["cache_store=","ActionController::Caching::ConfigMethods","ActionController/Caching/ConfigMethods.html#method-i-cache_store-3D","(store)",""],["calculate_ip","ActionDispatch::RemoteIp::GetIp","ActionDispatch/RemoteIp/GetIp.html#method-i-calculate_ip","()","<p>Sort through the various IP address headers, looking for the IP most likely\nto be the address of the …\n"],["call","ActionController::Metal","ActionController/Metal.html#method-c-call","(env)","<p>Makes the controller a Rack endpoint that runs the action in the given\n<code>env</code>&#39;s <code>action_dispatch.request.path_parameters</code>\n…\n"],["call","ActionController::Middleware::ActionMiddleware","ActionController/Middleware/ActionMiddleware.html#method-i-call","(env)",""],["call","ActionDispatch::Callbacks","ActionDispatch/Callbacks.html#method-i-call","(env)",""],["call","ActionDispatch::Cookies","ActionDispatch/Cookies.html#method-i-call","(env)",""],["call","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-call","(env)",""],["call","ActionDispatch::Flash","ActionDispatch/Flash.html#method-i-call","(env)",""],["call","ActionDispatch::ParamsParser","ActionDispatch/ParamsParser.html#method-i-call","(env)",""],["call","ActionDispatch::PublicExceptions","ActionDispatch/PublicExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-i-call","(env)",""],["call","ActionDispatch::RemoteIp","ActionDispatch/RemoteIp.html#method-i-call","(env)","<p>Since the IP address may not be needed, we store the object here without\ncalculating the IP to keep from …\n"],["call","ActionDispatch::RequestId","ActionDispatch/RequestId.html#method-i-call","(env)",""],["call","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-call","(env)",""],["call","ActionDispatch::SSL","ActionDispatch/SSL.html#method-i-call","(env)",""],["call","ActionDispatch::ShowExceptions","ActionDispatch/ShowExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Static","ActionDispatch/Static.html#method-i-call","(env)",""],["check_method","ActionDispatch::Request","ActionDispatch/Request.html#method-i-check_method","(name)",""],["check_path_parameters!","ActionDispatch::Request","ActionDispatch/Request.html#method-i-check_path_parameters-21","()",""],["check_required_ivars","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-check_required_ivars","()",""],["clean_backtrace","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-clean_backtrace","(*args)",""],["cleanup!","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-cleanup-21","()","<p>Execute all cleanup callbacks.\n"],["clear","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-clear","()",""],["clear!","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-clear-21","()",""],["clear_action_methods!","AbstractController::Base","AbstractController/Base.html#method-i-clear_action_methods-21","()","<p>action_methods are cached and there is sometimes need to refresh them.\nclear_action_methods! allows you …\n"],["clear_helpers","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-clear_helpers","()","<p>Clears up all existing helpers in this class, only keeping the helper with\nthe same name as this class. …\n"],["close","ActionController::Live::SSE","ActionController/Live/SSE.html#method-i-close","()",""],["close","ActionDispatch::Http::UploadedFile","ActionDispatch/Http/UploadedFile.html#method-i-close","(unlink_now=false)","<p>Shortcut for <code>tempfile.close</code>.\n"],["close","ActionDispatch::Response","ActionDispatch/Response.html#method-i-close","()",""],["close","ActionDispatch::Response::RackBody","ActionDispatch/Response/RackBody.html#method-i-close","()",""],["code","ActionDispatch::Response","ActionDispatch/Response.html#method-i-code","()","<p>Returns a string to ensure compatibility with\n<code>Net::HTTPResponse</code>.\n"],["collection","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-collection","()","<p>To add a route to the collection:\n\n<pre>resources :photos do\n  collection do\n    get &#39;search&#39;\n  end\nend</pre>\n<p>This …\n"],["combine_etags","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-combine_etags","(options)",""],["commit!","ActionDispatch::Response","ActionDispatch/Response.html#method-i-commit-21","()",""],["committed?","ActionDispatch::Response","ActionDispatch/Response.html#method-i-committed-3F","()",""],["compare_with_real_token","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-compare_with_real_token","(token, session)",""],["compiled_filter","ActionDispatch::Http::ParameterFilter","ActionDispatch/Http/ParameterFilter.html#method-i-compiled_filter","()",""],["concern","ActionDispatch::Routing::Mapper::Concerns","ActionDispatch/Routing/Mapper/Concerns.html#method-i-concern","(name, callable = nil, &block)","<p>Define a routing concern using a name.\n<p>Concerns may be defined inline, using a block, or handled by another …\n"],["concerns","ActionDispatch::Routing::Mapper::Concerns","ActionDispatch/Routing/Mapper/Concerns.html#method-i-concerns","(*args)","<p>Use the named concerns\n\n<pre>resources :posts do\n  concerns :commentable\nend</pre>\n<p>concerns also work in any routes …\n"],["const_missing","ActionController::Parameters","ActionController/Parameters.html#method-c-const_missing","(const_name)",""],["constraints","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-constraints","(constraints = {})","<p>Parameter Restriction\n<p>Allows you to constrain the nested routes based on a set of rules. For\ninstance, …\n"],["constraints","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-constraints","()",""],["content_length","ActionDispatch::Request","ActionDispatch/Request.html#method-i-content_length","()","<p>Returns the content length of the request as an integer.\n"],["content_mime_type","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-content_mime_type","()","<p>The MIME type of the HTTP request, such as Mime::XML.\n<p>For backward compatibility, the post format is extracted …\n"],["content_type","ActionController::Metal","ActionController/Metal.html#method-i-content_type","()",""],["content_type","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-content_type","(path)",""],["content_type","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-content_type","()",""],["content_type=","ActionController::Metal","ActionController/Metal.html#method-i-content_type-3D","(type)","<p>Basic implementations for content_type=, location=, and headers are\nprovided to reduce the dependency …\n"],["content_type=","ActionDispatch::Response","ActionDispatch/Response.html#method-i-content_type-3D","(content_type)","<p>Sets the HTTP content type.\n"],["controller","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-controller","(controller, options={})","<p>Scopes routes to a specific controller\n\n<pre>controller &quot;food&quot; do\n  match &quot;bacon&quot;, action: &quot;bacon&quot;\nend</pre>\n"],["controller","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-controller","()",""],["controller_class","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class","()",""],["controller_class=","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class-3D","(new_class)",""],["controller_name","ActionController::Metal","ActionController/Metal.html#method-c-controller_name","()","<p>Returns the last part of the controller&#39;s name, underscored, without\nthe ending <code>Controller</code>. For instance, …\n"],["controller_name","ActionController::Metal","ActionController/Metal.html#method-i-controller_name","()","<p>Delegates to the class&#39; <code>controller_name</code>\n"],["controller_path","AbstractController::Base","AbstractController/Base.html#method-i-controller_path","()","<p>Returns the full controller name, underscored, without the ending\nController. For instance, MyApp::MyPostsController …\n"],["convert_hashes_to_parameters","ActionController::Parameters","ActionController/Parameters.html#method-i-convert_hashes_to_parameters","(key, value, assign_if_converted=true)",""],["convert_to_model","ActionController::ModelNaming","ActionController/ModelNaming.html#method-i-convert_to_model","(object)","<p>Converts the given object to an ActiveModel compliant one.\n"],["convert_value_to_parameters","ActionController::Parameters","ActionController/Parameters.html#method-i-convert_value_to_parameters","(value)",""],["converted_arrays","ActionController::Parameters","ActionController/Parameters.html#method-i-converted_arrays","()","<p>Attribute that keeps track of converted arrays, if any, to avoid double\nlooping in the common use case …\n"],["cookie_jar","ActionDispatch::Request","ActionDispatch/Request.html#method-i-cookie_jar","()",""],["cookie_jar","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-i-cookie_jar","(env)",""],["cookies","ActionController::Cookies","ActionController/Cookies.html#method-i-cookies","()",""],["cookies","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-cookies","()","<p>A map of the cookies returned by the last response, and which will be sent\nwith the next request.\n"],["cookies","ActionDispatch::Response","ActionDispatch/Response.html#method-i-cookies","()","<p>Returns the response cookies, converted to a Hash of (name =&gt; value)\npairs\n\n<pre>assert_equal &#39;AuthorOfNewPage&#39;, ...</pre>\n"],["cookies","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-cookies","()",""],["cookies","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-cookies","()",""],["custom","ActionController::MimeResponds::Collector","ActionController/MimeResponds/Collector.html#method-i-custom","(mime_type, &block)",""],["date","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-date","()",""],["date=","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-date-3D","(utc_time)",""],["date?","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-date-3F","()",""],["decode_credentials","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-decode_credentials","(request)",""],["decode_credentials","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials","(header)",""],["decode_credentials_header","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials_header","(request)",""],["deep_munge","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-deep_munge","(event)",""],["deep_munge","ActionDispatch::Request","ActionDispatch/Request.html#method-i-deep_munge","(hash)","<p>Extracted into ActionDispatch::Request::Utils.deep_munge, but kept here for\nbackwards compatibility. …\n"],["default_env","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-default_env","()",""],["default_helper_module!","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-default_helper_module-21","()",""],["default_hsts_options","ActionDispatch::SSL","ActionDispatch/SSL.html#method-c-default_hsts_options","()",""],["default_render","ActionController::ImplicitRender","ActionController/ImplicitRender.html#method-i-default_render","(*args)",""],["default_resources_path_names","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-c-default_resources_path_names","()",""],["default_url_options","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-default_url_options","()",""],["default_url_options","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options","(options)",""],["default_url_options=","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-default_url_options-3D","(options)",""],["default_url_options=","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options-3D","(options)",""],["defaults","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-defaults","(defaults = {})","<p>Allows you to set default parameters for a route, such as this:\n\n<pre>defaults id: &#39;home&#39; do\n  match &#39;scoped_pages/(:id)&#39;, ...</pre>\n"],["define_generate_prefix","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-define_generate_prefix","(app, name)",""],["define_mounted_helper","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-define_mounted_helper","(name)",""],["delete","ActionController::Parameters","ActionController/Parameters.html#method-i-delete","(key, &block)","<p>Deletes and returns a key-value pair from <code>Parameters</code> whose key\nis equal to key. If the key is not found, …\n"],["delete","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-delete","(action, *args)","<p>Simulate a DELETE request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["delete","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-delete","(key)",""],["delete","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-delete","(path, parameters = nil, headers_or_env = nil)","<p>Performs a DELETE request with the given parameters. See <code>#get</code>\nfor more details.\n"],["delete","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-delete","(target)",""],["delete","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-delete","(*args, &block)","<p>Define a route that only recognizes HTTP DELETE. For supported arguments,\nsee match\n\n<pre>delete &#39;broccoli&#39;, ...</pre>\n"],["delete?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-delete-3F","()","<p>Is this a DELETE request? Equivalent to <code>request.request_method_symbol\n== :delete</code>.\n"],["delete_cookie","ActionDispatch::Response","ActionDispatch/Response.html#method-i-delete_cookie","(key, value={})",""],["delete_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-delete_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a DELETE request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["deserialize","ActionDispatch::Cookies::SerializedCookieJars","ActionDispatch/Cookies/SerializedCookieJars.html#method-i-deserialize","(name, value)",""],["destroy_session","ActionDispatch::Session::CacheStore","ActionDispatch/Session/CacheStore.html#method-i-destroy_session","(env, sid, options)","<p>Remove a session from the cache.\n"],["destroy_session","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-i-destroy_session","(env, session_id, options)",""],["determine_default_controller_class","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-determine_default_controller_class","(name)",""],["determine_template_etag","ActionController::EtagWithTemplateDigest","ActionController/EtagWithTemplateDigest.html#method-i-determine_template_etag","(options)",""],["digest","ActionDispatch::Cookies::SerializedCookieJars","ActionDispatch/Cookies/SerializedCookieJars.html#method-i-digest","()",""],["discard","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-discard","(k = nil)","<p>Marks the entire flash or a single flash entry to be discarded by the end\nof the current action:\n\n<pre>flash.discard ...</pre>\n"],["dispatch","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-dispatch","(action, request)",""],["dispatcher","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-dispatcher","(defaults)",""],["document_root_element","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-document_root_element","()",""],["document_root_element","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-document_root_element","()",""],["domain","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-domain","(tld_length = @@tld_length)","<p>Returns the domain part of a host, such as “rubyonrails.org” in\n“www.rubyonrails.org”. …\n"],["draw","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-draw","(&block)",""],["draw_header","ActionDispatch::Routing::ConsoleFormatter","ActionDispatch/Routing/ConsoleFormatter.html#method-i-draw_header","(routes)",""],["draw_section","ActionDispatch::Routing::ConsoleFormatter","ActionDispatch/Routing/ConsoleFormatter.html#method-i-draw_section","(routes)",""],["dump","ActionDispatch::Cookies::JsonSerializer","ActionDispatch/Cookies/JsonSerializer.html#method-c-dump","(value)",""],["dup","ActionController::Parameters","ActionController/Parameters.html#method-i-dup","()","<p>Returns an exact copy of the <code>ActionController::Parameters</code>\ninstance. <code>permitted</code> state is kept on the duped …\n"],["each","ActionController::Parameters","ActionController/Parameters.html#method-i-each","(&block)",""],["each","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-each","(&block)",""],["each","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-each","(&block)",""],["each","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-each","()",""],["each","ActionDispatch::Response::RackBody","ActionDispatch/Response/RackBody.html#method-i-each","(*args, &block)",""],["each_element","ActionController::Parameters","ActionController/Parameters.html#method-i-each_element","(object)",""],["each_pair","ActionController::Parameters","ActionController/Parameters.html#method-i-each_pair","(&block)","<p>Convert all hashes in values into parameters, then yield each pair like the\nsame way as <code>Hash#each_pair</code> …\n"],["eager_load!","ActionController","ActionController.html#method-c-eager_load-21","()",""],["empty?","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-empty-3F","()",""],["empty?","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-empty-3F","()",""],["encode_credentials","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-encode_credentials","(user_name, password)",""],["encode_credentials","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-encode_credentials","(http_method, credentials, password, password_is_ha1)",""],["encode_credentials","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-encode_credentials","(token, options = {})","<p>Encodes the given token and options into an Authorization header value.\n<p>token   - String token. options …\n"],["encrypted","ActionDispatch::Cookies::ChainedCookieJars","ActionDispatch/Cookies/ChainedCookieJars.html#method-i-encrypted","()","<p>Returns a jar that&#39;ll automatically encrypt cookie values before\nsending them to the client and will …\n"],["endpoint","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-endpoint","()",""],["engine?","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-engine-3F","()",""],["env","ActionController::Metal","ActionController/Metal.html#method-i-env","()",""],["env_filter","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-env_filter","()",""],["env_name","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-env_name","(key)","<p>Converts a HTTP header name to an environment variable name if it is not\ncontained within the headers …\n"],["eof?","ActionDispatch::Http::UploadedFile","ActionDispatch/Http/UploadedFile.html#method-i-eof-3F","()","<p>Shortcut for <code>tempfile.eof?</code>.\n"],["escape","ActionDispatch::Journey::Format::Parameter","ActionDispatch/Journey/Format/Parameter.html#method-i-escape","(value)",""],["etag","ActionController::ConditionalGet::ClassMethods","ActionController/ConditionalGet/ClassMethods.html#method-i-etag","(&etagger)","<p>Allows you to consider additional controller-wide information when\ngenerating an ETag. For example, if …\n"],["etag=","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-etag-3D","(etag)",""],["etag_matches?","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-etag_matches-3F","(etag)",""],["eval_block","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-eval_block","(block)",""],["evaluate","ActionDispatch::Journey::Format","ActionDispatch/Journey/Format.html#method-i-evaluate","(hash)",""],["exist?","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-i-exist-3F","(key)",""],["expand_backtrace","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-expand_backtrace","()",""],["expected_response","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-expected_response","(http_method, uri, credentials, password, password_is_ha1=true)","<p>Returns the expected response for a request of <code>http_method</code> to\n<code>uri</code> with the decoded <code>credentials</code> and the …\n"],["expire_fragment","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-expire_fragment","(key, options = nil)","<p>Removes fragments from the cache.\n<p><code>key</code> can take one of three forms:\n<p>String - This would normally take the …\n"],["expires_in","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-expires_in","(seconds, options = {})","<p>Sets a HTTP 1.1 Cache-Control header. Defaults to issuing a\n<code>private</code> instruction, so that intermediate …\n"],["expires_now","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-expires_now","()","<p>Sets a HTTP 1.1 Cache-Control header of <code>no-cache</code> so no caching\nshould occur by the browser or intermediate …\n"],["ext","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-ext","()",""],["external_request_id","ActionDispatch::RequestId","ActionDispatch/RequestId.html#method-i-external_request_id","(env)",""],["extra_keys","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-extra_keys","(options, recall={})","<p>Generate the path indicated by the arguments, and return an array of the\nkeys that were not used to generate …\n"],["extract!","ActionController::Parameters","ActionController/Parameters.html#method-i-extract-21","(*keys)","<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre>params = ActionController::Parameters.new(a: ...</pre>\n"],["extract_domain","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-extract_domain","(host, tld_length)",""],["extract_domain_from","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-extract_domain_from","(host, tld_length)",""],["extract_session_id","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-i-extract_session_id","(env)",""],["extract_session_id","ActionDispatch::Session::StaleSessionCheck","ActionDispatch/Session/StaleSessionCheck.html#method-i-extract_session_id","(env)",""],["extract_subdomain","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-extract_subdomain","(host, tld_length)",""],["extract_subdomains","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-extract_subdomains","(host, tld_length)",""],["extract_subdomains_from","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-extract_subdomains_from","(host, tld_length)",""],["fail_on","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-fail_on","(exception_class, message)",""],["fetch","ActionController::Parameters","ActionController/Parameters.html#method-i-fetch","(key, *args)","<p>Returns a parameter for the given <code>key</code>. If the <code>key</code>\ncan&#39;t be found, there are several options: With …\n"],["fetch","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-fetch","(key, *args, &block)","<p>Returns the value for the given key mapped to @env.\n<p>If the key is not found and an optional code block …\n"],["fetch","Mime","Mime.html#method-i-fetch","(type)",""],["fields_for_style?","ActionController::Parameters","ActionController/Parameters.html#method-i-fields_for_style-3F","(object)",""],["filter","ActionDispatch::Http::ParameterFilter","ActionDispatch/Http/ParameterFilter.html#method-i-filter","(params)",""],["filter_proxies","ActionDispatch::RemoteIp::GetIp","ActionDispatch/RemoteIp/GetIp.html#method-i-filter_proxies","(ips)",""],["filtered_env","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-filtered_env","()","<p>Return a hash of request.env with all sensitive data replaced.\n"],["filtered_location","ActionDispatch::Http::FilterRedirect","ActionDispatch/Http/FilterRedirect.html#method-i-filtered_location","()",""],["filtered_parameters","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-filtered_parameters","()","<p>Return a hash of parameters with all sensitive data replaced.\n"],["filtered_path","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-filtered_path","()","<p>Reconstructed a path with all sensitive GET parameters replaced.\n"],["filtered_query_string","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-filtered_query_string","()",""],["finalize!","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-finalize-21","()",""],["find_script_name","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-find_script_name","(options)",""],["fixture_file_upload","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-fixture_file_upload","(path, mime_type = nil, binary = false)","<p>Shortcut for\n<code>Rack::Test::UploadedFile.new(File.join(ActionController::TestCase.fixture_path,\npath), type)</code> …\n"],["flag_cookies_as_secure!","ActionDispatch::SSL","ActionDispatch/SSL.html#method-i-flag_cookies_as_secure-21","(headers)",""],["flash","ActionDispatch::Request","ActionDispatch/Request.html#method-i-flash","()","<p>Access the contents of the flash. Use <code>flash[\"notice\"]</code> to read\na notice you put there or <code>flash[\"notice\"]</code> …\n"],["flash","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-flash","()",""],["follow_redirect!","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-follow_redirect-21","()","<p>Follow a single redirect response. If the last response was not a redirect,\nan exception will be raised. …\n"],["force_ssl","ActionController::ForceSSL::ClassMethods","ActionController/ForceSSL/ClassMethods.html#method-i-force_ssl","(options = {})","<p>Force the request to this particular controller or specified actions to be\nunder HTTPS protocol.\n<p>If you …\n"],["force_ssl_redirect","ActionController::ForceSSL","ActionController/ForceSSL.html#method-i-force_ssl_redirect","(host_or_options = nil)","<p>Redirect the existing request to use the HTTPS protocol.\n<p>Parameters\n<p><code>host_or_options</code> - Either a host name …\n"],["form_authenticity_param","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-form_authenticity_param","()","<p>The form&#39;s authenticity parameter. Override to provide your own.\n"],["form_authenticity_token","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-form_authenticity_token","()","<p>Sets the token value for the current session.\n"],["form_data?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-form_data-3F","()",""],["format","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-format","(view_path = [])","<p>Returns the MIME type for the format used in the request.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GET</span> <span class=\"ruby-regexp\">/posts/</span><span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">xml</span>   <span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">format</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Mime</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["format=","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-format-3D","(extension)","<p>Sets the format by string extension, which can be used to force custom\nformats that are not controlled …\n"],["formats","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-formats","()",""],["formats=","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-formats-3D","(extensions)","<p>Sets the formats by string extensions. This differs from #format= by\nallowing you to set multiple, ordered …\n"],["fragment_cache_key","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-fragment_cache_key","(key)","<p>Given a key (as described in <code>expire_fragment</code>), returns a key\nsuitable for use in reading, writing, or …\n"],["fragment_exist?","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-fragment_exist-3F","(key, options = nil)","<p>Check if a cached fragment from the location signified by <code>key</code>\nexists (see <code>expire_fragment</code> for acceptable …\n"],["framework_trace","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-framework_trace","()",""],["fresh?","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-fresh-3F","(response)","<p>Check response freshness (Last-Modified and ETag) against request\nIf-Modified-Since and If-None-Match …\n"],["fresh_when","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-fresh_when","(record_or_options, additional_options = {})","<p>Sets the <code>etag</code>, <code>last_modified</code>, or both on the\nresponse and renders a <code>304 Not Modified</code> response if the …\n"],["from_response","ActionDispatch::TestResponse","ActionDispatch/TestResponse.html#method-c-from_response","(response)",""],["full_trace","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-full_trace","()",""],["full_url_for","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-full_url_for","(options)",""],["fullpath","ActionDispatch::Request","ActionDispatch/Request.html#method-i-fullpath","()","<p>Returns the <code>String</code> full path including params of the last URL\nrequested.\n\n<pre># get &quot;/articles&quot;\nrequest.fullpath ...</pre>\n"],["gem_version","ActionPack","ActionPack.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Action Pack as a\n<code>Gem::Version</code>\n"],["generate","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-generate","(route_key, options, recall = {})",""],["generate_extras","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-generate_extras","(options, recall={})",""],["generate_method_for_mime","AbstractController::Collector","AbstractController/Collector.html#method-c-generate_method_for_mime","(mime)",""],["generate_sid","ActionDispatch::Session::Compatibility","ActionDispatch/Session/Compatibility.html#method-i-generate_sid","()",""],["get","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-get","(action, *args)","<p>Simulate a GET request with the given parameters.\n<p><code>action</code>: The controller action to call.\n<p><code>parameters</code>: The …\n"],["get","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-get","(path, parameters = nil, headers_or_env = nil)","<p>Performs a GET request with the given parameters.\n<p><code>path</code>: The URI (as a String) on which you want to perform …\n"],["get","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-get","(*args, &block)","<p>Define a route that only recognizes HTTP GET. For supported arguments, see\nmatch\n\n<pre>get &#39;bacon&#39;, to: &#39;food#bacon&#39;</pre>\n"],["get?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-get-3F","()","<p>Is this a GET (or HEAD) request? Equivalent to\n<code>request.request_method_symbol == :get</code>.\n"],["get_cookie","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-i-get_cookie","(env)",""],["get_session","ActionDispatch::Session::CacheStore","ActionDispatch/Session/CacheStore.html#method-i-get_session","(env, sid)","<p>Get a session from the cache.\n"],["get_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-get_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a GET request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["gzip_encoding_accepted?","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-gzip_encoding_accepted-3F","(env)",""],["gzip_file_path","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-gzip_file_path","(path)",""],["ha1","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-ha1","(credentials, password)",""],["halted_callback","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-halted_callback","(event)",""],["halted_callback_hook","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-halted_callback_hook","(filter)","<p>A hook invoked every time a before callback is halted.\n"],["handle_conditional_get!","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-handle_conditional_get-21","()",""],["handle_unverified_request","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-handle_unverified_request","()",""],["handle_unverified_request","ActionController::RequestForgeryProtection::ProtectionMethods::Exception","ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html#method-i-handle_unverified_request","()",""],["handle_unverified_request","ActionController::RequestForgeryProtection::ProtectionMethods::NullSession","ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html#method-i-handle_unverified_request","()","<p>This is the method that defines the application behavior when a request is\nfound to be unverified.\n"],["handle_unverified_request","ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession","ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html#method-i-handle_unverified_request","()",""],["has_basic_credentials?","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-has_basic_credentials-3F","(request)",""],["has_named_route?","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-has_named_route-3F","(name)","<p>Query if the following named route was already defined.\n"],["hash_filter","ActionController::Parameters","ActionController/Parameters.html#method-i-hash_filter","(params, filter)",""],["head","ActionController::Head","ActionController/Head.html#method-i-head","(status, options = {})","<p>Returns a response that has no content (merely headers). The options\nargument is interpreted to be a …\n"],["head","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-head","(action, *args)","<p>Simulate a HEAD request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["head","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-head","(path, parameters = nil, headers_or_env = nil)","<p>Performs a HEAD request with the given parameters. See <code>#get</code>\nfor more details.\n"],["head?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-head-3F","()","<p>Is this a HEAD request? Equivalent to <code>request.request_method_symbol\n== :head</code>.\n"],["header","ActionDispatch::Routing::ConsoleFormatter","ActionDispatch/Routing/ConsoleFormatter.html#method-i-header","(routes)",""],["header","ActionDispatch::Routing::HtmlTableFormatter","ActionDispatch/Routing/HtmlTableFormatter.html#method-i-header","(routes)","<p>the header is part of the HTML page, so we don&#39;t construct it here.\n"],["headers","ActionDispatch::Request","ActionDispatch/Request.html#method-i-headers","()","<p>Provides access to the request&#39;s HTTP headers, for example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">headers</span>[<span class=\"ruby-string\">&quot;Content-Type&quot;</span>] <span class=\"ruby-comment\"># =&gt; &quot;text/plain&quot;</span>\n</pre>\n"],["headers=","ActionController::Testing","ActionController/Testing.html#method-i-headers-3D","(new_headers)","<p>TODO : Rewrite tests using controller.headers= to use Rack env\n"],["helper","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-helper","(*args, &block)","<p>The <code>helper</code> class method can take a series of helper module\nnames, a block, or both.\n<p>Options\n<p><code>*args</code> - Module …\n"],["helper_attr","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-helper_attr","(*attrs)","<p>Declares helper accessors for controller attributes. For example, the\nfollowing adds new <code>name</code> and <code>name=</code> …\n"],["helper_method","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-helper_method","(*meths)","<p>Declare a controller method as a helper. For example, the following makes\nthe <code>current_user</code> controller …\n"],["helpers","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-helpers","()","<p>Provides a proxy to access helpers methods from outside the view.\n"],["hidden_actions","AbstractController::Base","AbstractController/Base.html#method-i-hidden_actions","()","<p>The list of hidden actions. Defaults to an empty array. This can be\nmodified by other modules or subclasses …\n"],["hide_action","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-hide_action","(*args)","<p>Sets all of the actions passed in as hidden actions.\n<p>Parameters\n<p><code>args</code> - A list of actions\n"],["host","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-host","()","<p>Returns the host for this request, such as example.com.\n"],["host","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-host","()","<p>The hostname used in the last request.\n"],["host=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-host-3D","(host)",""],["host_with_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-host_with_port","()","<p>Returns a host:port string for this request, such as “example.com” or\n“example.com:8080”. …\n"],["hsts_headers","ActionDispatch::SSL","ActionDispatch/SSL.html#method-i-hsts_headers","()","<p>tools.ietf.org/html/draft-hodges-strict-transport-sec-02\n"],["html?","Mime::Type","Mime/Type.html#method-i-html-3F","()",""],["html_document","ActionDispatch::Assertions","ActionDispatch/Assertions.html#method-i-html_document","()",""],["html_format?","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-html_format-3F","(parameters)",""],["http_basic_authenticate_with","ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html#method-i-http_basic_authenticate_with","(options = {})",""],["https!","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-https-21","(flag = true)","<p>Specify whether or not the session should mimic a secure HTTPS request.\n\n<pre>session.https!\nsession.https!(false)</pre>\n"],["https?","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-https-3F","()","<p>Returns <code>true</code> if the session is mimicking a secure HTTPS\nrequest.\n\n<pre>if session.https?\n  ...\nend</pre>\n"],["if_modified_since","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-if_modified_since","()",""],["if_modified_since=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-if_modified_since-3D","(last_modified)",""],["if_none_match","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-if_none_match","()",""],["if_none_match=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-if_none_match-3D","(etag)",""],["if_none_match_etags","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-if_none_match_etags","()",""],["include?","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-include-3F","(key)",""],["index","ActionController::Middleware","ActionController/Middleware.html#method-i-index","()",""],["inherited","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-inherited","(klass)","<p>When a class is inherited, wrap its helper module in a new module. This\nensures that the parent class&#39;s …\n"],["inherited","ActionController::ParamsWrapper::ClassMethods","ActionController/ParamsWrapper/ClassMethods.html#method-i-inherited","(klass)","<p>Sets the default wrapper key or model which will be used to determine\nwrapper key and attribute names. …\n"],["inherited","ActionController::Railties::Helpers","ActionController/Railties/Helpers.html#method-i-inherited","(klass)",""],["initialize_copy","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-initialize_copy","(other)",""],["initialize_sid","ActionDispatch::Session::Compatibility","ActionDispatch/Session/Compatibility.html#method-i-initialize_sid","()",""],["insert","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-insert","(index, *args, &block)",""],["insert_after","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-insert_after","(index, *args, &block)",""],["insert_before","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-insert_before","(index, *args, &block)",""],["inspect","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-i-inspect","()",""],["inspect","ActionDispatch::Routing::PathRedirect","ActionDispatch/Routing/PathRedirect.html#method-i-inspect","()",""],["integration_session","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-integration_session","()",""],["internal?","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-internal-3F","()",""],["internal_methods","AbstractController::Base","AbstractController/Base.html#method-i-internal_methods","()","<p>A list of all internal methods for a controller. This finds the first\nabstract superclass of a controller, …\n"],["internal_request_id","ActionDispatch::RequestId","ActionDispatch/RequestId.html#method-i-internal_request_id","()",""],["interpolation_required?","ActionDispatch::Routing::PathRedirect","ActionDispatch/Routing/PathRedirect.html#method-i-interpolation_required-3F","(string, params)",""],["ip","ActionDispatch::Request","ActionDispatch/Request.html#method-i-ip","()",""],["ips_from","ActionDispatch::RemoteIp::GetIp","ActionDispatch/RemoteIp/GetIp.html#method-i-ips_from","(header)",""],["json_regexp","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-json_regexp","()",""],["keep","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-keep","(k = nil)","<p>Keeps either the entire current flash or a specific flash entry available\nfor the next action:\n\n<pre>flash.keep ...</pre>\n"],["key?","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-key-3F","(name)",""],["key?","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-key-3F","(key)",""],["key?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-key-3F","(key)",""],["keys","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-keys","()",""],["klass","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-i-klass","()",""],["l","AbstractController::Translation","AbstractController/Translation.html#method-i-l","(*args)",""],["last","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-last","()",""],["last_modified","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-last_modified","()",""],["last_modified=","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3D","(utc_time)",""],["last_modified?","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3F","()",""],["load","ActionDispatch::Cookies::JsonSerializer","ActionDispatch/Cookies/JsonSerializer.html#method-c-load","(value)",""],["load_session","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-i-load_session","(env)",""],["load_session","ActionDispatch::Session::StaleSessionCheck","ActionDispatch/Session/StaleSessionCheck.html#method-i-load_session","(env)",""],["local?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-local-3F","()","<p>True if the request came from localhost, 127.0.0.1.\n"],["localize","AbstractController::Translation","AbstractController/Translation.html#method-i-localize","(*args)","<p>Delegates to <code>I18n.localize</code>. Also aliased as <code>l</code>.\n"],["location","ActionController::Metal","ActionController/Metal.html#method-i-location","()",""],["location","ActionDispatch::Response","ActionDispatch/Response.html#method-i-location","()","<p>The location header we&#39;ll be responding with.\n"],["location=","ActionController::Metal","ActionController/Metal.html#method-i-location-3D","(url)",""],["location=","ActionDispatch::Response","ActionDispatch/Response.html#method-i-location-3D","(url)","<p>Sets the location header we&#39;ll be responding with.\n"],["location_filter","ActionDispatch::Http::FilterRedirect","ActionDispatch/Http/FilterRedirect.html#method-i-location_filter","()",""],["location_filter_match?","ActionDispatch::Http::FilterRedirect","ActionDispatch/Http/FilterRedirect.html#method-i-location_filter_match-3F","(filters)",""],["log_error","ActionController::Live","ActionController/Live.html#method-i-log_error","(exception)",""],["log_error","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-log_error","(env, wrapper)",""],["logger","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-logger","()",""],["logger","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-logger","(env)",""],["logger","ActionDispatch::ParamsParser","ActionDispatch/ParamsParser.html#method-i-logger","(env)",""],["lookup","Mime::Type","Mime/Type.html#method-i-lookup","(string)",""],["lookup_and_digest_template","ActionController::EtagWithTemplateDigest","ActionController/EtagWithTemplateDigest.html#method-i-lookup_and_digest_template","(template)",""],["lookup_by_extension","Mime::Type","Mime/Type.html#method-i-lookup_by_extension","(extension)",""],["map_method","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-map_method","(method, args, &block)",""],["mark_for_same_origin_verification!","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-mark_for_same_origin_verification-21","()","<p>GET requests are checked for cross-origin JavaScript after rendering.\n"],["marked_for_same_origin_verification?","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-marked_for_same_origin_verification-3F","()","<p>If the `verify_authenticity_token` before_action ran, verify that\nJavaScript responses are only served …\n"],["masked_authenticity_token","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-masked_authenticity_token","(session)","<p>Creates a masked version of the authenticity token that varies on each\nrequest. The masking is used to …\n"],["match","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-match","(path, options=nil)","<p>Matches a url pattern to one or more routes.\n<p>You should not use the <code>match</code> method in your router without …\n"],["match","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-match","(path, *rest)","<p>match &#39;path&#39; =&gt; &#39;controller#action&#39; match\n&#39;path&#39;, to: &#39;controller#action&#39; …\n"],["match?","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-i-match-3F","(path)",""],["media_type","ActionDispatch::Request","ActionDispatch/Request.html#method-i-media_type","()","<p>The <code>String</code> MIME type of the request.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># get &quot;/articles&quot;</span>\n<span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">media_type</span> <span class=\"ruby-comment\"># =&gt; &quot;application/x-www-form-urlencoded&quot;</span>\n</pre>\n"],["member","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-member","()","<p>To add a member route, add a member block into the resource block:\n\n<pre>resources :photos do\n  member do\n  ...</pre>\n"],["merge","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-merge","(headers_or_env)","<p>Returns a new Http::Headers instance containing the contents of\n<code>headers_or_env</code> and the original instance. …\n"],["merge!","ActionDispatch::Http::Headers","ActionDispatch/Http/Headers.html#method-i-merge-21","(headers_or_env)","<p>Adds the contents of <code>headers_or_env</code> to original instance\nentries; duplicate keys are overwritten with …\n"],["merge_default_headers","ActionDispatch::Response","ActionDispatch/Response.html#method-i-merge_default_headers","(original, default)",""],["message","ActionDispatch::Response","ActionDispatch/Response.html#method-i-message","()","<p>Returns the corresponding message for the current HTTP status code:\n\n<pre>response.status = 200\nresponse.message ...</pre>\n"],["method","ActionDispatch::Request","ActionDispatch/Request.html#method-i-method","()","<p>Returns the original value of the environment&#39;s REQUEST_METHOD, even if\nit was overridden by middleware. …\n"],["method_added","AbstractController::Base","AbstractController/Base.html#method-i-method_added","(name)","<p>Refresh the cached action_methods when a new action_method is added.\n"],["method_for_action","AbstractController::Base","AbstractController/Base.html#method-i-method_for_action","(action_name)","<p>Takes an action name and returns the name of the method that will handle\nthe action. In normal cases, …\n"],["method_for_action","ActionController::HideActions","ActionController/HideActions.html#method-i-method_for_action","(action_name)","<p>Overrides AbstractController::Base#action_method? to return false if the\naction name is in the list of …\n"],["method_for_action","ActionController::ImplicitRender","ActionController/ImplicitRender.html#method-i-method_for_action","(action_name)",""],["method_missing","AbstractController::Collector","AbstractController/Collector.html#method-i-method_missing","(symbol, &block)",""],["method_missing","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-method_missing","(selector, *args, &block)","<p>ROUTES TODO: These assertions should really work in an integration context\n"],["method_missing","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-method_missing","(sym, *args, &block)","<p>Delegate unhandled messages to the current session instance.\n"],["method_missing","Mime::Type","Mime/Type.html#method-i-method_missing","(method, *args)",""],["method_symbol","ActionDispatch::Request","ActionDispatch/Request.html#method-i-method_symbol","()","<p>Returns a symbol form of the #method\n"],["middleware","ActionController::Metal","ActionController/Metal.html#method-c-middleware","()","<p>Alias for <code>middleware_stack</code>.\n"],["model_name_from_record_or_class","ActionController::ModelNaming","ActionController/ModelNaming.html#method-i-model_name_from_record_or_class","(record_or_class)",""],["modules_for_helpers","AbstractController::Helpers::ClassMethods","AbstractController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Returns a list of modules, normalized from the acceptable kinds of helpers\nwith the following behavior: …\n"],["modules_for_helpers","ActionController::Helpers::ClassMethods","ActionController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Overwrite modules_for_helpers to accept :all as argument, which loads all\nhelpers in helpers_path.\n<p>Parameters …\n"],["mount","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-mount","(app, options = nil)","<p>Mount a Rack-based application to be used within the application.\n\n<pre>mount SomeRackApp, at: &quot;some_route&quot;</pre>\n"],["mounted_helpers","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-mounted_helpers","()","<p>Contains all the mounted helpers across different engines and the\n`main_app` helper for the application. …\n"],["munge_body_object","ActionDispatch::Response","ActionDispatch/Response.html#method-i-munge_body_object","(body)",""],["name","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-name","()",""],["named_host?","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-named_host-3F","(host)",""],["namespace","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-namespace","(path, options = {})","<p>See ActionDispatch::Routing::Mapper::Scoping#namespace\n"],["namespace","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-namespace","(path, options = {})","<p>Scopes routes to a specific namespace. For example:\n\n<pre>namespace :admin do\n  resources :posts\nend</pre>\n<p>This generates …\n"],["needs_migration?","ActionDispatch::Cookies::SerializedCookieJars","ActionDispatch/Cookies/SerializedCookieJars.html#method-i-needs_migration-3F","(value)",""],["negotiate_format","ActionController::MimeResponds::Collector","ActionController/MimeResponds/Collector.html#method-i-negotiate_format","(request)",""],["negotiate_mime","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-negotiate_mime","(order)","<p>Receives an array of mimes and return the first user sent mime that matches\nthe order array.\n"],["nested","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-nested","()",""],["new","AbstractController::DoubleRenderError","AbstractController/DoubleRenderError.html#method-c-new","(message = nil)",""],["new","AbstractController::Helpers::MissingHelperError","AbstractController/Helpers/MissingHelperError.html#method-c-new","(error, path)",""],["new","ActionController::Live::SSE","ActionController/Live/SSE.html#method-c-new","(stream, options = {})",""],["new","ActionController::Metal","ActionController/Metal.html#method-c-new","()",""],["new","ActionController::Middleware","ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware","ActionController/Middleware.html#method-i-new","(app)",""],["new","ActionController::Middleware::ActionMiddleware","ActionController/Middleware/ActionMiddleware.html#method-c-new","(controller, app)",""],["new","ActionController::MimeResponds::Collector","ActionController/MimeResponds/Collector.html#method-c-new","(mimes, variant = nil)",""],["new","ActionController::MissingRenderer","ActionController/MissingRenderer.html#method-c-new","(format)",""],["new","ActionController::Parameters","ActionController/Parameters.html#method-c-new","(attributes = nil)","<p>Returns a new instance of <code>ActionController::Parameters</code>. Also,\nsets the <code>permitted</code> attribute to the default …\n"],["new","ActionController::RequestForgeryProtection::ProtectionMethods::Exception","ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html#method-c-new","(controller)",""],["new","ActionController::RequestForgeryProtection::ProtectionMethods::NullSession","ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html#method-c-new","(controller)",""],["new","ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession","ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html#method-c-new","(controller)",""],["new","ActionDispatch::Callbacks","ActionDispatch/Callbacks.html#method-c-new","(app)",""],["new","ActionDispatch::Cookies","ActionDispatch/Cookies.html#method-c-new","(app)",""],["new","ActionDispatch::Cookies::VerifyAndUpgradeLegacySignedMessage","ActionDispatch/Cookies/VerifyAndUpgradeLegacySignedMessage.html#method-c-new","(*args)",""],["new","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-c-new","(app, routes_app = nil)",""],["new","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-c-new","(env, exception)",""],["new","ActionDispatch::FileHandler","ActionDispatch/FileHandler.html#method-c-new","(root, cache_control)",""],["new","ActionDispatch::Flash","ActionDispatch/Flash.html#method-c-new","(app)",""],["new","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-c-new","(env)",""],["new","ActionDispatch::Http::ParameterFilter","ActionDispatch/Http/ParameterFilter.html#method-c-new","(filters = [])",""],["new","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-c-new","(env)",""],["new","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-c-new","(app)","<p>Create and initialize a new Session instance.\n"],["new","ActionDispatch::Journey::Format","ActionDispatch/Journey/Format.html#method-c-new","(parts)",""],["new","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-c-new","(*args)",""],["new","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-c-new","(klass_or_name, *args, &block)",""],["new","ActionDispatch::ParamsParser","ActionDispatch/ParamsParser.html#method-c-new","(app, parsers = {})",""],["new","ActionDispatch::ParamsParser::ParseError","ActionDispatch/ParamsParser/ParseError.html#method-c-new","(message, original_exception)",""],["new","ActionDispatch::PublicExceptions","ActionDispatch/PublicExceptions.html#method-c-new","(public_path)",""],["new","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-c-new","(store = Rails.cache)",""],["new","ActionDispatch::RailsMetaStore","ActionDispatch/RailsMetaStore.html#method-c-new","(store = Rails.cache)",""],["new","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-new","(app, condition=nil)",""],["new","ActionDispatch::RemoteIp","ActionDispatch/RemoteIp.html#method-c-new","(app, check_ip_spoofing = true, custom_proxies = nil)","<p>Create a new <code>RemoteIp</code> middleware instance.\n<p>The <code>check_ip_spoofing</code> option is on by default. When on, an …\n"],["new","ActionDispatch::RemoteIp::GetIp","ActionDispatch/RemoteIp/GetIp.html#method-c-new","(env, middleware)",""],["new","ActionDispatch::Request","ActionDispatch/Request.html#method-c-new","(env)",""],["new","ActionDispatch::RequestId","ActionDispatch/RequestId.html#method-c-new","(app)",""],["new","ActionDispatch::Response","ActionDispatch/Response.html#method-c-new","(status = 200, header = {}, body = [])",""],["new","ActionDispatch::Response::RackBody","ActionDispatch/Response/RackBody.html#method-c-new","(response)",""],["new","ActionDispatch::Routing::ConsoleFormatter","ActionDispatch/Routing/ConsoleFormatter.html#method-c-new","()",""],["new","ActionDispatch::Routing::HtmlTableFormatter","ActionDispatch/Routing/HtmlTableFormatter.html#method-c-new","(view)",""],["new","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-new","()",""],["new","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-c-new","(request_class = ActionDispatch::Request)",""],["new","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-c-new","(*)",""],["new","ActionDispatch::SSL","ActionDispatch/SSL.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::CacheStore","ActionDispatch/Session/CacheStore.html#method-c-new","(app, options = {})","<p>Create a new store. The cache to use can be passed in the\n<code>:cache</code> option. If it is not specified,\n<code>Rails.cache</code> …\n"],["new","ActionDispatch::Session::Compatibility","ActionDispatch/Session/Compatibility.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-c-new","(app, options={})",""],["new","ActionDispatch::Session::MemCacheStore","ActionDispatch/Session/MemCacheStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::ShowExceptions","ActionDispatch/ShowExceptions.html#method-c-new","(app, exceptions_app)",""],["new","ActionDispatch::Static","ActionDispatch/Static.html#method-c-new","(app, path, cache_control=nil)",""],["new","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","Mime::Type","Mime/Type.html#method-c-new","(string, symbol = nil, synonyms = [])",""],["new_instance_with_inherited_permitted_status","ActionController::Parameters","ActionController/Parameters.html#method-i-new_instance_with_inherited_permitted_status","(hash)",""],["no_routes","ActionDispatch::Routing::ConsoleFormatter","ActionDispatch/Routing/ConsoleFormatter.html#method-i-no_routes","()",""],["no_routes","ActionDispatch::Routing::HtmlTableFormatter","ActionDispatch/Routing/HtmlTableFormatter.html#method-i-no_routes","()",""],["non_xhr_javascript_response?","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-non_xhr_javascript_response-3F","()","<p>Check for cross-origin JavaScript responses.\n"],["nonce","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-nonce","(secret_key, time = Time.now)","<p>Uses an MD5 digest based on time to generate a value to be used only once.\n<p>A server-specified data string …\n"],["normalize","ActionDispatch::MiddlewareStack::Middleware","ActionDispatch/MiddlewareStack/Middleware.html#method-i-normalize","(object)",""],["normalize_argument_to_redirection","ActionDispatch::Assertions::ResponseAssertions","ActionDispatch/Assertions/ResponseAssertions.html#method-i-normalize_argument_to_redirection","(fragment)",""],["normalize_encode_params","ActionDispatch::Http::Parameters","ActionDispatch/Http/Parameters.html#method-i-normalize_encode_params","(params)","<p>Convert nested Hash to HashWithIndifferentAccess.\n"],["normalize_host","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-normalize_host","(_host, options)",""],["normalize_name","ActionDispatch::Routing::Mapper","ActionDispatch/Routing/Mapper.html#method-c-normalize_name","(name)",""],["normalize_path","ActionDispatch::Routing::Mapper","ActionDispatch/Routing/Mapper.html#method-c-normalize_path","(path)","<p>Invokes Journey::Router::Utils.normalize_path and ensure that (:locale)\nbecomes (/:locale) instead of …\n"],["normalize_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-normalize_port","(port, protocol)",""],["normalize_protocol","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-normalize_protocol","(protocol)",""],["not_modified?","ActionDispatch::Http::Cache::Request","ActionDispatch/Http/Cache/Request.html#method-i-not_modified-3F","(modified_at)",""],["notice","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-notice","()","<p>Convenience accessor for <code>flash[:notice]</code>.\n"],["notice=","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-notice-3D","(message)","<p>Convenience accessor for <code>flash[:notice]=</code>.\n"],["now","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-now","()","<p>Sets a flash that will not be available to the next action, only to the\ncurrent.\n\n<pre>flash.now[:message] = ...</pre>\n"],["now_is_loaded?","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-now_is_loaded-3F","()",""],["opaque","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-opaque","(secret_key)","<p>Opaque based on random generation - but changing each request?\n"],["open","ActionDispatch::Http::UploadedFile","ActionDispatch/Http/UploadedFile.html#method-i-open","()","<p>Shortcut for <code>tempfile.open</code>.\n"],["open","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-i-open","(key)",""],["open_session","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-open_session","()","<p>Open a new session instance. If a block is given, the new session is\nyielded to the block before being …\n"],["optimize_routes_generation?","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-optimize_routes_generation-3F","()",""],["optimize_routes_generation?","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-optimize_routes_generation-3F","()",""],["optimize_routes_generation?","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-optimize_routes_generation-3F","()",""],["optional_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-optional_port","()","<p>Returns a number port suffix like 8080 if the port number of this request\nis not the default HTTP port …\n"],["original_exception","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-original_exception","(exception)",""],["original_fullpath","ActionDispatch::Request","ActionDispatch/Request.html#method-i-original_fullpath","()","<p>Returns a <code>String</code> with the last requested path including their\nparams.\n\n<pre># get &#39;/foo&#39;\nrequest.original_fullpath ...</pre>\n"],["original_url","ActionDispatch::Request","ActionDispatch/Request.html#method-i-original_url","()","<p>Returns the original request URL as a <code>String</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># get &quot;/articles?page=2&quot;</span>\n<span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">original_url</span> <span class=\"ruby-comment\"># =&gt; &quot;http://www.example.com/articles?page=2&quot;</span>\n</pre>\n"],["parameter_filter","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter","()",""],["parameter_filter_for","ActionDispatch::Http::FilterParameters","ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter_for","(filters)",""],["parameterize","ActionDispatch::Assertions::ResponseAssertions","ActionDispatch/Assertions/ResponseAssertions.html#method-i-parameterize","(value)","<p>Proxy to to_param if the object will respond to it.\n"],["parameters","ActionDispatch::Http::Parameters","ActionDispatch/Http/Parameters.html#method-i-parameters","()","<p>Returns both GET and POST parameters in a single hash.\n"],["paramify_values","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-paramify_values","(hash_or_array_or_value)",""],["params","ActionController::Metal","ActionController/Metal.html#method-i-params","()",""],["params","ActionController::StrongParameters","ActionController/StrongParameters.html#method-i-params","()","<p>Returns a new ActionController::Parameters object that has been\ninstantiated with the <code>request.parameters</code> …\n"],["params","ActionDispatch::Http::Parameters","ActionDispatch/Http/Parameters.html#method-i-params","()",""],["params=","ActionController::Metal","ActionController/Metal.html#method-i-params-3D","(val)",""],["params=","ActionController::StrongParameters","ActionController/StrongParameters.html#method-i-params-3D","(value)","<p>Assigns the given <code>value</code> to the <code>params</code> hash. If\n<code>value</code> is a Hash, this will create an\nActionController::Parameters …\n"],["params_array_from","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-params_array_from","(raw_params)","<p>Takes raw_params and turns it into an array of parameters\n"],["parse","Mime::Type","Mime/Type.html#method-i-parse","(accept_header)",""],["parse_data_with_trailing_star","Mime::Type","Mime/Type.html#method-i-parse_data_with_trailing_star","(input)","<p>For an input of <code>&#39;text&#39;</code>, returns <code>[Mime::JSON,\nMime::XML, Mime::ICS, Mime::HTML, Mime::CSS, Mime::CSV</code> …\n"],["parse_formatted_parameters","ActionDispatch::ParamsParser","ActionDispatch/ParamsParser.html#method-i-parse_formatted_parameters","(env)",""],["parse_query","ActionDispatch::Request","ActionDispatch/Request.html#method-i-parse_query","(qs)",""],["parse_trailing_star","Mime::Type","Mime/Type.html#method-i-parse_trailing_star","(accept_header)",""],["pass_response","ActionDispatch::ShowExceptions","ActionDispatch/ShowExceptions.html#method-i-pass_response","(status)",""],["patch","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-patch","(action, *args)","<p>Simulate a PATCH request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["patch","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-patch","(path, parameters = nil, headers_or_env = nil)","<p>Performs a PATCH request with the given parameters. See <code>#get</code>\nfor more details.\n"],["patch","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-patch","(*args, &block)","<p>Define a route that only recognizes HTTP PATCH. For supported arguments,\nsee match\n\n<pre>patch &#39;bacon&#39;, to: ...</pre>\n"],["patch?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-patch-3F","()","<p>Is this a PATCH request? Equivalent to <code>request.request_method ==\n:patch</code>.\n"],["patch_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-patch_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a PATCH request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["path","ActionDispatch::Http::UploadedFile","ActionDispatch/Http/UploadedFile.html#method-i-path","()","<p>Shortcut for <code>tempfile.path</code>.\n"],["path","ActionDispatch::Routing::PathRedirect","ActionDispatch/Routing/PathRedirect.html#method-i-path","(params, request)",""],["path","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-path","()",""],["path=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-path-3D","(path)",""],["path_for","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-path_for","(options)",""],["path_parameters","ActionDispatch::Http::Parameters","ActionDispatch/Http/Parameters.html#method-i-path_parameters","()","<p>Returns a hash with the parameters used to form the path of the request.\nReturned hash keys are strings: …\n"],["perform_write","ActionController::Live::SSE","ActionController/Live/SSE.html#method-i-perform_write","(json, options)",""],["performed?","ActionController::Metal","ActionController/Metal.html#method-i-performed-3F","()","<p>Tests if render or redirect has already happened.\n"],["permanent","ActionDispatch::Cookies::ChainedCookieJars","ActionDispatch/Cookies/ChainedCookieJars.html#method-i-permanent","()","<p>Returns a jar that&#39;ll automatically set the assigned cookies to have an\nexpiration date 20 years …\n"],["permit","ActionController::Parameters","ActionController/Parameters.html#method-i-permit","(*filters)","<p>Returns a new <code>ActionController::Parameters</code> instance that\nincludes only the given <code>filters</code> and sets the …\n"],["permit!","ActionController::Parameters","ActionController/Parameters.html#method-i-permit-21","()","<p>Sets the <code>permitted</code> attribute to <code>true</code>. This can be\nused to pass mass assignment. Returns <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["permitted=","ActionController::Parameters","ActionController/Parameters.html#method-i-permitted-3D","(new_permitted)",""],["permitted?","ActionController::Parameters","ActionController/Parameters.html#method-i-permitted-3F","()","<p>Returns <code>true</code> if the parameter is permitted, <code>false</code>\notherwise.\n\n<pre>params = ActionController::Parameters.new ...</pre>\n"],["permitted_scalar?","ActionController::Parameters","ActionController/Parameters.html#method-i-permitted_scalar-3F","(value)",""],["permitted_scalar_filter","ActionController::Parameters","ActionController/Parameters.html#method-i-permitted_scalar_filter","(params, key)",""],["persistent_session_id!","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-i-persistent_session_id-21","(data, sid=nil)",""],["pick_template_for_etag","ActionController::EtagWithTemplateDigest","ActionController/EtagWithTemplateDigest.html#method-i-pick_template_for_etag","(options)",""],["polymorphic_path","ActionDispatch::Routing::PolymorphicRoutes","ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_path","(record_or_hash_or_array, options = {})","<p>Returns the path component of a URL for the given record. It uses\n<code>polymorphic_url</code> with <code>routing_type:</code> …\n"],["polymorphic_path_for_action","ActionDispatch::Routing::PolymorphicRoutes","ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_path_for_action","(action, record_or_hash, options)",""],["polymorphic_url","ActionDispatch::Routing::PolymorphicRoutes","ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_url","(record_or_hash_or_array, options = {})","<p>Constructs a call to a named RESTful route for the given record and returns\nthe resulting URL string. …\n"],["polymorphic_url_for_action","ActionDispatch::Routing::PolymorphicRoutes","ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_url_for_action","(action, record_or_hash, options)",""],["port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-port","()","<p>Returns the port number of this request as an integer.\n"],["port=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-port-3D","(number)",""],["port_string","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-port_string","()","<p>Returns a string port suffix, including colon, like “:8080” if the port\nnumber of this request …\n"],["post","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-post","(action, *args)","<p>Simulate a POST request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["post","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-post","(path, parameters = nil, headers_or_env = nil)","<p>Performs a POST request with the given parameters. See <code>#get</code>\nfor more details.\n"],["post","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-post","(*args, &block)","<p>Define a route that only recognizes HTTP POST. For supported arguments, see\nmatch\n\n<pre>post &#39;bacon&#39;, to: &#39;food#bacon&#39;</pre>\n"],["post?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-post-3F","()","<p>Is this a POST request? Equivalent to <code>request.request_method_symbol\n== :post</code>.\n"],["post_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-post_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a POST request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["prepare!","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-prepare-21","()","<p>Execute all prepare callbacks.\n"],["prepare!","ActionDispatch::Response","ActionDispatch/Response.html#method-i-prepare-21","()",""],["prepare_cache_control!","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-prepare_cache_control-21","()",""],["prepend","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-prepend","(&block)",""],["prepend_after_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-prepend_after_action","","<p>Prepend a callback after actions. See _insert_callbacks for parameter\ndetails.\n"],["prepend_around_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-prepend_around_action","","<p>Prepend a callback around actions. See _insert_callbacks for parameter\ndetails.\n"],["prepend_before_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-prepend_before_action","","<p>Prepend a callback before actions. See _insert_callbacks for parameter\ndetails.\n"],["process","AbstractController::Base","AbstractController/Base.html#method-i-process","(action, *args)","<p>Calls the action going through the entire action dispatch stack.\n<p>The actual method that is called is determined …\n"],["process","ActionController::Live","ActionController/Live.html#method-i-process","(name)",""],["process","ActionController::Middleware","ActionController/Middleware.html#method-i-process","(action)",""],["process","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-process","(*args)",""],["process","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-process","(action, http_method = 'GET', *args)","<p>Simulate a HTTP request to <code>action</code> by specifying request\nmethod, parameters and set/volley the response. …\n"],["process","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-process","(method, path, parameters = nil, headers_or_env = nil)","<p>Performs the actual request.\n"],["process_action","AbstractController::Base","AbstractController/Base.html#method-i-process_action","(method_name, *args)","<p>Call the action. Override this in a subclass to modify the behavior around\nprocessing an action. This …\n"],["process_action","AbstractController::Callbacks","AbstractController/Callbacks.html#method-i-process_action","(*args)","<p>Override AbstractController::Base&#39;s process_action to run the\nprocess_action callbacks around the …\n"],["process_action","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-process_action","(*args)",""],["process_action","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-process_action","(event)",""],["process_action","ActionController::ParamsWrapper","ActionController/ParamsWrapper.html#method-i-process_action","(*args)","<p>Performs parameters wrapping upon the request. Will be called automatically\nby the metal call stack. …\n"],["process_action","ActionController::Rescue","ActionController/Rescue.html#method-i-process_action","(*args)",""],["protect_against_forgery?","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-protect_against_forgery-3F","()","<p>Checks if the controller allows forgery protection.\n"],["protect_from_forgery","ActionController::RequestForgeryProtection::ClassMethods","ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protect_from_forgery","(options = {})","<p>Turn on request forgery protection. Bear in mind that GET and HEAD requests\nare not checked.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">ApplicationController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["protected_instance_variables","ActionController::Base","ActionController/Base.html#method-c-protected_instance_variables","()",""],["protection_method_class","ActionController::RequestForgeryProtection::ClassMethods","ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protection_method_class","(name)",""],["protocol","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-protocol","()","<p>Returns &#39;https://&#39; if this is an SSL request and &#39;http://&#39;\notherwise.\n"],["put","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-put","(action, *args)","<p>Simulate a PUT request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["put","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-put","(path, parameters = nil, headers_or_env = nil)","<p>Performs a PUT request with the given parameters. See <code>#get</code> for\nmore details.\n"],["put","ActionDispatch::Routing::Mapper::HttpHelpers","ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-put","(*args, &block)","<p>Define a route that only recognizes HTTP PUT. For supported arguments, see\nmatch\n\n<pre>put &#39;bacon&#39;, to: &#39;food#bacon&#39;</pre>\n"],["put?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-put-3F","()","<p>Is this a PUT request? Equivalent to <code>request.request_method_symbol ==\n:put</code>.\n"],["put_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-put_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a PUT request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["query_parameters","ActionDispatch::Request","ActionDispatch/Request.html#method-i-query_parameters","()",""],["rack_app","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-rack_app","()",""],["rack_cookies","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-rack_cookies","()",""],["rack_response","ActionDispatch::Response","ActionDispatch/Response.html#method-i-rack_response","(status, header)",""],["rails_app?","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-rails_app-3F","(app)",""],["raw_host_with_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-raw_host_with_port","()","<p>Returns the host for this request, such as “example.com”.\n"],["raw_params","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-raw_params","(auth)","<p>This method takes an authorization body and splits up the key-value pairs\nby the standardized <code>:</code>, <code>;</code>, or …\n"],["raw_post","ActionDispatch::Request","ActionDispatch/Request.html#method-i-raw_post","()","<p>Read the request body. This is useful for web services that need to work\nwith raw requests directly. …\n"],["read","ActionDispatch::Http::UploadedFile","ActionDispatch/Http/UploadedFile.html#method-i-read","(length=nil, buffer=nil)","<p>Shortcut for <code>tempfile.read</code>.\n"],["read","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-i-read","(key)",""],["read","ActionDispatch::RailsMetaStore","ActionDispatch/RailsMetaStore.html#method-i-read","(key)",""],["read_fragment","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-read_fragment","(key, options = nil)","<p>Reads a cached fragment from the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats). …\n"],["real_csrf_token","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-real_csrf_token","(session)",""],["recognize_path","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-recognize_path","(path, environment = {})",""],["recognized_request_for","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-recognized_request_for","(path, extras = {}, msg)","<p>Recognizes the route for a given path.\n"],["recycle!","ActionController::LiveTestResponse","ActionController/LiveTestResponse.html#method-i-recycle-21","()",""],["recycle!","ActionController::TestResponse","ActionController/TestResponse.html#method-i-recycle-21","()",""],["redirect","ActionDispatch::Routing::Redirection","ActionDispatch/Routing/Redirection.html#method-i-redirect","(*args, &block)","<p>Redirect any path to another path:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">get</span> <span class=\"ruby-string\">&quot;/stories&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">redirect</span>(<span class=\"ruby-string\">&quot;/posts&quot;</span>)\n</pre>\n<p>You can also use interpolation …\n"],["redirect_to","ActionController::Flash","ActionController/Flash.html#method-i-redirect_to","(options = {}, response_status_and_flash = {})",""],["redirect_to","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-redirect_to","(*args)",""],["redirect_to","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-redirect_to","(event)",""],["redirect_to","ActionController::Redirecting","ActionController/Redirecting.html#method-i-redirect_to","(options = {}, response_status = {})","<p>Redirects the browser to the target specified in <code>options</code>. This\nparameter can be any one of:\n<p><code>Hash</code> - The …\n"],["redirect_to_https","ActionDispatch::SSL","ActionDispatch/SSL.html#method-i-redirect_to_https","(request)",""],["redirect_to_url","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-redirect_to_url","()",""],["redirect_url","ActionDispatch::Response","ActionDispatch/Response.html#method-i-redirect_url","()",""],["ref","Mime::Type","Mime/Type.html#method-i-ref","()",""],["regexp","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-regexp","()",""],["register","Mime::Type","Mime/Type.html#method-i-register","(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)",""],["register_alias","Mime::Type","Mime/Type.html#method-i-register_alias","(string, symbol, extension_synonyms = [])","<p>Registers an alias that&#39;s not used on mime type lookup, but can be\nreferenced directly. Especially …\n"],["register_callback","Mime::Type","Mime/Type.html#method-i-register_callback","(&block)",""],["registered_original_exception?","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-registered_original_exception-3F","(exception)",""],["remote_addr=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-remote_addr-3D","(addr)",""],["remote_ip","ActionDispatch::Request","ActionDispatch/Request.html#method-i-remote_ip","()","<p>Originating IP address, usually set by the RemoteIp middleware.\n"],["remove","ActionController::Renderers","ActionController/Renderers.html#method-c-remove","(key)","<p>This method is the opposite of add method.\n<p>Usage:\n\n<pre>ActionController::Renderers.remove(:csv)</pre>\n"],["remove_renderer","ActionController","ActionController.html#method-c-remove_renderer","(key)","<p>See <code>Renderers.remove</code>\n"],["render","AbstractController::Rendering","AbstractController/Rendering.html#method-i-render","(*args, &block)","<p>Normalize arguments, options and then delegates render_to_body and sticks\nthe result in self.response_body. …\n"],["render","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-render","(*args)",""],["render","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-render","(status, body, format)",""],["render","ActionDispatch::PublicExceptions","ActionDispatch/PublicExceptions.html#method-i-render","(status, content_type, body)",""],["render_exception","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-render_exception","(env, exception)",""],["render_exception","ActionDispatch::ShowExceptions","ActionDispatch/ShowExceptions.html#method-i-render_exception","(env, exception)",""],["render_format","ActionDispatch::PublicExceptions","ActionDispatch/PublicExceptions.html#method-i-render_format","(status, content_type, body)",""],["render_html","ActionDispatch::PublicExceptions","ActionDispatch/PublicExceptions.html#method-i-render_html","(status)",""],["render_to_body","AbstractController::Rendering","AbstractController/Rendering.html#method-i-render_to_body","(options = {})","<p>Performs the actual template rendering. :api: public\n"],["render_to_body","ActionController::Renderers","ActionController/Renderers.html#method-i-render_to_body","(options)",""],["render_to_body","ActionController::Rendering","ActionController/Rendering.html#method-i-render_to_body","(options = {})",""],["render_to_string","AbstractController::Rendering","AbstractController/Rendering.html#method-i-render_to_string","(*args, &block)","<p>Raw rendering of a template to a string.\n<p>It is similar to render, except that it does not set the response_body …\n"],["render_to_string","ActionController::Rendering","ActionController/Rendering.html#method-i-render_to_string","(*)","<p>Overwrite render_to_string because body can now be set to a rack body.\n"],["rendered_format","AbstractController::Rendering","AbstractController/Rendering.html#method-i-rendered_format","()","<p>Returns Content-Type of rendered content :api: public\n"],["reqs","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-reqs","()",""],["request","ActionController::Base","ActionController/Base.html#method-i-request","","<p>Returns an ActionDispatch::Request instance that represents the current\nrequest.\n"],["request_http_basic_authentication","ActionController::HttpAuthentication::Basic::ControllerMethods","ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-request_http_basic_authentication","(realm = \"Application\")",""],["request_http_digest_authentication","ActionController::HttpAuthentication::Digest::ControllerMethods","ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-request_http_digest_authentication","(realm = \"Application\", message = nil)","<p>Render output including the HTTP Digest authentication header\n"],["request_http_token_authentication","ActionController::HttpAuthentication::Token::ControllerMethods","ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-request_http_token_authentication","(realm = \"Application\")",""],["request_method","ActionDispatch::Request","ActionDispatch/Request.html#method-i-request_method","()","<p>Returns the HTTP method that the application should see. In the case where\nthe method was overridden …\n"],["request_method=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-request_method-3D","(method)",""],["request_method_symbol","ActionDispatch::Request","ActionDispatch/Request.html#method-i-request_method_symbol","()","<p>Returns a symbol form of the #request_method\n"],["request_parameters","ActionDispatch::Request","ActionDispatch/Request.html#method-i-request_parameters","()",""],["request_uri=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-request_uri-3D","(uri)",""],["request_via_redirect","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-request_via_redirect","(http_method, path, parameters = nil, headers_or_env = nil)","<p>Performs a request using the specified method, following any subsequent\nredirect. Note that the redirects …\n"],["require","ActionController::Parameters","ActionController/Parameters.html#method-i-require","(key)","<p>Ensures that a parameter is present. If it&#39;s present, returns the\nparameter at the given <code>key</code>, otherwise …\n"],["required","ActionController::Parameters","ActionController/Parameters.html#method-i-required","(key)","<p>Alias of #require.\n"],["required_path","ActionDispatch::Journey::Format","ActionDispatch/Journey/Format.html#method-c-required_path","(symbol)",""],["required_segment","ActionDispatch::Journey::Format","ActionDispatch/Journey/Format.html#method-c-required_segment","(symbol)",""],["rescue_template","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-rescue_template","()",""],["rescue_with_handler","ActionController::Rescue","ActionController/Rescue.html#method-i-rescue_with_handler","(exception)",""],["reset!","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-reset-21","()","<p>Reset the current session. This is useful for testing multiple sessions in\na single test case.\n"],["reset!","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-reset-21","()","<p>Resets the instance. This can be used to reset the state information in an\nexisting session instance, …\n"],["reset_session","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-reset_session","()",""],["reset_session","ActionDispatch::Request","ActionDispatch/Request.html#method-i-reset_session","()","<p>TODO This should be broken apart into AD::Request::Session and probably be\nincluded by the session middleware. …\n"],["reset_template_assertion","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-reset_template_assertion","()",""],["resolve","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-c-resolve","(uri)",""],["resolve","ActionDispatch::RailsMetaStore","ActionDispatch/RailsMetaStore.html#method-c-resolve","(uri)",""],["resource","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-resource","(*resources, &block)","<p>Sometimes, you have a resource that clients always look up without\nreferencing an ID. A common example, …\n"],["resources","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-resources","(*resources, &block)","<p>In Rails, a resourceful route provides a mapping between HTTP verbs and\nURLs and controller actions. …\n"],["resources_path_names","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-resources_path_names","(options)",""],["respond_to","ActionController::MimeResponds","ActionController/MimeResponds.html#method-i-respond_to","(*mimes)","<p>Without web-service support, an action which collects the data for\ndisplaying a list of people might …\n"],["respond_to","ActionController::MimeResponds::ClassMethods","ActionController/MimeResponds/ClassMethods.html#method-i-respond_to","(*)",""],["respond_to?","ActionDispatch::Integration::Runner","ActionDispatch/Integration/Runner.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActionDispatch::Response::RackBody","ActionDispatch/Response/RackBody.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_with","ActionController::MimeResponds","ActionController/MimeResponds.html#method-i-respond_with","(*)",""],["response","ActionController::Base","ActionController/Base.html#method-i-response","","<p>Returns an ActionDispatch::Response that represents the current response.\n"],["response","ActionController::MimeResponds::Collector","ActionController/MimeResponds/Collector.html#method-i-response","()",""],["response_body=","ActionController::Live","ActionController/Live.html#method-i-response_body-3D","(body)",""],["response_body=","ActionController::Metal","ActionController/Metal.html#method-i-response_body-3D","(body)",""],["response_body=","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-response_body-3D","(body)",""],["response_code","ActionDispatch::Response","ActionDispatch/Response.html#method-i-response_code","()","<p>The response code of the request.\n"],["result","ActionDispatch::Routing::ConsoleFormatter","ActionDispatch/Routing/ConsoleFormatter.html#method-i-result","()",""],["result","ActionDispatch::Routing::HtmlTableFormatter","ActionDispatch/Routing/HtmlTableFormatter.html#method-i-result","()",""],["rewind","ActionDispatch::Http::UploadedFile","ActionDispatch/Http/UploadedFile.html#method-i-rewind","()","<p>Shortcut for <code>tempfile.rewind</code>.\n"],["rewrite_param_values","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-rewrite_param_values","(array_params)","<p>This removes the <code>&quot;</code> characters wrapping the value.\n"],["root","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-root","(options = {})","<p>You can specify what Rails should route “/” to with the root method:\n\n<pre>root to: &#39;pages#main&#39;</pre>\n<p>For …\n"],["root","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-root","(path, options={})",""],["routes_inspector","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-routes_inspector","(exception)",""],["scope","ActionDispatch::Routing::Mapper::Scoping","ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope","(*args)","<p>Scopes a set of routes to the given default options.\n<p>Take the following route definition as an example: …\n"],["secret_token","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-secret_token","(request)",""],["section","ActionDispatch::Routing::ConsoleFormatter","ActionDispatch/Routing/ConsoleFormatter.html#method-i-section","(routes)",""],["section","ActionDispatch::Routing::HtmlTableFormatter","ActionDispatch/Routing/HtmlTableFormatter.html#method-i-section","(routes)",""],["section_title","ActionDispatch::Routing::ConsoleFormatter","ActionDispatch/Routing/ConsoleFormatter.html#method-i-section_title","(title)",""],["section_title","ActionDispatch::Routing::HtmlTableFormatter","ActionDispatch/Routing/HtmlTableFormatter.html#method-i-section_title","(title)",""],["select!","ActionController::Parameters","ActionController/Parameters.html#method-i-select-21","(&block)","<p>Equivalent to Hash#keep_if, but returns nil if no changes were made.\n"],["send_action","ActionController::ImplicitRender","ActionController/ImplicitRender.html#method-i-send_action","(method, *args)",""],["send_data","ActionController::DataStreaming","ActionController/DataStreaming.html#method-i-send_data","(data, options = {})","<p>Sends the given binary data to the browser. This method is similar to\n<code>render plain: data</code>, but also allows …\n"],["send_data","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-send_data","(data, options = {})",""],["send_data","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-send_data","(event)",""],["send_file","ActionController::DataStreaming","ActionController/DataStreaming.html#method-i-send_file","(path, options = {})","<p>Sends the file. This uses a server-appropriate method (such as X-Sendfile)\nvia the Rack::Sendfile middleware. …\n"],["send_file","ActionController::Instrumentation","ActionController/Instrumentation.html#method-i-send_file","(path, options={})",""],["send_file","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-send_file","(event)",""],["send_file_headers!","ActionController::DataStreaming","ActionController/DataStreaming.html#method-i-send_file_headers-21","(options)",""],["sending!","ActionDispatch::Response","ActionDispatch/Response.html#method-i-sending-21","()",""],["sending?","ActionDispatch::Response","ActionDispatch/Response.html#method-i-sending-3F","()",""],["sent!","ActionDispatch::Response","ActionDispatch/Response.html#method-i-sent-21","()",""],["sent?","ActionDispatch::Response","ActionDispatch/Response.html#method-i-sent-3F","()",""],["serialize","ActionDispatch::Cookies::SerializedCookieJars","ActionDispatch/Cookies/SerializedCookieJars.html#method-i-serialize","(name, value)",""],["serializer","ActionDispatch::Cookies::SerializedCookieJars","ActionDispatch/Cookies/SerializedCookieJars.html#method-i-serializer","()",""],["server_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-server_port","()",""],["server_software","ActionDispatch::Request","ActionDispatch/Request.html#method-i-server_software","()","<p>Returns the lowercase name of the HTTP server software.\n"],["session","ActionDispatch::TestProcess","ActionDispatch/TestProcess.html#method-i-session","()",""],["session_options=","ActionDispatch::Request","ActionDispatch/Request.html#method-i-session_options-3D","(options)",""],["set_conditional_cache_control!","ActionDispatch::Http::Cache::Response","ActionDispatch/Http/Cache/Response.html#method-i-set_conditional_cache_control-21","()",""],["set_cookie","ActionDispatch::Response","ActionDispatch/Response.html#method-i-set_cookie","(key, value)",""],["set_cookie","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-i-set_cookie","(env, session_id, cookie)",""],["set_member_mappings_for_resource","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-set_member_mappings_for_resource","()",""],["set_response!","ActionController::Live","ActionController/Live.html#method-i-set_response-21","(request)",""],["set_response!","ActionController::RackDelegation","ActionController/RackDelegation.html#method-i-set_response-21","(request)",""],["set_session","ActionDispatch::Session::CacheStore","ActionDispatch/Session/CacheStore.html#method-i-set_session","(env, sid, session, options)","<p>Set a session in the cache.\n"],["set_session","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-i-set_session","(env, sid, session_data, options)",""],["setup_controller_request_and_response","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-setup_controller_request_and_response","()",""],["setup_subscriptions","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-setup_subscriptions","()",""],["shallow","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow","()",""],["shallow?","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow-3F","()",""],["show_detailed_exceptions?","ActionController::Rescue","ActionController/Rescue.html#method-i-show_detailed_exceptions-3F","()","<p>Override this method if you want to customize when detailed exceptions must\nbe shown. This method is …\n"],["signed","ActionDispatch::Cookies::ChainedCookieJars","ActionDispatch/Cookies/ChainedCookieJars.html#method-i-signed","()","<p>Returns a jar that&#39;ll automatically generate a signed representation of\ncookie value and verify it …\n"],["signed_or_encrypted","ActionDispatch::Cookies::ChainedCookieJars","ActionDispatch/Cookies/ChainedCookieJars.html#method-i-signed_or_encrypted","()","<p>Returns the <code>signed</code> or <code>encrypted</code> jar, preferring\n<code>encrypted</code> if <code>secret_key_base</code> is set. Used by\nActionDispatch::Session::CookieStore …\n"],["size","ActionDispatch::Http::UploadedFile","ActionDispatch/Http/UploadedFile.html#method-i-size","()","<p>Shortcut for <code>tempfile.size</code>.\n"],["size","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-size","()",""],["skip_action_callback","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-skip_action_callback","(*names)","<p>Skip before, after, and around action callbacks matching any of the names.\n<p>Parameters\n<p><code>names</code> - A list of …\n"],["skip_after_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-skip_after_action","","<p>Skip a callback after actions. See _insert_callbacks for parameter details.\n"],["skip_around_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-skip_around_action","","<p>Skip a callback around actions. See _insert_callbacks for parameter\ndetails.\n"],["skip_before_action","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-skip_before_action","","<p>Skip a callback before actions. See _insert_callbacks for parameter\ndetails.\n"],["skip_filter","AbstractController::Callbacks::ClassMethods","AbstractController/Callbacks/ClassMethods.html#method-i-skip_filter","(*names)",""],["slice","ActionController::Parameters","ActionController/Parameters.html#method-i-slice","(*keys)","<p>Returns a new <code>ActionController::Parameters</code> instance that\nincludes only the given <code>keys</code>. If the given  …\n"],["source_extracts","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-source_extracts","()",""],["source_fragment","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-source_fragment","(path, line)",""],["stale?","ActionController::ConditionalGet","ActionController/ConditionalGet.html#method-i-stale-3F","(record_or_options, additional_options = {})","<p>Sets the <code>etag</code> and/or <code>last_modified</code> on the\nresponse and checks it against the client request. If the request …\n"],["stale_session_check!","ActionDispatch::Session::StaleSessionCheck","ActionDispatch/Session/StaleSessionCheck.html#method-i-stale_session_check-21","()",""],["standard_port","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-standard_port","()","<p>Returns the standard port number for this request&#39;s protocol.\n"],["standard_port?","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-standard_port-3F","()","<p>Returns whether this request is using the standard port\n"],["start_processing","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-start_processing","(event)",""],["status","ActionController::Metal","ActionController/Metal.html#method-i-status","()",""],["status=","ActionController::Metal","ActionController/Metal.html#method-i-status-3D","(status)",""],["status=","ActionDispatch::Response","ActionDispatch/Response.html#method-i-status-3D","(status)","<p>Sets the HTTP status code.\n"],["status_code","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-status_code","()",""],["status_code_for_exception","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-c-status_code_for_exception","(class_name)",""],["status_message","ActionDispatch::Response","ActionDispatch/Response.html#method-i-status_message","()",""],["stderr_logger","ActionDispatch::DebugExceptions","ActionDispatch/DebugExceptions.html#method-i-stderr_logger","()",""],["stringify_array","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-stringify_array","(array)",""],["subdomain","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-subdomain","(tld_length = @@tld_length)","<p>Returns all the subdomains as a string, so <code>&quot;dev.www&quot;</code>\nwould be returned for “dev.www.rubyonrails.org …\n"],["subdomains","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-subdomains","(tld_length = @@tld_length)","<p>Returns all the subdomains as an array, so <code>[&quot;dev&quot;,\n&quot;www&quot;]</code> would be returned for “dev. …\n"],["supports_path?","AbstractController::Base","AbstractController/Base.html#method-c-supports_path-3F","()","<p>Returns true if the given controller is capable of rendering a path. A\nsubclass of +AbstractController::Base+ …\n"],["swap","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-swap","(target, *args, &block)",""],["symbolized_path_parameters","ActionDispatch::Http::Parameters","ActionDispatch/Http/Parameters.html#method-i-symbolized_path_parameters","()",""],["symbols","Mime::Mimes","Mime/Mimes.html#method-i-symbols","()",""],["t","AbstractController::Translation","AbstractController/Translation.html#method-i-t","(*args)",""],["teardown_subscriptions","ActionController::TemplateAssertions","ActionController/TemplateAssertions.html#method-i-teardown_subscriptions","()",""],["tests","ActionController::TestCase::Behavior::ClassMethods","ActionController/TestCase/Behavior/ClassMethods.html#method-i-tests","(controller_class)","<p>Sets the controller class name. Useful if the name can&#39;t be inferred\nfrom test class. Normalizes …\n"],["to_a","ActionDispatch::Response","ActionDispatch/Response.html#method-i-to_a","()","<p>Turns the Response into a Rack-compatible array of the status, headers, and\nbody. Allows explict splatting: …\n"],["to_a","Mime::Type","Mime/Type.html#method-i-to_a","()",""],["to_ary","ActionDispatch::Response","ActionDispatch/Response.html#method-i-to_ary","()","<p>Be super clear that a response object is not an Array. Defining this would\nmake implicit splatting work, …\n"],["to_ary","ActionDispatch::Response::RackBody","ActionDispatch/Response/RackBody.html#method-i-to_ary","()",""],["to_ary","Mime::Type","Mime/Type.html#method-i-to_ary","()",""],["to_cleanup","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-to_cleanup","(*args, &block)","<p>Add a cleanup callback. Cleanup callbacks are run after each request is\ncomplete (after #close is called …\n"],["to_h","ActionController::Parameters","ActionController/Parameters.html#method-i-to_h","()","<p>Returns a safe <code>Hash</code> representation of this parameter with all\nunpermitted keys removed.\n\n<pre>params = ActionController::Parameters.new({ ...</pre>\n"],["to_hash","ActionDispatch::Flash::FlashHash","ActionDispatch/Flash/FlashHash.html#method-i-to_hash","()",""],["to_path","ActionDispatch::Response::RackBody","ActionDispatch/Response/RackBody.html#method-i-to_path","()",""],["to_prepare","ActionDispatch::Reloader","ActionDispatch/Reloader.html#method-c-to_prepare","(*args, &block)","<p>Add a prepare callback. Prepare callbacks are run before each request,\nprior to ActionDispatch::Callback&#39;s …\n"],["to_s","ActionDispatch::RemoteIp::GetIp","ActionDispatch/RemoteIp/GetIp.html#method-i-to_s","()","<p>Memoizes the value returned by #calculate_ip and returns it for\nActionDispatch::Request to use.\n"],["to_s","Mime::Type","Mime/Type.html#method-i-to_s","()",""],["to_str","Mime::Type","Mime/Type.html#method-i-to_str","()",""],["to_sym","Mime::Type","Mime/Type.html#method-i-to_sym","()",""],["token_and_options","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-token_and_options","(request)","<p>Parses the token and options out of the token authorization header. If the\nheader looks like this:\n\n<pre>Authorization: ...</pre>\n"],["token_params_from","ActionController::HttpAuthentication::Token","ActionController/HttpAuthentication/Token.html#method-i-token_params_from","(auth)",""],["traces","ActionDispatch::ExceptionWrapper","ActionDispatch/ExceptionWrapper.html#method-i-traces","()",""],["transform_values","ActionController::Parameters","ActionController/Parameters.html#method-i-transform_values","()","<p>Returns a new <code>ActionController::Parameters</code> with the results of\nrunning <code>block</code> once for every value. The …\n"],["translate","AbstractController::Translation","AbstractController/Translation.html#method-i-translate","(*args)","<p>Delegates to <code>I18n.translate</code>. Also aliased as <code>t</code>.\n<p>When the given key starts with a period, it will be scoped …\n"],["unpacked_cookie_data","ActionDispatch::Session::CookieStore","ActionDispatch/Session/CookieStore.html#method-i-unpacked_cookie_data","(env)",""],["unpermitted_keys","ActionController::Parameters","ActionController/Parameters.html#method-i-unpermitted_keys","(params)",""],["unpermitted_parameters","ActionController::LogSubscriber","ActionController/LogSubscriber.html#method-i-unpermitted_parameters","(event)",""],["unpermitted_parameters!","ActionController::Parameters","ActionController/Parameters.html#method-i-unpermitted_parameters-21","(params)",""],["unregister","Mime::Type","Mime/Type.html#method-i-unregister","(symbol)","<p>This method is opposite of register method.\n<p>Usage:\n\n<pre>Mime::Type.unregister(:mobile)</pre>\n"],["unshift","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-unshift","(*args, &block)",""],["url","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-url","()","<p>Returns the complete URL used for this request.\n"],["url_for","ActionController::Metal","ActionController/Metal.html#method-i-url_for","(string)","<p>Basic url_for that can be overridden for more robust functionality\n"],["url_for","ActionDispatch::Http::URL","ActionDispatch/Http/URL.html#method-i-url_for","(options)",""],["url_for","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-url_for","(options, route_name = nil, url_strategy = UNKNOWN)","<p>The <code>options</code> argument must be a hash whose keys are\n<strong>symbols</strong>.\n"],["url_for","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-url_for","(options = nil)","<p>Generate a url based on the options provided, default_url_options and the\nroutes defined in routes.rb. …\n"],["url_helpers","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-url_helpers","(supports_path = true)",""],["url_options","ActionController::UrlFor","ActionController/UrlFor.html#method-i-url_options","()",""],["url_options","ActionDispatch::Integration::Session","ActionDispatch/Integration/Session.html#method-i-url_options","()",""],["url_options","ActionDispatch::IntegrationTest","ActionDispatch/IntegrationTest.html#method-i-url_options","()",""],["url_options","ActionDispatch::Routing::RouteSet","ActionDispatch/Routing/RouteSet.html#method-i-url_options","()",""],["url_options","ActionDispatch::Routing::UrlFor","ActionDispatch/Routing/UrlFor.html#method-i-url_options","()","<p>Hook overridden in controller to add request information with\n`default_url_options`. Application logic …\n"],["use","ActionController::Metal","ActionController/Metal.html#method-c-use","(*args, &block)","<p>Pushes the given Rack middleware and its arguments to the bottom of the\nmiddleware stack.\n"],["use","ActionDispatch::MiddlewareStack","ActionDispatch/MiddlewareStack.html#method-i-use","(*args, &block)",""],["use_accept_header","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-use_accept_header","()",""],["use_renderer","ActionController::Renderers::ClassMethods","ActionController/Renderers/ClassMethods.html#method-i-use_renderer","(*args)",""],["use_renderers","ActionController::Renderers::ClassMethods","ActionController/Renderers/ClassMethods.html#method-i-use_renderers","(*args)",""],["user_agent=","ActionDispatch::TestRequest","ActionDispatch/TestRequest.html#method-i-user_agent-3D","(user_agent)",""],["user_name_and_password","ActionController::HttpAuthentication::Basic","ActionController/HttpAuthentication/Basic.html#method-i-user_name_and_password","(request)",""],["using_match_shorthand?","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-using_match_shorthand-3F","(path, options)",""],["uuid","ActionDispatch::Request","ActionDispatch/Request.html#method-i-uuid","()","<p>Returns the unique request id, which is based on either the X-Request-Id\nheader that can be generated …\n"],["valid_accept_header","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-valid_accept_header","()",""],["valid_authenticity_token?","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-valid_authenticity_token-3F","(session, encoded_masked_token)","<p>Checks the client&#39;s masked token to see if it matches the session\ntoken. Essentially the inverse …\n"],["validate_digest_response","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-validate_digest_response","(request, realm, &password_procedure)","<p>Returns false unless the request credentials response value matches the\nexpected value. First try the …\n"],["validate_nonce","ActionController::HttpAuthentication::Digest","ActionController/HttpAuthentication/Digest.html#method-i-validate_nonce","(secret_key, request, value, seconds_to_timeout=5*60)","<p>Might want a shorter timeout depending on whether the request is a PATCH,\nPUT, or POST, and if client …\n"],["variant=","ActionDispatch::Http::MimeNegotiation","ActionDispatch/Http/MimeNegotiation.html#method-i-variant-3D","(variant)","<p>Sets the variant for template.\n"],["verb","ActionDispatch::Routing::RouteWrapper","ActionDispatch/Routing/RouteWrapper.html#method-i-verb","()",""],["verified_request?","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-verified_request-3F","()","<p>Returns true or false if a request is verified. Checks:\n<p>is it a GET or HEAD request?  Gets should be safe …\n"],["verify_and_upgrade_legacy_signed_message","ActionDispatch::Cookies::VerifyAndUpgradeLegacySignedMessage","ActionDispatch/Cookies/VerifyAndUpgradeLegacySignedMessage.html#method-i-verify_and_upgrade_legacy_signed_message","(name, signed_message)",""],["verify_authenticity_token","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-verify_authenticity_token","()","<p>The actual before_action that is used to verify the CSRF token. Don&#39;t\noverride this directly. Provide …\n"],["verify_same_origin_request","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-verify_same_origin_request","()","<p>If `verify_authenticity_token` was run (indicating that we have forgery\nprotection enabled for this request) …\n"],["version","ActionPack","ActionPack.html#method-c-version","()","<p>Returns the version of the currently loaded ActionPack as a\n<code>Gem::Version</code>\n"],["view_assigns","AbstractController::Rendering","AbstractController/Rendering.html#method-i-view_assigns","()","<p>This method should return a hash with assigns. You can overwrite this\nconfiguration per controller. :api: …\n"],["view_cache_dependencies","ActionController::Caching","ActionController/Caching.html#method-i-view_cache_dependencies","()",""],["view_cache_dependency","ActionController::Caching::ClassMethods","ActionController/Caching/ClassMethods.html#method-i-view_cache_dependency","(&dependency)",""],["visible_action?","ActionController::HideActions::ClassMethods","ActionController/HideActions/ClassMethods.html#method-i-visible_action-3F","(action_name)",""],["widths","ActionDispatch::Routing::ConsoleFormatter","ActionDispatch/Routing/ConsoleFormatter.html#method-i-widths","(routes)",""],["with","AbstractController::Railties::RoutesHelpers","AbstractController/Railties/RoutesHelpers.html#method-c-with","(routes, include_path_helpers = true)",""],["with_default_scope","ActionDispatch::Routing::Mapper::Base","ActionDispatch/Routing/Mapper/Base.html#method-i-with_default_scope","(scope, &block)",""],["with_exclusive_scope","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-with_exclusive_scope","()",""],["with_routing","ActionDispatch::Assertions::RoutingAssertions","ActionDispatch/Assertions/RoutingAssertions.html#method-i-with_routing","()","<p>A helper to make it easier to test different route configurations. This\nmethod temporarily replaces @routes …\n"],["with_scope_level","ActionDispatch::Routing::Mapper::Resources","ActionDispatch/Routing/Mapper/Resources.html#method-i-with_scope_level","(kind)",""],["without_modules","ActionController::Base","ActionController/Base.html#method-c-without_modules","(*modules)","<p>Shortcut helper that returns all the modules included in\nActionController::Base except the ones passed …\n"],["wrap_parameters","ActionController::ParamsWrapper::ClassMethods","ActionController/ParamsWrapper/ClassMethods.html#method-i-wrap_parameters","(name_or_model_or_options, options = {})","<p>Sets the name of the wrapper key, or the model which\n<code>ParamsWrapper</code> would use to determine the attribute …\n"],["write","ActionController::Live::SSE","ActionController/Live/SSE.html#method-i-write","(object, options = {})",""],["write","ActionDispatch::RailsEntityStore","ActionDispatch/RailsEntityStore.html#method-i-write","(body)",""],["write","ActionDispatch::RailsMetaStore","ActionDispatch/RailsMetaStore.html#method-i-write","(key, value)",""],["write_fragment","ActionController::Caching::Fragments","ActionController/Caching/Fragments.html#method-i-write_fragment","(key, content, options = nil)","<p>Writes <code>content</code> to the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats).\n"],["xhr","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-xhr","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xhr","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-xhr","(request_method, path, parameters = nil, headers_or_env = nil)",""],["xhr?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-xhr-3F","()",""],["xml_http_request","ActionController::TestCase::Behavior","ActionController/TestCase/Behavior.html#method-i-xml_http_request","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xml_http_request","ActionDispatch::Integration::RequestHelpers","ActionDispatch/Integration/RequestHelpers.html#method-i-xml_http_request","(request_method, path, parameters = nil, headers_or_env = nil)","<p>Performs an XMLHttpRequest request with the given parameters, mirroring a\nrequest from the Prototype …\n"],["xml_http_request?","ActionDispatch::Request","ActionDispatch/Request.html#method-i-xml_http_request-3F","()","<p>Returns true if the “X-Requested-With” header contains “XMLHttpRequest”\n(case-insensitive), …\n"],["xor_byte_strings","ActionController::RequestForgeryProtection","ActionController/RequestForgeryProtection.html#method-i-xor_byte_strings","(s1, s2)",""],["fsm.css","","lib/action_dispatch/journey/visualizer/fsm_css.html","","<p>body {\n\n<pre>font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, Sans-Serif;\nmargin: 0;</pre>\n<p>}\n"],["fsm.js","","lib/action_dispatch/journey/visualizer/fsm_js.html","","<p>function tokenize(input, callback) {\n\n<pre>while(input.length &gt; 0) {\n  callback(input.match(/^[\\/\\.\\?]|[^\\/\\.\\?]+/)[0]); ...</pre>\n"]]}}