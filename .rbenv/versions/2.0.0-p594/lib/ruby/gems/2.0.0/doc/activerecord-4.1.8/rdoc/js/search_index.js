var search_data = {"index":{"searchIndex":["activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationnotfounderror","associationrelation","associationtypemismatch","associations","aliastracker","association","associationscope","belongstoassociation","belongstopolymorphicassociation","builder","association","belongsto","collectionassociation","hasandbelongstomany","jointableresolver","knownclass","hasmany","hasone","singularassociation","classmethods","collectionassociation","collectionproxy","hasmanyassociation","hasmanythroughassociation","hasoneassociation","hasonethroughassociation","joindependency","aliases","table","joinassociation","joinbase","joinpart","preloader","alreadyloaded","association","belongsto","collectionassociation","hasmany","hasmanythrough","hasone","hasonethrough","nullpreloader","singularassociation","throughassociation","singularassociation","throughassociation","attributeassignment","multiparameterattribute","attributeassignmenterror","attributemethods","attributemethodcache","beforetypecast","classmethods","dirty","generatedattributemethods","primarykey","classmethods","query","read","classmethods","serialization","attribute","behavior","classmethods","classmethods","type","timezoneconversion","classmethods","type","write","classmethods","autosaveassociation","associationbuilderextension","classmethods","base","batches","calculations","callbacks","classmethods","coders","json","yamlcolumn","configurationerror","connectionadapters","abstractadapter","schemacreation","abstractmysqladapter","bindsubstitution","column","schemacreation","altertable","changecolumndefinition","closedtransaction","column","format","columndefinition","columndumper","connectionhandler","connectionmanagement","connectionpool","queue","reaper","connectionspecification","connectionurlresolver","resolver","databaselimits","databasestatements","indexdefinition","mysql2adapter","column","explainprettyprinter","mysqladapter","column","fields","boolean","date","datetime","decimal","float","identity","integer","time","type","statementpool","opentransaction","postgresqladapter","bindsubstitution","columndefinition","columnmethods","databasestatements","explainprettyprinter","oid","array","bit","boolean","bytea","cidr","date","decimal","float","hstore","identity","integer","json","money","point","range","time","timestamp","type","typemap","vector","quoting","referentialintegrity","schemacreation","schemastatements","statementpool","table","tabledefinition","utils","postgresqlcolumn","arrayparser","cast","querycache","quoting","realtransaction","sqlite3adapter","bindsubstitution","explainprettyprinter","statementpool","version","sqlite3column","savepointtransaction","savepoints","schemacache","schemastatements","statementpool","table","tabledefinition","transaction","transactionstate","connectionhandling","mergeandresolvedefaulturlconfig","connectionnotestablished","connectiontimeouterror","core","classmethods","countercache","classmethods","dangerousattributeerror","delegation","classmethods","classspecificrelation","classmethods","delegatecache","deleterestrictionerror","duplicatemigrationnameerror","duplicatemigrationversionerror","dynamicmatchers","findby","findbybang","finder","method","eagerloadpolymorphicerror","enum","explain","explainregistry","explainsubscriber","activesupport","findermethods","fixture","fixtureerror","formaterror","fixtureclassnotfound","fixtureset","classcache","file","hasmanythroughproxy","reflectionproxy","rendercontext","generators","base","migration","classmethods","migrationgenerator","modelgenerator","hasmanythroughassociationnotfounderror","hasmanythroughassociationpointlesssourcetypeerror","hasmanythroughassociationpolymorphicsourceerror","hasmanythroughassociationpolymorphicthrougherror","hasmanythroughcantassociatenewrecords","hasmanythroughcantassociatethroughhasoneormanyreflection","hasmanythroughcantdissociatenewrecords","hasmanythroughnestedassociationsarereadonly","hasmanythroughsourceassociationnotfounderror","hasonethroughcantassociatethroughcollection","illegalmigrationnameerror","immutablerelation","inheritance","classmethods","integration","classmethods","invalidforeignkey","inverseofassociationnotfounderror","irreversiblemigration","locking","optimistic","classmethods","pessimistic","logsubscriber","migration","checkpending","commandrecorder","straightreversions","jointable","reversibleblockhelper","migrationerror","migrationproxy","migrator","modelschema","classmethods","multiparameterassignmenterrors","nestedattributes","classmethods","toomanyrecords","nodatabaseerror","notouching","classmethods","nullmigration","nullrelation","pendingmigrationerror","persistence","classmethods","predicatebuilder","arrayhandler","relationhandler","preparedstatementinvalid","querycache","classmethods","querymethods","wherechain","querying","railtie","actiondispatch","activesupport","rails","railties","controllerruntime","classmethods","readonlyassociation","readonlyrecord","readonlyattributes","classmethods","recordinvalid","recordnotdestroyed","recordnotfound","recordnotsaved","recordnotunique","reflection","aggregatereflection","associationreflection","classmethods","macroreflection","throughreflection","relation","hashmerger","merger","result","rollback","runtimeregistry","sanitization","classmethods","schema","schemadumper","schemamigration","scoping","classmethods","default","classmethods","named","classmethods","scoperegistry","serialization","serializationtypemismatch","spawnmethods","staleobjecterror","statementcache","statementinvalid","store","classmethods","hashaccessor","indifferentcoder","indifferenthashaccessor","stringkeyedhashaccessor","subclassnotfound","tasks","databasealreadyexists","databasenotsupported","databasetasks","mysqldatabasetasks","postgresqldatabasetasks","sqlitedatabasetasks","testfixtures","classmethods","timestamp","transactionisolationerror","transactions","classmethods","translation","unknownattributeerror","unknownmigrationversionerror","unknownprimarykey","version","validations","associatedvalidator","classmethods","presencevalidator","uniquenessvalidator","wrappeddatabaseexception","xmlserializer","attribute","arjdbcmysql","error","arel","mysql","field","result","stmt","time","<<()","<=>()","==()","==()","==()","==()","===()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","_assign_attribute()","_create_record()","_create_record()","_enum_methods_module()","_store_accessors_module()","_update_record()","_update_record()","abstract_class?()","accepts_nested_attributes_for()","accessor()","accessor()","accessor()","acquire_connection()","active?()","active?()","active?()","active?()","active?()","active_connection?()","active_connections?()","active_threadsafe?()","active_threadsafe?()","adapter_name()","adapter_name()","add()","add()","add_autosave_association_callbacks()","add_belongs_to()","add_column()","add_column()","add_column_options!()","add_column_position!()","add_column_position!()","add_column_sql()","add_index()","add_index_length()","add_index_options()","add_index_sort_order()","add_index_sql()","add_item_to_array()","add_join_records()","add_oid()","add_reference()","add_relations_to_bind_values()","add_timestamps()","add_timestamps_sql()","add_to_transaction()","add_transaction_record()","after_commit()","after_rollback()","aggregate_column()","alias_type()","alias_type()","all()","all_timestamp_attributes()","all_timestamp_attributes_in_model()","allowed_index_name_length()","allowed_index_name_length()","announce()","any?()","any?()","any?()","any_waiting?()","append()","apply_join_dependency()","arel()","arel_attributes_with_values()","array_of_strings?()","array_to_string()","assert_valid_transaction_action()","assign_attributes()","assign_multiparameter_attributes()","assign_nested_parameter_attributes()","associated_records_to_validate_or_save()","association_valid?()","assume_migrated_upto_version()","attr_readonly()","attribute()","attribute=()","attribute?()","attribute_before_type_cast()","attribute_for_inspect()","attribute_method?()","attribute_method?()","attribute_names()","attribute_names()","attribute_present?()","attributes()","attributes=()","attributes_before_type_cast()","attributes_for_create()","attributes_for_update()","attributes_hash()","autosave=()","average()","base_class()","basename()","batch_order()","becomes()","becomes!()","before_save_collection_association()","begin_db_transaction()","begin_db_transaction()","begin_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","belongs_to()","belongs_to()","belongs_to()","bind()","binds_from_relation()","blank?()","body()","body()","build()","build()","build()","build_arel()","build_count_subquery()","build_from()","build_joins()","build_order()","build_select()","build_where()","cache()","cache()","cache()","cache()","cache()","cache_attribute?()","cache_attributes()","cache_fixtures()","cache_for_connection()","cache_key()","cache_sql()","cacheable_column?()","cached_attributes()","cached_fixtures()","calculate()","call()","call()","can_remove_no_wait?()","case_insensitive_comparison()","case_insensitive_comparison()","case_sensitive_modifier()","case_sensitive_modifier()","change()","change_column()","change_column()","change_column_default()","change_column_default()","change_column_default()","change_column_null()","change_column_null()","change_column_null()","change_column_null()","change_column_sql()","change_default()","change_table()","change_table()","changed_for_autosave?()","charset()","charset()","charset_current()","check_if_method_has_arguments!()","check_pending!()","check_schema_file()","checkin()","checkout()","checkout_and_verify()","checkout_new_connection()","cidr()","cidr_to_string()","class_for_adapter()","class_method_defined_within?()","class_name()","class_to_pool()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clear_active_connections!()","clear_all_connections!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_query_cache()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_table_cache!()","clear_timestamp_attributes()","client_encoding()","client_min_messages()","client_min_messages=()","close()","collapse_wheres()","collation()","collation()","collation()","collation_current()","column()","column()","column()","column_alias_for()","column_aliases()","column_defaults()","column_defaults()","column_exists?()","column_exists?()","column_for()","column_for()","column_for_attribute()","column_name_length()","column_names()","column_names()","column_spec()","column_type()","columns()","columns()","columns()","columns()","columns()","columns_hash()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","commit_db_transaction()","commit_db_transaction()","committed?()","composed_of()","compute_table_name()","compute_type()","concat()","configurations()","configurations=()","configure_connection()","configure_connection()","configure_connection()","configure_connection()","connect()","connect()","connect()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection_active?()","connection_config()","connection_id()","connection_id=()","connection_pool()","connection_pool_list()","connection_pools()","construct_join_dependency()","construct_relation_for_association_calculations()","content_columns()","context_class()","copy()","count()","count()","count_by_sql()","create()","create()","create()","create()","create()","create()","create!()","create!()","create!()","create_all()","create_alter_table()","create_column_definition()","create_column_definition()","create_current()","create_database()","create_database()","create_fixtures()","create_join_table()","create_or_update()","create_savepoint()","create_schema()","create_table()","create_table()","create_table_definition()","create_table_definition()","create_time_zone_conversion_attribute?()","create_with()","ctype()","current_config()","current_database()","current_database()","current_savepoint_name()","current_schema()","current_time_from_proper_timezone()","custom_join_ast()","dangerous_attribute_method?()","dangerous_class_method?()","daterange()","db_dir()","dealloc()","dealloc()","decrement()","decrement!()","decrement_counter()","default_fixture_model()","default_scope()","default_sequence_name()","default_string()","define()","define()","define_method_attribute()","define_method_attribute()","define_method_attribute=()","define_method_attribute=()","define_non_cyclic_method()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete_all()","delete_all()","delete_sql()","derive_class_name()","descends_from_active_record?()","destroy()","destroy()","destroy()","destroy!()","destroy_all()","destroy_all()","destroy_associations()","destroy_row()","destroy_row()","destroyed?()","destroyed_by_association()","destroyed_by_association=()","detect_enum_conflict!()","dirties_query_cache()","disable_ddl_transaction!()","disable_extension()","disable_extension()","disable_query_cache!()","disable_referential_integrity()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","discriminate_class_for_record()","discriminate_class_for_record()","distinct()","distinct()","down()","drop()","drop_all()","drop_current()","drop_join_table()","drop_schema()","drop_table()","drop_table()","drop_table()","each()","each()","each()","each()","each()","each()","each_current_configuration()","each_local_configuration()","eager_load()","eager_load!()","eager_loading?()","empty?()","empty?()","empty?()","empty_insert_statement_value()","empty_insert_statement_value()","emulate_booleans()","enable_extension()","enable_extension()","enable_query_cache!()","encoding()","encoding()","ensure_proper_type()","enum()","env()","error_number()","escape_bytea()","escape_hstore()","establish_connection()","establish_connection()","except()","exec_cache()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_insert()","exec_insert()","exec_insert()","exec_migration()","exec_no_cache()","exec_queries()","exec_queries()","exec_query()","exec_query()","exec_query()","exec_query()","exec_query()","exec_stmt()","exec_update()","exec_update()","exec_update()","exec_update()","exec_update()","exec_without_stmt()","execute()","execute()","execute()","execute()","execute()","execute_and_free()","execute_block()","execute_callstack_for_multiparameter_attributes()","exists?()","expand_hash_conditions_for_aggregates()","expire()","explain()","explain()","explain()","explain()","extend_message()","extending()","extension_enabled?()","extensions()","extensions()","extract_bounds()","extract_callstack_for_multiparameter_attributes()","extract_limit()","extract_pg_identifier_from_name()","extract_precision()","extract_scale()","extract_schema_and_table()","extract_table_ref_from_insert_sql()","extract_value_from_default()","fetch()","fifth()","fifth()","fifth!()","finalized?()","find()","find()","find_by()","find_by!()","find_by_sql()","find_each()","find_in_batches()","find_last()","find_nth()","find_nth_with_limit()","find_one()","find_or_create_by()","find_or_create_by!()","find_or_initialize_by()","find_parameter_position()","find_some()","find_sti_class()","find_take()","find_type()","find_with_associations()","find_with_ids()","finder()","finder()","finder()","first()","first()","first!()","fixture_is_cached?()","fixtures_path()","forty_two()","forty_two()","forty_two!()","fourth()","fourth()","fourth!()","from()","full_version()","full_version()","gem_version()","generate_association_writer()","generated_association_methods()","get_oid_type()","group()","has_and_belongs_to_many()","has_attribute?()","has_default_function?()","has_include?()","has_many()","has_one()","has_primary_key_column?()","hash_rows()","having()","hstore()","hstore_to_string()","id()","id=()","id?()","id_before_type_cast()","id_was()","identify()","ids()","in_clause_length()","include?()","includes()","increment()","increment!()","increment_counter()","increment_lock()","index()","index()","index_algorithms()","index_algorithms()","index_algorithms()","index_exists?()","index_exists?()","index_name()","index_name_exists?()","index_name_exists?()","index_name_for_remove()","index_name_length()","index_name_length()","indexes()","indexes_per_table()","inet()","infinity()","infinity?()","inheritance_column()","inheritance_column=()","inheritance_column_name()","inherited()","initialize_copy()","initialize_copy()","initialize_dup()","initialize_generated_modules()","initialize_internals_callback()","initialize_internals_callback()","initialize_schema_migrations_table()","initialize_schema_migrations_table()","initialize_type_map()","insert()","insert_class()","insert_fixture()","insert_sql()","insert_sql()","insert_sql()","inspect()","inspect()","instance_method_already_implemented?()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","int4range()","int8range()","inverse_of()","invert_add_index()","invert_change_column_null()","invert_drop_table()","invert_remove_column()","invert_remove_index()","invert_rename_column()","invert_rename_index()","invert_rename_table()","join_table()","joined_includes_values()","joins()","joins_per_query()","json()","json_to_string()","key?()","key?()","key?()","key?()","key?()","klass()","klass()","klasses()","last()","last()","last()","last!()","last_insert_id_value()","last_inserted_id()","last_inserted_id()","last_inserted_id()","last_inserted_id()","lease()","length()","length()","length()","length()","length()","limit()","limited_ids_for()","limited_update_conditions()","limited_update_conditions()","load()","load_migration()","load_schema()","load_schema_current()","load_schema_if_pending!()","load_seed()","load_target()","loaded?()","local_database?()","lock()","lock!()","locked?()","locking_column()","locking_column=()","locking_enabled?()","log()","logger()","ltree()","macaddr()","many?()","many?()","mariadb?()","mark_for_destruction()","marked_for_destruction?()","marshal_dump()","marshal_load()","match()","max_updated_column_timestamp()","maximum()","merge()","method_body()","method_missing()","method_missing()","migrate()","migration()","migration_keys()","migration_keys()","migrations_paths()","migrations_paths()","minimum()","mtime()","native()","native()","native_database_types()","native_database_types()","nested_records_changed_for_autosave?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_connection()","new_record?()","next_key()","next_migration_number()","next_migration_number()","no_touching()","no_touching?()","no_wait_poll()","none()","normalize_migration_number()","not()","num_waiting()","numrange()","odd?()","offset()","only()","open_transactions()","operation_over_aggregate_column()","options_include_default?()","order()","owner_to_pool()","parse_array_contents()","parse_data()","parse_pg_array()","pattern()","perform_calculation()","persisted?()","pk_and_sequence_for()","pk_attribute?()","pluck()","point_to_string()","poll()","pool_for()","pool_from_any_process_for()","populate_with_current_scope_attributes()","postgresql_version()","prefetch_primary_key?()","prefix()","prefix()","prefix()","preload()","preloaded_records()","prepare()","prepare()","prepare_column_options()","prepare_column_options()","prepare_default_proc()","prepare_statement()","prepend()","preprocess_order_args()","pretty_print()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_key_column_name()","primary_key_name()","primary_keys()","proper_table_name()","proxy_association()","proxy_association()","purge()","push()","query_attribute()","quote()","quote()","quote()","quote_and_escape()","quote_column_name()","quote_string()","quote_string()","quote_table_name()","quote_table_name()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_date()","quoted_false()","quoted_false()","quoted_id()","quoted_locking_column()","quoted_primary_key()","quoted_table_name()","quoted_true()","quoted_true()","range_to_string()","raw_connection()","raw_type_cast_attribute_for_write()","raw_write_attribute()","read()","read()","read_attribute()","read_attribute_before_type_cast()","read_fixture_files()","read_store_attribute()","reader_method()","readonly()","readonly_attribute?()","readonly_attributes()","reap()","reconnect!()","reconnect!()","reconnect!()","reconnect!()","record()","record_changed?()","recreate_database()","references()","references()","references()","references_eager_loaded_tables?()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","reflections()","register_task()","register_type()","register_type()","registered_type?()","relation_for_destroy()","relation_for_destroy()","release()","release_connection()","release_savepoint()","reload()","reload()","reload()","reload()","reload_type_map()","remove()","remove()","remove()","remove_belongs_to()","remove_belongs_to()","remove_column()","remove_column()","remove_column_sql()","remove_columns()","remove_columns_sql()","remove_connection()","remove_connection()","remove_index()","remove_index()","remove_index_sql()","remove_reference()","remove_references()","remove_timestamps()","remove_timestamps()","remove_timestamps_sql()","rename()","rename_column()","rename_column()","rename_column_indexes()","rename_column_sql()","rename_index()","rename_index()","rename_index()","rename_index()","rename_table()","rename_table()","rename_table()","rename_table()","rename_table_indexes()","render_bind()","reorder()","replace()","requires_reloading?()","requires_reloading?()","reset()","reset()","reset!()","reset!()","reset!()","reset!()","reset_cache()","reset_column_information()","reset_counters()","reset_locking_column()","reset_runtime()","reset_sequence!()","respond_to?()","restore_query_cache_settings()","result()","retrieve_connection()","retrieve_connection_pool()","reverse_order()","reverse_sql_order()","reversible()","revert()","revert()","reverting?()","rewhere()","rollback_active_record_state!()","rollback_db_transaction()","rollback_db_transaction()","rollback_to_savepoint()","rolledback?()","root()","run()","run()","run()","run()","runtime()","runtime=()","sanitize_conditions()","sanitize_limit()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_hash()","sanitize_sql_hash_for_assignment()","sanitize_sql_hash_for_conditions()","save()","save()","save!()","save!()","save_belongs_to_association()","save_changed_attribute()","save_collection_association()","save_has_one_association()","say()","say_with_time()","schema_cache=()","schema_creation()","schema_creation()","schema_creation()","schema_exists?()","schema_names()","schema_search_path()","schema_search_path=()","scope()","scope()","scope_for_create()","scoping()","scoping()","second()","second()","second!()","seed_loader()","select()","select()","select()","select()","select()","select()","select_all()","select_all()","select_for_count()","select_one()","select_rows()","select_rows()","select_rows()","select_rows()","select_rows()","select_value()","select_values()","sequence_name()","sequence_name=()","serial_sequence()","serializable_hash()","serialize()","serialized_attributes()","session_auth=()","set_field_encoding()","set_field_encoding()","set_options_for_callbacks!()","set_standard_conforming_strings()","set_state()","should_record_timestamps?()","show_variable()","signature()","simplified_type()","size()","size()","size()","size()","spawn()","sql()","sql_for_insert()","sql_for_insert()","sql_key()","sql_query_length()","sqlite_version()","sti_name()","store()","store_accessor()","store_accessor_for()","stored_attributes()","strict_mode?()","string_to_array()","string_to_bit()","string_to_cidr()","string_to_hstore()","string_to_json()","string_to_point()","string_to_time()","structure_dump()","structure_load()","subclass_from_attributes()","subclass_from_attributes?()","subquery_for()","subquery_for()","substitute_at()","substitute_at()","suffix()","suffix()","sum()","supports_add_column?()","supports_bulk_alter?()","supports_count_distinct?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_extensions?()","supports_extensions?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_insert_with_returning?()","supports_migrations?()","supports_migrations?()","supports_migrations?()","supports_partial_index?()","supports_partial_index?()","supports_partial_index?()","supports_primary_key?()","supports_primary_key?()","supports_ranges?()","supports_rename_index?()","supports_savepoints?()","supports_savepoints?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_views?()","suppress_messages()","symbol_unscoping()","symbolized_base_class()","symbolized_sti_name()","synchronize()","table()","table_alias_for()","table_alias_length()","table_alias_length()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_name()","table_name()","table_name=()","table_name_length()","table_name_options()","table_rows()","table_structure()","tables()","tables()","tables_in_string()","take()","take!()","target()","third()","third()","third!()","timestamp_attributes_for_create()","timestamp_attributes_for_create_in_model()","timestamp_attributes_for_update()","timestamp_attributes_for_update_in_model()","timestamp_column_names()","timestamps()","timestamps()","to_a()","to_a()","to_ary()","to_ary()","to_date()","to_hash()","to_integer()","to_key()","to_param()","to_param()","to_sql()","to_sql()","to_xml()","toggle()","toggle!()","touch()","touch()","transaction()","transaction()","transaction()","transaction_isolation_levels()","transaction_open?()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","translate_exception_class()","tsrange()","tstzrange()","tsvector()","type()","type()","type()","type()","type()","type()","type()","type()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast_array()","type_cast_attribute_for_write()","type_cast_attribute_value()","type_cast_calculated_value()","type_cast_config_to_boolean()","type_cast_config_to_integer()","type_cast_for_write()","type_cast_for_write()","type_cast_for_write()","type_cast_for_write()","type_cast_using_column()","type_condition()","type_map()","type_to_sql()","type_to_sql()","typecasted_attribute_value()","uncached()","uncached()","undecorated_table_name()","unescape_bytea()","uniq()","uniq()","uniq_value()","unprepared_statement()","unprepared_visitor()","unscope()","unscoped()","up()","update()","update()","update()","update!()","update_all()","update_attribute()","update_attributes()","update_attributes!()","update_column()","update_columns()","update_counters()","update_counters()","update_sql()","update_sql()","use_insert_returning?()","using_limitable_reflections?()","using_single_table_inheritance?()","uuid()","valid?()","valid?()","valid_alter_table_options()","valid_type?()","valid_type?()","valid_type?()","validate_collection_association()","validate_order_args()","validate_single_association()","validates_associated()","validates_presence_of()","validates_uniqueness_of()","values()","verify!()","verify_readonly_attribute()","version()","version()","version()","visit_addcolumn()","visit_addcolumn()","visit_changecolumndefinition()","visit_columndefinition()","wait_poll()","where()","where_unscoping()","where_values_hash()","with_connection()","with_lock()","with_transaction_returning_status()","without_prepared_statement?()","write()","write()","write()","write_attribute()","write_attribute_with_type_cast()","write_store_attribute()","writer_method()","xml()","yaml_file_path()","readme","databases.rake"],"longSearchIndex":["activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationnotfounderror","activerecord::associationrelation","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::aliastracker","activerecord::associations::association","activerecord::associations::associationscope","activerecord::associations::belongstoassociation","activerecord::associations::belongstopolymorphicassociation","activerecord::associations::builder","activerecord::associations::builder::association","activerecord::associations::builder::belongsto","activerecord::associations::builder::collectionassociation","activerecord::associations::builder::hasandbelongstomany","activerecord::associations::builder::hasandbelongstomany::jointableresolver","activerecord::associations::builder::hasandbelongstomany::jointableresolver::knownclass","activerecord::associations::builder::hasmany","activerecord::associations::builder::hasone","activerecord::associations::builder::singularassociation","activerecord::associations::classmethods","activerecord::associations::collectionassociation","activerecord::associations::collectionproxy","activerecord::associations::hasmanyassociation","activerecord::associations::hasmanythroughassociation","activerecord::associations::hasoneassociation","activerecord::associations::hasonethroughassociation","activerecord::associations::joindependency","activerecord::associations::joindependency::aliases","activerecord::associations::joindependency::aliases::table","activerecord::associations::joindependency::joinassociation","activerecord::associations::joindependency::joinbase","activerecord::associations::joindependency::joinpart","activerecord::associations::preloader","activerecord::associations::preloader::alreadyloaded","activerecord::associations::preloader::association","activerecord::associations::preloader::belongsto","activerecord::associations::preloader::collectionassociation","activerecord::associations::preloader::hasmany","activerecord::associations::preloader::hasmanythrough","activerecord::associations::preloader::hasone","activerecord::associations::preloader::hasonethrough","activerecord::associations::preloader::nullpreloader","activerecord::associations::preloader::singularassociation","activerecord::associations::preloader::throughassociation","activerecord::associations::singularassociation","activerecord::associations::throughassociation","activerecord::attributeassignment","activerecord::attributeassignment::multiparameterattribute","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::attributemethodcache","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::dirty","activerecord::attributemethods::generatedattributemethods","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::read::classmethods","activerecord::attributemethods::serialization","activerecord::attributemethods::serialization::attribute","activerecord::attributemethods::serialization::behavior","activerecord::attributemethods::serialization::behavior::classmethods","activerecord::attributemethods::serialization::classmethods","activerecord::attributemethods::serialization::type","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::timezoneconversion::classmethods","activerecord::attributemethods::timezoneconversion::type","activerecord::attributemethods::write","activerecord::attributemethods::write::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::associationbuilderextension","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::batches","activerecord::calculations","activerecord::callbacks","activerecord::callbacks::classmethods","activerecord::coders","activerecord::coders::json","activerecord::coders::yamlcolumn","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::abstractadapter::schemacreation","activerecord::connectionadapters::abstractmysqladapter","activerecord::connectionadapters::abstractmysqladapter::bindsubstitution","activerecord::connectionadapters::abstractmysqladapter::column","activerecord::connectionadapters::abstractmysqladapter::schemacreation","activerecord::connectionadapters::altertable","activerecord::connectionadapters::changecolumndefinition","activerecord::connectionadapters::closedtransaction","activerecord::connectionadapters::column","activerecord::connectionadapters::column::format","activerecord::connectionadapters::columndefinition","activerecord::connectionadapters::columndumper","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionmanagement","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::connectionpool::queue","activerecord::connectionadapters::connectionpool::reaper","activerecord::connectionadapters::connectionspecification","activerecord::connectionadapters::connectionspecification::connectionurlresolver","activerecord::connectionadapters::connectionspecification::resolver","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::indexdefinition","activerecord::connectionadapters::mysql2adapter","activerecord::connectionadapters::mysql2adapter::column","activerecord::connectionadapters::mysql2adapter::explainprettyprinter","activerecord::connectionadapters::mysqladapter","activerecord::connectionadapters::mysqladapter::column","activerecord::connectionadapters::mysqladapter::fields","activerecord::connectionadapters::mysqladapter::fields::boolean","activerecord::connectionadapters::mysqladapter::fields::date","activerecord::connectionadapters::mysqladapter::fields::datetime","activerecord::connectionadapters::mysqladapter::fields::decimal","activerecord::connectionadapters::mysqladapter::fields::float","activerecord::connectionadapters::mysqladapter::fields::identity","activerecord::connectionadapters::mysqladapter::fields::integer","activerecord::connectionadapters::mysqladapter::fields::time","activerecord::connectionadapters::mysqladapter::fields::type","activerecord::connectionadapters::mysqladapter::statementpool","activerecord::connectionadapters::opentransaction","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::postgresqladapter::bindsubstitution","activerecord::connectionadapters::postgresqladapter::columndefinition","activerecord::connectionadapters::postgresqladapter::columnmethods","activerecord::connectionadapters::postgresqladapter::databasestatements","activerecord::connectionadapters::postgresqladapter::databasestatements::explainprettyprinter","activerecord::connectionadapters::postgresqladapter::oid","activerecord::connectionadapters::postgresqladapter::oid::array","activerecord::connectionadapters::postgresqladapter::oid::bit","activerecord::connectionadapters::postgresqladapter::oid::boolean","activerecord::connectionadapters::postgresqladapter::oid::bytea","activerecord::connectionadapters::postgresqladapter::oid::cidr","activerecord::connectionadapters::postgresqladapter::oid::date","activerecord::connectionadapters::postgresqladapter::oid::decimal","activerecord::connectionadapters::postgresqladapter::oid::float","activerecord::connectionadapters::postgresqladapter::oid::hstore","activerecord::connectionadapters::postgresqladapter::oid::identity","activerecord::connectionadapters::postgresqladapter::oid::integer","activerecord::connectionadapters::postgresqladapter::oid::json","activerecord::connectionadapters::postgresqladapter::oid::money","activerecord::connectionadapters::postgresqladapter::oid::point","activerecord::connectionadapters::postgresqladapter::oid::range","activerecord::connectionadapters::postgresqladapter::oid::time","activerecord::connectionadapters::postgresqladapter::oid::timestamp","activerecord::connectionadapters::postgresqladapter::oid::type","activerecord::connectionadapters::postgresqladapter::oid::typemap","activerecord::connectionadapters::postgresqladapter::oid::vector","activerecord::connectionadapters::postgresqladapter::quoting","activerecord::connectionadapters::postgresqladapter::referentialintegrity","activerecord::connectionadapters::postgresqladapter::schemacreation","activerecord::connectionadapters::postgresqladapter::schemastatements","activerecord::connectionadapters::postgresqladapter::statementpool","activerecord::connectionadapters::postgresqladapter::table","activerecord::connectionadapters::postgresqladapter::tabledefinition","activerecord::connectionadapters::postgresqladapter::utils","activerecord::connectionadapters::postgresqlcolumn","activerecord::connectionadapters::postgresqlcolumn::arrayparser","activerecord::connectionadapters::postgresqlcolumn::cast","activerecord::connectionadapters::querycache","activerecord::connectionadapters::quoting","activerecord::connectionadapters::realtransaction","activerecord::connectionadapters::sqlite3adapter","activerecord::connectionadapters::sqlite3adapter::bindsubstitution","activerecord::connectionadapters::sqlite3adapter::explainprettyprinter","activerecord::connectionadapters::sqlite3adapter::statementpool","activerecord::connectionadapters::sqlite3adapter::version","activerecord::connectionadapters::sqlite3column","activerecord::connectionadapters::savepointtransaction","activerecord::connectionadapters::savepoints","activerecord::connectionadapters::schemacache","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::statementpool","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionadapters::transaction","activerecord::connectionadapters::transactionstate","activerecord::connectionhandling","activerecord::connectionhandling::mergeandresolvedefaulturlconfig","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::core","activerecord::core::classmethods","activerecord::countercache","activerecord::countercache::classmethods","activerecord::dangerousattributeerror","activerecord::delegation","activerecord::delegation::classmethods","activerecord::delegation::classspecificrelation","activerecord::delegation::classspecificrelation::classmethods","activerecord::delegation::delegatecache","activerecord::deleterestrictionerror","activerecord::duplicatemigrationnameerror","activerecord::duplicatemigrationversionerror","activerecord::dynamicmatchers","activerecord::dynamicmatchers::findby","activerecord::dynamicmatchers::findbybang","activerecord::dynamicmatchers::finder","activerecord::dynamicmatchers::method","activerecord::eagerloadpolymorphicerror","activerecord::enum","activerecord::explain","activerecord::explainregistry","activerecord::explainsubscriber","activerecord::explainsubscriber::activesupport","activerecord::findermethods","activerecord::fixture","activerecord::fixture::fixtureerror","activerecord::fixture::formaterror","activerecord::fixtureclassnotfound","activerecord::fixtureset","activerecord::fixtureset::classcache","activerecord::fixtureset::file","activerecord::fixtureset::hasmanythroughproxy","activerecord::fixtureset::reflectionproxy","activerecord::fixtureset::rendercontext","activerecord::generators","activerecord::generators::base","activerecord::generators::migration","activerecord::generators::migration::classmethods","activerecord::generators::migrationgenerator","activerecord::generators::modelgenerator","activerecord::hasmanythroughassociationnotfounderror","activerecord::hasmanythroughassociationpointlesssourcetypeerror","activerecord::hasmanythroughassociationpolymorphicsourceerror","activerecord::hasmanythroughassociationpolymorphicthrougherror","activerecord::hasmanythroughcantassociatenewrecords","activerecord::hasmanythroughcantassociatethroughhasoneormanyreflection","activerecord::hasmanythroughcantdissociatenewrecords","activerecord::hasmanythroughnestedassociationsarereadonly","activerecord::hasmanythroughsourceassociationnotfounderror","activerecord::hasonethroughcantassociatethroughcollection","activerecord::illegalmigrationnameerror","activerecord::immutablerelation","activerecord::inheritance","activerecord::inheritance::classmethods","activerecord::integration","activerecord::integration::classmethods","activerecord::invalidforeignkey","activerecord::inverseofassociationnotfounderror","activerecord::irreversiblemigration","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::migration","activerecord::migration::checkpending","activerecord::migration::commandrecorder","activerecord::migration::commandrecorder::straightreversions","activerecord::migration::jointable","activerecord::migration::reversibleblockhelper","activerecord::migrationerror","activerecord::migrationproxy","activerecord::migrator","activerecord::modelschema","activerecord::modelschema::classmethods","activerecord::multiparameterassignmenterrors","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::nodatabaseerror","activerecord::notouching","activerecord::notouching::classmethods","activerecord::nullmigration","activerecord::nullrelation","activerecord::pendingmigrationerror","activerecord::persistence","activerecord::persistence::classmethods","activerecord::predicatebuilder","activerecord::predicatebuilder::arrayhandler","activerecord::predicatebuilder::relationhandler","activerecord::preparedstatementinvalid","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querymethods","activerecord::querymethods::wherechain","activerecord::querying","activerecord::railtie","activerecord::railtie::actiondispatch","activerecord::railtie::activesupport","activerecord::railtie::rails","activerecord::railties","activerecord::railties::controllerruntime","activerecord::railties::controllerruntime::classmethods","activerecord::readonlyassociation","activerecord::readonlyrecord","activerecord::readonlyattributes","activerecord::readonlyattributes::classmethods","activerecord::recordinvalid","activerecord::recordnotdestroyed","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::aggregatereflection","activerecord::reflection::associationreflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::reflection::throughreflection","activerecord::relation","activerecord::relation::hashmerger","activerecord::relation::merger","activerecord::result","activerecord::rollback","activerecord::runtimeregistry","activerecord::sanitization","activerecord::sanitization::classmethods","activerecord::schema","activerecord::schemadumper","activerecord::schemamigration","activerecord::scoping","activerecord::scoping::classmethods","activerecord::scoping::default","activerecord::scoping::default::classmethods","activerecord::scoping::named","activerecord::scoping::named::classmethods","activerecord::scoping::scoperegistry","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementcache","activerecord::statementinvalid","activerecord::store","activerecord::store::classmethods","activerecord::store::hashaccessor","activerecord::store::indifferentcoder","activerecord::store::indifferenthashaccessor","activerecord::store::stringkeyedhashaccessor","activerecord::subclassnotfound","activerecord::tasks","activerecord::tasks::databasealreadyexists","activerecord::tasks::databasenotsupported","activerecord::tasks::databasetasks","activerecord::tasks::mysqldatabasetasks","activerecord::tasks::postgresqldatabasetasks","activerecord::tasks::sqlitedatabasetasks","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::timestamp","activerecord::transactionisolationerror","activerecord::transactions","activerecord::transactions::classmethods","activerecord::translation","activerecord::unknownattributeerror","activerecord::unknownmigrationversionerror","activerecord::unknownprimarykey","activerecord::version","activerecord::validations","activerecord::validations::associatedvalidator","activerecord::validations::classmethods","activerecord::validations::presencevalidator","activerecord::validations::uniquenessvalidator","activerecord::wrappeddatabaseexception","activerecord::xmlserializer","activerecord::xmlserializer::attribute","arjdbcmysql","arjdbcmysql::error","arel","mysql","mysql::field","mysql::result","mysql::stmt","mysql::time","activerecord::associations::collectionproxy#<<()","activerecord::connectionadapters::sqlite3adapter::version#<=>()","activerecord::associationrelation#==()","activerecord::associations::collectionproxy#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activerecord::core::classmethods#===()","activerecord::attributemethods#[]()","activerecord::attributemethods::attributemethodcache#[]()","activerecord::connectionadapters::mysqladapter::statementpool#[]()","activerecord::connectionadapters::postgresqladapter::oid::typemap#[]()","activerecord::connectionadapters::postgresqladapter::statementpool#[]()","activerecord::connectionadapters::sqlite3adapter::statementpool#[]()","activerecord::connectionadapters::statementpool#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::fixtureset#[]()","activerecord::fixtureset::classcache#[]()","activerecord::result#[]()","activerecord::attributemethods#[]=()","activerecord::connectionadapters::mysqladapter::statementpool#[]=()","activerecord::connectionadapters::postgresqladapter::oid::typemap#[]=()","activerecord::connectionadapters::postgresqladapter::statementpool#[]=()","activerecord::connectionadapters::sqlite3adapter::statementpool#[]=()","activerecord::connectionadapters::statementpool#[]=()","activerecord::fixtureset#[]=()","activerecord::attributeassignment#_assign_attribute()","activerecord::persistence#_create_record()","activerecord::timestamp#_create_record()","activerecord::enum#_enum_methods_module()","activerecord::store::classmethods#_store_accessors_module()","activerecord::persistence#_update_record()","activerecord::timestamp#_update_record()","activerecord::inheritance::classmethods#abstract_class?()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","activerecord::connectionadapters::postgresqladapter::oid::hstore#accessor()","activerecord::connectionadapters::postgresqladapter::oid::json#accessor()","activerecord::connectionadapters::postgresqlcolumn#accessor()","activerecord::connectionadapters::connectionpool#acquire_connection()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysql2adapter#active?()","activerecord::connectionadapters::mysqladapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activerecord::connectionadapters::sqlite3adapter#active?()","activerecord::connectionadapters::connectionpool#active_connection?()","activerecord::connectionadapters::connectionhandler#active_connections?()","activerecord::connectionadapters::abstractadapter#active_threadsafe?()","activerecord::connectionadapters::postgresqladapter#active_threadsafe?()","activerecord::connectionadapters::abstractadapter#adapter_name()","activerecord::connectionadapters::postgresqladapter#adapter_name()","activerecord::connectionadapters::connectionpool::queue#add()","activerecord::connectionadapters::schemacache#add()","activerecord::autosaveassociation::classmethods#add_autosave_association_callbacks()","activerecord::connectionadapters::schemastatements#add_belongs_to()","activerecord::connectionadapters::postgresqladapter::schemastatements#add_column()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::postgresqladapter::schemacreation#add_column_options!()","activerecord::connectionadapters::abstractmysqladapter#add_column_position!()","activerecord::connectionadapters::abstractmysqladapter::schemacreation#add_column_position!()","activerecord::connectionadapters::abstractmysqladapter#add_column_sql()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters::abstractmysqladapter#add_index_length()","activerecord::connectionadapters::schemastatements#add_index_options()","activerecord::connectionadapters::schemastatements#add_index_sort_order()","activerecord::connectionadapters::abstractmysqladapter#add_index_sql()","activerecord::connectionadapters::postgresqlcolumn::arrayparser#add_item_to_array()","activerecord::fixtureset#add_join_records()","activerecord::connectionadapters::postgresqladapter#add_oid()","activerecord::connectionadapters::schemastatements#add_reference()","activerecord::querymethods#add_relations_to_bind_values()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::connectionadapters::abstractmysqladapter#add_timestamps_sql()","activerecord::transactions#add_to_transaction()","activerecord::connectionadapters::databasestatements#add_transaction_record()","activerecord::transactions::classmethods#after_commit()","activerecord::transactions::classmethods#after_rollback()","activerecord::calculations#aggregate_column()","activerecord::connectionadapters::mysqladapter::fields::alias_type()","activerecord::connectionadapters::postgresqladapter::oid::alias_type()","activerecord::scoping::named::classmethods#all()","activerecord::timestamp#all_timestamp_attributes()","activerecord::timestamp#all_timestamp_attributes_in_model()","activerecord::connectionadapters::databaselimits#allowed_index_name_length()","activerecord::connectionadapters::sqlite3adapter#allowed_index_name_length()","activerecord::migration#announce()","activerecord::associations::collectionproxy#any?()","activerecord::connectionadapters::connectionpool::queue#any?()","activerecord::relation#any?()","activerecord::connectionadapters::connectionpool::queue#any_waiting?()","activerecord::associations::collectionproxy#append()","activerecord::findermethods#apply_join_dependency()","activerecord::associations::collectionproxy#arel()","activerecord::attributemethods#arel_attributes_with_values()","activerecord::querymethods#array_of_strings?()","activerecord::connectionadapters::postgresqlcolumn::cast#array_to_string()","activerecord::transactions::classmethods#assert_valid_transaction_action()","activerecord::attributeassignment#assign_attributes()","activerecord::attributeassignment#assign_multiparameter_attributes()","activerecord::attributeassignment#assign_nested_parameter_attributes()","activerecord::autosaveassociation#associated_records_to_validate_or_save()","activerecord::autosaveassociation#association_valid?()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","activerecord::readonlyattributes::classmethods#attr_readonly()","activerecord::attributemethods::read#attribute()","activerecord::attributemethods::write#attribute=()","activerecord::attributemethods::query#attribute?()","activerecord::attributemethods::beforetypecast#attribute_before_type_cast()","activerecord::attributemethods#attribute_for_inspect()","activerecord::attributemethods::classmethods#attribute_method?()","activerecord::attributemethods::primarykey#attribute_method?()","activerecord::attributemethods#attribute_names()","activerecord::attributemethods::classmethods#attribute_names()","activerecord::attributemethods#attribute_present?()","activerecord::attributemethods#attributes()","activerecord::attributeassignment#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activerecord::attributemethods#attributes_for_create()","activerecord::attributemethods#attributes_for_update()","activerecord::dynamicmatchers::finder#attributes_hash()","activerecord::reflection::macroreflection#autosave=()","activerecord::calculations#average()","activerecord::inheritance::classmethods#base_class()","activerecord::migrationproxy#basename()","activerecord::batches#batch_order()","activerecord::persistence#becomes()","activerecord::persistence#becomes!()","activerecord::autosaveassociation#before_save_collection_association()","activerecord::connectionadapters::abstractmysqladapter#begin_db_transaction()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#begin_db_transaction()","activerecord::connectionadapters::abstractmysqladapter#begin_isolated_db_transaction()","activerecord::connectionadapters::databasestatements#begin_isolated_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#begin_isolated_db_transaction()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","activerecord::querymethods#bind()","activerecord::connectionadapters::databasestatements#binds_from_relation()","activerecord::relation#blank?()","activerecord::dynamicmatchers::finder#body()","activerecord::dynamicmatchers::method#body()","activerecord::associations::builder::hasandbelongstomany::jointableresolver::build()","activerecord::associations::collectionproxy#build()","activerecord::relation#build()","activerecord::querymethods#build_arel()","activerecord::calculations#build_count_subquery()","activerecord::querymethods#build_from()","activerecord::querymethods#build_joins()","activerecord::querymethods#build_order()","activerecord::querymethods#build_select()","activerecord::querymethods#build_where()","activerecord::connectionadapters::mysqladapter::statementpool#cache()","activerecord::connectionadapters::postgresqladapter::statementpool#cache()","activerecord::connectionadapters::querycache#cache()","activerecord::connectionadapters::sqlite3adapter::statementpool#cache()","activerecord::querycache::classmethods#cache()","activerecord::attributemethods::read::classmethods#cache_attribute?()","activerecord::attributemethods::read::classmethods#cache_attributes()","activerecord::fixtureset::cache_fixtures()","activerecord::fixtureset::cache_for_connection()","activerecord::integration#cache_key()","activerecord::connectionadapters::querycache#cache_sql()","activerecord::attributemethods::read::classmethods#cacheable_column?()","activerecord::attributemethods::read::classmethods#cached_attributes()","activerecord::fixtureset::cached_fixtures()","activerecord::calculations#calculate()","activerecord::migration::checkpending#call()","activerecord::querycache#call()","activerecord::connectionadapters::connectionpool::queue#can_remove_no_wait?()","activerecord::connectionadapters::abstractadapter#case_insensitive_comparison()","activerecord::connectionadapters::abstractmysqladapter#case_insensitive_comparison()","activerecord::connectionadapters::abstractadapter#case_sensitive_modifier()","activerecord::connectionadapters::abstractmysqladapter#case_sensitive_modifier()","activerecord::connectionadapters::table#change()","activerecord::connectionadapters::postgresqladapter::schemastatements#change_column()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::abstractmysqladapter#change_column_default()","activerecord::connectionadapters::postgresqladapter::schemastatements#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::abstractmysqladapter#change_column_null()","activerecord::connectionadapters::postgresqladapter::schemastatements#change_column_null()","activerecord::connectionadapters::sqlite3adapter#change_column_null()","activerecord::connectionadapters::schemastatements#change_column_null()","activerecord::connectionadapters::abstractmysqladapter#change_column_sql()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activerecord::migration::commandrecorder#change_table()","activerecord::autosaveassociation#changed_for_autosave?()","activerecord::connectionadapters::abstractmysqladapter#charset()","activerecord::tasks::databasetasks#charset()","activerecord::tasks::databasetasks#charset_current()","activerecord::querymethods#check_if_method_has_arguments!()","activerecord::migration#check_pending!()","activerecord::tasks::databasetasks#check_schema_file()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","activerecord::connectionadapters::connectionpool#checkout_and_verify()","activerecord::connectionadapters::connectionpool#checkout_new_connection()","activerecord::connectionadapters::postgresqladapter::columnmethods#cidr()","activerecord::connectionadapters::postgresqlcolumn::cast#cidr_to_string()","activerecord::tasks::databasetasks#class_for_adapter()","activerecord::attributemethods::classmethods#class_method_defined_within?()","activerecord::reflection::macroreflection#class_name()","activerecord::connectionadapters::connectionhandler#class_to_pool()","activerecord::associations::collectionproxy#clear()","activerecord::connectionadapters::connectionpool::queue#clear()","activerecord::connectionadapters::mysqladapter::statementpool#clear()","activerecord::connectionadapters::postgresqladapter::oid::typemap#clear()","activerecord::connectionadapters::postgresqladapter::statementpool#clear()","activerecord::connectionadapters::sqlite3adapter::statementpool#clear()","activerecord::connectionadapters::statementpool#clear()","activerecord::connectionadapters::schemacache#clear!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","activerecord::connectionadapters::abstractadapter#clear_cache!()","activerecord::connectionadapters::mysqladapter#clear_cache!()","activerecord::connectionadapters::postgresqladapter#clear_cache!()","activerecord::connectionadapters::sqlite3adapter#clear_cache!()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","activerecord::connectionadapters::schemacache#clear_table_cache!()","activerecord::timestamp#clear_timestamp_attributes()","activerecord::connectionadapters::mysqladapter#client_encoding()","activerecord::connectionadapters::postgresqladapter::schemastatements#client_min_messages()","activerecord::connectionadapters::postgresqladapter::schemastatements#client_min_messages=()","activerecord::connectionadapters::abstractadapter#close()","activerecord::querymethods#collapse_wheres()","activerecord::connectionadapters::abstractmysqladapter#collation()","activerecord::connectionadapters::postgresqladapter::schemastatements#collation()","activerecord::tasks::databasetasks#collation()","activerecord::tasks::databasetasks#collation_current()","activerecord::connectionadapters::postgresqladapter::tabledefinition#column()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::calculations#column_alias_for()","activerecord::associations::joindependency::aliases::table#column_aliases()","activerecord::locking::optimistic::classmethods#column_defaults()","activerecord::modelschema::classmethods#column_defaults()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::calculations#column_for()","activerecord::connectionadapters::abstractmysqladapter#column_for()","activerecord::attributemethods#column_for_attribute()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::fixtureset#column_names()","activerecord::modelschema::classmethods#column_names()","activerecord::connectionadapters::columndumper#column_spec()","activerecord::result#column_type()","activerecord::connectionadapters::postgresqladapter::schemastatements#columns()","activerecord::connectionadapters::schemacache#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::connectionadapters::tabledefinition#columns()","activerecord::modelschema::classmethods#columns()","activerecord::connectionadapters::schemacache#columns_hash()","activerecord::modelschema::classmethods#columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#commit_db_transaction()","activerecord::connectionadapters::transactionstate#committed?()","activerecord::aggregations::classmethods#composed_of()","activerecord::modelschema::classmethods#compute_table_name()","activerecord::inheritance::classmethods#compute_type()","activerecord::associations::collectionproxy#concat()","activerecord::core::configurations()","activerecord::core::configurations=()","activerecord::connectionadapters::abstractmysqladapter#configure_connection()","activerecord::connectionadapters::mysql2adapter#configure_connection()","activerecord::connectionadapters::mysqladapter#configure_connection()","activerecord::connectionadapters::postgresqladapter#configure_connection()","activerecord::connectionadapters::mysql2adapter#connect()","activerecord::connectionadapters::mysqladapter#connect()","activerecord::connectionadapters::postgresqladapter#connect()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::connectionhandling#connected?()","activerecord::connectionadapters::connectionpool#connection()","activerecord::connectionhandling#connection()","activerecord::migration#connection()","activerecord::connectionadapters::postgresqladapter::statementpool#connection_active?()","activerecord::connectionhandling#connection_config()","activerecord::connectionhandling#connection_id()","activerecord::connectionhandling#connection_id=()","activerecord::connectionhandling#connection_pool()","activerecord::connectionadapters::connectionhandler#connection_pool_list()","activerecord::connectionadapters::connectionhandler#connection_pools()","activerecord::findermethods#construct_join_dependency()","activerecord::findermethods#construct_relation_for_association_calculations()","activerecord::modelschema::classmethods#content_columns()","activerecord::fixtureset::context_class()","activerecord::migration#copy()","activerecord::associations::collectionproxy#count()","activerecord::calculations#count()","activerecord::querying#count_by_sql()","activerecord::associations::collectionproxy#create()","activerecord::connectionadapters::mysql2adapter#create()","activerecord::connectionadapters::postgresqladapter::databasestatements#create()","activerecord::persistence::classmethods#create()","activerecord::relation#create()","activerecord::tasks::databasetasks#create()","activerecord::associations::collectionproxy#create!()","activerecord::relation#create!()","activerecord::validations::classmethods#create!()","activerecord::tasks::databasetasks#create_all()","activerecord::connectionadapters::schemastatements#create_alter_table()","activerecord::connectionadapters::postgresqladapter::tabledefinition#create_column_definition()","activerecord::connectionadapters::tabledefinition#create_column_definition()","activerecord::tasks::databasetasks#create_current()","activerecord::connectionadapters::abstractmysqladapter#create_database()","activerecord::connectionadapters::postgresqladapter::schemastatements#create_database()","activerecord::fixtureset::create_fixtures()","activerecord::connectionadapters::schemastatements#create_join_table()","activerecord::persistence#create_or_update()","activerecord::connectionadapters::abstractadapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter::schemastatements#create_schema()","activerecord::connectionadapters::schemastatements#create_table()","activerecord::schemamigration#create_table()","activerecord::connectionadapters::postgresqladapter#create_table_definition()","activerecord::connectionadapters::schemastatements#create_table_definition()","activerecord::attributemethods::timezoneconversion::classmethods#create_time_zone_conversion_attribute?()","activerecord::querymethods#create_with()","activerecord::connectionadapters::postgresqladapter::schemastatements#ctype()","activerecord::tasks::databasetasks#current_config()","activerecord::connectionadapters::abstractmysqladapter#current_database()","activerecord::connectionadapters::postgresqladapter::schemastatements#current_database()","activerecord::connectionadapters::abstractadapter#current_savepoint_name()","activerecord::connectionadapters::postgresqladapter::schemastatements#current_schema()","activerecord::timestamp#current_time_from_proper_timezone()","activerecord::querymethods#custom_join_ast()","activerecord::attributemethods::primarykey::classmethods#dangerous_attribute_method?()","activerecord::attributemethods::classmethods#dangerous_class_method?()","activerecord::connectionadapters::postgresqladapter::columnmethods#daterange()","activerecord::tasks::databasetasks#db_dir()","activerecord::connectionadapters::postgresqladapter::statementpool#dealloc()","activerecord::connectionadapters::sqlite3adapter::statementpool#dealloc()","activerecord::persistence#decrement()","activerecord::persistence#decrement!()","activerecord::countercache::classmethods#decrement_counter()","activerecord::fixtureset::classcache#default_fixture_model()","activerecord::scoping::default::classmethods#default_scope()","activerecord::connectionadapters::databasestatements#default_sequence_name()","activerecord::connectionadapters::columndumper#default_string()","activerecord::dynamicmatchers::method#define()","activerecord::schema::define()","activerecord::attributemethods::primarykey::classmethods#define_method_attribute()","activerecord::attributemethods::read::classmethods#define_method_attribute()","activerecord::attributemethods::timezoneconversion::classmethods#define_method_attribute=()","activerecord::attributemethods::write::classmethods#define_method_attribute=()","activerecord::autosaveassociation::classmethods#define_non_cyclic_method()","activerecord::associations::collectionproxy#delete()","activerecord::connectionadapters::connectionpool::queue#delete()","activerecord::connectionadapters::databasestatements#delete()","activerecord::connectionadapters::mysqladapter::statementpool#delete()","activerecord::connectionadapters::postgresqladapter::statementpool#delete()","activerecord::connectionadapters::statementpool#delete()","activerecord::persistence#delete()","activerecord::relation#delete()","activerecord::associations::collectionproxy#delete_all()","activerecord::relation#delete_all()","activerecord::connectionadapters::databasestatements#delete_sql()","activerecord::reflection::macroreflection#derive_class_name()","activerecord::inheritance::classmethods#descends_from_active_record?()","activerecord::associations::collectionproxy#destroy()","activerecord::persistence#destroy()","activerecord::relation#destroy()","activerecord::persistence#destroy!()","activerecord::associations::collectionproxy#destroy_all()","activerecord::relation#destroy_all()","activerecord::persistence#destroy_associations()","activerecord::locking::optimistic#destroy_row()","activerecord::persistence#destroy_row()","activerecord::persistence#destroyed?()","activerecord::autosaveassociation#destroyed_by_association()","activerecord::autosaveassociation#destroyed_by_association=()","activerecord::enum#detect_enum_conflict!()","activerecord::connectionadapters::querycache#dirties_query_cache()","activerecord::migration#disable_ddl_transaction!()","activerecord::connectionadapters::abstractadapter#disable_extension()","activerecord::connectionadapters::postgresqladapter#disable_extension()","activerecord::connectionadapters::querycache#disable_query_cache!()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysql2adapter#disconnect!()","activerecord::connectionadapters::mysqladapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqlite3adapter#disconnect!()","activerecord::inheritance::classmethods#discriminate_class_for_record()","activerecord::persistence::classmethods#discriminate_class_for_record()","activerecord::associations::collectionproxy#distinct()","activerecord::querymethods#distinct()","activerecord::migration#down()","activerecord::tasks::databasetasks#drop()","activerecord::tasks::databasetasks#drop_all()","activerecord::tasks::databasetasks#drop_current()","activerecord::connectionadapters::schemastatements#drop_join_table()","activerecord::connectionadapters::postgresqladapter::schemastatements#drop_schema()","activerecord::connectionadapters::abstractmysqladapter#drop_table()","activerecord::connectionadapters::schemastatements#drop_table()","activerecord::schemamigration#drop_table()","activerecord::connectionadapters::mysqladapter::statementpool#each()","activerecord::connectionadapters::postgresqladapter::statementpool#each()","activerecord::connectionadapters::sqlite3adapter::statementpool#each()","activerecord::connectionadapters::statementpool#each()","activerecord::fixtureset#each()","activerecord::result#each()","activerecord::tasks::databasetasks#each_current_configuration()","activerecord::tasks::databasetasks#each_local_configuration()","activerecord::querymethods#eager_load()","activerecord::eager_load!()","activerecord::relation#eager_loading?()","activerecord::associations::collectionproxy#empty?()","activerecord::relation#empty?()","activerecord::result#empty?()","activerecord::connectionadapters::abstractmysqladapter#empty_insert_statement_value()","activerecord::connectionadapters::databasestatements#empty_insert_statement_value()","activerecord::connectionadapters::abstractmysqladapter::emulate_booleans()","activerecord::connectionadapters::abstractadapter#enable_extension()","activerecord::connectionadapters::postgresqladapter#enable_extension()","activerecord::connectionadapters::querycache#enable_query_cache!()","activerecord::connectionadapters::postgresqladapter::schemastatements#encoding()","activerecord::connectionadapters::sqlite3adapter#encoding()","activerecord::inheritance#ensure_proper_type()","activerecord::enum#enum()","activerecord::tasks::databasetasks#env()","activerecord::connectionadapters::mysql2adapter#error_number()","activerecord::connectionadapters::postgresqladapter::quoting#escape_bytea()","activerecord::connectionadapters::postgresqlcolumn::cast#escape_hstore()","activerecord::connectionadapters::connectionhandler#establish_connection()","activerecord::connectionhandling#establish_connection()","activerecord::spawnmethods#except()","activerecord::connectionadapters::postgresqladapter#exec_cache()","activerecord::connectionadapters::databasestatements#exec_delete()","activerecord::connectionadapters::mysql2adapter#exec_delete()","activerecord::connectionadapters::mysqladapter#exec_delete()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_delete()","activerecord::connectionadapters::sqlite3adapter#exec_delete()","activerecord::connectionadapters::databasestatements#exec_insert()","activerecord::connectionadapters::mysql2adapter#exec_insert()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_insert()","activerecord::migration#exec_migration()","activerecord::connectionadapters::postgresqladapter#exec_no_cache()","activerecord::associationrelation#exec_queries()","activerecord::relation#exec_queries()","activerecord::connectionadapters::databasestatements#exec_query()","activerecord::connectionadapters::mysql2adapter#exec_query()","activerecord::connectionadapters::mysqladapter#exec_query()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_query()","activerecord::connectionadapters::sqlite3adapter#exec_query()","activerecord::connectionadapters::mysqladapter#exec_stmt()","activerecord::connectionadapters::databasestatements#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_update()","activerecord::connectionadapters::mysqladapter#exec_update()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_update()","activerecord::connectionadapters::sqlite3adapter#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_without_stmt()","activerecord::connectionadapters::abstractmysqladapter#execute()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::mysql2adapter#execute()","activerecord::connectionadapters::postgresqladapter::databasestatements#execute()","activerecord::statementcache#execute()","activerecord::connectionadapters::mysqladapter#execute_and_free()","activerecord::migration#execute_block()","activerecord::attributeassignment#execute_callstack_for_multiparameter_attributes()","activerecord::findermethods#exists?()","activerecord::sanitization::classmethods#expand_hash_conditions_for_aggregates()","activerecord::connectionadapters::abstractadapter#expire()","activerecord::connectionadapters::mysql2adapter#explain()","activerecord::connectionadapters::postgresqladapter::databasestatements#explain()","activerecord::connectionadapters::sqlite3adapter#explain()","activerecord::relation#explain()","activerecord::nodatabaseerror#extend_message()","activerecord::querymethods#extending()","activerecord::connectionadapters::postgresqladapter#extension_enabled?()","activerecord::connectionadapters::abstractadapter#extensions()","activerecord::connectionadapters::postgresqladapter#extensions()","activerecord::connectionadapters::postgresqladapter::oid::range#extract_bounds()","activerecord::attributeassignment#extract_callstack_for_multiparameter_attributes()","activerecord::connectionadapters::postgresqlcolumn#extract_limit()","activerecord::connectionadapters::postgresqladapter#extract_pg_identifier_from_name()","activerecord::connectionadapters::postgresqlcolumn#extract_precision()","activerecord::connectionadapters::postgresqlcolumn#extract_scale()","activerecord::connectionadapters::postgresqladapter::utils#extract_schema_and_table()","activerecord::connectionadapters::postgresqladapter#extract_table_ref_from_insert_sql()","activerecord::connectionadapters::postgresqlcolumn::extract_value_from_default()","activerecord::connectionadapters::postgresqladapter::oid::typemap#fetch()","activerecord::associations::collectionproxy#fifth()","activerecord::findermethods#fifth()","activerecord::findermethods#fifth!()","activerecord::connectionadapters::transactionstate#finalized?()","activerecord::associations::collectionproxy#find()","activerecord::findermethods#find()","activerecord::findermethods#find_by()","activerecord::findermethods#find_by!()","activerecord::querying#find_by_sql()","activerecord::batches#find_each()","activerecord::batches#find_in_batches()","activerecord::findermethods#find_last()","activerecord::findermethods#find_nth()","activerecord::findermethods#find_nth_with_limit()","activerecord::findermethods#find_one()","activerecord::relation#find_or_create_by()","activerecord::relation#find_or_create_by!()","activerecord::relation#find_or_initialize_by()","activerecord::attributeassignment#find_parameter_position()","activerecord::findermethods#find_some()","activerecord::inheritance::classmethods#find_sti_class()","activerecord::findermethods#find_take()","activerecord::connectionadapters::mysqladapter::fields::find_type()","activerecord::findermethods#find_with_associations()","activerecord::findermethods#find_with_ids()","activerecord::dynamicmatchers::findby#finder()","activerecord::dynamicmatchers::findbybang#finder()","activerecord::dynamicmatchers::finder#finder()","activerecord::associations::collectionproxy#first()","activerecord::findermethods#first()","activerecord::findermethods#first!()","activerecord::fixtureset::fixture_is_cached?()","activerecord::tasks::databasetasks#fixtures_path()","activerecord::associations::collectionproxy#forty_two()","activerecord::findermethods#forty_two()","activerecord::findermethods#forty_two!()","activerecord::associations::collectionproxy#fourth()","activerecord::findermethods#fourth()","activerecord::findermethods#fourth!()","activerecord::querymethods#from()","activerecord::connectionadapters::mysql2adapter#full_version()","activerecord::connectionadapters::mysqladapter#full_version()","activerecord::gem_version()","activerecord::nestedattributes::classmethods#generate_association_writer()","activerecord::core::classmethods#generated_association_methods()","activerecord::connectionadapters::postgresqladapter#get_oid_type()","activerecord::querymethods#group()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::attributemethods#has_attribute?()","activerecord::connectionadapters::postgresqlcolumn#has_default_function?()","activerecord::calculations#has_include?()","activerecord::associations::classmethods#has_many()","activerecord::associations::classmethods#has_one()","activerecord::fixtureset#has_primary_key_column?()","activerecord::result#hash_rows()","activerecord::querymethods#having()","activerecord::connectionadapters::postgresqladapter::columnmethods#hstore()","activerecord::connectionadapters::postgresqlcolumn::cast#hstore_to_string()","activerecord::attributemethods::primarykey#id()","activerecord::attributemethods::primarykey#id=()","activerecord::attributemethods::primarykey#id?()","activerecord::attributemethods::primarykey#id_before_type_cast()","activerecord::attributemethods::primarykey#id_was()","activerecord::fixtureset::identify()","activerecord::calculations#ids()","activerecord::connectionadapters::databaselimits#in_clause_length()","activerecord::associations::collectionproxy#include?()","activerecord::querymethods#includes()","activerecord::persistence#increment()","activerecord::persistence#increment!()","activerecord::countercache::classmethods#increment_counter()","activerecord::locking::optimistic#increment_lock()","activerecord::connectionadapters::table#index()","activerecord::connectionadapters::tabledefinition#index()","activerecord::connectionadapters::abstractadapter#index_algorithms()","activerecord::connectionadapters::abstractmysqladapter#index_algorithms()","activerecord::connectionadapters::postgresqladapter#index_algorithms()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","activerecord::schemamigration#index_name()","activerecord::connectionadapters::postgresqladapter::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_for_remove()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresqladapter::schemastatements#index_name_length()","activerecord::connectionadapters::postgresqladapter::schemastatements#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activerecord::connectionadapters::postgresqladapter::columnmethods#inet()","activerecord::connectionadapters::postgresqladapter::oid::range#infinity()","activerecord::connectionadapters::postgresqladapter::oid::range#infinity?()","activerecord::modelschema::classmethods#inheritance_column()","activerecord::modelschema::classmethods#inheritance_column=()","activerecord::fixtureset#inheritance_column_name()","activerecord::delegation::delegatecache#inherited()","activerecord::relation#initialize_copy()","activerecord::result#initialize_copy()","activerecord::inheritance#initialize_dup()","activerecord::core::classmethods#initialize_generated_modules()","activerecord::inheritance#initialize_internals_callback()","activerecord::scoping#initialize_internals_callback()","activerecord::connectionadapters::mysql2adapter#initialize_schema_migrations_table()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","activerecord::connectionadapters::postgresqladapter#initialize_type_map()","activerecord::connectionadapters::databasestatements#insert()","activerecord::fixtureset::classcache#insert_class()","activerecord::connectionadapters::databasestatements#insert_fixture()","activerecord::connectionadapters::databasestatements#insert_sql()","activerecord::connectionadapters::mysql2adapter#insert_sql()","activerecord::connectionadapters::postgresqladapter::databasestatements#insert_sql()","activerecord::core::classmethods#inspect()","activerecord::relation#inspect()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","activerecord::persistence::classmethods#instantiate()","activerecord::fixtureset::instantiate_all_loaded_fixtures()","activerecord::fixtureset::instantiate_fixtures()","activerecord::connectionadapters::postgresqladapter::columnmethods#int4range()","activerecord::connectionadapters::postgresqladapter::columnmethods#int8range()","activerecord::migration::commandrecorder#inverse_of()","activerecord::migration::commandrecorder#invert_add_index()","activerecord::migration::commandrecorder#invert_change_column_null()","activerecord::migration::commandrecorder#invert_drop_table()","activerecord::migration::commandrecorder#invert_remove_column()","activerecord::migration::commandrecorder#invert_remove_index()","activerecord::migration::commandrecorder#invert_rename_column()","activerecord::migration::commandrecorder#invert_rename_index()","activerecord::migration::commandrecorder#invert_rename_table()","activerecord::associations::builder::hasandbelongstomany::jointableresolver::knownclass#join_table()","activerecord::relation#joined_includes_values()","activerecord::querymethods#joins()","activerecord::connectionadapters::databaselimits#joins_per_query()","activerecord::connectionadapters::postgresqladapter::columnmethods#json()","activerecord::connectionadapters::postgresqlcolumn::cast#json_to_string()","activerecord::connectionadapters::mysqladapter::statementpool#key?()","activerecord::connectionadapters::postgresqladapter::oid::typemap#key?()","activerecord::connectionadapters::postgresqladapter::statementpool#key?()","activerecord::connectionadapters::sqlite3adapter::statementpool#key?()","activerecord::connectionadapters::statementpool#key?()","activerecord::associations::builder::hasandbelongstomany::jointableresolver::knownclass#klass()","activerecord::reflection::macroreflection#klass()","activerecord::notouching#klasses()","activerecord::associations::collectionproxy#last()","activerecord::findermethods#last()","activerecord::result#last()","activerecord::findermethods#last!()","activerecord::connectionadapters::postgresqladapter#last_insert_id_value()","activerecord::connectionadapters::databasestatements#last_inserted_id()","activerecord::connectionadapters::mysql2adapter#last_inserted_id()","activerecord::connectionadapters::mysqladapter#last_inserted_id()","activerecord::connectionadapters::sqlite3adapter#last_inserted_id()","activerecord::connectionadapters::abstractadapter#lease()","activerecord::associations::collectionproxy#length()","activerecord::connectionadapters::mysqladapter::statementpool#length()","activerecord::connectionadapters::postgresqladapter::statementpool#length()","activerecord::connectionadapters::sqlite3adapter::statementpool#length()","activerecord::connectionadapters::statementpool#length()","activerecord::querymethods#limit()","activerecord::findermethods#limited_ids_for()","activerecord::connectionadapters::abstractmysqladapter#limited_update_conditions()","activerecord::connectionadapters::databasestatements#limited_update_conditions()","activerecord::relation#load()","activerecord::migrationproxy#load_migration()","activerecord::tasks::databasetasks#load_schema()","activerecord::tasks::databasetasks#load_schema_current()","activerecord::migration#load_schema_if_pending!()","activerecord::tasks::databasetasks#load_seed()","activerecord::associations::collectionproxy#load_target()","activerecord::associations::collectionproxy#loaded?()","activerecord::tasks::databasetasks#local_database?()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::connectionadapters::querycache#locked?()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_column=()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","activerecord::logsubscriber#logger()","activerecord::connectionadapters::postgresqladapter::columnmethods#ltree()","activerecord::connectionadapters::postgresqladapter::columnmethods#macaddr()","activerecord::associations::collectionproxy#many?()","activerecord::relation#many?()","activerecord::connectionadapters::abstractmysqladapter#mariadb?()","activerecord::autosaveassociation#mark_for_destruction()","activerecord::autosaveassociation#marked_for_destruction?()","activerecord::connectionadapters::schemacache#marshal_dump()","activerecord::connectionadapters::schemacache#marshal_load()","activerecord::dynamicmatchers::method#match()","activerecord::timestamp#max_updated_column_timestamp()","activerecord::calculations#maximum()","activerecord::spawnmethods#merge()","activerecord::attributemethods::attributemethodcache#method_body()","activerecord::migration#method_missing()","activerecord::migration::commandrecorder#method_missing()","activerecord::migration#migrate()","activerecord::migrationproxy#migration()","activerecord::connectionadapters::columndumper#migration_keys()","activerecord::connectionadapters::postgresqladapter#migration_keys()","activerecord::schema#migrations_paths()","activerecord::tasks::databasetasks#migrations_paths()","activerecord::calculations#minimum()","activerecord::migrationproxy#mtime()","activerecord::connectionadapters::table#native()","activerecord::connectionadapters::tabledefinition#native()","activerecord::connectionadapters::abstractmysqladapter#native_database_types()","activerecord::connectionadapters::schemastatements#native_database_types()","activerecord::autosaveassociation#nested_records_changed_for_autosave?()","activerecord::associationrelation::new()","activerecord::associations::builder::hasandbelongstomany::jointableresolver::knownclass::new()","activerecord::associations::collectionproxy#new()","activerecord::associations::preloader::alreadyloaded::new()","activerecord::associations::preloader::nullpreloader::new()","activerecord::attributeassignmenterror::new()","activerecord::attributemethods::attributemethodcache::new()","activerecord::connectionadapters::abstractmysqladapter::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::connectionpool::queue::new()","activerecord::connectionadapters::connectionpool::reaper::new()","activerecord::connectionadapters::databasestatements::new()","activerecord::connectionadapters::mysql2adapter::new()","activerecord::connectionadapters::mysqladapter::new()","activerecord::connectionadapters::mysqladapter::statementpool::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::postgresqladapter::oid::array::new()","activerecord::connectionadapters::postgresqladapter::oid::range::new()","activerecord::connectionadapters::postgresqladapter::oid::typemap::new()","activerecord::connectionadapters::postgresqladapter::oid::vector::new()","activerecord::connectionadapters::postgresqladapter::statementpool::new()","activerecord::connectionadapters::querycache::new()","activerecord::connectionadapters::sqlite3adapter::new()","activerecord::connectionadapters::sqlite3adapter::statementpool::new()","activerecord::connectionadapters::sqlite3adapter::version::new()","activerecord::connectionadapters::schemacache::new()","activerecord::connectionadapters::statementpool::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::connectionadapters::transactionstate::new()","activerecord::dynamicmatchers::method::new()","activerecord::fixtureset::new()","activerecord::fixtureset::classcache::new()","activerecord::inheritance::classmethods#new()","activerecord::logsubscriber::new()","activerecord::migration::new()","activerecord::migration::checkpending::new()","activerecord::migration::commandrecorder::new()","activerecord::migrationproxy::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::nodatabaseerror::new()","activerecord::querycache::new()","activerecord::querymethods::wherechain::new()","activerecord::reflection::macroreflection::new()","activerecord::relation#new()","activerecord::relation::new()","activerecord::result::new()","activerecord::staleobjecterror::new()","activerecord::statementcache::new()","activerecord::statementinvalid::new()","activerecord::unknownattributeerror::new()","activerecord::unknownprimarykey::new()","activerecord::connectionadapters::connectionpool#new_connection()","activerecord::persistence#new_record?()","activerecord::connectionadapters::postgresqladapter::statementpool#next_key()","activerecord::generators::migration::classmethods#next_migration_number()","activerecord::migration#next_migration_number()","activerecord::notouching::classmethods#no_touching()","activerecord::notouching#no_touching?()","activerecord::connectionadapters::connectionpool::queue#no_wait_poll()","activerecord::querymethods#none()","activerecord::schemamigration#normalize_migration_number()","activerecord::querymethods::wherechain#not()","activerecord::connectionadapters::connectionpool::queue#num_waiting()","activerecord::connectionadapters::postgresqladapter::columnmethods#numrange()","activerecord::logsubscriber#odd?()","activerecord::querymethods#offset()","activerecord::spawnmethods#only()","activerecord::connectionadapters::abstractadapter#open_transactions()","activerecord::calculations#operation_over_aggregate_column()","activerecord::connectionadapters::schemastatements#options_include_default?()","activerecord::querymethods#order()","activerecord::connectionadapters::connectionhandler#owner_to_pool()","activerecord::connectionadapters::postgresqlcolumn::arrayparser#parse_array_contents()","activerecord::connectionadapters::postgresqlcolumn::arrayparser#parse_data()","activerecord::connectionadapters::postgresqlcolumn::arrayparser#parse_pg_array()","activerecord::dynamicmatchers::method#pattern()","activerecord::calculations#perform_calculation()","activerecord::persistence#persisted?()","activerecord::connectionadapters::abstractmysqladapter#pk_and_sequence_for()","activerecord::attributemethods#pk_attribute?()","activerecord::calculations#pluck()","activerecord::connectionadapters::postgresqlcolumn::cast#point_to_string()","activerecord::connectionadapters::connectionpool::queue#poll()","activerecord::connectionadapters::connectionhandler#pool_for()","activerecord::connectionadapters::connectionhandler#pool_from_any_process_for()","activerecord::scoping#populate_with_current_scope_attributes()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activerecord::dynamicmatchers::findby::prefix()","activerecord::dynamicmatchers::findbybang::prefix()","activerecord::dynamicmatchers::method#prefix()","activerecord::querymethods#preload()","activerecord::associations::preloader::alreadyloaded#preloaded_records()","activerecord::store::hashaccessor::prepare()","activerecord::store::indifferenthashaccessor::prepare()","activerecord::connectionadapters::columndumper#prepare_column_options()","activerecord::connectionadapters::postgresqladapter#prepare_column_options()","activerecord::connectionadapters::schemacache#prepare_default_proc()","activerecord::connectionadapters::postgresqladapter#prepare_statement()","activerecord::associations::collectionproxy#prepend()","activerecord::querymethods#preprocess_order_args()","activerecord::relation#pretty_print()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::abstractmysqladapter#primary_key()","activerecord::connectionadapters::postgresqladapter::schemastatements#primary_key()","activerecord::connectionadapters::postgresqladapter::tabledefinition#primary_key()","activerecord::connectionadapters::tabledefinition#primary_key()","activerecord::schemamigration#primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","activerecord::connectionadapters::tabledefinition#primary_key_column_name()","activerecord::fixtureset#primary_key_name()","activerecord::connectionadapters::schemacache#primary_keys()","activerecord::migration#proper_table_name()","activerecord::associationrelation#proxy_association()","activerecord::associations::collectionproxy#proxy_association()","activerecord::tasks::databasetasks#purge()","activerecord::associations::collectionproxy#push()","activerecord::attributemethods::query#query_attribute()","activerecord::connectionadapters::abstractmysqladapter#quote()","activerecord::connectionadapters::quoting#quote()","activerecord::connectionadapters::sqlite3adapter#quote()","activerecord::connectionadapters::postgresqlcolumn::cast#quote_and_escape()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::mysql2adapter#quote_string()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::postgresqladapter::quoting#quote_table_name()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::postgresqladapter::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::sqlite3adapter#quote_table_name_for_assignment()","activerecord::connectionadapters::abstractmysqladapter#quoted_columns_for_index()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::abstractmysqladapter#quoted_false()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::sanitization#quoted_id()","activerecord::locking::optimistic::classmethods#quoted_locking_column()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::modelschema::classmethods#quoted_table_name()","activerecord::connectionadapters::abstractmysqladapter#quoted_true()","activerecord::connectionadapters::quoting#quoted_true()","activerecord::connectionadapters::postgresqlcolumn::cast#range_to_string()","activerecord::connectionadapters::abstractadapter#raw_connection()","activerecord::attributemethods::write#raw_type_cast_attribute_for_write()","activerecord::attributemethods::write#raw_write_attribute()","activerecord::store::hashaccessor::read()","activerecord::store::stringkeyedhashaccessor::read()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","activerecord::fixtureset#read_fixture_files()","activerecord::store#read_store_attribute()","activerecord::aggregations::classmethods#reader_method()","activerecord::querymethods#readonly()","activerecord::attributemethods#readonly_attribute?()","activerecord::readonlyattributes::classmethods#readonly_attributes()","activerecord::connectionadapters::connectionpool#reap()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysql2adapter#reconnect!()","activerecord::connectionadapters::mysqladapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activerecord::migration::commandrecorder#record()","activerecord::autosaveassociation#record_changed?()","activerecord::connectionadapters::abstractmysqladapter#recreate_database()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::querymethods#references()","activerecord::relation#references_eager_loaded_tables?()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","activerecord::reflection::classmethods#reflections()","activerecord::tasks::databasetasks#register_task()","activerecord::connectionadapters::mysqladapter::fields::register_type()","activerecord::connectionadapters::postgresqladapter::oid::register_type()","activerecord::connectionadapters::postgresqladapter::oid::registered_type?()","activerecord::locking::optimistic#relation_for_destroy()","activerecord::persistence#relation_for_destroy()","activerecord::connectionadapters::connectionpool#release()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::abstractadapter#release_savepoint()","activerecord::associations::collectionproxy#reload()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","activerecord::connectionadapters::postgresqladapter#reload_type_map()","activerecord::connectionadapters::connectionpool#remove()","activerecord::connectionadapters::connectionpool::queue#remove()","activerecord::connectionadapters::table#remove()","activerecord::connectionadapters::schemastatements#remove_belongs_to()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::tabledefinition#remove_column()","activerecord::connectionadapters::abstractmysqladapter#remove_column_sql()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::connectionadapters::abstractmysqladapter#remove_columns_sql()","activerecord::connectionadapters::connectionhandler#remove_connection()","activerecord::connectionhandling#remove_connection()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","activerecord::connectionadapters::abstractmysqladapter#remove_index_sql()","activerecord::connectionadapters::schemastatements#remove_reference()","activerecord::connectionadapters::table#remove_references()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::abstractmysqladapter#remove_timestamps_sql()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::postgresqladapter::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_column_indexes()","activerecord::connectionadapters::abstractmysqladapter#rename_column_sql()","activerecord::connectionadapters::abstractmysqladapter#rename_index()","activerecord::connectionadapters::postgresqladapter::schemastatements#rename_index()","activerecord::connectionadapters::schemastatements#rename_index()","activerecord::connectionadapters::table#rename_index()","activerecord::connectionadapters::abstractmysqladapter#rename_table()","activerecord::connectionadapters::postgresqladapter::schemastatements#rename_table()","activerecord::connectionadapters::sqlite3adapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","activerecord::connectionadapters::schemastatements#rename_table_indexes()","activerecord::logsubscriber#render_bind()","activerecord::querymethods#reorder()","activerecord::associations::collectionproxy#replace()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqlite3adapter#requires_reloading?()","activerecord::associations::collectionproxy#reset()","activerecord::relation#reset()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysql2adapter#reset!()","activerecord::connectionadapters::mysqladapter#reset!()","activerecord::connectionadapters::postgresqladapter#reset!()","activerecord::fixtureset::reset_cache()","activerecord::modelschema::classmethods#reset_column_information()","activerecord::countercache::classmethods#reset_counters()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activerecord::connectionadapters::databasestatements#reset_sequence!()","activerecord::attributemethods#respond_to?()","activerecord::querycache#restore_query_cache_settings()","activerecord::dynamicmatchers::finder#result()","activerecord::connectionhandling#retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","activerecord::querymethods#reverse_order()","activerecord::querymethods#reverse_sql_order()","activerecord::migration#reversible()","activerecord::migration#revert()","activerecord::migration::commandrecorder#revert()","activerecord::migration#reverting?()","activerecord::querymethods#rewhere()","activerecord::transactions#rollback_active_record_state!()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::abstractadapter#rollback_to_savepoint()","activerecord::connectionadapters::transactionstate#rolledback?()","activerecord::tasks::databasetasks#root()","activerecord::associations::preloader::alreadyloaded#run()","activerecord::associations::preloader::nullpreloader::run()","activerecord::connectionadapters::connectionpool::reaper#run()","activerecord::migration#run()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","activerecord::sanitization::classmethods#sanitize_conditions()","activerecord::connectionadapters::databasestatements#sanitize_limit()","activerecord::sanitization::classmethods#sanitize_sql()","activerecord::sanitization::classmethods#sanitize_sql_array()","activerecord::sanitization::classmethods#sanitize_sql_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_for_conditions()","activerecord::sanitization::classmethods#sanitize_sql_hash()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_conditions()","activerecord::persistence#save()","activerecord::validations#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activerecord::autosaveassociation#save_belongs_to_association()","activerecord::enum#save_changed_attribute()","activerecord::autosaveassociation#save_collection_association()","activerecord::autosaveassociation#save_has_one_association()","activerecord::migration#say()","activerecord::migration#say_with_time()","activerecord::connectionadapters::abstractadapter#schema_cache=()","activerecord::connectionadapters::abstractadapter#schema_creation()","activerecord::connectionadapters::abstractmysqladapter#schema_creation()","activerecord::connectionadapters::postgresqladapter#schema_creation()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_exists?()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_names()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_search_path()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_search_path=()","activerecord::associations::collectionproxy#scope()","activerecord::scoping::named::classmethods#scope()","activerecord::relation#scope_for_create()","activerecord::associations::collectionproxy#scoping()","activerecord::relation#scoping()","activerecord::associations::collectionproxy#second()","activerecord::findermethods#second()","activerecord::findermethods#second!()","activerecord::tasks::databasetasks#seed_loader()","activerecord::associations::collectionproxy#select()","activerecord::connectionadapters::databasestatements#select()","activerecord::connectionadapters::mysql2adapter#select()","activerecord::connectionadapters::mysqladapter#select()","activerecord::connectionadapters::postgresqladapter#select()","activerecord::querymethods#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","activerecord::calculations#select_for_count()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysql2adapter#select_rows()","activerecord::connectionadapters::mysqladapter#select_rows()","activerecord::connectionadapters::postgresqladapter::databasestatements#select_rows()","activerecord::connectionadapters::sqlite3adapter#select_rows()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","activerecord::modelschema::classmethods#sequence_name()","activerecord::modelschema::classmethods#sequence_name=()","activerecord::connectionadapters::postgresqladapter::schemastatements#serial_sequence()","activerecord::serialization#serializable_hash()","activerecord::attributemethods::serialization::classmethods#serialize()","activerecord::attributemethods::serialization::classmethods#serialized_attributes()","activerecord::connectionadapters::postgresqladapter#session_auth=()","activerecord::connectionadapters::mysql2adapter#set_field_encoding()","activerecord::connectionadapters::mysqladapter#set_field_encoding()","activerecord::transactions::classmethods#set_options_for_callbacks!()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activerecord::connectionadapters::transactionstate#set_state()","activerecord::timestamp#should_record_timestamps?()","activerecord::connectionadapters::abstractmysqladapter#show_variable()","activerecord::dynamicmatchers::finder#signature()","activerecord::connectionadapters::postgresqlcolumn#simplified_type()","activerecord::associations::collectionproxy#size()","activerecord::connectionadapters::schemacache#size()","activerecord::fixtureset#size()","activerecord::relation#size()","activerecord::associations::collectionproxy#spawn()","activerecord::logsubscriber#sql()","activerecord::connectionadapters::databasestatements#sql_for_insert()","activerecord::connectionadapters::postgresqladapter::databasestatements#sql_for_insert()","activerecord::connectionadapters::postgresqladapter#sql_key()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::sqlite3adapter#sqlite_version()","activerecord::inheritance::classmethods#sti_name()","activerecord::store::classmethods#store()","activerecord::store::classmethods#store_accessor()","activerecord::store#store_accessor_for()","activerecord::store::classmethods#stored_attributes()","activerecord::connectionadapters::abstractmysqladapter#strict_mode?()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_array()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_bit()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_cidr()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_hstore()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_json()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_point()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_time()","activerecord::tasks::databasetasks#structure_dump()","activerecord::tasks::databasetasks#structure_load()","activerecord::inheritance::classmethods#subclass_from_attributes()","activerecord::inheritance::classmethods#subclass_from_attributes?()","activerecord::connectionadapters::abstractmysqladapter#subquery_for()","activerecord::connectionadapters::databasestatements#subquery_for()","activerecord::connectionadapters::abstractadapter#substitute_at()","activerecord::connectionadapters::postgresqladapter::databasestatements#substitute_at()","activerecord::dynamicmatchers::findbybang::suffix()","activerecord::dynamicmatchers::method#suffix()","activerecord::calculations#sum()","activerecord::connectionadapters::sqlite3adapter#supports_add_column?()","activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()","activerecord::connectionadapters::abstractadapter#supports_count_distinct?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqlite3adapter#supports_ddl_transactions?()","activerecord::connectionadapters::abstractadapter#supports_explain?()","activerecord::connectionadapters::mysql2adapter#supports_explain?()","activerecord::connectionadapters::postgresqladapter#supports_explain?()","activerecord::connectionadapters::sqlite3adapter#supports_explain?()","activerecord::connectionadapters::abstractadapter#supports_extensions?()","activerecord::connectionadapters::postgresqladapter#supports_extensions?()","activerecord::connectionadapters::abstractadapter#supports_index_sort_order?()","activerecord::connectionadapters::abstractmysqladapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_index_sort_order?()","activerecord::connectionadapters::sqlite3adapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_insert_with_returning?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::abstractmysqladapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_partial_index?()","activerecord::connectionadapters::postgresqladapter#supports_partial_index?()","activerecord::connectionadapters::sqlite3adapter#supports_partial_index?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::abstractmysqladapter#supports_primary_key?()","activerecord::connectionadapters::postgresqladapter#supports_ranges?()","activerecord::connectionadapters::abstractmysqladapter#supports_rename_index?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::sqlite3adapter#supports_savepoints?()","activerecord::connectionadapters::databasestatements#supports_statement_cache?()","activerecord::connectionadapters::mysqladapter#supports_statement_cache?()","activerecord::connectionadapters::postgresqladapter#supports_statement_cache?()","activerecord::connectionadapters::sqlite3adapter#supports_statement_cache?()","activerecord::connectionadapters::abstractadapter#supports_transaction_isolation?()","activerecord::connectionadapters::abstractmysqladapter#supports_transaction_isolation?()","activerecord::connectionadapters::postgresqladapter#supports_transaction_isolation?()","activerecord::connectionadapters::abstractmysqladapter#supports_views?()","activerecord::migration#suppress_messages()","activerecord::querymethods#symbol_unscoping()","activerecord::inheritance::classmethods#symbolized_base_class()","activerecord::inheritance::classmethods#symbolized_sti_name()","activerecord::connectionadapters::connectionpool::queue#synchronize()","activerecord::associations::joindependency::aliases::table#table()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::connectionadapters::abstractmysqladapter#table_exists?()","activerecord::connectionadapters::postgresqladapter::schemastatements#table_exists?()","activerecord::connectionadapters::sqlite3adapter#table_exists?()","activerecord::connectionadapters::schemacache#table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::modelschema::classmethods#table_exists?()","activerecord::schemamigration#table_exists?()","activerecord::modelschema::classmethods#table_name()","activerecord::schemamigration#table_name()","activerecord::modelschema::classmethods#table_name=()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::migration#table_name_options()","activerecord::fixtureset#table_rows()","activerecord::connectionadapters::sqlite3adapter#table_structure()","activerecord::connectionadapters::postgresqladapter::schemastatements#tables()","activerecord::connectionadapters::schemacache#tables()","activerecord::relation#tables_in_string()","activerecord::findermethods#take()","activerecord::findermethods#take!()","activerecord::associations::collectionproxy#target()","activerecord::associations::collectionproxy#third()","activerecord::findermethods#third()","activerecord::findermethods#third!()","activerecord::timestamp#timestamp_attributes_for_create()","activerecord::timestamp#timestamp_attributes_for_create_in_model()","activerecord::timestamp#timestamp_attributes_for_update()","activerecord::timestamp#timestamp_attributes_for_update_in_model()","activerecord::fixtureset#timestamp_column_names()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activerecord::associations::collectionproxy#to_a()","activerecord::relation#to_a()","activerecord::associations::collectionproxy#to_ary()","activerecord::result#to_ary()","mysql::time#to_date()","activerecord::result#to_hash()","activerecord::connectionadapters::postgresqladapter::oid::range#to_integer()","activerecord::attributemethods::primarykey#to_key()","activerecord::integration#to_param()","activerecord::integration::classmethods#to_param()","activerecord::connectionadapters::databasestatements#to_sql()","activerecord::relation#to_sql()","activerecord::serialization#to_xml()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","activerecord::notouching#touch()","activerecord::persistence#touch()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::connectionadapters::databasestatements#transaction_isolation_levels()","activerecord::connectionadapters::databasestatements#transaction_open?()","activerecord::connectionadapters::abstractadapter#translate_exception()","activerecord::connectionadapters::abstractmysqladapter#translate_exception()","activerecord::connectionadapters::postgresqladapter#translate_exception()","activerecord::connectionadapters::sqlite3adapter#translate_exception()","activerecord::connectionadapters::abstractadapter#translate_exception_class()","activerecord::connectionadapters::postgresqladapter::columnmethods#tsrange()","activerecord::connectionadapters::postgresqladapter::columnmethods#tstzrange()","activerecord::connectionadapters::postgresqladapter::columnmethods#tsvector()","activerecord::connectionadapters::mysqladapter::fields::date#type()","activerecord::connectionadapters::mysqladapter::fields::datetime#type()","activerecord::connectionadapters::mysqladapter::fields::float#type()","activerecord::connectionadapters::mysqladapter::fields::time#type()","activerecord::connectionadapters::mysqladapter::fields::type#type()","activerecord::connectionadapters::postgresqladapter::oid::date#type()","activerecord::connectionadapters::postgresqladapter::oid::timestamp#type()","activerecord::connectionadapters::postgresqladapter::oid::type#type()","activerecord::connectionadapters::abstractmysqladapter#type_cast()","activerecord::connectionadapters::mysqladapter::fields::boolean#type_cast()","activerecord::connectionadapters::mysqladapter::fields::date#type_cast()","activerecord::connectionadapters::mysqladapter::fields::datetime#type_cast()","activerecord::connectionadapters::mysqladapter::fields::decimal#type_cast()","activerecord::connectionadapters::mysqladapter::fields::float#type_cast()","activerecord::connectionadapters::mysqladapter::fields::identity#type_cast()","activerecord::connectionadapters::mysqladapter::fields::integer#type_cast()","activerecord::connectionadapters::mysqladapter::fields::time#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::array#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::bit#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::boolean#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::bytea#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::cidr#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::date#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::decimal#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::float#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::hstore#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::identity#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::integer#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::json#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::money#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::point#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::range#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::time#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::timestamp#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::vector#type_cast()","activerecord::connectionadapters::postgresqladapter::quoting#type_cast()","activerecord::connectionadapters::postgresqlcolumn#type_cast()","activerecord::connectionadapters::quoting#type_cast()","activerecord::connectionadapters::postgresqlcolumn::cast#type_cast_array()","activerecord::attributemethods::write#type_cast_attribute_for_write()","activerecord::attributeassignment#type_cast_attribute_value()","activerecord::calculations#type_cast_calculated_value()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_boolean()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_integer()","activerecord::connectionadapters::mysqladapter::fields::type#type_cast_for_write()","activerecord::connectionadapters::postgresqladapter::oid::hstore#type_cast_for_write()","activerecord::connectionadapters::postgresqladapter::oid::json#type_cast_for_write()","activerecord::connectionadapters::postgresqlcolumn#type_cast_for_write()","activerecord::calculations#type_cast_using_column()","activerecord::inheritance::classmethods#type_condition()","activerecord::connectionadapters::postgresqladapter#type_map()","activerecord::connectionadapters::abstractmysqladapter#type_to_sql()","activerecord::connectionadapters::postgresqladapter::schemastatements#type_to_sql()","activerecord::attributemethods#typecasted_attribute_value()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activerecord::modelschema::classmethods#undecorated_table_name()","activerecord::connectionadapters::postgresqladapter::quoting#unescape_bytea()","activerecord::associations::collectionproxy#uniq()","activerecord::querymethods#uniq()","activerecord::relation#uniq_value()","activerecord::connectionadapters::abstractadapter#unprepared_statement()","activerecord::connectionadapters::abstractadapter#unprepared_visitor()","activerecord::querymethods#unscope()","activerecord::scoping::default::classmethods#unscoped()","activerecord::migration#up()","activerecord::connectionadapters::databasestatements#update()","activerecord::persistence#update()","activerecord::relation#update()","activerecord::persistence#update!()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activerecord::persistence#update_attributes()","activerecord::persistence#update_attributes!()","activerecord::persistence#update_column()","activerecord::persistence#update_columns()","activerecord::countercache::classmethods#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","activerecord::connectionadapters::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter#use_insert_returning?()","activerecord::findermethods#using_limitable_reflections?()","activerecord::inheritance::classmethods#using_single_table_inheritance?()","activerecord::connectionadapters::postgresqladapter::columnmethods#uuid()","activerecord::dynamicmatchers::method#valid?()","activerecord::validations#valid?()","activerecord::connectionadapters::sqlite3adapter#valid_alter_table_options()","activerecord::connectionadapters::abstractadapter#valid_type?()","activerecord::connectionadapters::abstractmysqladapter#valid_type?()","activerecord::connectionadapters::postgresqladapter#valid_type?()","activerecord::autosaveassociation#validate_collection_association()","activerecord::querymethods#validate_order_args()","activerecord::autosaveassociation#validate_single_association()","activerecord::validations::classmethods#validates_associated()","activerecord::validations::classmethods#validates_presence_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activerecord::relation#values()","activerecord::connectionadapters::abstractadapter#verify!()","activerecord::persistence#verify_readonly_attribute()","activerecord::version()","activerecord::connectionadapters::abstractmysqladapter#version()","activerecord::schemamigration#version()","activerecord::connectionadapters::abstractmysqladapter::schemacreation#visit_addcolumn()","activerecord::connectionadapters::postgresqladapter::schemacreation#visit_addcolumn()","activerecord::connectionadapters::abstractmysqladapter::schemacreation#visit_changecolumndefinition()","activerecord::connectionadapters::postgresqladapter::schemacreation#visit_columndefinition()","activerecord::connectionadapters::connectionpool::queue#wait_poll()","activerecord::querymethods#where()","activerecord::querymethods#where_unscoping()","activerecord::relation#where_values_hash()","activerecord::connectionadapters::connectionpool#with_connection()","activerecord::locking::pessimistic#with_lock()","activerecord::transactions#with_transaction_returning_status()","activerecord::connectionadapters::abstractadapter#without_prepared_statement?()","activerecord::migration#write()","activerecord::store::hashaccessor::write()","activerecord::store::stringkeyedhashaccessor::write()","activerecord::attributemethods::write#write_attribute()","activerecord::attributemethods::write#write_attribute_with_type_cast()","activerecord::store#write_store_attribute()","activerecord::aggregations::classmethods#writer_method()","activerecord::connectionadapters::postgresqladapter::columnmethods#xml()","activerecord::fixtureset#yaml_file_path()","",""],"info":[["ActiveRecord","","ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","ActiveRecord/Aggregations.html","",""],["ActiveRecord::Aggregations::ClassMethods","","ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled <code>composed_of</code> for representing …\n"],["ActiveRecord::AssociationNotFoundError","","ActiveRecord/AssociationNotFoundError.html","",""],["ActiveRecord::AssociationRelation","","ActiveRecord/AssociationRelation.html","",""],["ActiveRecord::AssociationTypeMismatch","","ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Ticket</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveRecord::Associations","","ActiveRecord/Associations.html","","<p>Active Record Belongs To Association\n<p>Active Record Belongs To Polymorphic Association\n<p>Active Record Has …\n"],["ActiveRecord::Associations::AliasTracker","","ActiveRecord/Associations/AliasTracker.html","",""],["ActiveRecord::Associations::Association","","ActiveRecord/Associations/Association.html","",""],["ActiveRecord::Associations::AssociationScope","","ActiveRecord/Associations/AssociationScope.html","",""],["ActiveRecord::Associations::BelongsToAssociation","","ActiveRecord/Associations/BelongsToAssociation.html","",""],["ActiveRecord::Associations::BelongsToPolymorphicAssociation","","ActiveRecord/Associations/BelongsToPolymorphicAssociation.html","",""],["ActiveRecord::Associations::Builder","","ActiveRecord/Associations/Builder.html","","<p>This is the parent Association class which defines the variables used by\nall associations.\n<p>The hierarchy …\n"],["ActiveRecord::Associations::Builder::Association","","ActiveRecord/Associations/Builder/Association.html","",""],["ActiveRecord::Associations::Builder::BelongsTo","","ActiveRecord/Associations/Builder/BelongsTo.html","",""],["ActiveRecord::Associations::Builder::CollectionAssociation","","ActiveRecord/Associations/Builder/CollectionAssociation.html","",""],["ActiveRecord::Associations::Builder::HasAndBelongsToMany","","ActiveRecord/Associations/Builder/HasAndBelongsToMany.html","",""],["ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver","","ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver.html","",""],["ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass","","ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver/KnownClass.html","",""],["ActiveRecord::Associations::Builder::HasMany","","ActiveRecord/Associations/Builder/HasMany.html","",""],["ActiveRecord::Associations::Builder::HasOne","","ActiveRecord/Associations/Builder/HasOne.html","",""],["ActiveRecord::Associations::Builder::SingularAssociation","","ActiveRecord/Associations/Builder/SingularAssociation.html","",""],["ActiveRecord::Associations::ClassMethods","","ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::Associations::CollectionAssociation","","ActiveRecord/Associations/CollectionAssociation.html","",""],["ActiveRecord::Associations::CollectionProxy","","ActiveRecord/Associations/CollectionProxy.html","","<p>Association proxies in Active Record are middlemen between the object that\nholds the association, known …\n"],["ActiveRecord::Associations::HasManyAssociation","","ActiveRecord/Associations/HasManyAssociation.html","",""],["ActiveRecord::Associations::HasManyThroughAssociation","","ActiveRecord/Associations/HasManyThroughAssociation.html","",""],["ActiveRecord::Associations::HasOneAssociation","","ActiveRecord/Associations/HasOneAssociation.html","",""],["ActiveRecord::Associations::HasOneThroughAssociation","","ActiveRecord/Associations/HasOneThroughAssociation.html","",""],["ActiveRecord::Associations::JoinDependency","","ActiveRecord/Associations/JoinDependency.html","",""],["ActiveRecord::Associations::JoinDependency::Aliases","","ActiveRecord/Associations/JoinDependency/Aliases.html","",""],["ActiveRecord::Associations::JoinDependency::Aliases::Table","","ActiveRecord/Associations/JoinDependency/Aliases/Table.html","",""],["ActiveRecord::Associations::JoinDependency::JoinAssociation","","ActiveRecord/Associations/JoinDependency/JoinAssociation.html","",""],["ActiveRecord::Associations::JoinDependency::JoinBase","","ActiveRecord/Associations/JoinDependency/JoinBase.html","",""],["ActiveRecord::Associations::JoinDependency::JoinPart","","ActiveRecord/Associations/JoinDependency/JoinPart.html","",""],["ActiveRecord::Associations::Preloader","","ActiveRecord/Associations/Preloader.html","",""],["ActiveRecord::Associations::Preloader::AlreadyLoaded","","ActiveRecord/Associations/Preloader/AlreadyLoaded.html","",""],["ActiveRecord::Associations::Preloader::Association","","ActiveRecord/Associations/Preloader/Association.html","",""],["ActiveRecord::Associations::Preloader::BelongsTo","","ActiveRecord/Associations/Preloader/BelongsTo.html","",""],["ActiveRecord::Associations::Preloader::CollectionAssociation","","ActiveRecord/Associations/Preloader/CollectionAssociation.html","",""],["ActiveRecord::Associations::Preloader::HasMany","","ActiveRecord/Associations/Preloader/HasMany.html","",""],["ActiveRecord::Associations::Preloader::HasManyThrough","","ActiveRecord/Associations/Preloader/HasManyThrough.html","",""],["ActiveRecord::Associations::Preloader::HasOne","","ActiveRecord/Associations/Preloader/HasOne.html","",""],["ActiveRecord::Associations::Preloader::HasOneThrough","","ActiveRecord/Associations/Preloader/HasOneThrough.html","",""],["ActiveRecord::Associations::Preloader::NullPreloader","","ActiveRecord/Associations/Preloader/NullPreloader.html","",""],["ActiveRecord::Associations::Preloader::SingularAssociation","","ActiveRecord/Associations/Preloader/SingularAssociation.html","",""],["ActiveRecord::Associations::Preloader::ThroughAssociation","","ActiveRecord/Associations/Preloader/ThroughAssociation.html","",""],["ActiveRecord::Associations::SingularAssociation","","ActiveRecord/Associations/SingularAssociation.html","",""],["ActiveRecord::Associations::ThroughAssociation","","ActiveRecord/Associations/ThroughAssociation.html","",""],["ActiveRecord::AttributeAssignment","","ActiveRecord/AttributeAssignment.html","",""],["ActiveRecord::AttributeAssignment::MultiparameterAttribute","","ActiveRecord/AttributeAssignment/MultiparameterAttribute.html","",""],["ActiveRecord::AttributeAssignmentError","","ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the <code>attributes=</code> method. …\n"],["ActiveRecord::AttributeMethods","","ActiveRecord/AttributeMethods.html","","<p>Active Record Attribute Methods\n"],["ActiveRecord::AttributeMethods::AttributeMethodCache","","ActiveRecord/AttributeMethods/AttributeMethodCache.html","",""],["ActiveRecord::AttributeMethods::BeforeTypeCast","","ActiveRecord/AttributeMethods/BeforeTypeCast.html","","<p>Active Record Attribute Methods Before Type Cast\n<p><code>ActiveRecord::AttributeMethods::BeforeTypeCast</code> provides …\n"],["ActiveRecord::AttributeMethods::ClassMethods","","ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Dirty","","ActiveRecord/AttributeMethods/Dirty.html","",""],["ActiveRecord::AttributeMethods::GeneratedAttributeMethods","","ActiveRecord/AttributeMethods/GeneratedAttributeMethods.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Read::ClassMethods","","ActiveRecord/AttributeMethods/Read/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization","","ActiveRecord/AttributeMethods/Serialization.html","",""],["ActiveRecord::AttributeMethods::Serialization::Attribute","","ActiveRecord/AttributeMethods/Serialization/Attribute.html","",""],["ActiveRecord::AttributeMethods::Serialization::Behavior","","ActiveRecord/AttributeMethods/Serialization/Behavior.html","",""],["ActiveRecord::AttributeMethods::Serialization::Behavior::ClassMethods","","ActiveRecord/AttributeMethods/Serialization/Behavior/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization::ClassMethods","","ActiveRecord/AttributeMethods/Serialization/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization::Type","","ActiveRecord/AttributeMethods/Serialization/Type.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::Type","","ActiveRecord/AttributeMethods/TimeZoneConversion/Type.html","",""],["ActiveRecord::AttributeMethods::Write","","ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::AttributeMethods::Write::ClassMethods","","ActiveRecord/AttributeMethods/Write/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p><code>AutosaveAssociation</code> is a module that takes care of\nautomatically saving …\n"],["ActiveRecord::AutosaveAssociation::AssociationBuilderExtension","","ActiveRecord/AutosaveAssociation/AssociationBuilderExtension.html","",""],["ActiveRecord::AutosaveAssociation::ClassMethods","","ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don&#39;t specify their attributes directly, but\nrather infer them …\n"],["ActiveRecord::Batches","","ActiveRecord/Batches.html","",""],["ActiveRecord::Calculations","","ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],["ActiveRecord::Callbacks::ClassMethods","","ActiveRecord/Callbacks/ClassMethods.html","",""],["ActiveRecord::Coders","","ActiveRecord/Coders.html","",""],["ActiveRecord::Coders::JSON","","ActiveRecord/Coders/JSON.html","",""],["ActiveRecord::Coders::YAMLColumn","","ActiveRecord/Coders/YAMLColumn.html","",""],["ActiveRecord::ConfigurationError","","ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation","","ActiveRecord/ConnectionAdapters/AbstractAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::BindSubstitution","","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/BindSubstitution.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::Column","","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/Column.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::SchemaCreation","","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::AlterTable","","ActiveRecord/ConnectionAdapters/AlterTable.html","",""],["ActiveRecord::ConnectionAdapters::ChangeColumnDefinition","","ActiveRecord/ConnectionAdapters/ChangeColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::ClosedTransaction","","ActiveRecord/ConnectionAdapters/ClosedTransaction.html","",""],["ActiveRecord::ConnectionAdapters::Column","","ActiveRecord/ConnectionAdapters/Column.html","",""],["ActiveRecord::ConnectionAdapters::Column::Format","","ActiveRecord/ConnectionAdapters/Column/Format.html","",""],["ActiveRecord::ConnectionAdapters::ColumnDefinition","","ActiveRecord/ConnectionAdapters/ColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::ColumnDumper","","ActiveRecord/ConnectionAdapters/ColumnDumper.html","","<p>The goal of this module is to move Adapter specific column definitions to\nthe Adapter instead of having …\n"],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionManagement","","ActiveRecord/ConnectionAdapters/ConnectionManagement.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool","","ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html","","<p>Threadsafe, fair, FIFO queue.  Meant to be used by ConnectionPool with\nwhich it shares a Monitor.  But …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","","ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html","","<p>Every <code>frequency</code> seconds, the reaper will call\n<code>reap</code> on <code>pool</code>. A reaper instantiated with a nil\nfrequency …\n"],["ActiveRecord::ConnectionAdapters::ConnectionSpecification","","ActiveRecord/ConnectionAdapters/ConnectionSpecification.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionSpecification::ConnectionUrlResolver","","ActiveRecord/ConnectionAdapters/ConnectionSpecification/ConnectionUrlResolver.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionSpecification::Resolver","","ActiveRecord/ConnectionAdapters/ConnectionSpecification/Resolver.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::IndexDefinition","","ActiveRecord/ConnectionAdapters/IndexDefinition.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter","","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter::Column","","ActiveRecord/ConnectionAdapters/Mysql2Adapter/Column.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter::ExplainPrettyPrinter","","ActiveRecord/ConnectionAdapters/Mysql2Adapter/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter","","ActiveRecord/ConnectionAdapters/MysqlAdapter.html","","<p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based\nMySQL adapter that comes bundled …\n"],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Column","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Column.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Boolean","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Boolean.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Date","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Date.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::DateTime","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/DateTime.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Decimal","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Decimal.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Float","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Float.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Identity","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Identity.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Integer","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Integer.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Time","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Time.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::OpenTransaction","","ActiveRecord/ConnectionAdapters/OpenTransaction.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works with the native C (bitbucket.org/ged/ruby-pg)\ndriver.\n<p>Options:\n<p><code>:host</code> - Defaults …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::BindSubstitution","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/BindSubstitution.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnDefinition","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements::ExplainPrettyPrinter","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Array.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bit","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bit.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Boolean","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Boolean.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bytea","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bytea.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Cidr","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Cidr.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Date.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Decimal","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Decimal.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Float","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Float.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Hstore","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Hstore.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Identity","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Identity.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Integer","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Integer.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Json","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Json.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Money","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Money.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Point","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Point.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Time","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Time.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Timestamp.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Type.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Vector.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ReferentialIntegrity","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ReferentialIntegrity.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaCreation","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Table","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Table.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn","","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser","","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/ArrayParser.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache","","ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::RealTransaction","","ActiveRecord/ConnectionAdapters/RealTransaction.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter","","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html","","<p>The SQLite3 adapter works SQLite 3.6.16 or newer with the sqlite3-ruby\ndrivers (available as gem from …\n"],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::BindSubstitution","","ActiveRecord/ConnectionAdapters/SQLite3Adapter/BindSubstitution.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::ExplainPrettyPrinter","","ActiveRecord/ConnectionAdapters/SQLite3Adapter/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","","ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Column","","ActiveRecord/ConnectionAdapters/SQLite3Column.html","",""],["ActiveRecord::ConnectionAdapters::SavepointTransaction","","ActiveRecord/ConnectionAdapters/SavepointTransaction.html","",""],["ActiveRecord::ConnectionAdapters::Savepoints","","ActiveRecord/ConnectionAdapters/Savepoints.html","",""],["ActiveRecord::ConnectionAdapters::SchemaCache","","ActiveRecord/ConnectionAdapters/SchemaCache.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::StatementPool","","ActiveRecord/ConnectionAdapters/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::Table","","ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and SchemaStatements#create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionAdapters::Transaction","","ActiveRecord/ConnectionAdapters/Transaction.html","",""],["ActiveRecord::ConnectionAdapters::TransactionState","","ActiveRecord/ConnectionAdapters/TransactionState.html","",""],["ActiveRecord::ConnectionHandling","","ActiveRecord/ConnectionHandling.html","",""],["ActiveRecord::ConnectionHandling::MergeAndResolveDefaultUrlConfig","","ActiveRecord/ConnectionHandling/MergeAndResolveDefaultUrlConfig.html","",""],["ActiveRecord::ConnectionNotEstablished","","ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when <code>connection=</code> is given …\n"],["ActiveRecord::ConnectionTimeoutError","","ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period: because …\n"],["ActiveRecord::Core","","ActiveRecord/Core.html","",""],["ActiveRecord::Core::ClassMethods","","ActiveRecord/Core/ClassMethods.html","",""],["ActiveRecord::CounterCache","","ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::CounterCache::ClassMethods","","ActiveRecord/CounterCache/ClassMethods.html","",""],["ActiveRecord::DangerousAttributeError","","ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::Delegation","","ActiveRecord/Delegation.html","",""],["ActiveRecord::Delegation::ClassMethods","","ActiveRecord/Delegation/ClassMethods.html","",""],["ActiveRecord::Delegation::ClassSpecificRelation","","ActiveRecord/Delegation/ClassSpecificRelation.html","",""],["ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods","","ActiveRecord/Delegation/ClassSpecificRelation/ClassMethods.html","",""],["ActiveRecord::Delegation::DelegateCache","","ActiveRecord/Delegation/DelegateCache.html","",""],["ActiveRecord::DeleteRestrictionError","","ActiveRecord/DeleteRestrictionError.html","",""],["ActiveRecord::DuplicateMigrationNameError","","ActiveRecord/DuplicateMigrationNameError.html","",""],["ActiveRecord::DuplicateMigrationVersionError","","ActiveRecord/DuplicateMigrationVersionError.html","",""],["ActiveRecord::DynamicMatchers","","ActiveRecord/DynamicMatchers.html","",""],["ActiveRecord::DynamicMatchers::FindBy","","ActiveRecord/DynamicMatchers/FindBy.html","",""],["ActiveRecord::DynamicMatchers::FindByBang","","ActiveRecord/DynamicMatchers/FindByBang.html","",""],["ActiveRecord::DynamicMatchers::Finder","","ActiveRecord/DynamicMatchers/Finder.html","",""],["ActiveRecord::DynamicMatchers::Method","","ActiveRecord/DynamicMatchers/Method.html","",""],["ActiveRecord::EagerLoadPolymorphicError","","ActiveRecord/EagerLoadPolymorphicError.html","",""],["ActiveRecord::Enum","","ActiveRecord/Enum.html","","<p>Declare an enum attribute where the values map to integers in the database,\nbut can be queried by name. …\n"],["ActiveRecord::Explain","","ActiveRecord/Explain.html","",""],["ActiveRecord::ExplainRegistry","","ActiveRecord/ExplainRegistry.html","",""],["ActiveRecord::ExplainSubscriber","","ActiveRecord/ExplainSubscriber.html","",""],["ActiveRecord::ExplainSubscriber::ActiveSupport","","ActiveRecord/ExplainSubscriber/ActiveSupport.html","",""],["ActiveRecord::FinderMethods","","ActiveRecord/FinderMethods.html","",""],["ActiveRecord::Fixture","","ActiveRecord/Fixture.html","",""],["ActiveRecord::Fixture::FixtureError","","ActiveRecord/Fixture/FixtureError.html","",""],["ActiveRecord::Fixture::FormatError","","ActiveRecord/Fixture/FormatError.html","",""],["ActiveRecord::FixtureClassNotFound","","ActiveRecord/FixtureClassNotFound.html","",""],["ActiveRecord::FixtureSet","","ActiveRecord/FixtureSet.html","","<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>They are stored …\n"],["ActiveRecord::FixtureSet::ClassCache","","ActiveRecord/FixtureSet/ClassCache.html","",""],["ActiveRecord::FixtureSet::File","","ActiveRecord/FixtureSet/File.html","",""],["ActiveRecord::FixtureSet::HasManyThroughProxy","","ActiveRecord/FixtureSet/HasManyThroughProxy.html","",""],["ActiveRecord::FixtureSet::ReflectionProxy","","ActiveRecord/FixtureSet/ReflectionProxy.html","",""],["ActiveRecord::FixtureSet::RenderContext","","ActiveRecord/FixtureSet/RenderContext.html","",""],["ActiveRecord::Generators","","ActiveRecord/Generators.html","",""],["ActiveRecord::Generators::Base","","ActiveRecord/Generators/Base.html","",""],["ActiveRecord::Generators::Migration","","ActiveRecord/Generators/Migration.html","",""],["ActiveRecord::Generators::Migration::ClassMethods","","ActiveRecord/Generators/Migration/ClassMethods.html","",""],["ActiveRecord::Generators::MigrationGenerator","","ActiveRecord/Generators/MigrationGenerator.html","",""],["ActiveRecord::Generators::ModelGenerator","","ActiveRecord/Generators/ModelGenerator.html","",""],["ActiveRecord::HasManyThroughAssociationNotFoundError","","ActiveRecord/HasManyThroughAssociationNotFoundError.html","",""],["ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError","","ActiveRecord/HasManyThroughAssociationPointlessSourceTypeError.html","",""],["ActiveRecord::HasManyThroughAssociationPolymorphicSourceError","","ActiveRecord/HasManyThroughAssociationPolymorphicSourceError.html","",""],["ActiveRecord::HasManyThroughAssociationPolymorphicThroughError","","ActiveRecord/HasManyThroughAssociationPolymorphicThroughError.html","",""],["ActiveRecord::HasManyThroughCantAssociateNewRecords","","ActiveRecord/HasManyThroughCantAssociateNewRecords.html","",""],["ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection","","ActiveRecord/HasManyThroughCantAssociateThroughHasOneOrManyReflection.html","",""],["ActiveRecord::HasManyThroughCantDissociateNewRecords","","ActiveRecord/HasManyThroughCantDissociateNewRecords.html","",""],["ActiveRecord::HasManyThroughNestedAssociationsAreReadonly","","ActiveRecord/HasManyThroughNestedAssociationsAreReadonly.html","",""],["ActiveRecord::HasManyThroughSourceAssociationNotFoundError","","ActiveRecord/HasManyThroughSourceAssociationNotFoundError.html","",""],["ActiveRecord::HasOneThroughCantAssociateThroughCollection","","ActiveRecord/HasOneThroughCantAssociateThroughCollection.html","",""],["ActiveRecord::IllegalMigrationNameError","","ActiveRecord/IllegalMigrationNameError.html","",""],["ActiveRecord::ImmutableRelation","","ActiveRecord/ImmutableRelation.html","","<p>Raised when a relation cannot be mutated because it&#39;s already loaded.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Task</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveRecord::Inheritance","","ActiveRecord/Inheritance.html","",""],["ActiveRecord::Inheritance::ClassMethods","","ActiveRecord/Inheritance/ClassMethods.html","",""],["ActiveRecord::Integration","","ActiveRecord/Integration.html","",""],["ActiveRecord::Integration::ClassMethods","","ActiveRecord/Integration/ClassMethods.html","",""],["ActiveRecord::InvalidForeignKey","","ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],["ActiveRecord::InverseOfAssociationNotFoundError","","ActiveRecord/InverseOfAssociationNotFoundError.html","",""],["ActiveRecord::IrreversibleMigration","","ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from going backwards.\n"],["ActiveRecord::Locking","","ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::LogSubscriber","","ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Migration","","ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],["ActiveRecord::Migration::CheckPending","","ActiveRecord/Migration/CheckPending.html","","<p>This class is used to verify that all migrations have been run before\nloading a web page if config.active_record.migration_error …\n"],["ActiveRecord::Migration::CommandRecorder","","ActiveRecord/Migration/CommandRecorder.html","","<p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done\nduring a migration and knows how to reverse …\n"],["ActiveRecord::Migration::CommandRecorder::StraightReversions","","ActiveRecord/Migration/CommandRecorder/StraightReversions.html","",""],["ActiveRecord::Migration::JoinTable","","ActiveRecord/Migration/JoinTable.html","",""],["ActiveRecord::Migration::ReversibleBlockHelper","","ActiveRecord/Migration/ReversibleBlockHelper.html","",""],["ActiveRecord::MigrationError","","ActiveRecord/MigrationError.html","",""],["ActiveRecord::MigrationProxy","","ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::Migrator","","ActiveRecord/Migrator.html","",""],["ActiveRecord::ModelSchema","","ActiveRecord/ModelSchema.html","",""],["ActiveRecord::ModelSchema::ClassMethods","","ActiveRecord/ModelSchema/ClassMethods.html","",""],["ActiveRecord::MultiparameterAssignmentErrors","","ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe <code>attributes</code> method. The …\n"],["ActiveRecord::NestedAttributes","","ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::NoDatabaseError","","ActiveRecord/NoDatabaseError.html","","<p>Raised when a given database does not exist\n"],["ActiveRecord::NoTouching","","ActiveRecord/NoTouching.html","","<p>Active Record No Touching\n"],["ActiveRecord::NoTouching::ClassMethods","","ActiveRecord/NoTouching/ClassMethods.html","",""],["ActiveRecord::NullMigration","","ActiveRecord/NullMigration.html","",""],["ActiveRecord::NullRelation","","ActiveRecord/NullRelation.html","",""],["ActiveRecord::PendingMigrationError","","ActiveRecord/PendingMigrationError.html","",""],["ActiveRecord::Persistence","","ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::Persistence::ClassMethods","","ActiveRecord/Persistence/ClassMethods.html","",""],["ActiveRecord::PredicateBuilder","","ActiveRecord/PredicateBuilder.html","",""],["ActiveRecord::PredicateBuilder::ArrayHandler","","ActiveRecord/PredicateBuilder/ArrayHandler.html","",""],["ActiveRecord::PredicateBuilder::RelationHandler","","ActiveRecord/PredicateBuilder/RelationHandler.html","",""],["ActiveRecord::PreparedStatementInvalid","","ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using <code>find</code> …\n"],["ActiveRecord::QueryCache","","ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryMethods","","ActiveRecord/QueryMethods.html","",""],["ActiveRecord::QueryMethods::WhereChain","","ActiveRecord/QueryMethods/WhereChain.html","","<p>WhereChain objects act as placeholder for queries in which #where does not\nhave any parameter. In this …\n"],["ActiveRecord::Querying","","ActiveRecord/Querying.html","",""],["ActiveRecord::Railtie","","ActiveRecord/Railtie.html","",""],["ActiveRecord::Railtie::ActionDispatch","","ActiveRecord/Railtie/ActionDispatch.html","",""],["ActiveRecord::Railtie::ActiveSupport","","ActiveRecord/Railtie/ActiveSupport.html","",""],["ActiveRecord::Railtie::Rails","","ActiveRecord/Railtie/Rails.html","",""],["ActiveRecord::Railties","","ActiveRecord/Railties.html","",""],["ActiveRecord::Railties::ControllerRuntime","","ActiveRecord/Railties/ControllerRuntime.html","",""],["ActiveRecord::Railties::ControllerRuntime::ClassMethods","","ActiveRecord/Railties/ControllerRuntime/ClassMethods.html","",""],["ActiveRecord::ReadOnlyAssociation","","ActiveRecord/ReadOnlyAssociation.html","",""],["ActiveRecord::ReadOnlyRecord","","ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::ReadonlyAttributes","","ActiveRecord/ReadonlyAttributes.html","",""],["ActiveRecord::ReadonlyAttributes::ClassMethods","","ActiveRecord/ReadonlyAttributes/ClassMethods.html","",""],["ActiveRecord::RecordInvalid","","ActiveRecord/RecordInvalid.html","","<p>Active Record RecordInvalid\n<p>Raised by <code>save!</code> and <code>create!</code> when the record is\ninvalid. Use the <code>record</code> method …\n"],["ActiveRecord::RecordNotDestroyed","","ActiveRecord/RecordNotDestroyed.html","","<p>Raised by ActiveRecord::Base.destroy! when a call to destroy would return\nfalse.\n"],["ActiveRecord::RecordNotFound","","ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base.save! and ActiveRecord::Base.create! methods\nwhen record cannot be saved …\n"],["ActiveRecord::RecordNotUnique","","ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],["ActiveRecord::Reflection","","ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::AggregateReflection","","ActiveRecord/Reflection/AggregateReflection.html","",""],["ActiveRecord::Reflection::AssociationReflection","","ActiveRecord/Reflection/AssociationReflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables to interrogate Active Record classes and objects about\ntheir associations and aggregations. …\n"],["ActiveRecord::Reflection::MacroReflection","","ActiveRecord/Reflection/MacroReflection.html","","<p>Base class for AggregateReflection and AssociationReflection. Objects of\nAggregateReflection and AssociationReflection …\n"],["ActiveRecord::Reflection::ThroughReflection","","ActiveRecord/Reflection/ThroughReflection.html","",""],["ActiveRecord::Relation","","ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Relation::HashMerger","","ActiveRecord/Relation/HashMerger.html","",""],["ActiveRecord::Relation::Merger","","ActiveRecord/Relation/Merger.html","",""],["ActiveRecord::Result","","ActiveRecord/Result.html","","<p>This class encapsulates a Result returned from calling\n<code>exec_query</code> on any database connection adapter. …\n"],["ActiveRecord::Rollback","","ActiveRecord/Rollback.html","","<p>ActiveRecord::Transactions::ClassMethods.transaction uses this exception to\ndistinguish a deliberate …\n"],["ActiveRecord::RuntimeRegistry","","ActiveRecord/RuntimeRegistry.html","",""],["ActiveRecord::Sanitization","","ActiveRecord/Sanitization.html","",""],["ActiveRecord::Sanitization::ClassMethods","","ActiveRecord/Sanitization/ClassMethods.html","",""],["ActiveRecord::Schema","","ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],["ActiveRecord::SchemaDumper","","ActiveRecord/SchemaDumper.html","",""],["ActiveRecord::SchemaMigration","","ActiveRecord/SchemaMigration.html","",""],["ActiveRecord::Scoping","","ActiveRecord/Scoping.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::Scoping::ClassMethods","","ActiveRecord/Scoping/ClassMethods.html","",""],["ActiveRecord::Scoping::Default","","ActiveRecord/Scoping/Default.html","",""],["ActiveRecord::Scoping::Default::ClassMethods","","ActiveRecord/Scoping/Default/ClassMethods.html","",""],["ActiveRecord::Scoping::Named","","ActiveRecord/Scoping/Named.html","",""],["ActiveRecord::Scoping::Named::ClassMethods","","ActiveRecord/Scoping/Named/ClassMethods.html","",""],["ActiveRecord::Scoping::ScopeRegistry","","ActiveRecord/Scoping/ScopeRegistry.html","",""],["ActiveRecord::Serialization","","ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationTypeMismatch","","ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object&#39;s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SpawnMethods","","ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it&#39;s being\nsaved in another query after …\n"],["ActiveRecord::StatementCache","","ActiveRecord/StatementCache.html","","<p>Statement cache is used to cache a single statement in order to avoid\ncreating the AST again. Initializing …\n"],["ActiveRecord::StatementInvalid","","ActiveRecord/StatementInvalid.html","","<p>Superclass for all database execution errors.\n<p>Wraps the underlying database error as <code>original_exception</code> …\n"],["ActiveRecord::Store","","ActiveRecord/Store.html","","<p>Store gives you a thin wrapper around serialize for the purpose of storing\nhashes in a single column. …\n"],["ActiveRecord::Store::ClassMethods","","ActiveRecord/Store/ClassMethods.html","",""],["ActiveRecord::Store::HashAccessor","","ActiveRecord/Store/HashAccessor.html","",""],["ActiveRecord::Store::IndifferentCoder","","ActiveRecord/Store/IndifferentCoder.html","",""],["ActiveRecord::Store::IndifferentHashAccessor","","ActiveRecord/Store/IndifferentHashAccessor.html","",""],["ActiveRecord::Store::StringKeyedHashAccessor","","ActiveRecord/Store/StringKeyedHashAccessor.html","",""],["ActiveRecord::SubclassNotFound","","ActiveRecord/SubclassNotFound.html","",""],["ActiveRecord::Tasks","","ActiveRecord/Tasks.html","",""],["ActiveRecord::Tasks::DatabaseAlreadyExists","","ActiveRecord/Tasks/DatabaseAlreadyExists.html","",""],["ActiveRecord::Tasks::DatabaseNotSupported","","ActiveRecord/Tasks/DatabaseNotSupported.html","",""],["ActiveRecord::Tasks::DatabaseTasks","","ActiveRecord/Tasks/DatabaseTasks.html","","<p><code>ActiveRecord::Tasks::DatabaseTasks</code> is a utility class, which\nencapsulates logic behind common tasks used …\n"],["ActiveRecord::Tasks::MySQLDatabaseTasks","","ActiveRecord/Tasks/MySQLDatabaseTasks.html","",""],["ActiveRecord::Tasks::PostgreSQLDatabaseTasks","","ActiveRecord/Tasks/PostgreSQLDatabaseTasks.html","",""],["ActiveRecord::Tasks::SQLiteDatabaseTasks","","ActiveRecord/Tasks/SQLiteDatabaseTasks.html","",""],["ActiveRecord::TestFixtures","","ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::Timestamp","","ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],["ActiveRecord::TransactionIsolationError","","ActiveRecord/TransactionIsolationError.html","",""],["ActiveRecord::Transactions","","ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],["ActiveRecord::Translation","","ActiveRecord/Translation.html","",""],["ActiveRecord::UnknownAttributeError","","ActiveRecord/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveRecord::UnknownMigrationVersionError","","ActiveRecord/UnknownMigrationVersionError.html","",""],["ActiveRecord::UnknownPrimaryKey","","ActiveRecord/UnknownPrimaryKey.html","","<p>Raised when a primary key is needed, but not specified in the schema or\nmodel.\n"],["ActiveRecord::VERSION","","ActiveRecord/VERSION.html","",""],["ActiveRecord::Validations","","ActiveRecord/Validations.html","","<p>Active Record Validations\n<p>Active Record includes the majority of its validations from\n<code>ActiveModel::Validations</code> …\n"],["ActiveRecord::Validations::AssociatedValidator","","ActiveRecord/Validations/AssociatedValidator.html","",""],["ActiveRecord::Validations::ClassMethods","","ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::Validations::PresenceValidator","","ActiveRecord/Validations/PresenceValidator.html","",""],["ActiveRecord::Validations::UniquenessValidator","","ActiveRecord/Validations/UniquenessValidator.html","",""],["ActiveRecord::WrappedDatabaseException","","ActiveRecord/WrappedDatabaseException.html","","<p>Defunct wrapper class kept for compatibility. <code>StatementInvalid</code>\nwraps the original exception now.\n"],["ActiveRecord::XmlSerializer","","ActiveRecord/XmlSerializer.html","",""],["ActiveRecord::XmlSerializer::Attribute","","ActiveRecord/XmlSerializer/Attribute.html","",""],["ArJdbcMySQL","","ArJdbcMySQL.html","",""],["ArJdbcMySQL::Error","","ArJdbcMySQL/Error.html","",""],["Arel","","Arel.html","",""],["Mysql","","Mysql.html","",""],["Mysql::Field","","Mysql/Field.html","",""],["Mysql::Result","","Mysql/Result.html","",""],["Mysql::Stmt","","Mysql/Stmt.html","",""],["Mysql::Time","","Mysql/Time.html","",""],["<<","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-3C-3C","(*records)","<p>Adds one or more <code>records</code> to the collection by setting their\nforeign keys to the association&#39;s primary …\n"],["<=>","ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["==","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-3D-3D","(other)",""],["==","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-3D-3D","(other)","<p>Equivalent to <code>Array#==</code>. Returns <code>true</code> if the two\narrays contain the same number of elements and if each …\n"],["==","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-3D-3D","(other)","<p>Compares two relations for equality.\n"],["===","ActiveRecord::Core::ClassMethods","ActiveRecord/Core/ClassMethods.html#method-i-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["[]","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-5B-5D","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["[]","ActiveRecord::AttributeMethods::AttributeMethodCache","ActiveRecord/AttributeMethods/AttributeMethodCache.html#method-i-5B-5D","(name)",""],["[]","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-5B-5D","(oid)",""],["[]","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-5B-5D","(x)",""],["[]","ActiveRecord::FixtureSet::ClassCache","ActiveRecord/FixtureSet/ClassCache.html#method-i-5B-5D","(fs_name)",""],["[]","ActiveRecord::Result","ActiveRecord/Result.html#method-i-5B-5D","(idx)",""],["[]=","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-5B-5D-3D","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. (Alias for the protected\n<code>write_attribute</code> …\n"],["[]=","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-5B-5D-3D","(oid, type)",""],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-5B-5D-3D","(k,v)",""],["_assign_attribute","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-_assign_attribute","(k, v)",""],["_create_record","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-_create_record","(attribute_names = @attributes.keys)","<p>Creates a record with values matching those of the instance attributes and\nreturns its id.\n"],["_create_record","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-_create_record","()",""],["_enum_methods_module","ActiveRecord::Enum","ActiveRecord/Enum.html#method-i-_enum_methods_module","()",""],["_store_accessors_module","ActiveRecord::Store::ClassMethods","ActiveRecord/Store/ClassMethods.html#method-i-_store_accessors_module","()",""],["_update_record","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-_update_record","(attribute_names = @attributes.keys)","<p>Updates the associated record with values matching those of the instance\nattributes. Returns the number …\n"],["_update_record","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-_update_record","(*args)",""],["abstract_class?","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s).\n<p>Supported options:\n<p>:allow_destroy &mdash; If true, …\n"],["accessor","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Hstore","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Hstore.html#method-i-accessor","()",""],["accessor","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Json","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Json.html#method-i-accessor","()",""],["accessor","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-accessor","()",""],["acquire_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-acquire_connection","()","<p>Acquire a connection by one of 1) immediately removing one from the queue\nof available connections, 2) …\n"],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-active-3F","()",""],["active_connection?","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F","()","<p>Is there an open connection that is being used for the current thread?\n"],["active_connections?","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F","()","<p>Returns true if there are any active connections among the connection pools\nthat the ConnectionHandler …\n"],["active_threadsafe?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active_threadsafe-3F","()","<p>Adapter should redefine this if it needs a threadsafe way to approximate if\nthe connection is active …\n"],["active_threadsafe?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active_threadsafe-3F","()",""],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter. Use mixed case - one can\nalways use downcase if needed. …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-adapter_name","()","<p>Returns &#39;PostgreSQL&#39; as adapter name for identification purposes.\n"],["add","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-add","(element)","<p>Add <code>element</code> to the queue.  Never blocks.\n"],["add","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-add","(table_name)","<p>Add internal cache for table with <code>table_name</code>.\n"],["add_autosave_association_callbacks","ActiveRecord::AutosaveAssociation::ClassMethods","ActiveRecord/AutosaveAssociation/ClassMethods.html#method-i-add_autosave_association_callbacks","(reflection)","<p>Adds validation and save callbacks for the association as specified by the\n<code>reflection</code>.\n<p>For performance …\n"],["add_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_belongs_to","(table_name, ref_name, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column_options!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaCreation","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaCreation.html#method-i-add_column_options-21","(sql, options)",""],["add_column_position!","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_position-21","(sql, options)",""],["add_column_position!","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::SchemaCreation","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/SchemaCreation.html#method-i-add_column_position-21","(sql, options)",""],["add_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_sql","(table_name, column_name, type, options = {})",""],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index will …\n"],["add_index_length","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_length","(option_strings, column_names, options = {})",""],["add_index_options","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_options","(table_name, column_name, options = {})",""],["add_index_sort_order","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_sort_order","(option_strings, column_names, options = {})",""],["add_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_sql","(table_name, column_name, options = {})",""],["add_item_to_array","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/ArrayParser.html#method-i-add_item_to_array","(array, current_item, quoted)",""],["add_join_records","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-add_join_records","(rows, row, association)",""],["add_oid","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-add_oid","(row, records_by_oid, type_map)",""],["add_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference","(table_name, ref_name, options = {})","<p>Adds a reference. Optionally adds a <code>type</code> column, if\n<code>:polymorphic</code> option is provided. <code>add_reference</code>\nand …\n"],["add_relations_to_bind_values","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-add_relations_to_bind_values","(attributes)","<p>This function is recursive just for better readablity. #where argument\ndoesn&#39;t support more than …\n"],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name)","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the named table.\n\n<pre>add_timestamps(:suppliers)</pre>\n"],["add_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_timestamps_sql","(table_name)",""],["add_to_transaction","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-add_to_transaction","()","<p>Add the record to the current transaction so that the\n<code>after_rollback</code> and <code>after_commit</code> callbacks can be\n…\n"],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record)","<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],["after_commit","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)","<p>This callback is called after a record has been created, updated, or\ndestroyed.\n<p>You can specify that the …\n"],["after_rollback","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)","<p>This callback is called after a create, update, or destroy are rolled back.\n<p>Please check the documentation …\n"],["aggregate_column","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-aggregate_column","(column_name)",""],["alias_type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html#method-c-alias_type","(new, old)",""],["alias_type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html#method-c-alias_type","(new, old)","<p>Alias the <code>old</code> type to the <code>new</code> type.\n"],["all","ActiveRecord::Scoping::Named::ClassMethods","ActiveRecord/Scoping/Named/ClassMethods.html#method-i-all","()","<p>Returns an <code>ActiveRecord::Relation</code> scope object.\n\n<pre>posts = Post.all\nposts.size # Fires &quot;select count(*) from ...</pre>\n"],["all_timestamp_attributes","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-all_timestamp_attributes","()",""],["all_timestamp_attributes_in_model","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-all_timestamp_attributes_in_model","()",""],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-allowed_index_name_length","()","<p>Returns the maximum allowed length for an index name. This limit is\nenforced by rails and Is less than …\n"],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-allowed_index_name_length","()","<p>Returns 62. SQLite supports index names up to 64 characters. The rest is\nused by rails internally to …\n"],["announce","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-announce","(message)",""],["any?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-any-3F","(&block)","<p>Returns <code>true</code> if the collection is not empty.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">pets</span>.<span class=\"ruby-identifier\">count</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["any?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-any-3F","()","<p>Test if the queue currently contains any elements.\n"],["any?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-any-3F","()","<p>Returns true if there are any records.\n"],["any_waiting?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-any_waiting-3F","()","<p>Test if any threads are currently waiting on the queue.\n"],["append","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-append","(*records)",""],["apply_join_dependency","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-apply_join_dependency","(relation, join_dependency)",""],["arel","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-arel","()",""],["arel_attributes_with_values","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-arel_attributes_with_values","(attribute_names)","<p>Returns a Hash of the Arel::Attributes and attribute values that have been\ntypecasted for use in an  …\n"],["array_of_strings?","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-array_of_strings-3F","(o)",""],["array_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-array_to_string","(value, column, adapter)",""],["assert_valid_transaction_action","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-assert_valid_transaction_action","(actions)",""],["assign_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-assign_attributes","(new_attributes)","<p>Allows you to set all the attributes by passing in a hash of attributes\nwith keys matching the attribute …\n"],["assign_multiparameter_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-assign_multiparameter_attributes","(pairs)","<p>Instantiates objects for all attribute classes that needs more than one\nconstructor parameter. This is …\n"],["assign_nested_parameter_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-assign_nested_parameter_attributes","(pairs)","<p>Assign any deferred nested attributes after the base attributes have been\nset.\n"],["associated_records_to_validate_or_save","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-associated_records_to_validate_or_save","(association, new_record, autosave)","<p>Returns the record for an association collection that should be validated\nor saved. If <code>autosave</code> is <code>false</code> …\n"],["association_valid?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-association_valid-3F","(reflection, record)","<p>Returns whether or not the association is valid and applies any errors to\nthe parent, <code>self</code>, if it wasn&#39;t. …\n"],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)",""],["attr_readonly","ActiveRecord::ReadonlyAttributes::ClassMethods","ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],["attribute","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-attribute","(attribute_name)",""],["attribute=","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-attribute-3D","(attribute_name, value)","<p>Handle *= for method_missing.\n"],["attribute?","ActiveRecord::AttributeMethods::Query","ActiveRecord/AttributeMethods/Query.html#method-i-attribute-3F","(attribute_name)","<p>Handle *? for method_missing.\n"],["attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attribute_before_type_cast","(attribute_name)","<p>Handle *_before_type_cast for method_missing.\n"],["attribute_for_inspect","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attribute_for_inspect","(attr_name)","<p>Returns an <code>#inspect</code>-like string for the value of the attribute\n<code>attr_name</code>. String attributes are truncated …\n"],["attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method\nand table exists, <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-attribute_method-3F","(attr_name)",""],["attribute_names","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attribute_names","()","<p>Returns an array of names for the attributes available on this object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["attribute_names","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_names","()","<p>Returns an array of column names as strings if it&#39;s not an abstract\nclass and table exists. Otherwise …\n"],["attribute_present?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attribute_present-3F","(attribute)","<p>Returns <code>true</code> if the specified <code>attribute</code> has been\nset by the user or by a database load and is neither …\n"],["attributes","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attributes","()","<p>Returns a hash of all the attributes with their names as keys and the\nvalues of the attributes as values. …\n"],["attributes=","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-attributes-3D","(new_attributes)",""],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Task</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n<span class=\"ruby-keyword\">end</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["attributes_for_create","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attributes_for_create","(attribute_names)","<p>Filters out the primary keys, from the attribute names, when the primary\nkey is to be generated (e.g. …\n"],["attributes_for_update","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-attributes_for_update","(attribute_names)","<p>Filters the primary keys and readonly attributes from the attribute names.\n"],["attributes_hash","ActiveRecord::DynamicMatchers::Finder","ActiveRecord/DynamicMatchers/Finder.html#method-i-attributes_hash","()","<p>Given that the parameters starts with `_`, the finder needs to use the same\nparameter name.\n"],["autosave=","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-autosave-3D","(autosave)",""],["average","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-average","(column_name, options = {})","<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere&#39;s no row. See <code>calculate</code> for …\n"],["base_class","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-base_class","()","<p>Returns the class descending directly from ActiveRecord::Base, or an\nabstract class, if any, in the inheritance …\n"],["basename","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-basename","()",""],["batch_order","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-batch_order","()",""],["becomes","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["becomes!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-becomes-21","(klass)","<p>Wrapper around <code>becomes</code> that also changes the instance&#39;s\nsti column value. This is especially useful …\n"],["before_save_collection_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-before_save_collection_association","()","<p>Is used as a before_save callback to check while saving a collection\nassociation whether or not the parent …\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_db_transaction","()",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_isolated_db_transaction","(isolation)",""],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)","<p>Begins the transaction with the isolation level set. Raises an error by\ndefault; adapters that support …\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)",""],["belongs_to","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args)",""],["bind","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-bind","(value)",""],["binds_from_relation","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-binds_from_relation","(relation, binds)",""],["blank?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-blank-3F","()","<p>Returns true if relation is blank.\n"],["body","ActiveRecord::DynamicMatchers::Finder","ActiveRecord/DynamicMatchers/Finder.html#method-i-body","()","<p>Extended in activerecord-deprecated_finders\n"],["body","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-body","()",""],["build","ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver","ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver.html#method-c-build","(lhs_class, name, options)",""],["build","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-build","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\n<code>attributes</code> and linked to …\n"],["build","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-build","(*args, &block)",""],["build_arel","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_arel","()",""],["build_count_subquery","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-build_count_subquery","(relation, column_name, distinct)",""],["build_from","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_from","()",""],["build_joins","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_joins","(manager, joins)",""],["build_order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_order","(arel)",""],["build_select","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_select","(arel, selects)",""],["build_where","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-build_where","(opts, other = [])",""],["cache","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-cache","()",""],["cache","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-cache","()",""],["cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-cache","()",""],["cache","ActiveRecord::QueryCache::ClassMethods","ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],["cache_attribute?","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the provided attribute is being cached.\n"],["cache_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attributes","(*attribute_names)","<p><code>cache_attributes</code> allows you to declare which converted\nattribute values should be cached. Usually caching …\n"],["cache_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-cache_for_connection","(connection)",""],["cache_key","ActiveRecord::Integration","ActiveRecord/Integration.html#method-i-cache_key","(*timestamp_names)","<p>Returns a cache key that can be used to identify this record.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Product</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">cache_key</span>     <span class=\"ruby-comment\"># =&gt; &quot;products/new&quot; ...</span>\n</pre>\n"],["cache_sql","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache_sql","(sql, binds)",""],["cacheable_column?","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cacheable_column-3F","(column)",""],["cached_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cached_attributes","()","<p>Returns the attributes which are cached. By default time related columns\nwith datatype <code>:datetime, :timestamp,</code> …\n"],["cached_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["calculate","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name, options = {})","<p>This calculates aggregate values in the given column. Methods for count,\nsum, average, minimum, and maximum …\n"],["call","ActiveRecord::Migration::CheckPending","ActiveRecord/Migration/CheckPending.html#method-i-call","(env)",""],["call","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-i-call","(env)",""],["can_remove_no_wait?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-can_remove_no_wait-3F","()","<p>A thread can remove an element from the queue without waiting if an only if\nthe number of currently available …\n"],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_sensitive_modifier","(node)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_sensitive_modifier","(node)",""],["change","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column of a table.\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_default","(table_name, column_name, default)",""],["change_column_default","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Changes the default value of a table column.\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Sets a new default value for a column:\n\n<pre>change_column_default(:suppliers, :qualification, &#39;new&#39;)\nchange_column_default(:accounts, ...</pre>\n"],["change_column_null","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)","<p>Sets or removes a +NOT NULL+ constraint on a column. The <code>null</code>\nflag indicates whether the value can be …\n"],["change_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_sql","(table_name, column_name, type, options = {})",""],["change_default","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default)","<p>Sets a new default value for a column. See\nSchemaStatements#change_column_default\n\n<pre>t.change_default(:qualification, ...</pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name, options = {})","<p>A block for changing columns in <code>table</code>.\n\n<pre># change_table() yields a Table instance\nchange_table(:suppliers) ...</pre>\n"],["change_table","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-change_table","(table_name, options = {})",""],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["charset","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["charset","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset","(*arguments)",""],["charset_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset_current","(environment = env)",""],["check_if_method_has_arguments!","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-check_if_method_has_arguments-21","(method_name, args)","<p>Checks to make sure that the arguments are not blank. Note that if some\nblank-like object were initially …\n"],["check_pending!","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-check_pending-21","(connection = Base.connection)",""],["check_schema_file","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-check_schema_file","(filename)",""],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","()","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["checkout_and_verify","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout_and_verify","(c)",""],["checkout_new_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout_new_connection","()",""],["cidr","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-cidr","(name, options = {})",""],["cidr_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-cidr_to_string","(object)",""],["class_for_adapter","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-class_for_adapter","(adapter)",""],["class_method_defined_within?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-class_method_defined_within-3F","(name, klass, superklass = klass.superclass)",""],["class_name","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-class_name","()","<p>Returns the class name for the macro.\n<p><code>composed_of :balance, class_name: &#39;Money&#39;</code> returns\n<code>&#39;Money&#39;</code> …\n"],["class_to_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-class_to_pool","()",""],["clear","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-clear","()","<p>Equivalent to <code>delete_all</code>. The difference is that returns\n<code>self</code>, instead of an array with the deleted objects, …\n"],["clear","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-clear","()","<p>Remove all elements from the queue.\n"],["clear","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-clear","()",""],["clear!","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear-21","()","<p>Clears out internal caches\n"],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool, and\nalso returns connections to …\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21","()","<p>Clear any caching the database adapter may be doing, for example clearing\nthe prepared statement cache. …\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_table_cache!","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_table_cache-21","(table_name)","<p>Clear out internal caches for table with <code>table_name</code>.\n"],["clear_timestamp_attributes","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-clear_timestamp_attributes","()","<p>Clear attributes and changed_attributes\n"],["client_encoding","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-client_encoding","()","<p>Get the client encoding for this database\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["close","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-close","()","<p>Check the connection back in to the connection pool\n"],["collapse_wheres","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-collapse_wheres","(arel, wheres)",""],["collation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collation","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-collation","()","<p>Returns the current database collation.\n"],["collation","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation","(*arguments)",""],["collation_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation_current","(environment = env)",""],["column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-column","(name, type = nil, options = {})",""],["column","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. The <code>type</code> parameter is\nnormally one of the migrations native …\n"],["column_alias_for","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-column_alias_for","(keys)","<p>Converts the given keys to the value that the database adapter returns as a\nusable column name:\n\n<pre>column_alias_for(&quot;users.id&quot;) ...</pre>\n"],["column_aliases","ActiveRecord::Associations::JoinDependency::Aliases::Table","ActiveRecord/Associations/JoinDependency/Aliases/Table.html#method-i-column_aliases","()",""],["column_defaults","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-column_defaults","()",""],["column_defaults","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_defaults","()","<p>Returns a hash where the keys are column names and the values are default\nvalues when instantiating the …\n"],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, options = {})","<p>Checks to see if a column exists in a given table.\n\n<pre># Check a column exists\ncolumn_exists?(:suppliers, ...</pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, options = {})","<p>Checks to see if a column exists. See SchemaStatements#column_exists?\n"],["column_for","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-column_for","(field)",""],["column_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-column_for","(table_name, column_name)",""],["column_for_attribute","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-column_for_attribute","(name)","<p>Returns the column object for the named attribute. Returns <code>nil</code>\nif the named attribute not exists.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>Returns the maximum length of a column name.\n"],["column_names","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-column_names","()",""],["column_names","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_names","()","<p>Returns an array of column names as strings.\n"],["column_spec","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-column_spec","(column, types)",""],["column_type","ActiveRecord::Result","ActiveRecord/Result.html#method-i-column_type","(name)",""],["columns","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns the list of all column definitions for a table.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns","(table)","<p>Get the columns for a table\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-columns","()",""],["columns","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns","()","<p>Returns an array of column objects for the table associated with this\nclass.\n"],["columns_hash","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns_hash","(table)","<p>Get the columns for a table as a hash, key is the column name value is the\ncolumn object.\n"],["columns_hash","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns_hash","()","<p>Returns a hash of column objects for the table associated with this class.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>Returns the maximum number of columns in a multicolumn index.\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>Returns the maximum number of columns per table.\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["committed?","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-committed-3F","()",""],["composed_of","ActiveRecord::Aggregations::ClassMethods","ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compute_table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-compute_table_name","()","<p>Computes and returns a table name according to default conventions.\n"],["compute_type","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["concat","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-concat","(*records)","<p>Add one or more records to the collection by setting their foreign keys to\nthe association&#39;s primary …\n"],["configurations","ActiveRecord::Core","ActiveRecord/Core.html#method-c-configurations","()","<p>Returns fully resolved configurations hash\n"],["configurations=","ActiveRecord::Core","ActiveRecord/Core.html#method-c-configurations-3D","(config)","<p>:singleton-method: Contains the database configuration - as is typically\nstored in config/database.yml …\n"],["configure_connection","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-configure_connection","()",""],["configure_connection","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-configure_connection","()",""],["configure_connection","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-configure_connection","()","<p>Many Rails applications monkey-patch a replacement of the\nconfigure_connection method and don&#39;t call …\n"],["configure_connection","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-configure_connection","()","<p>Configures the encoding, verbosity, schema search path, and time zone of\nthe connection. This is called …\n"],["connect","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-connect","()",""],["connect","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-connect","()",""],["connect","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-connect","()","<p>Connects to a PostgreSQL server and sets up the adapter depending on the\nconnected server&#39;s characteristics. …\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(klass)","<p>Returns true if a connection that&#39;s accessible to this class has\nalready been opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connected?","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connected-3F","()","<p>Returns <code>true</code> if Active Record is connected.\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-connection","()",""],["connection_active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-connection_active-3F","()",""],["connection_config","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection_config","()","<p>Returns the configuration of the associated connection as a hash:\n\n<pre>ActiveRecord::Base.connection_config ...</pre>\n"],["connection_id","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection_id","()",""],["connection_id=","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection_id-3D","(connection_id)",""],["connection_pool","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-connection_pool","()",""],["connection_pool_list","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pool_list","()",""],["connection_pools","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pools","()",""],["construct_join_dependency","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_join_dependency","(joins = [])",""],["construct_relation_for_association_calculations","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_calculations","()",""],["content_columns","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["context_class","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-context_class","()","<p>Superclass for the evaluation contexts used by ERB fixtures.\n"],["copy","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-copy","(destination, sources, options = {})",""],["count","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-count","(column_name = nil, options = {})","<p>Count all records using SQL.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">pets</span>.<span class=\"ruby-identifier\">count</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["count","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-count","(column_name = nil, options = {})","<p>Count the records.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">count</span>\n<span class=\"ruby-comment\"># =&gt; the total count of all people</span>\n\n<span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">count</span>(:<span class=\"ruby-identifier\">age</span>)\n<span class=\"ruby-comment\"># =&gt; returns the ...</span>\n</pre>\n"],["count_by_sql","ActiveRecord::Querying","ActiveRecord/Querying.html#method-i-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["create","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-create","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\nattributes, linked to this …\n"],["create","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["create","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-create","()",""],["create","ActiveRecord::Persistence::ClassMethods","ActiveRecord/Persistence/ClassMethods.html#method-i-create","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-create","(*args, &block)","<p>Tries to create a new record with the same scoped attributes defined in the\nrelation. Returns the initialized …\n"],["create","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-create","(*arguments)",""],["create!","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-create-21","(attributes = {}, &block)","<p>Like <code>create</code>, except that if the record is invalid, raises an\nexception.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["create!","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-create-21","(*args, &block)","<p>Similar to #create, but calls <code>create!</code> on the base class.\nRaises an exception if a validation error occurs. …\n"],["create!","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-create-21","(attributes = nil, &block)","<p>Creates an object just like Base.create but calls <code>save!</code>\ninstead of <code>save</code> so an exception is raised if …\n"],["create_all","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_all","()",""],["create_alter_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_alter_table","(name)",""],["create_column_definition","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-create_column_definition","(name, type)",""],["create_column_definition","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-create_column_definition","(name, type)",""],["create_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_current","(environment = env)",""],["create_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database. Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code> (defaults to utf8),\n<code>:collation</code> …\n"],["create_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-create_fixtures","(fixtures_directory, fixture_set_names, class_names = {}, config = ActiveRecord::Base)",""],["create_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table","(table_1, table_2, options = {})","<p>Creates a new join table with the name created using the lexical order of\nthe first two arguments. These …\n"],["create_or_update","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-create_or_update","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-create_savepoint","(name = nil)",""],["create_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-create_schema","(schema_name)","<p>Creates a schema for the given schema name.\n"],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, options = {})","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_table","ActiveRecord::SchemaMigration","ActiveRecord/SchemaMigration.html#method-i-create_table","(limit=nil)",""],["create_table_definition","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-create_table_definition","(name, temporary, options, as = nil)",""],["create_table_definition","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table_definition","(name, temporary, options, as = nil)",""],["create_time_zone_conversion_attribute?","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-create_time_zone_conversion_attribute-3F","(name, column)",""],["create_with","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-create_with","(value)","<p>Sets attributes to be used when creating new records from a relation\nobject.\n\n<pre>users = User.where(name: ...</pre>\n"],["ctype","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-ctype","()","<p>Returns the current database ctype.\n"],["current_config","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-current_config","(options = {})",""],["current_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-current_savepoint_name","()",""],["current_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-current_schema","()","<p>Returns the current schema name.\n"],["current_time_from_proper_timezone","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-current_time_from_proper_timezone","()",""],["custom_join_ast","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-custom_join_ast","(table, joins)",""],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-dangerous_attribute_method-3F","(method_name)",""],["dangerous_class_method?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-dangerous_class_method-3F","(method_name)","<p>A class method is &#39;dangerous&#39; if it is already (re)defined by\nActive Record, but not by any ancestors. …\n"],["daterange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-daterange","(name, options = {})",""],["db_dir","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-db_dir","()",""],["dealloc","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-dealloc","(key)",""],["dealloc","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-dealloc","(stmt)",""],["decrement","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around <code>decrement</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["decrement_counter","ActiveRecord::CounterCache::ClassMethods","ActiveRecord/CounterCache/ClassMethods.html#method-i-decrement_counter","(counter_name, id)","<p>Decrement a numeric field by one, via a direct SQL update.\n<p>This works the same as increment_counter but …\n"],["default_fixture_model","ActiveRecord::FixtureSet::ClassCache","ActiveRecord/FixtureSet/ClassCache.html#method-i-default_fixture_model","(fs_name, config)",""],["default_scope","ActiveRecord::Scoping::Default::ClassMethods","ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scope","(scope = nil)","<p>Use this macro in your model to set a default scope for all operations on\nthe model.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Article</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_sequence_name","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-default_sequence_name","(table, column)",""],["default_string","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-default_string","(value)",""],["define","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-define","()",""],["define","ActiveRecord::Schema","ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_method_attribute","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-define_method_attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_method_attribute","(name)",""],["define_method_attribute=","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)","<p>Defined for all <code>datetime</code> and <code>timestamp</code> attributes\nwhen <code>time_zone_aware_attributes</code> are enabled. This enhanced …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::Write::ClassMethods","ActiveRecord/AttributeMethods/Write/ClassMethods.html#method-i-define_method_attribute-3D","(name)","<p>See define_method_attribute in read.rb for an explanation of this code.\n"],["define_non_cyclic_method","ActiveRecord::AutosaveAssociation::ClassMethods","ActiveRecord/AutosaveAssociation/ClassMethods.html#method-i-define_non_cyclic_method","(name, &block)",""],["delete","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-delete","(*records)","<p>Deletes the <code>records</code> supplied and removes them from the\ncollection. For <code>has_many</code> associations, the deletion …\n"],["delete","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-delete","(element)","<p>If <code>element</code> is in the queue, remove and return it, or nil.\n"],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(arel, name = nil, binds = [])","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-delete","(sql_key)",""],["delete","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete_all","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-delete_all","(dependent = nil)","<p>Deletes all the records from the collection. For <code>has_many</code>\nassociations, the deletion is done according …\n"],["delete_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-delete_all","(conditions = nil)","<p>Deletes the records matching <code>conditions</code> without instantiating\nthe records first, and hence not calling …\n"],["delete_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete_sql","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["derive_class_name","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-derive_class_name","()",""],["descends_from_active_record?","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-descends_from_active_record-3F","()","<p>Returns <code>true</code> if this does not need STI type condition. Returns\n<code>false</code> if STI type condition needs to be …\n"],["destroy","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-destroy","(*records)","<p>Destroys the <code>records</code> supplied and removes them from the\ncollection. This method will <em>always</em> remove record …\n"],["destroy","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id. The object\nis instantiated first, therefore …\n"],["destroy!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy-21","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy_all","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-destroy_all","()","<p>Deletes the records of the collection directly from the database ignoring\nthe <code>:dependent</code> option. It invokes …\n"],["destroy_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["destroy_associations","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy_associations","()","<p>A hook to be overridden by association modules.\n"],["destroy_row","ActiveRecord::Locking::Optimistic","ActiveRecord/Locking/Optimistic.html#method-i-destroy_row","()",""],["destroy_row","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroy_row","()",""],["destroyed?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["destroyed_by_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association","()","<p>Returns the association for the parent being destroyed.\n<p>Used to avoid updating the counter cache unnecessarily. …\n"],["destroyed_by_association=","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association-3D","(reflection)","<p>Records the association that is being destroyed and destroying this record\nin the process.\n"],["detect_enum_conflict!","ActiveRecord::Enum","ActiveRecord/Enum.html#method-i-detect_enum_conflict-21","(enum_name, method_name, klass_method = false)",""],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-dirties_query_cache","(base, *method_names)",""],["disable_ddl_transaction!","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-disable_ddl_transaction-21","()","<p>Disable DDL transactions for this migration.\n"],["disable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["disable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disable_extension","(name)",""],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["discriminate_class_for_record","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-discriminate_class_for_record","(record)","<p>Called by <code>instantiate</code> to decide which class to use for a new\nrecord instance. For single-table inheritance, …\n"],["discriminate_class_for_record","ActiveRecord::Persistence::ClassMethods","ActiveRecord/Persistence/ClassMethods.html#method-i-discriminate_class_for_record","(record)","<p>Called by <code>instantiate</code> to decide which class to use for a new\nrecord instance.\n<p>See +ActiveRecord::Inheritance#discriminate_class_for_record+ …\n"],["distinct","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-distinct","()","<p>Specifies whether the records should be unique or not.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["distinct","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-distinct","(value = true)","<p>Specifies whether the records should be unique or not. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">select</span>(:<span class=\"ruby-identifier\">name</span>)\n<span class=\"ruby-comment\"># =&gt; Might return ...</span>\n</pre>\n"],["down","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-down","()",""],["drop","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop","(*arguments)",""],["drop_all","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_all","()",""],["drop_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_current","(environment = env)",""],["drop_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_join_table","(table_1, table_2, options = {})","<p>Drops the join table specified by the given arguments. See\n<code>create_join_table</code> for details.\n<p>Although this …\n"],["drop_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-drop_schema","(schema_name)","<p>Drops the schema for the given schema name.\n"],["drop_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-drop_table","(table_name, options = {})",""],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n<p>Although this command ignores <code>options</code> and the block if one is\ngiven, …\n"],["drop_table","ActiveRecord::SchemaMigration","ActiveRecord/SchemaMigration.html#method-i-drop_table","()",""],["each","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-each","()",""],["each","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-each","(&block)",""],["each","ActiveRecord::Result","ActiveRecord/Result.html#method-i-each","()",""],["each_current_configuration","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-each_current_configuration","(environment)",""],["each_local_configuration","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-each_local_configuration","()",""],["eager_load","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)","<p>Forces eager loading by performing a LEFT OUTER JOIN on <code>args</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">eager_load</span>(:<span class=\"ruby-identifier\">posts</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;users&quot;</span>.<span class=\"ruby-string\">&quot;id&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eager_load!","ActiveRecord","ActiveRecord.html#method-c-eager_load-21","()",""],["eager_loading?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-eager_loading-3F","()","<p>Returns true if relation needs eager loading.\n"],["empty?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the collection is empty. If the collection has\nbeen loaded it is equivalent to <code>collection.size.zero?</code> …\n"],["empty?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty?","ActiveRecord::Result","ActiveRecord/Result.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-empty_insert_statement_value","()",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-empty_insert_statement_value","()",""],["emulate_booleans","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the MysqlAdapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable_extension","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-enable_extension","(name)","<p>This is meant to be implemented by the adapters that support extensions\n"],["enable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-enable_extension","(name)",""],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21","()",""],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encoding","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-encoding","()","<p>Returns the current database encoding format as a string, eg:\n&#39;UTF-8&#39;\n"],["ensure_proper_type","ActiveRecord::Inheritance","ActiveRecord/Inheritance.html#method-i-ensure_proper_type","()","<p>Sets the attribute used for single table inheritance to this class name if\nthis is not the ActiveRecord::Base …\n"],["enum","ActiveRecord::Enum","ActiveRecord/Enum.html#method-i-enum","(definitions)",""],["env","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-env","()",""],["error_number","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-error_number","(exception)",""],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["escape_hstore","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-escape_hstore","(value)",""],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(owner, spec)",""],["establish_connection","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-establish_connection","(spec = nil)","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["except","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n\n<pre>Post.order(&#39;id asc&#39;).except(:order)       ...</pre>\n"],["exec_cache","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_cache","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete","(sql, name, binds)","<p>Executes delete <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_delete","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_delete","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)","<p>Executes insert <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_insert","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)",""],["exec_insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)",""],["exec_migration","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-exec_migration","(conn, direction)",""],["exec_no_cache","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-exec_no_cache","(sql, name, binds)",""],["exec_queries","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-exec_queries","()",""],["exec_queries","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-exec_queries","()",""],["exec_query","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])","<p>Executes <code>sql</code> statement in the context of this connection using\n<code>binds</code> as the bind substitutes. <code>name</code> is …\n"],["exec_query","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_query","(sql, name = nil, binds = [])",""],["exec_stmt","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_stmt","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update","(sql, name, binds)","<p>Executes update <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_update","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_without_stmt","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_without_stmt","(sql, name = 'SQL', binds = [])",""],["execute","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["execute","ActiveRecord::StatementCache","ActiveRecord/StatementCache.html#method-i-execute","()",""],["execute_and_free","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-execute_and_free","(sql, name = nil)",""],["execute_block","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-execute_block","()",""],["execute_callstack_for_multiparameter_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-execute_callstack_for_multiparameter_attributes","(callstack)",""],["exists?","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-exists-3F","(conditions = :none)","<p>Returns <code>true</code> if a record exists in the table that matches the\n<code>id</code> or conditions given, or <code>false</code> otherwise. …\n"],["expand_hash_conditions_for_aggregates","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a <code>composed_of</code> relationship …\n"],["expire","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-expire","()",""],["explain","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-explain","()","<p>Runs EXPLAIN on the query or queries triggered by this relation and returns\nthe result as a string.  …\n"],["extend_message","ActiveRecord::NoDatabaseError","ActiveRecord/NoDatabaseError.html#method-i-extend_message","(message)","<p>can be over written to add additional error information.\n"],["extending","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-extending","(*modules, &block)","<p>Used to extend a scope with additional methods, either through a module or\nthrough a block provided. …\n"],["extension_enabled?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extension_enabled-3F","(name)",""],["extensions","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-extensions","()","<p>A list of extensions, to be filled in by adapters that support them. At the\nmoment only postgresql does. …\n"],["extensions","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extensions","()",""],["extract_bounds","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-extract_bounds","(value)",""],["extract_callstack_for_multiparameter_attributes","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-extract_callstack_for_multiparameter_attributes","(pairs)",""],["extract_limit","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-extract_limit","(sql_type)",""],["extract_pg_identifier_from_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extract_pg_identifier_from_name","(name)",""],["extract_precision","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-extract_precision","(sql_type)","<p>Extracts the precision from PostgreSQL-specific data types.\n"],["extract_scale","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-extract_scale","(sql_type)","<p>Extracts the scale from PostgreSQL-specific data types.\n"],["extract_schema_and_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html#method-i-extract_schema_and_table","(name)","<p>Returns an array of <code>[schema_name, table_name]</code> extracted from\n<code>name</code>. <code>schema_name</code> is nil if not specified …\n"],["extract_table_ref_from_insert_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extract_table_ref_from_insert_sql","(sql)",""],["extract_value_from_default","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-c-extract_value_from_default","(default)","<p>Extracts the value from a PostgreSQL column default definition.\n"],["fetch","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-fetch","(ftype, fmod)",""],["fifth","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-fifth","(*args)","<p>Same as <code>first</code> except returns only the fifth record.\n"],["fifth","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-fifth","()","<p>Find the fifth record. If no order is defined it will order by primary key.\n\n<pre>Person.fifth # returns the ...</pre>\n"],["fifth!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-fifth-21","()","<p>Same as <code>fifth</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["finalized?","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-finalized-3F","()",""],["find","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-find","(*args, &block)","<p>Finds an object in the collection responding to the <code>id</code>. Uses\nthe same rules as <code>ActiveRecord::Base.find</code> …\n"],["find","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find by id - This can either be a specific id (1), a list of ids (1, 5, 6),\nor an array of ids ([5, 6, …\n"],["find_by","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_by","(*args)","<p>Finds the first record matching the specified conditions. There is no\nimplied ordering so if order matters, …\n"],["find_by!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_by-21","(*args)","<p>Like <code>find_by</code>, except that if no record is found, raises an\n<code>ActiveRecord::RecordNotFound</code> error.\n"],["find_by_sql","ActiveRecord::Querying","ActiveRecord/Querying.html#method-i-find_by_sql","(sql, binds = [])","<p>Executes a custom SQL query against your database and returns all the\nresults. The results will be returned …\n"],["find_each","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-find_each","(options = {})","<p>Looping through a collection of records from the database (using the\n<code>all</code> method, for example) is very …\n"],["find_in_batches","ActiveRecord::Batches","ActiveRecord/Batches.html#method-i-find_in_batches","(options = {})","<p>Yields each batch of records that was found by the find\n<code>options</code> as an array.\n\n<pre>Person.where(&quot;age &gt; 21&quot;).find_in_batches ...</pre>\n"],["find_last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_last","()",""],["find_nth","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_nth","(ordinal, offset)",""],["find_nth_with_limit","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_nth_with_limit","(offset, limit)",""],["find_one","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_one","(id)",""],["find_or_create_by","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-find_or_create_by","(attributes, &block)","<p>Finds the first record with the given attributes, or creates a record with\nthe attributes if one is not …\n"],["find_or_create_by!","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-find_or_create_by-21","(attributes, &block)","<p>Like <code>find_or_create_by</code>, but calls <code>create!</code> so an\nexception is raised if the created record is invalid. …\n"],["find_or_initialize_by","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-find_or_initialize_by","(attributes, &block)","<p>Like <code>find_or_create_by</code>, but calls <code>new</code> instead of\n<code>create</code>.\n"],["find_parameter_position","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-find_parameter_position","(multiparameter_name)",""],["find_some","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_some","(ids)",""],["find_sti_class","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-find_sti_class","(type_name)",""],["find_take","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_take","()",""],["find_type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html#method-c-find_type","(field)",""],["find_with_associations","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_with_associations","()",""],["find_with_ids","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-find_with_ids","(*ids)",""],["finder","ActiveRecord::DynamicMatchers::FindBy","ActiveRecord/DynamicMatchers/FindBy.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::FindByBang","ActiveRecord/DynamicMatchers/FindByBang.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::Finder","ActiveRecord/DynamicMatchers/Finder.html#method-i-finder","()",""],["first","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-first","(*args)","<p>Returns the first record, or the first <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["first","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-first","(limit = nil)","<p>Find the first record (or first N records if a parameter is supplied). If\nno order is defined it will …\n"],["first!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-first-21","()","<p>Same as <code>first</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>first!</code> accepts …\n"],["fixture_is_cached?","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures_path","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-fixtures_path","()",""],["forty_two","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-forty_two","(*args)","<p>Same as <code>first</code> except returns only the forty second record.\nAlso known as accessing “the reddit”. …\n"],["forty_two","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-forty_two","()","<p>Find the forty-second record. Also known as accessing “the reddit”. If no\norder is defined …\n"],["forty_two!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-forty_two-21","()","<p>Same as <code>forty_two</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["fourth","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-fourth","(*args)","<p>Same as <code>first</code> except returns only the fourth record.\n"],["fourth","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-fourth","()","<p>Find the fourth record. If no order is defined it will order by primary\nkey.\n\n<pre>Person.fourth # returns the ...</pre>\n"],["fourth!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-fourth-21","()","<p>Same as <code>fourth</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["from","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-from","(value, subquery_name = nil)","<p>Specifies table from which the records will be fetched. For example:\n\n<pre>Topic.select(&#39;title&#39;).from(&#39;posts&#39;) ...</pre>\n"],["full_version","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-full_version","()",""],["full_version","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-full_version","()","<p>Returns the full version of the connected MySQL server.\n"],["gem_version","ActiveRecord","ActiveRecord.html#method-c-gem_version","()","<p>Returns the version of the currently loaded ActiveRecord as a\n<code>Gem::Version</code>\n"],["generate_association_writer","ActiveRecord::NestedAttributes::ClassMethods","ActiveRecord/NestedAttributes/ClassMethods.html#method-i-generate_association_writer","(association_name, type)","<p>Generates a writer method for this association. Serves as a point for\naccessing the objects in the association. …\n"],["generated_association_methods","ActiveRecord::Core::ClassMethods","ActiveRecord/Core/ClassMethods.html#method-i-generated_association_methods","()",""],["get_oid_type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-get_oid_type","(oid, fmod, column_name)",""],["group","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-group","(*args)","<p>Allows to specify a group attribute:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">group</span>(:<span class=\"ruby-identifier\">name</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;users&quot;</span>.<span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">FROM</span> <span class=\"ruby-string\">&quot;users&quot;</span> <span class=\"ruby-constant\">GROUP</span> <span class=\"ruby-constant\">BY</span> <span class=\"ruby-identifier\">name</span>\n</pre>\n"],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_attribute?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-has_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the given attribute is in the attributes hash,\notherwise <code>false</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["has_default_function?","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-has_default_function-3F","(default_value, default)",""],["has_include?","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-has_include-3F","(column_name)",""],["has_many","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_one","ActiveRecord::Associations::ClassMethods","ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["has_primary_key_column?","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-has_primary_key_column-3F","()",""],["hash_rows","ActiveRecord::Result","ActiveRecord/Result.html#method-i-hash_rows","()",""],["having","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-having","(opts, *rest)","<p>Allows to specify a HAVING clause. Note that you can&#39;t use HAVING\nwithout also specifying a GROUP …\n"],["hstore","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-hstore","(name, options = {})",""],["hstore_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-hstore_to_string","(object, array_member = false)",""],["id","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id","()","<p>Returns the primary key value.\n"],["id=","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3D","(value)","<p>Sets the primary key value.\n"],["id?","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3F","()","<p>Queries the primary key value.\n"],["id_before_type_cast","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_before_type_cast","()","<p>Returns the primary key value before type cast.\n"],["id_was","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_was","()","<p>Returns the primary key previous value.\n"],["identify","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-identify","(label)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Identifiers are positive integers less …\n"],["ids","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-ids","()","<p>Pluck all the ID&#39;s for the relation using the table&#39;s primary key\n\n<pre>Person.ids # SELECT people.id ...</pre>\n"],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>Returns the maximum number of elements in an IN (x,y,z) clause. nil means\nno limit.\n"],["include?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-include-3F","(record)","<p>Returns <code>true</code> if the given object is present in the collection.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["includes","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-includes","(*args)","<p>Specify relationships to be included in the result set. For example:\n\n<pre>users = User.includes(:address)\nusers.each ...</pre>\n"],["increment","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around <code>increment</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["increment_counter","ActiveRecord::CounterCache::ClassMethods","ActiveRecord/CounterCache/ClassMethods.html#method-i-increment_counter","(counter_name, id)","<p>Increment a numeric field by one, via a direct SQL update.\n<p>This method is used primarily for maintaining …\n"],["increment_lock","ActiveRecord::Locking::Optimistic","ActiveRecord/Locking/Optimistic.html#method-i-increment_lock","()",""],["index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols. See SchemaStatements#add_index …\n"],["index","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-index","(column_name, options = {})","<p>Adds index options to the indexes hash, keyed by column name This is\nprimarily used to track indexes …\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-index_algorithms","()","<p>A list of index algorithms, to be filled by adapters that support them.\nMySQL and PostgreSQL have support …\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-index_algorithms","()",""],["index_algorithms","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_algorithms","()",""],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, options = {})","<p>Checks to see if an index exists on a table for a given index definition.\n\n<pre># Check an index exists\nindex_exists?(:suppliers, ...</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists. See SchemaStatements#index_exists?\n"],["index_name","ActiveRecord::SchemaMigration","ActiveRecord/SchemaMigration.html#method-i-index_name","()",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verifies the existence of an index with a given name.\n<p>The default argument is returned if the underlying …\n"],["index_name_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_for_remove","(table_name, options = {})",""],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>Returns the maximum length of an index name.\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-indexes","(table_name, name = nil)","<p>Returns an array of indexes for the given table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>Returns the maximum number of indexes per table.\n"],["inet","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-inet","(name, options = {})",""],["infinity","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-infinity","(options = {})",""],["infinity?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-infinity-3F","(value)",""],["inheritance_column","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column","()","<p>Defines the name of the table column which will store the class name on\nsingle-table inheritance situations. …\n"],["inheritance_column=","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column-3D","(value)","<p>Sets the value of inheritance_column\n"],["inheritance_column_name","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-inheritance_column_name","()",""],["inherited","ActiveRecord::Delegation::DelegateCache","ActiveRecord/Delegation/DelegateCache.html#method-i-inherited","(child_class)",""],["initialize_copy","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveRecord::Result","ActiveRecord/Result.html#method-i-initialize_copy","(other)",""],["initialize_dup","ActiveRecord::Inheritance","ActiveRecord/Inheritance.html#method-i-initialize_dup","(other)",""],["initialize_generated_modules","ActiveRecord::Core::ClassMethods","ActiveRecord/Core/ClassMethods.html#method-i-initialize_generated_modules","()",""],["initialize_internals_callback","ActiveRecord::Inheritance","ActiveRecord/Inheritance.html#method-i-initialize_internals_callback","()",""],["initialize_internals_callback","ActiveRecord::Scoping","ActiveRecord/Scoping.html#method-i-initialize_internals_callback","()",""],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-initialize_schema_migrations_table","()",""],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["initialize_type_map","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-initialize_type_map","(type_map)",""],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])","<p>Returns the last auto-generated ID from the affected table.\n<p><code>id_value</code> will be returned unless the value …\n"],["insert_class","ActiveRecord::FixtureSet::ClassCache","ActiveRecord/FixtureSet/ClassCache.html#method-i-insert_class","(class_names, name, klass)",""],["insert_fixture","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixture","(fixture, table_name)","<p>Inserts the given fixture into the table. Overridden in adapters that\nrequire something beyond a simple …\n"],["insert_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["insert_sql","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["insert_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Executes an INSERT query and returns the new record&#39;s ID\n"],["inspect","ActiveRecord::Core::ClassMethods","ActiveRecord/Core/ClassMethods.html#method-i-inspect","()","<p>Returns a string like &#39;Post(id:integer, title:string, body:text)&#39;\n"],["inspect","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-inspect","()",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)","<p>Raises a <code>ActiveRecord::DangerousAttributeError</code> exception when\nan Active Record method is defined in the …\n"],["instantiate","ActiveRecord::Persistence::ClassMethods","ActiveRecord/Persistence/ClassMethods.html#method-i-instantiate","(attributes, column_types = {})","<p>Given an attributes hash, <code>instantiate</code> returns a new instance\nof the appropriate class. Accepts only keys …\n"],["instantiate_all_loaded_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-instantiate_fixtures","(object, fixture_set, load_instances = true)",""],["int4range","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-int4range","(name, options = {})",""],["int8range","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-int8range","(name, options = {})",""],["inverse_of","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-inverse_of","(command, args, &block)","<p>Returns the inverse of the given command. For example:\n\n<pre>recorder.inverse_of(:rename_table, [:old, :new]) ...</pre>\n"],["invert_add_index","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_add_index","(args)",""],["invert_change_column_null","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_change_column_null","(args)",""],["invert_drop_table","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_drop_table","(args, &block)",""],["invert_remove_column","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_remove_column","(args)",""],["invert_remove_index","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_remove_index","(args)",""],["invert_rename_column","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_rename_column","(args)",""],["invert_rename_index","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_rename_index","(args)",""],["invert_rename_table","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-invert_rename_table","(args)",""],["join_table","ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass","ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver/KnownClass.html#method-i-join_table","()",""],["joined_includes_values","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-joined_includes_values","()","<p>Joins that are also marked for preloading. In which case we should just\neager load them. Note that this …\n"],["joins","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-joins","(*args)","<p>Performs a joins on <code>args</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">joins</span>(:<span class=\"ruby-identifier\">posts</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;users&quot;</span>.<span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">FROM</span> <span class=\"ruby-string\">&quot;users&quot;</span> <span class=\"ruby-constant\">INNER</span> <span class=\"ruby-constant\">JOIN</span> <span class=\"ruby-string\">&quot;posts&quot;</span> <span class=\"ruby-constant\">ON</span> <span class=\"ruby-string\">&quot;posts&quot;</span>.<span class=\"ruby-string\">&quot;user_id&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>Returns maximum number of joins in a single query.\n"],["json","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-json","(name, options = {})",""],["json_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-json_to_string","(object)",""],["key?","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-key-3F","(oid)",""],["key?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-key-3F","(key)",""],["klass","ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass","ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver/KnownClass.html#method-i-klass","()",""],["klass","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, class_name: &#39;Money&#39;</code> returns the\nMoney class …\n"],["klasses","ActiveRecord::NoTouching","ActiveRecord/NoTouching.html#method-i-klasses","()",""],["last","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-last","(*args)","<p>Returns the last record, or the last <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["last","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-last","(limit = nil)","<p>Find the last record (or last N records if a parameter is supplied). If no\norder is defined it will order …\n"],["last","ActiveRecord::Result","ActiveRecord/Result.html#method-i-last","()",""],["last!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-last-21","()","<p>Same as <code>last</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>last!</code> accepts no …\n"],["last_insert_id_value","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-last_insert_id_value","(sequence_name)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-last_inserted_id","(result)",""],["lease","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-lease","()",""],["length","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-length","()","<p>Returns the size of the collection calling <code>size</code> on the target.\nIf the collection has been already loaded, …\n"],["length","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-length","()",""],["limit","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-limit","(value)","<p>Specifies a limit for the number of records to retrieve.\n\n<pre>User.limit(10) # generated SQL has &#39;LIMIT 10&#39; ...</pre>\n"],["limited_ids_for","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-limited_ids_for","(relation)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["load","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-load","()","<p>Causes the records to be loaded from the database if they have not been\nloaded already. You can use this …\n"],["load_migration","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-load_migration","()",""],["load_schema","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_schema","(format = ActiveRecord::Base.schema_format, file = nil)",""],["load_schema_current","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_schema_current","(format = ActiveRecord::Base.schema_format, file = nil, environment = env)",""],["load_schema_if_pending!","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-load_schema_if_pending-21","()",""],["load_seed","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_seed","()",""],["load_target","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-load_target","()",""],["loaded?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-loaded-3F","()","<p>Returns <code>true</code> if the association has been loaded, otherwise\n<code>false</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">pets</span>.<span class=\"ruby-identifier\">loaded?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">pets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["local_database?","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-local_database-3F","(configuration)",""],["lock","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)","<p>Specifies locking settings (default to <code>true</code>). For more\ninformation on locking, please see +ActiveRecord::Locking+. …\n"],["lock!","ActiveRecord::Locking::Pessimistic","ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locked?","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-locked-3F","(arel)","<p>If arel is locked this is a SELECT … FOR UPDATE or somesuch. Such queries\nshould not be cached.\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_column=","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column-3D","(value)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Returns true if the <code>lock_optimistically</code> flag is set to true\n(which it is, by default) and the table includes …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name = \"SQL\", binds = [], statement_name = nil)",""],["logger","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-logger","()",""],["ltree","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-ltree","(name, options = {})",""],["macaddr","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-macaddr","(name, options = {})",""],["many?","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-many-3F","(&block)","<p>Returns true if the collection has more than one record. Equivalent to\n<code>collection.size &gt; 1</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["many?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-many-3F","()","<p>Returns true if there is more than one record.\n"],["mariadb?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-mariadb-3F","()",""],["mark_for_destruction","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parents save transaction.\nThis does <em>not</em> actually destroy …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parents\nsave transaction.\n<p>Only useful …\n"],["marshal_dump","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_dump","()",""],["marshal_load","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_load","(array)",""],["match","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-match","(model, name)",""],["max_updated_column_timestamp","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-max_updated_column_timestamp","(timestamp_names = timestamp_attributes_for_update)",""],["maximum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-maximum","(column_name, options = {})","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["merge","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-merge","(other)","<p>Merges in the conditions from <code>other</code>, if <code>other</code> is\nan <code>ActiveRecord::Relation</code>. Returns an array representing …\n"],["method_body","ActiveRecord::AttributeMethods::AttributeMethodCache","ActiveRecord/AttributeMethods/AttributeMethodCache.html#method-i-method_body","()",""],["method_missing","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["method_missing","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-method_missing","(method, *args, &block)","<p>Forwards any missing method call to the target.\n"],["migrate","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-migrate","(direction)",""],["migration","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-migration","()",""],["migration_keys","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-migration_keys","()","<p>Lists the valid migration options\n"],["migration_keys","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-migration_keys","()","<p>Adds `:array` as a valid migration key\n"],["migrations_paths","ActiveRecord::Schema","ActiveRecord/Schema.html#method-i-migrations_paths","()","<p>Returns the migrations paths.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Schema</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">migrations_paths</span>\n<span class=\"ruby-comment\"># =&gt; [&quot;db/migrate&quot;] # Rails migration ...</span>\n</pre>\n"],["migrations_paths","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-migrations_paths","()",""],["minimum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-minimum","(column_name, options = {})","<p>Calculates the minimum value on a given column. The value is returned with\nthe same data type of the …\n"],["mtime","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-i-mtime","()",""],["native","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-native","()",""],["native","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-native","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-native_database_types","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a hash of mappings from the abstract data types to the native\ndatabase types. See TableDefinition#column …\n"],["nested_records_changed_for_autosave?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-nested_records_changed_for_autosave-3F","()","<p>go through nested autosave associations that are loaded in memory (without\nloading any new ones), and …\n"],["new","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-c-new","(klass, table, association)",""],["new","ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass","ActiveRecord/Associations/Builder/HasAndBelongsToMany/JoinTableResolver/KnownClass.html#method-c-new","(lhs_class, rhs_class_name)",""],["new","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-new","(attributes = {}, &block)",""],["new","ActiveRecord::Associations::Preloader::AlreadyLoaded","ActiveRecord/Associations/Preloader/AlreadyLoaded.html#method-c-new","(klass, owners, reflection, preload_scope)",""],["new","ActiveRecord::Associations::Preloader::NullPreloader","ActiveRecord/Associations/Preloader/NullPreloader.html#method-c-new","(klass, owners, reflection, preload_scope)",""],["new","ActiveRecord::AttributeAssignmentError","ActiveRecord/AttributeAssignmentError.html#method-c-new","(message, exception, attribute)",""],["new","ActiveRecord::AttributeMethods::AttributeMethodCache","ActiveRecord/AttributeMethods/AttributeMethodCache.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)","<p>FIXME: Make the first parameter more similar for the two adapters\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-c-new","(lock = Monitor.new)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-c-new","(pool, frequency)",""],["new","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Array.html#method-c-new","(subtype)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-c-new","(subtype)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Vector.html#method-c-new","(delim, subtype)","<p><code>delim</code> corresponds to the `typdelim` column in the pg_types\ntable.  <code>subtype</code> is derived from the `typelem` …\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-new","(*)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-c-new","(connection, logger, config)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::StatementPool","ActiveRecord/ConnectionAdapters/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(types, name, temporary, options, as = nil)",""],["new","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-c-new","(state = nil)",""],["new","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-c-new","(model, name)",""],["new","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-new","(connection, name, class_name, path, config = ActiveRecord::Base)",""],["new","ActiveRecord::FixtureSet::ClassCache","ActiveRecord/FixtureSet/ClassCache.html#method-c-new","(class_names, config)",""],["new","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-new","(*args, &block)","<p>Determines if one of the attributes passed in is the inheritance column,\nand if the inheritance column …\n"],["new","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-new","()",""],["new","ActiveRecord::Migration","ActiveRecord/Migration.html#method-c-new","(name = self.class.name, version = nil)",""],["new","ActiveRecord::Migration::CheckPending","ActiveRecord/Migration/CheckPending.html#method-c-new","(app)",""],["new","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-c-new","(delegate = nil)",""],["new","ActiveRecord::MigrationProxy","ActiveRecord/MigrationProxy.html#method-c-new","(name, version, filename, scope)",""],["new","ActiveRecord::MultiparameterAssignmentErrors","ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors)",""],["new","ActiveRecord::NoDatabaseError","ActiveRecord/NoDatabaseError.html#method-c-new","(message)",""],["new","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-c-new","(app)",""],["new","ActiveRecord::QueryMethods::WhereChain","ActiveRecord/QueryMethods/WhereChain.html#method-c-new","(scope)",""],["new","ActiveRecord::Reflection::MacroReflection","ActiveRecord/Reflection/MacroReflection.html#method-c-new","(macro, name, scope, options, active_record)",""],["new","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-new","(*args, &block)","<p>Initializes new record from relation while maintaining the current scope.\n<p>Expects arguments in the same …\n"],["new","ActiveRecord::Relation","ActiveRecord/Relation.html#method-c-new","(klass, table, values = {})",""],["new","ActiveRecord::Result","ActiveRecord/Result.html#method-c-new","(columns, rows, column_types = {})",""],["new","ActiveRecord::StaleObjectError","ActiveRecord/StaleObjectError.html#method-c-new","(record, attempted_action)",""],["new","ActiveRecord::StatementCache","ActiveRecord/StatementCache.html#method-c-new","()",""],["new","ActiveRecord::StatementInvalid","ActiveRecord/StatementInvalid.html#method-c-new","(message, original_exception = nil)",""],["new","ActiveRecord::UnknownAttributeError","ActiveRecord/UnknownAttributeError.html#method-c-new","(record, attribute)",""],["new","ActiveRecord::UnknownPrimaryKey","ActiveRecord/UnknownPrimaryKey.html#method-c-new","(model)",""],["new_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-new_connection","()",""],["new_record?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn&#39;t been saved yet – that is, a record\nfor the object doesn&#39;t …\n"],["next_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-next_key","()",""],["next_migration_number","ActiveRecord::Generators::Migration::ClassMethods","ActiveRecord/Generators/Migration/ClassMethods.html#method-i-next_migration_number","(dirname)","<p>Implement the required interface for Rails::Generators::Migration.\n"],["next_migration_number","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-next_migration_number","(number)","<p>Determines the version number of the next migration.\n"],["no_touching","ActiveRecord::NoTouching::ClassMethods","ActiveRecord/NoTouching/ClassMethods.html#method-i-no_touching","(&block)","<p>Lets you selectively disable calls to `touch` for the duration of a block.\n<p>Examples\n\n<pre>ActiveRecord::Base.no_touching ...</pre>\n"],["no_touching?","ActiveRecord::NoTouching","ActiveRecord/NoTouching.html#method-i-no_touching-3F","()",""],["no_wait_poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-no_wait_poll","()","<p>Remove and return the head the queue if the number of available elements is\nstrictly greater than the …\n"],["none","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-none","()","<p>Returns a chainable relation with zero records.\n<p>The returned relation implements the Null Object pattern. …\n"],["normalize_migration_number","ActiveRecord::SchemaMigration","ActiveRecord/SchemaMigration.html#method-i-normalize_migration_number","(number)",""],["not","ActiveRecord::QueryMethods::WhereChain","ActiveRecord/QueryMethods/WhereChain.html#method-i-not","(opts, *rest)","<p>Returns a new relation expressing WHERE + NOT condition according to the\nconditions in the arguments. …\n"],["num_waiting","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-num_waiting","()","<p>Returns the number of threads currently waiting on this queue.\n"],["numrange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-numrange","(name, options = {})",""],["odd?","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-odd-3F","()",""],["offset","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-offset","(value)","<p>Specifies the number of rows to skip before returning rows.\n\n<pre>User.offset(10) # generated SQL has &quot;OFFSET ...</pre>\n"],["only","ActiveRecord::SpawnMethods","ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n\n<pre>Post.order(&#39;id asc&#39;).only(:where) ...</pre>\n"],["open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-open_transactions","()",""],["operation_over_aggregate_column","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-operation_over_aggregate_column","(column, operation, distinct)",""],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-order","(*args)","<p>Allows to specify an order attribute:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">order</span>(<span class=\"ruby-string\">&#39;name&#39;</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;users&quot;</span>.<span class=\"ruby-operator\">*</span> <span class=\"ruby-constant\">FROM</span> <span class=\"ruby-string\">&quot;users&quot;</span> <span class=\"ruby-constant\">ORDER</span> <span class=\"ruby-constant\">BY</span> <span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["owner_to_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-owner_to_pool","()",""],["parse_array_contents","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/ArrayParser.html#method-i-parse_array_contents","(array, string, index)",""],["parse_data","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/ArrayParser.html#method-i-parse_data","(string)",""],["parse_pg_array","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/ArrayParser.html#method-i-parse_pg_array","(string)",""],["pattern","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-pattern","()",""],["perform_calculation","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-perform_calculation","(operation, column_name, options = {})",""],["persisted?","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns true if the record is persisted, i.e. it&#39;s not a new record and\nit was not destroyed, otherwise …\n"],["pk_and_sequence_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-pk_and_sequence_for","(table)","<p>Returns a table&#39;s primary key and belonging sequence.\n"],["pk_attribute?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-pk_attribute-3F","(name)",""],["pluck","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-pluck","(*column_names)","<p>Use <code>pluck</code> as a shortcut to select one or more attributes\nwithout loading a bunch of records just to grab …\n"],["point_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-point_to_string","(point)",""],["poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-poll","(timeout = nil)","<p>Remove the head of the queue.\n<p>If <code>timeout</code> is not given, remove and return the head the queue\nif the number …\n"],["pool_for","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-pool_for","(owner)",""],["pool_from_any_process_for","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-pool_from_any_process_for","(owner)",""],["populate_with_current_scope_attributes","ActiveRecord::Scoping","ActiveRecord/Scoping.html#method-i-populate_with_current_scope_attributes","()",""],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL server.\n"],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["prefix","ActiveRecord::DynamicMatchers::FindBy","ActiveRecord/DynamicMatchers/FindBy.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::FindByBang","ActiveRecord/DynamicMatchers/FindByBang.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-prefix","()",""],["preload","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-preload","(*args)","<p>Allows preloading of <code>args</code>, in the same way that\n<code>includes</code> does:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">preload</span>(:<span class=\"ruby-identifier\">posts</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;posts&quot;</span>.<span class=\"ruby-operator\">*</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["preloaded_records","ActiveRecord::Associations::Preloader::AlreadyLoaded","ActiveRecord/Associations/Preloader/AlreadyLoaded.html#method-i-preloaded_records","()",""],["prepare","ActiveRecord::Store::HashAccessor","ActiveRecord/Store/HashAccessor.html#method-c-prepare","(object, attribute)",""],["prepare","ActiveRecord::Store::IndifferentHashAccessor","ActiveRecord/Store/IndifferentHashAccessor.html#method-c-prepare","(object, store_attribute)",""],["prepare_column_options","ActiveRecord::ConnectionAdapters::ColumnDumper","ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-prepare_column_options","(column, types)","<p>This can be overridden on a Adapter level basis to support other extended\ndatatypes (Example: Adding …\n"],["prepare_column_options","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-prepare_column_options","(column, types)","<p>Adds `:array` option to the default set provided by the AbstractAdapter\n"],["prepare_default_proc","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-prepare_default_proc","()",""],["prepare_statement","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-prepare_statement","(sql)","<p>Prepare the statement if it hasn&#39;t been prepared, return the statement\nkey.\n"],["prepend","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-prepend","(*args)",""],["preprocess_order_args","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-preprocess_order_args","(order_args)",""],["pretty_print","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-pretty_print","(q)",""],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-primary_key","(name, type = :primary_key, options = {})","<p>Defines the primary key field. Use of the native PostgreSQL UUID type is\nsupported, and can be used by …\n"],["primary_key","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key","(name, type = :primary_key, options = {})","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key","ActiveRecord::SchemaMigration","ActiveRecord/SchemaMigration.html#method-i-primary_key","()",""],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value)","<p>Sets the name of the primary key column.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Project</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">primary_key</span> = <span class=\"ruby-string\">&#39;sysid&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["primary_key_column_name","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key_column_name","()",""],["primary_key_name","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-primary_key_name","()",""],["primary_keys","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-primary_keys","(table_name)",""],["proper_table_name","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-proper_table_name","(name, options = {})","<p>Finds the correct table name given an Active Record object. Uses the Active\nRecord object&#39;s own  …\n"],["proxy_association","ActiveRecord::AssociationRelation","ActiveRecord/AssociationRelation.html#method-i-proxy_association","()",""],["proxy_association","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-proxy_association","()",""],["purge","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge","(configuration)",""],["push","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-push","(*records)",""],["query_attribute","ActiveRecord::AttributeMethods::Query","ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["quote","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote_and_escape","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-quote_and_escape","(value)",""],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string","(string)","<p>QUOTING ==================================================\n"],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any &#39; (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-quote_table_name","(name)","<p>Checks the following cases:\n<p>table_name\n<p>“table.name”\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)","<p>Override to return the quoted table name for assignment. Defaults to table\nquoting.\n<p>This works for mysql …\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, options = {})","<p>Overridden by the mysql adapter for supporting index lengths\n"],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)",""],["quoted_false","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_id","ActiveRecord::Sanitization","ActiveRecord/Sanitization.html#method-i-quoted_id","()","<p>TODO: Deprecate this\n"],["quoted_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-quoted_locking_column","()","<p>Quote the column name used for optimistic locking.\n"],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],["quoted_table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["range_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-range_to_string","(object)",""],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["raw_type_cast_attribute_for_write","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-raw_type_cast_attribute_for_write","(column, value)",""],["raw_write_attribute","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-raw_write_attribute","(attr_name, value)",""],["read","ActiveRecord::Store::HashAccessor","ActiveRecord/Store/HashAccessor.html#method-c-read","(object, attribute, key)",""],["read","ActiveRecord::Store::StringKeyedHashAccessor","ActiveRecord/Store/StringKeyedHashAccessor.html#method-c-read","(object, attribute, key)",""],["read_attribute","ActiveRecord::AttributeMethods::Read","ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nbefore typecasting and deserialization.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["read_fixture_files","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-read_fixture_files","(path, model_class)",""],["read_store_attribute","ActiveRecord::Store","ActiveRecord/Store.html#method-i-read_store_attribute","(store_attribute, key)",""],["reader_method","ActiveRecord::Aggregations::ClassMethods","ActiveRecord/Aggregations/ClassMethods.html#method-i-reader_method","(name, class_name, mapping, allow_nil, constructor)",""],["readonly","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)","<p>Sets readonly attributes for the returned relation. If value is true\n(default), attempting to update …\n"],["readonly_attribute?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-readonly_attribute-3F","(name)",""],["readonly_attributes","ActiveRecord::ReadonlyAttributes::ClassMethods","ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["reap","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-reap","()","<p>Removes dead connections from the pool.  A dead connection can occur if a\nprogrammer forgets to close …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-record","(*command, &block)","<p>record <code>command</code>. <code>command</code> should be a method name\nand arguments. For example:\n\n<pre>recorder.record(:method_name, ...</pre>\n"],["record_changed?","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-record_changed-3F","(reflection, record, key)","<p>If the record is new or it has changed, returns true.\n"],["recreate_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-recreate_database","(name, options = {})","<p>Drops the database specified on the <code>name</code> attribute and creates\nit again using the provided <code>options</code>.\n"],["references","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference. Optionally adds a <code>type</code> column, if\n<code>:polymorphic</code> option is provided. <code>references</code> and \n…\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args)",""],["references","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-references","(*table_names)","<p>Use to indicate that the given <code>table_names</code> are referenced by\nan SQL string, and should therefore be  …\n"],["references_eager_loaded_tables?","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-references_eager_loaded_tables-3F","()",""],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre>Account.reflect_on_aggregation(:balance) ...</pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre>Account.reflect_on_association(:owner) ...</pre>\n"],["reflections","ActiveRecord::Reflection::ClassMethods","ActiveRecord/Reflection/ClassMethods.html#method-i-reflections","()","<p>Returns a Hash of name of the reflection as the key and a\nAssociationReflection as the value.\n\n<pre>Account.reflections ...</pre>\n"],["register_task","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-register_task","(pattern, task)",""],["register_type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html#method-c-register_type","(type_id, type)","<p>Register an MySQL <code>type_id</code> with a typecasting object in\n<code>type</code>.\n"],["register_type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html#method-c-register_type","(name, type)","<p>Register an OID type named <code>name</code> with a typecasting object in\n<code>type</code>.  <code>name</code> should correspond to the `typname` …\n"],["registered_type?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html#method-c-registered_type-3F","(name)","<p>Is <code>name</code> a registered type?\n"],["relation_for_destroy","ActiveRecord::Locking::Optimistic","ActiveRecord/Locking/Optimistic.html#method-i-relation_for_destroy","()",""],["relation_for_destroy","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-relation_for_destroy","()",""],["release","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release","(conn)",""],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(with_id = current_connection_id)","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-release_savepoint","(name = nil)",""],["reload","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-reload","()","<p>Reloads the collection from the database. Returns <code>self</code>.\nEquivalent to <code>collection(true)</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reload","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the record from the database.\n<p>This method finds record by its primary key (which could be assigned …\n"],["reload","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-reload","()","<p>Forces reloading of relation.\n"],["reload_type_map","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reload_type_map","()",""],["remove","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-remove","(conn)","<p>Remove a connection from the connection pool.  The connection will remain\nopen and active but will no …\n"],["remove","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-remove","()","<p>Removes and returns the head of the queue if possible, or nil.\n"],["remove","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n\n<pre>t.remove(:qualification)\nt.remove(:qualification, :experience)</pre>\n"],["remove_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_belongs_to","(table_name, ref_name, options = {})",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, column_name, type = nil, options = {})","<p>Removes the column from the table definition.\n\n<pre>remove_column(:suppliers, :qualification)</pre>\n<p>The <code>type</code> and <code>options</code> …\n"],["remove_column","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-remove_column","(name)",""],["remove_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_column_sql","(table_name, column_name, type = nil, options = {})",""],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)","<p>Removes the given columns from the table definition.\n\n<pre>remove_columns(:suppliers, :qualification, :experience)</pre>\n"],["remove_columns_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_columns_sql","(table_name, *column_names)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(owner)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_connection","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-remove_connection","(klass = self)",""],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Removes the given index from the table.\n<p>Removes the <code>index_accounts_on_column</code> in the\n<code>accounts</code> table.\n\n<pre>remove_index ...</pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n<p>Remove the index_table_name_on_column in the table_name table …\n"],["remove_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_index_sql","(table_name, options = {})",""],["remove_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_reference","(table_name, ref_name, options = {})","<p>Removes the reference(s). Also removes a <code>type</code> column if one\nexists. <code>remove_reference</code>, <code>remove_references</code> …\n"],["remove_references","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n<code>remove_references</code> and <code>remove_belongs_to</code> are\nacceptable. …\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name)","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table definition.\n\n<pre>remove_timestamps(:suppliers)</pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","()","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table.\n\n<pre>t.remove_timestamps</pre>\n"],["remove_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_timestamps_sql","(table_name)",""],["rename","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n\n<pre>t.rename(:description, :name)</pre>\n"],["rename_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column in a table.\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n\n<pre>rename_column(:suppliers, :description, :name)</pre>\n"],["rename_column_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column_indexes","(table_name, column_name, new_column_name)",""],["rename_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_column_sql","(table_name, column_name, new_column_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Renames an index.\n<p>Rename the <code>index_people_on_last_name</code> index to\n<code>index_users_on_last_name</code>:\n\n<pre>rename_index ...</pre>\n"],["rename_index","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-rename_index","(index_name, new_index_name)","<p>Renames the given index on the table.\n\n<pre>t.rename_index(:user_id, :account_id)</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table. Also renames a table&#39;s primary key sequence if the\nsequence name matches the Active …\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n\n<pre>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)</pre>\n"],["rename_table_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table_indexes","(table_name, new_name)",""],["render_bind","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-render_bind","(column, value)",""],["reorder","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reorder","(*args)","<p>Replaces any existing order defined on the relation with the specified\norder.\n\n<pre>User.order(&#39;email DESC&#39;).reorder(&#39;id ...</pre>\n"],["replace","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-replace","(other_array)","<p>Replaces this collection with <code>other_array</code>. This will perform a\ndiff and delete/add only records that …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for\ndevelopment mode. This is …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-requires_reloading-3F","()",""],["reset","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-reset","()","<p>Unloads the association. Returns <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">pets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reset","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-reset","()",""],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21","()",""],["reset_cache","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-c-reset_cache","()",""],["reset_column_information","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::CounterCache::ClassMethods","ActiveRecord/CounterCache/ClassMethods.html#method-i-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery. This is useful when …\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["reset_sequence!","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-reset_sequence-21","(table, column, sequence = nil)","<p>Set the sequence to the max value of the table&#39;s column.\n"],["respond_to?","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-respond_to-3F","(name, include_private = false)","<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],["restore_query_cache_settings","ActiveRecord::QueryCache","ActiveRecord/QueryCache.html#method-i-restore_query_cache_settings","(connection_id, enabled)",""],["result","ActiveRecord::DynamicMatchers::Finder","ActiveRecord/DynamicMatchers/Finder.html#method-i-result","()","<p>Extended in activerecord-deprecated_finders\n"],["retrieve_connection","ActiveRecord::ConnectionHandling","ActiveRecord/ConnectionHandling.html#method-i-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(klass)","<p>Retrieving the connection pool happens a lot so we cache it in\n@class_to_pool. This makes retrieving …\n"],["reverse_order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reverse_order","()","<p>Reverse the existing order clause on the relation.\n\n<pre>User.order(&#39;name ASC&#39;).reverse_order # generated SQL ...</pre>\n"],["reverse_sql_order","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-reverse_sql_order","(order_query)",""],["reversible","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-reversible","()","<p>Used to specify an operation that can be run in one direction or another.\nCall the methods <code>up</code> and <code>down</code> …\n"],["revert","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-revert","(*migration_classes)","<p>Reverses the migration commands for the given block and the given\nmigrations.\n<p>The following migration …\n"],["revert","ActiveRecord::Migration::CommandRecorder","ActiveRecord/Migration/CommandRecorder.html#method-i-revert","()","<p>While executing the given block, the recorded will be in reverting mode.\nAll commands recorded will end …\n"],["reverting?","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-reverting-3F","()",""],["rewhere","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-rewhere","(conditions)","<p>Allows you to change a previously set where condition for a given\nattribute, instead of appending to …\n"],["rollback_active_record_state!","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-rollback_active_record_state-21","()","<p>Reset id and @new_record if the transaction rolls back.\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Aborts a transaction.\n"],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-rollback_to_savepoint","(name = nil)",""],["rolledback?","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-rolledback-3F","()",""],["root","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-root","()",""],["run","ActiveRecord::Associations::Preloader::AlreadyLoaded","ActiveRecord/Associations/Preloader/AlreadyLoaded.html#method-i-run","(preloader)",""],["run","ActiveRecord::Associations::Preloader::NullPreloader","ActiveRecord/Associations/Preloader/NullPreloader.html#method-c-run","(preloader)",""],["run","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-i-run","()",""],["run","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-run","(*migration_classes)","<p>Runs the given migration classes. Last argument can specify options:\n<p>:direction (default is :up)\n<p>:revert …\n"],["runtime","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["sanitize_conditions","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_conditions","(condition, table_name = self.table_name)",""],["sanitize_limit","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sanitize_limit","(limit)","<p>Sanitizes the given LIMIT parameter in order to prevent SQL injection.\n<p>The <code>limit</code> may be anything that …\n"],["sanitize_sql","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql","(condition, table_name = self.table_name)",""],["sanitize_sql_array","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_array","(ary)","<p>Accepts an array of conditions. The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_assignment","(assignments, default_table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_conditions","(condition, table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_hash","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash","(attrs, default_table_name = self.table_name)",""],["sanitize_sql_hash_for_assignment","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_assignment","(attrs, table)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre>{ status: nil, group_id: ...</pre>\n"],["sanitize_sql_hash_for_conditions","ActiveRecord::Sanitization::ClassMethods","ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_conditions","(attrs, default_table_name = self.table_name)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n\n<pre>{ name: &quot;foo&#39;bar&quot;, group_id: ...</pre>\n"],["save","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-save","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-save","(options={})","<p>The validation process on save can be skipped by passing <code>validate:\nfalse</code>. The regular Base#save method …\n"],["save!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-save-21","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save!","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-save-21","(options={})","<p>Attempts to save the record just like Base#save but will raise a\n<code>RecordInvalid</code> exception instead of returning …\n"],["save_belongs_to_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-save_belongs_to_association","(reflection)","<p>Saves the associated record if it&#39;s new or <code>:autosave</code> is\nenabled.\n<p>In addition, it will destroy the …\n"],["save_changed_attribute","ActiveRecord::Enum","ActiveRecord/Enum.html#method-i-save_changed_attribute","(attr_name, value)",""],["save_collection_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-save_collection_association","(reflection)","<p>Saves any new associated records, or all loaded autosave associations if\n<code>:autosave</code> is enabled on the …\n"],["save_has_one_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-save_has_one_association","(reflection)","<p>Saves the associated record if it&#39;s new or <code>:autosave</code> is\nenabled on the association.\n<p>In addition, it …\n"],["say","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-say","(message, subitem=false)",""],["say_with_time","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-say_with_time","(message)",""],["schema_cache=","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_cache-3D","(cache)",""],["schema_creation","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_creation","()",""],["schema_creation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-schema_creation","()",""],["schema_creation","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_creation","()",""],["schema_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_exists-3F","(name)","<p>Returns true if schema exists.\n"],["schema_names","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_names","()","<p>Returns an array of schema names.\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["scope","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-scope","()","<p>Returns a <code>Relation</code> object for the records in this association\n"],["scope","ActiveRecord::Scoping::Named::ClassMethods","ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope","(name, body, &block)","<p>Adds a class method for retrieving and querying objects. A scope represents\na narrowing of a database …\n"],["scope_for_create","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scoping","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-scoping","()","<p>We don&#39;t want this object to be put on the scoping stack, because that\ncould create an infinite loop …\n"],["scoping","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-scoping","()","<p>Scope all queries to the current scope.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">post_id</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">scoping</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">first</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["second","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-second","(*args)","<p>Same as <code>first</code> except returns only the second record.\n"],["second","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-second","()","<p>Find the second record. If no order is defined it will order by primary\nkey.\n\n<pre>Person.second # returns the ...</pre>\n"],["second!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-second-21","()","<p>Same as <code>second</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["seed_loader","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-seed_loader","()",""],["select","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-select","(*fields, &block)","<p>Works in two ways.\n<p><strong>First:</strong> Specify a subset of fields to be selected from the\nresult set.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["select","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an ActiveRecord::Result instance.\n"],["select","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an ActiveRecord::Result instance.\n"],["select","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select","(sql, name = nil, binds = [])",""],["select","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-select","(sql, name = nil, binds = [])","<p>Executes a SELECT query and returns the results, performing any data type\nconversions that are required …\n"],["select","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-select","(*fields)","<p>Works in two unique ways.\n<p>First: takes a block so it can be used just like Array#select.\n\n<pre>Model.all.select ...</pre>\n"],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [])","<p>Returns an ActiveRecord::Result instance.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(arel, name = nil, binds = [])",""],["select_for_count","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-select_for_count","()","<p>TODO: refactor to allow non-string `select_values` (eg. Arel nodes).\n"],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(arel, name = nil, binds = [])","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-select_rows","(sql, name = nil, binds = [])","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-select_rows","(sql, name = nil, binds = [])",""],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(arel, name = nil, binds = [])","<p>Returns a single value from a record\n"],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(arel, name = nil)","<p>Returns an array of the values of the first column in a select:\n\n<pre>select_values(&quot;SELECT id FROM companies ...</pre>\n"],["sequence_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name","()",""],["sequence_name=","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name-3D","(value)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["serial_sequence","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-serial_sequence","(table, column)",""],["serializable_hash","ActiveRecord::Serialization","ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveRecord::AttributeMethods::Serialization::ClassMethods","ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize","(attr_name, class_name_or_coder = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["serialized_attributes","ActiveRecord::AttributeMethods::Serialization::ClassMethods","ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialized_attributes","","<p>Returns a hash of all the attributes that have been specified for\nserialization as keys and their class …\n"],["session_auth=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D","(user)","<p>Set the authorized user for this session\n"],["set_field_encoding","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-set_field_encoding","(field_name)",""],["set_field_encoding","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-set_field_encoding","(field_name)",""],["set_options_for_callbacks!","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-set_options_for_callbacks-21","(args)",""],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()","<p>Enable standard-conforming strings if available.\n"],["set_state","ActiveRecord::ConnectionAdapters::TransactionState","ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-set_state","(state)",""],["should_record_timestamps?","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-should_record_timestamps-3F","()",""],["show_variable","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE &#39;name&#39;\n"],["signature","ActiveRecord::DynamicMatchers::Finder","ActiveRecord/DynamicMatchers/Finder.html#method-i-signature","()","<p>The parameters in the signature may have reserved Ruby words, in order to\nprevent errors, we start each …\n"],["simplified_type","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-simplified_type","(field_type)","<p>Maps PostgreSQL-specific data types to logical Rails types.\n"],["size","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-size","()","<p>Returns the size of the collection. If the collection hasn&#39;t been\nloaded, it executes a <code>SELECT COUNT(*)</code> …\n"],["size","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-size","()",""],["size","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-size","()",""],["size","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["spawn","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-spawn","()",""],["sql","ActiveRecord::LogSubscriber","ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-sql_key","(sql)","<p>Returns the statement identifier for the client side cache of statements\n"],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>Returns the maximum length of an SQL query.\n"],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-sqlite_version","()",""],["sti_name","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_name","()",""],["store","ActiveRecord::Store::ClassMethods","ActiveRecord/Store/ClassMethods.html#method-i-store","(store_attribute, options = {})",""],["store_accessor","ActiveRecord::Store::ClassMethods","ActiveRecord/Store/ClassMethods.html#method-i-store_accessor","(store_attribute, *keys)",""],["store_accessor_for","ActiveRecord::Store","ActiveRecord/Store.html#method-i-store_accessor_for","(store_attribute)",""],["stored_attributes","ActiveRecord::Store::ClassMethods","ActiveRecord/Store/ClassMethods.html#method-i-stored_attributes","()",""],["strict_mode?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-strict_mode-3F","()",""],["string_to_array","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_array","(string, oid)",""],["string_to_bit","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_bit","(value)",""],["string_to_cidr","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_cidr","(string)",""],["string_to_hstore","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_hstore","(string)",""],["string_to_json","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_json","(string)",""],["string_to_point","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_point","(string)",""],["string_to_time","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_time","(string)",""],["structure_dump","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_dump","(*arguments)",""],["structure_load","ActiveRecord::Tasks::DatabaseTasks","ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_load","(*arguments)",""],["subclass_from_attributes","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-subclass_from_attributes","(attrs)",""],["subclass_from_attributes?","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-subclass_from_attributes-3F","(attrs)","<p>Detect the subclass from the inheritance column of attrs. If the\ninheritance column value is not self …\n"],["subquery_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-subquery_for","(key, select)","<p>MySQL is too stupid to create a temporary table for use subquery, so we\nhave to give it some prompting …\n"],["subquery_for","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-subquery_for","(key, select)","<p>Returns a subquery for the given key using the join information.\n"],["substitute_at","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-substitute_at","(column, index)","<p>Returns a bind substitution value given a bind <code>index</code> and\n<code>column</code> NOTE: The column param is currently being …\n"],["substitute_at","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-substitute_at","(column, index)",""],["suffix","ActiveRecord::DynamicMatchers::FindByBang","ActiveRecord/DynamicMatchers/FindByBang.html#method-c-suffix","()",""],["suffix","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-suffix","()",""],["sum","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-sum","(*args)","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["supports_add_column?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_add_column-3F","()",""],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_count_distinct?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_count_distinct-3F","()","<p>Does this adapter support using DISTINCT within COUNT? This is\n<code>true</code> for all adapters except sqlite.\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_explain-3F","()","<p>Does this adapter support explain? As of this writing sqlite3, mysql2, and\npostgresql are the only ones …\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_explain-3F","()",""],["supports_extensions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_extensions-3F","()","<p>Does this adapter support database extensions? As of this writing only\npostgresql does.\n"],["supports_extensions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_extensions-3F","()","<p>Returns true if pg &gt; 9.1\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Does this adapter support index sort order?\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Technically MySQL allows to create indexes with the sort order syntax but\nat the moment (5.5) it doesn&#39;t …\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_insert_with_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_with_returning-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations? Backend specific, as the abstract\nadapter always returns <code>false</code> …\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_partial_index-3F","()","<p>Does this adapter support partial indices?\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_partial_index-3F","()",""],["supports_partial_index?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_partial_index-3F","()",""],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActive Record class, such as …\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_primary_key-3F","()",""],["supports_ranges?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ranges-3F","()","<p>Range datatypes weren&#39;t introduced until PostgreSQL 9.2\n"],["supports_rename_index?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_rename_index-3F","()",""],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints? PostgreSQL and MySQL do, SQLite &lt;\n3.6.8 does not.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_savepoints-3F","()",""],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code> when the connection adapter supports prepared\nstatement caching, otherwise returns <code>false</code> …\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::MysqlAdapter","ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code>, since this connection adapter supports prepared\nstatement caching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>Does this adapter support setting the isolation level for a transaction?\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>MySQL 4 technically support transaction isolation, but it is affected by a\nbug where the transaction …\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_transaction_isolation-3F","()",""],["supports_views?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_views-3F","()",""],["suppress_messages","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-suppress_messages","()",""],["symbol_unscoping","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-symbol_unscoping","(scope)",""],["symbolized_base_class","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_base_class","()",""],["symbolized_sti_name","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_sti_name","()",""],["synchronize","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-synchronize","(&block)",""],["table","ActiveRecord::Associations::JoinDependency::Aliases::Table","ActiveRecord/Associations/JoinDependency/Aliases/Table.html#method-i-table","()",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>Returns the maximum length of a table alias.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL\n"],["table_exists?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-table_exists-3F","(name)","<p>Returns true if table exists. If the schema is not specified as part of\n<code>name</code> then it will only find tables …\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_exists-3F","(table_name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-table_exists-3F","(name)","<p>A cached lookup for table existence.\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>Checks to see if the table <code>table_name</code> exists on the database.\n\n<pre>table_exists?(:developers)</pre>\n"],["table_exists?","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_exists?","ActiveRecord::SchemaMigration","ActiveRecord/SchemaMigration.html#method-i-table_exists-3F","()",""],["table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name","ActiveRecord::SchemaMigration","ActiveRecord/SchemaMigration.html#method-i-table_name","()",""],["table_name=","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name-3D","(value)","<p>Sets the table name explicitly. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Project</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">table_name</span> = <span class=\"ruby-string\">&quot;project&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>Returns the maximum length of a table name.\n"],["table_name_options","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-table_name_options","(config = ActiveRecord::Base)",""],["table_rows","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-table_rows","()","<p>Returns a hash of rows to be inserted. The key is the table, the value is a\nlist of rows to insert to …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_structure","(table_name)",""],["tables","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path or a specified\nschema.\n"],["tables","ActiveRecord::ConnectionAdapters::SchemaCache","ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-tables","(name)",""],["tables_in_string","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-tables_in_string","(string)",""],["take","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-take","(limit = nil)","<p>Gives a record (or N records if a parameter is supplied) without any\nimplied order. The order will depend …\n"],["take!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-take-21","()","<p>Same as <code>take</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>take!</code> accepts no …\n"],["target","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-target","()",""],["third","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-third","(*args)","<p>Same as <code>first</code> except returns only the third record.\n"],["third","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-third","()","<p>Find the third record. If no order is defined it will order by primary key.\n\n<pre>Person.third # returns the ...</pre>\n"],["third!","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-third-21","()","<p>Same as <code>third</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found.\n"],["timestamp_attributes_for_create","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_create","()",""],["timestamp_attributes_for_create_in_model","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_create_in_model","()",""],["timestamp_attributes_for_update","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_update","()",""],["timestamp_attributes_for_update_in_model","ActiveRecord::Timestamp","ActiveRecord/Timestamp.html#method-i-timestamp_attributes_for_update_in_model","()",""],["timestamp_column_names","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-timestamp_column_names","()",""],["timestamps","ActiveRecord::ConnectionAdapters::Table","ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","()","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the table. See SchemaStatements#add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table.\n"],["to_a","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-to_a","()",""],["to_a","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-to_a","()","<p>Converts relation objects to Array.\n"],["to_ary","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-to_ary","()","<p>Returns a new array of objects from the collection. If the collection\nhasn&#39;t been loaded, it fetches …\n"],["to_ary","ActiveRecord::Result","ActiveRecord/Result.html#method-i-to_ary","()",""],["to_date","Mysql::Time","Mysql/Time.html#method-i-to_date","()",""],["to_hash","ActiveRecord::Result","ActiveRecord/Result.html#method-i-to_hash","()",""],["to_integer","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-to_integer","(value)",""],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record&#39;s primary key value wrapped in an Array if one is\navailable.\n"],["to_param","ActiveRecord::Integration","ActiveRecord/Integration.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation …\n"],["to_param","ActiveRecord::Integration::ClassMethods","ActiveRecord/Integration/ClassMethods.html#method-i-to_param","(method_name = nil)","<p>Defines your model&#39;s <code>to_param</code> method to generate “pretty”\nURLs using <code>method_name</code>, which …\n"],["to_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql","(arel, binds = [])","<p>Converts an arel AST to SQL\n"],["to_sql","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-to_sql","()","<p>Returns sql statement for the relation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">name</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-string\">&#39;Oscar&#39;</span>).<span class=\"ruby-identifier\">to_sql</span>\n<span class=\"ruby-comment\"># =&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; ...</span>\n</pre>\n"],["to_xml","ActiveRecord::Serialization","ActiveRecord/Serialization.html#method-i-to_xml","(options = {}, &block)","<p>Builds an XML document to represent the model. Some configuration is\navailable through <code>options</code>. However …\n"],["toggle","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around <code>toggle</code> that saves the record. This method\ndiffers from its non-bang version in that it …\n"],["touch","ActiveRecord::NoTouching","ActiveRecord/NoTouching.html#method-i-touch","(*)",""],["touch","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-touch","(name = nil)","<p>Saves the record with the updated_at/on attributes set to the current time.\nPlease note that no validation …\n"],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(options = {})","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction","ActiveRecord::Transactions::ClassMethods","ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction_isolation_levels","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_isolation_levels","()",""],["transaction_open?","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_open-3F","()",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception_class","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception_class","(e, sql)",""],["tsrange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-tsrange","(name, options = {})",""],["tstzrange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-tstzrange","(name, options = {})",""],["tsvector","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-tsvector","(*args)",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Date","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Date.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::DateTime","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/DateTime.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Float","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Float.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Time","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Time.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Date.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Timestamp.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Type.html#method-i-type","()",""],["type_cast","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-type_cast","(value, column)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Boolean","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Boolean.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Date","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Date.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::DateTime","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/DateTime.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Decimal","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Decimal.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Float","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Float.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Identity","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Identity.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Integer","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Integer.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Time","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Time.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Array.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bit","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bit.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Boolean","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Boolean.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bytea","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bytea.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Cidr","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Cidr.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Date.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Decimal","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Decimal.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Float","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Float.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Hstore","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Hstore.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Identity","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Identity.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Integer","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Integer.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Json","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Json.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Money","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Money.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Point","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Point.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Time","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Time.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Timestamp.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Vector.html#method-i-type_cast","(value)","<p>FIXME: this should probably split on <code>delim</code> and use\n<code>subtype</code> to cast the values.  Unfortunately, the current …\n"],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-type_cast","(value, column, array_member = false)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::Quoting","ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast","(value, column)","<p>Cast a <code>value</code> to a type that the database understands. For\nexample, SQLite does not understand dates, …\n"],["type_cast_array","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-type_cast_array","(oid, value)",""],["type_cast_attribute_for_write","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-type_cast_attribute_for_write","(column, value)",""],["type_cast_attribute_value","ActiveRecord::AttributeAssignment","ActiveRecord/AttributeAssignment.html#method-i-type_cast_attribute_value","(multiparameter_name, value)",""],["type_cast_calculated_value","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-type_cast_calculated_value","(value, column, operation = nil)",""],["type_cast_config_to_boolean","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_boolean","(config)",""],["type_cast_config_to_integer","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_integer","(config)",""],["type_cast_for_write","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html#method-i-type_cast_for_write","(value)",""],["type_cast_for_write","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Hstore","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Hstore.html#method-i-type_cast_for_write","(value)",""],["type_cast_for_write","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Json","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Json.html#method-i-type_cast_for_write","(value)",""],["type_cast_for_write","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-type_cast_for_write","(value)",""],["type_cast_using_column","ActiveRecord::Calculations","ActiveRecord/Calculations.html#method-i-type_cast_using_column","(value, column)",""],["type_condition","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-type_condition","(table = arel_table)",""],["type_map","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-type_map","()",""],["type_to_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["typecasted_attribute_value","ActiveRecord::AttributeMethods","ActiveRecord/AttributeMethods.html#method-i-typecasted_attribute_value","(name)",""],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],["undecorated_table_name","ActiveRecord::ModelSchema::ClassMethods","ActiveRecord/ModelSchema/ClassMethods.html#method-i-undecorated_table_name","(class_name = base_class.name)","<p>Guesses the table name, but does not decorate it with prefix and suffix\ninformation.\n"],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["uniq","ActiveRecord::Associations::CollectionProxy","ActiveRecord/Associations/CollectionProxy.html#method-i-uniq","()",""],["uniq","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-uniq","(value = true)",""],["uniq_value","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-uniq_value","()","<p><code>uniq</code> and <code>uniq!</code> are silently deprecated.\n<code>uniq_value</code> delegates to <code>distinct_value</code> to\nmaintain backwards …\n"],["unprepared_statement","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_statement","()",""],["unprepared_visitor","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_visitor","()",""],["unscope","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-unscope","(*args)","<p>Removes an unwanted relation that is already defined on a chain of\nrelations. This is useful when passing …\n"],["unscoped","ActiveRecord::Scoping::Default::ClassMethods","ActiveRecord/Scoping/Default/ClassMethods.html#method-i-unscoped","()","<p>Returns a scope for the model without the <code>default_scope</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Post</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">default_scope</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["up","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-up","()",""],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(arel, name = nil, binds = [])","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update","(attributes)","<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],["update","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-update","(id, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update-21","(attributes)","<p>Updates its receiver just like <code>update</code> but calls\n<code>save!</code> instead of <code>save</code>, so an exception is raised\nif the …\n"],["update_all","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-update_all","(updates)","<p>Updates all records with details given if they match a set of conditions\nsupplied, limits and order can …\n"],["update_attribute","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],["update_attributes","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attributes","(attributes)",""],["update_attributes!","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_attributes-21","(attributes)",""],["update_column","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_column","(name, value)","<p>Equivalent to <code>update_columns(name =&gt; value)</code>.\n"],["update_columns","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-update_columns","(attributes)","<p>Updates the attributes directly in the database issuing an UPDATE SQL\nstatement and sets them in the …\n"],["update_counters","ActiveRecord::CounterCache::ClassMethods","ActiveRecord/CounterCache/ClassMethods.html#method-i-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby increment_counter …\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes an UPDATE query and returns the number of affected tuples.\n"],["use_insert_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-use_insert_returning-3F","()",""],["using_limitable_reflections?","ActiveRecord::FinderMethods","ActiveRecord/FinderMethods.html#method-i-using_limitable_reflections-3F","(reflections)",""],["using_single_table_inheritance?","ActiveRecord::Inheritance::ClassMethods","ActiveRecord/Inheritance/ClassMethods.html#method-i-using_single_table_inheritance-3F","(record)",""],["uuid","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-uuid","(name, options = {})",""],["valid?","ActiveRecord::DynamicMatchers::Method","ActiveRecord/DynamicMatchers/Method.html#method-i-valid-3F","()",""],["valid?","ActiveRecord::Validations","ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the validations within the specified context. Returns\n<code>true</code> if no errors are found, <code>false</code> otherwise. …\n"],["valid_alter_table_options","ActiveRecord::ConnectionAdapters::SQLite3Adapter","ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-valid_alter_table_options","( type, options)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_type?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-valid_type-3F","(type)",""],["validate_collection_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-validate_collection_association","(reflection)","<p>Validate the associated records if <code>:validate</code> or\n<code>:autosave</code> is turned on for the association specified …\n"],["validate_order_args","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-validate_order_args","(args)",""],["validate_single_association","ActiveRecord::AutosaveAssociation","ActiveRecord/AutosaveAssociation.html#method-i-validate_single_association","(reflection)","<p>Validate the association if <code>:validate</code> or\n<code>:autosave</code> is turned on for the association.\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid. Works\nwith any kind of association. …\n"],["validates_presence_of","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?), and, if the attribute …\n"],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["values","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-values","()",""],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["verify_readonly_attribute","ActiveRecord::Persistence","ActiveRecord/Persistence.html#method-i-verify_readonly_attribute","(name)",""],["version","ActiveRecord","ActiveRecord.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveRecord as a\n<code>Gem::Version</code>\n"],["version","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-version","()",""],["version","ActiveRecord::SchemaMigration","ActiveRecord/SchemaMigration.html#method-i-version","()",""],["visit_AddColumn","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::SchemaCreation","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/SchemaCreation.html#method-i-visit_AddColumn","(o)",""],["visit_AddColumn","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaCreation","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaCreation.html#method-i-visit_AddColumn","(o)",""],["visit_ChangeColumnDefinition","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::SchemaCreation","ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/SchemaCreation.html#method-i-visit_ChangeColumnDefinition","(o)",""],["visit_ColumnDefinition","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaCreation","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaCreation.html#method-i-visit_ColumnDefinition","(o)",""],["wait_poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-wait_poll","(timeout)","<p>Waits on the queue up to <code>timeout</code> seconds, then removes and\nreturns the head of the queue.\n"],["where","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-where","(opts = :chain, *rest)","<p>Returns a new relation, which is the result of filtering the current\nrelation according to the conditions …\n"],["where_unscoping","ActiveRecord::QueryMethods","ActiveRecord/QueryMethods.html#method-i-where_unscoping","(target_value)",""],["where_values_hash","ActiveRecord::Relation","ActiveRecord/Relation.html#method-i-where_values_hash","(relation_table_name = table_name)","<p>Returns a hash of where conditions.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">name</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-string\">&#39;Oscar&#39;</span>).<span class=\"ruby-identifier\">where_values_hash</span>\n<span class=\"ruby-comment\"># =&gt; {name: &quot;Oscar&quot;}</span>\n</pre>\n"],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection already exists yield it to the block. If no connection\nexists checkout a connection, …\n"],["with_lock","ActiveRecord::Locking::Pessimistic","ActiveRecord/Locking/Pessimistic.html#method-i-with_lock","(lock = true)","<p>Wraps the passed block in a transaction, locking the object before\nyielding. You can pass the SQL locking …\n"],["with_transaction_returning_status","ActiveRecord::Transactions","ActiveRecord/Transactions.html#method-i-with_transaction_returning_status","()","<p>Executes <code>method</code> within a transaction and captures its return\nvalue as a status flag. If the status is …\n"],["without_prepared_statement?","ActiveRecord::ConnectionAdapters::AbstractAdapter","ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-without_prepared_statement-3F","(binds)",""],["write","ActiveRecord::Migration","ActiveRecord/Migration.html#method-i-write","(text=\"\")",""],["write","ActiveRecord::Store::HashAccessor","ActiveRecord/Store/HashAccessor.html#method-c-write","(object, attribute, key, value)",""],["write","ActiveRecord::Store::StringKeyedHashAccessor","ActiveRecord/Store/StringKeyedHashAccessor.html#method-c-write","(object, attribute, key, value)",""],["write_attribute","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for fixnum and …\n"],["write_attribute_with_type_cast","ActiveRecord::AttributeMethods::Write","ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute_with_type_cast","(attr_name, value, type_cast_method)",""],["write_store_attribute","ActiveRecord::Store","ActiveRecord/Store.html#method-i-write_store_attribute","(store_attribute, key, value)",""],["writer_method","ActiveRecord::Aggregations::ClassMethods","ActiveRecord/Aggregations/ClassMethods.html#method-i-writer_method","(name, class_name, mapping, allow_nil, converter)",""],["xml","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-xml","(*args)",""],["yaml_file_path","ActiveRecord::FixtureSet","ActiveRecord/FixtureSet.html#method-i-yaml_file_path","(path)",""],["README","","README_rdoc.html","","<p>Active Record – Object-relational mapping put on rails\n<p>Active Record connects classes to relational database …\n"],["databases.rake","","lib/active_record/railties/databases_rake.html","","<p>require &#39;active_record&#39;\n<p>db_namespace = namespace :db do\n\n<pre>task :load_config do\n  ActiveRecord::Base.configurations ...</pre>\n"]]}}