var search_data = {"index":{"searchIndex":["guard","arubaadapter","cli","commander","commands","all","change","notification","pause","reload","scope","show","config","deprecated","dsl","classmethods","evaluator","guard","classmethods","guardfile","classmethods","watcher","classmethods","dsl","error","dsldescriber","group","guardfile","evaluator","error","nocustomguardfile","noguardfileerror","nopluginserror","generator","interactor","internals","debugging","environment","alreadyexistserror","dumper","error","loader","methoderror","nomethoderror","groups","helpers","plugins","queue","scope","session","state","tracing","mod;","traps","jobs","base","prywrapper","sleep","terminalsettings","notifier","base","detected","noneavailableerror","emacs","filenotifier","gntp","growl","libnotify","notserver","notifu","notifysend","terminalnotifier","terminaltitle","tmux","client","defaults","error","session","options","plugin","pluginutil","raketask","reevaluator","runner","sheller","terminal","ui","colors","watcher","pathname","<<()","[]()","_add_hooks()","_add_load_guard_rc_hook()","_add_load_project_guard_rc_hook()","_add_restore_visibility_hook()","_add_row()","_add_self_to_plugins()","_all?()","_build_scope()","_capture()","_check_server!()","_client()","_client?()","_clip_name()","_configure_prompt()","_constant_name()","_create_command_aliases()","_create_env()","_create_env()","_create_group_commands()","_create_guard_commands()","_create_run_all_command()","_data()","_end_session()","_env()","_env()","_evaluator()","_filter()","_filtered_logger_message()","_find_non_empty_scope()","_full_gem_path()","_gem_valid?()","_groups()","_image_path()","_instantiate()","_kill_pry()","_killed?()","_libnotify_urgency()","_merge_options()","_notification_type()","_notifu_type()","_notify()","_notify()","_notifysend_binary_available?()","_notifysend_urgency()","_parse_option()","_plugin_constant()","_plugins()","_prompt()","_register!()","_register!()","_register!()","_register!()","_register_callbacks()","_relative_pathname()","_replace_reset_command()","_require_guardfile()","_reset()","_run()","_run_actions()","_run_cmd()","_run_group_plugins()","_sanitize()","_scope_for_prompt()","_scope_names()","_session()","_setup()","_setup_commands()","_shellize_if_needed()","_start()","_start_session()","_supervise()","_supported_host?()","_switch_to_pry()","_system_with_capture()","_system_with_no_capture()","_to_arguments()","_to_bool()","_to_module()","_trace()","_ui()","_untrace()","_verify_bundler_presence()","_write()","action_with_scopes()","active?()","add()","add()","add()","add()","add_callback()","add_notifier()","add_to_guardfile()","all()","all()","available()","available?()","available?()","available?()","available?()","available?()","available?()","available?()","available?()","available?()","available?()","background()","background()","background()","background()","binwrite()","callbacks()","calling_plugin_name()","clear()","clear()","clear?()","clearable()","clearing()","clearing?()","clients()","close()","cmdline_groups()","cmdline_plugins()","color()","color_enabled?()","configurable?()","connect()","convert_scope()","create_guardfile()","create_method()","debug()","debug?()","deprecation()","detect()","disconnect()","display()","display_message()","display_title()","dump()","echo()","emacs_color()","enabled?()","enabled?()","error()","evaluator_options()","execute()","execute!()","foreground()","foreground()","foreground()","foreground()","from_interactor()","gem_name()","gem_name()","gem_name()","gem_name()","grouped_plugins()","guardfile_scope()","handle()","handle_interrupt()","handle_interrupt()","handle_interrupt()","handle_interrupt()","hook()","images_path()","import()","import()","import()","import()","import()","import()","import()","info()","init()","initialize_all_templates()","initialize_plugin()","initialize_template()","interactive?()","interactor_name()","level=()","list()","list()","listener_args()","load()","logger()","matcher_for()","matcher_for()","message()","message()","method_missing()","name()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","non_namespaced_classname()","non_namespaced_name()","normalize_standard_options!()","notifiers()","notifiers()","notifiers()","notify()","notify()","notify()","notify()","notify()","notify()","notify()","notify()","notify()","notify()","notify()","notify()","notify()","notify_options()","ok?()","option()","options()","options()","options=()","parse_options()","pause()","pending?()","plugin_class()","plugin_location()","plugin_names()","process()","process()","process()","process()","process()","process()","process()","process()","process()","ran?()","reevaluate()","reload()","remove()","require_gem_safely()","reset()","reset_and_clear()","reset_callbacks!()","reset_line()","reset_logger()","reset_session()","restore()","run()","run()","run()","run_all()","run_on_changes()","run_on_modifications()","save()","set()","show()","show()","show()","silence_deprecations?()","start()","start()","start()","stderr()","stderr()","stdout()","stdout()","stop()","stop()","stopping_symbol_for()","strict?()","supported_hosts()","supported_hosts()","supported_hosts()","supported_hosts()","supported_hosts()","supported_hosts()","supported_hosts()","system()","template()","title()","title()","title()","title()","titles()","tmux_color()","to_hash()","to_s()","to_s()","toggle()","trace()","turn_off()","turn_off()","turn_off()","turn_on()","turn_on()","unset()","untrace()","version()","version()","warning()","watchdirs()","watchdirs=()","guard.rb.orig","helper.rb.orig","dsl.rb.orig","session.rb.orig","plugin_util.rb.orig","guardfile","ui.rb.orig","version.rb.orig"],"longSearchIndex":["guard","guard::arubaadapter","guard::cli","guard::commander","guard::commands","guard::commands::all","guard::commands::change","guard::commands::notification","guard::commands::pause","guard::commands::reload","guard::commands::scope","guard::commands::show","guard::config","guard::deprecated","guard::deprecated::dsl","guard::deprecated::dsl::classmethods","guard::deprecated::evaluator","guard::deprecated::guard","guard::deprecated::guard::classmethods","guard::deprecated::guardfile","guard::deprecated::guardfile::classmethods","guard::deprecated::watcher","guard::deprecated::watcher::classmethods","guard::dsl","guard::dsl::error","guard::dsldescriber","guard::group","guard::guardfile","guard::guardfile::evaluator","guard::guardfile::evaluator::error","guard::guardfile::evaluator::nocustomguardfile","guard::guardfile::evaluator::noguardfileerror","guard::guardfile::evaluator::nopluginserror","guard::guardfile::generator","guard::interactor","guard::internals","guard::internals::debugging","guard::internals::environment","guard::internals::environment::alreadyexistserror","guard::internals::environment::dumper","guard::internals::environment::error","guard::internals::environment::loader","guard::internals::environment::methoderror","guard::internals::environment::nomethoderror","guard::internals::groups","guard::internals::helpers","guard::internals::plugins","guard::internals::queue","guard::internals::scope","guard::internals::session","guard::internals::state","guard::internals::tracing","guard::internals::tracing::mod;","guard::internals::traps","guard::jobs","guard::jobs::base","guard::jobs::prywrapper","guard::jobs::sleep","guard::jobs::terminalsettings","guard::notifier","guard::notifier::base","guard::notifier::detected","guard::notifier::detected::noneavailableerror","guard::notifier::emacs","guard::notifier::filenotifier","guard::notifier::gntp","guard::notifier::growl","guard::notifier::libnotify","guard::notifier::notserver","guard::notifier::notifu","guard::notifier::notifysend","guard::notifier::terminalnotifier","guard::notifier::terminaltitle","guard::notifier::tmux","guard::notifier::tmux::client","guard::notifier::tmux::defaults","guard::notifier::tmux::error","guard::notifier::tmux::session","guard::options","guard::plugin","guard::pluginutil","guard::raketask","guard::reevaluator","guard::runner","guard::sheller","guard::terminal","guard::ui","guard::ui::colors","guard::watcher","pathname","guard::internals::queue#<<()","guard::notifier::tmux::defaults::[]()","guard::jobs::prywrapper#_add_hooks()","guard::jobs::prywrapper#_add_load_guard_rc_hook()","guard::jobs::prywrapper#_add_load_project_guard_rc_hook()","guard::jobs::prywrapper#_add_restore_visibility_hook()","guard::dsldescriber#_add_row()","guard::reevaluator#_add_self_to_plugins()","guard::notifier::tmux#_all?()","guard::internals::scope#_build_scope()","guard::notifier::tmux::client#_capture()","guard::notifier#_check_server!()","guard::notifier::gntp#_client()","guard::notifier#_client?()","guard::jobs::prywrapper#_clip_name()","guard::jobs::prywrapper#_configure_prompt()","guard::pluginutil#_constant_name()","guard::jobs::prywrapper#_create_command_aliases()","guard::config#_create_env()","guard::notifier#_create_env()","guard::jobs::prywrapper#_create_group_commands()","guard::jobs::prywrapper#_create_guard_commands()","guard::jobs::prywrapper#_create_run_all_command()","guard::notifier::detected#_data()","guard::notifier::tmux::_end_session()","guard::config#_env()","guard::notifier#_env()","guard::reevaluator#_evaluator()","guard::ui#_filter()","guard::ui#_filtered_logger_message()","guard::internals::scope#_find_non_empty_scope()","guard::pluginutil#_full_gem_path()","guard::pluginutil::_gem_valid?()","guard::internals::scope#_groups()","guard::notifier::base#_image_path()","guard::internals::scope#_instantiate()","guard::jobs::prywrapper#_kill_pry()","guard::jobs::prywrapper#_killed?()","guard::notifier::libnotify#_libnotify_urgency()","guard::dsldescriber#_merge_options()","guard::notifier::base#_notification_type()","guard::notifier::notifu#_notifu_type()","guard::internals::debugging#_notify()","guard::notifier#_notify()","guard::notifier::notifysend::_notifysend_binary_available?()","guard::notifier::notifysend#_notifysend_urgency()","guard::notifier::tmux::client#_parse_option()","guard::pluginutil#_plugin_constant()","guard::internals::scope#_plugins()","guard::jobs::prywrapper#_prompt()","guard::notifier::gntp#_register!()","guard::notifier::growl::_register!()","guard::notifier::notifysend::_register!()","guard::notifier::terminalnotifier::_register!()","guard::plugin#_register_callbacks()","guard::internals::helpers#_relative_pathname()","guard::jobs::prywrapper#_replace_reset_command()","guard::cli#_require_guardfile()","guard::internals::debugging#_reset()","guard::notifier::tmux::client#_run()","guard::internals::queue#_run_actions()","guard::notifier::emacs#_run_cmd()","guard::runner#_run_group_plugins()","guard::internals::environment#_sanitize()","guard::jobs::prywrapper#_scope_for_prompt()","guard::internals::scope#_scope_names()","guard::notifier::tmux::_session()","guard::jobs::prywrapper#_setup()","guard::jobs::prywrapper#_setup_commands()","guard::sheller::_shellize_if_needed()","guard::cli#_start()","guard::notifier::tmux::_start_session()","guard::runner#_supervise()","guard::notifier::base::_supported_host?()","guard::jobs::prywrapper#_switch_to_pry()","guard::sheller::_system_with_capture()","guard::sheller::_system_with_no_capture()","guard::notifier::notifysend#_to_arguments()","guard::internals::environment::loader#_to_bool()","guard::notifier::detected#_to_module()","guard::internals::debugging#_trace()","guard::guardfile::generator#_ui()","guard::internals::debugging#_untrace()","guard::cli#_verify_bundler_presence()","guard::notifier::filenotifier#_write()","guard::ui#action_with_scopes()","guard::notifier#active?()","guard::internals::groups#add()","guard::internals::plugins#add()","guard::notifier#add()","guard::notifier::detected#add()","guard::plugin::add_callback()","guard::notifier#add_notifier()","guard::pluginutil#add_to_guardfile()","guard::internals::groups#all()","guard::internals::plugins#all()","guard::notifier::detected#available()","guard::notifier::base::available?()","guard::notifier::emacs::available?()","guard::notifier::filenotifier::available?()","guard::notifier::gntp::available?()","guard::notifier::growl::available?()","guard::notifier::libnotify::available?()","guard::notifier::notifu::available?()","guard::notifier::notifysend::available?()","guard::notifier::terminalnotifier::available?()","guard::notifier::tmux::available?()","guard::interactor#background()","guard::jobs::base#background()","guard::jobs::prywrapper#background()","guard::jobs::sleep#background()","pathname#binwrite()","guard::plugin::callbacks()","guard::ui#calling_plugin_name()","guard::terminal#clear()","guard::ui#clear()","guard::internals::session#clear?()","guard::ui#clearable()","guard::internals::session#clearing()","guard::internals::session#clearing?()","guard::notifier::tmux::client#clients()","guard::notifier::tmux::session#close()","guard::internals::session#cmdline_groups()","guard::internals::session#cmdline_plugins()","guard::ui#color()","guard::ui#color_enabled?()","guard::jobs::terminalsettings#configurable?()","guard::notifier#connect()","guard::interactor#convert_scope()","guard::guardfile::generator#create_guardfile()","guard::internals::environment#create_method()","guard::ui#debug()","guard::internals::session#debug?()","guard::ui#deprecation()","guard::notifier::detected#detect()","guard::notifier#disconnect()","guard::notifier::tmux::client#display()","guard::notifier::tmux#display_message()","guard::notifier::tmux#display_title()","guard::internals::environment::dumper#dump()","guard::jobs::terminalsettings#echo()","guard::notifier::emacs#emacs_color()","guard::interactor#enabled?()","guard::notifier#enabled?()","guard::ui#error()","guard::internals::session#evaluator_options()","guard::arubaadapter#execute()","guard::arubaadapter#execute!()","guard::interactor#foreground()","guard::jobs::base#foreground()","guard::jobs::prywrapper#foreground()","guard::jobs::sleep#foreground()","guard::internals::scope#from_interactor()","guard::notifier::base::gem_name()","guard::notifier::gntp::gem_name()","guard::notifier::notifu::gem_name()","guard::notifier::terminalnotifier::gem_name()","guard::internals::scope#grouped_plugins()","guard::internals::session#guardfile_scope()","guard::internals::traps::handle()","guard::interactor#handle_interrupt()","guard::jobs::base#handle_interrupt()","guard::jobs::prywrapper#handle_interrupt()","guard::jobs::sleep#handle_interrupt()","guard::plugin#hook()","guard::notifier::base#images_path()","guard::commands::all::import()","guard::commands::change::import()","guard::commands::notification::import()","guard::commands::pause::import()","guard::commands::reload::import()","guard::commands::scope::import()","guard::commands::show::import()","guard::ui#info()","guard::cli#init()","guard::guardfile::generator#initialize_all_templates()","guard::pluginutil#initialize_plugin()","guard::guardfile::generator#initialize_template()","guard::interactor#interactive?()","guard::internals::session#interactor_name()","guard::ui#level=()","guard::cli#list()","guard::dsldescriber#list()","guard::internals::session#listener_args()","guard::internals::environment::loader#load()","guard::ui#logger()","guard::internals::groups#matcher_for()","guard::internals::plugins#matcher_for()","guard::internals::environment::alreadyexistserror#message()","guard::internals::environment::nomethoderror#message()","guard::internals::environment#method_missing()","guard::notifier::base#name()","guard::notifier::base::name()","guard::plugin#name()","guard::arubaadapter::new()","guard::dsldescriber::new()","guard::group::new()","guard::interactor::new()","guard::internals::environment::new()","guard::internals::environment::dumper::new()","guard::internals::environment::loader::new()","guard::internals::environment::methoderror::new()","guard::internals::groups::new()","guard::internals::plugins::new()","guard::internals::queue::new()","guard::internals::scope::new()","guard::internals::session::new()","guard::internals::state::new()","guard::jobs::base::new()","guard::jobs::prywrapper::new()","guard::jobs::terminalsettings::new()","guard::notifier::base::new()","guard::notifier::detected::new()","guard::notifier::tmux::session::new()","guard::options::new()","guard::plugin::new()","guard::pluginutil::new()","guard::raketask::new()","guard::sheller::new()","guard::plugin::non_namespaced_classname()","guard::plugin::non_namespaced_name()","guard::notifier::base#normalize_standard_options!()","guard::cli#notifiers()","guard::dsldescriber#notifiers()","guard::notifier#notifiers()","guard::notifier#notify()","guard::notifier::base#notify()","guard::notifier::emacs#notify()","guard::notifier::filenotifier#notify()","guard::notifier::gntp#notify()","guard::notifier::growl#notify()","guard::notifier::libnotify#notify()","guard::notifier::notifu#notify()","guard::notifier::notifysend#notify()","guard::notifier::terminalnotifier#notify()","guard::notifier::terminaltitle#notify()","guard::notifier::tmux#notify()","guard::plugin::notify()","guard::internals::session#notify_options()","guard::sheller#ok?()","guard::notifier::tmux::defaults::option()","guard::interactor#options()","guard::ui#options()","guard::ui#options=()","guard::notifier::tmux::client#parse_options()","guard::commander#pause()","guard::internals::queue#pending?()","guard::pluginutil#plugin_class()","guard::pluginutil#plugin_location()","guard::pluginutil::plugin_names()","guard::commands::all#process()","guard::commands::change#process()","guard::commands::notification#process()","guard::commands::pause#process()","guard::commands::reload#process()","guard::commands::scope#process()","guard::commands::show#process()","guard::internals::queue#process()","guard::jobs::prywrapper#process()","guard::sheller#ran?()","guard::reevaluator#reevaluate()","guard::commander#reload()","guard::internals::plugins#remove()","guard::notifier::base::require_gem_safely()","guard::notifier::detected#reset()","guard::ui#reset_and_clear()","guard::plugin::reset_callbacks!()","guard::ui#reset_line()","guard::ui#reset_logger()","guard::internals::state#reset_session()","guard::jobs::terminalsettings#restore()","guard::runner#run()","guard::sheller#run()","guard::sheller::run()","guard::commander#run_all()","guard::runner#run_on_changes()","guard::reevaluator#run_on_modifications()","guard::jobs::terminalsettings#save()","guard::notifier::tmux::client#set()","guard::cli#show()","guard::commander#show()","guard::dsldescriber#show()","guard::config#silence_deprecations?()","guard::cli#start()","guard::commander#start()","guard::internals::debugging#start()","guard::sheller::stderr()","guard::sheller#stderr()","guard::sheller::stdout()","guard::sheller#stdout()","guard::commander#stop()","guard::internals::debugging#stop()","guard::runner::stopping_symbol_for()","guard::config#strict?()","guard::notifier::base::supported_hosts()","guard::notifier::gntp::supported_hosts()","guard::notifier::growl::supported_hosts()","guard::notifier::libnotify::supported_hosts()","guard::notifier::notifu::supported_hosts()","guard::notifier::notifysend::supported_hosts()","guard::notifier::terminalnotifier::supported_hosts()","guard::sheller::system()","guard::plugin::template()","guard::group#title()","guard::notifier::base::title()","guard::notifier::base#title()","guard::plugin#title()","guard::internals::scope#titles()","guard::notifier::tmux#tmux_color()","guard::internals::scope#to_hash()","guard::group#to_s()","guard::plugin#to_s()","guard::notifier#toggle()","guard::internals::tracing::trace()","guard::notifier#turn_off()","guard::notifier::terminaltitle::turn_off()","guard::notifier::tmux::turn_off()","guard::notifier#turn_on()","guard::notifier::tmux::turn_on()","guard::notifier::tmux::client#unset()","guard::internals::tracing::untrace()","guard::cli#version()","guard::notifier::tmux::client#version()","guard::ui#warning()","guard::internals::session#watchdirs()","guard::internals::session#watchdirs=()","","","","","","","",""],"info":[["Guard","","Guard.html","",""],["Guard::ArubaAdapter","","Guard/ArubaAdapter.html","",""],["Guard::CLI","","Guard/CLI.html","","<p>Facade for the Guard command line interface managed by\n[Thor](github.com/wycats/thor).\n<p>This is the main …\n"],["Guard::Commander","","Guard/Commander.html","","<p>Commands supported by guard\n"],["Guard::Commands","","Guard/Commands.html","",""],["Guard::Commands::All","","Guard/Commands/All.html","",""],["Guard::Commands::Change","","Guard/Commands/Change.html","",""],["Guard::Commands::Notification","","Guard/Commands/Notification.html","",""],["Guard::Commands::Pause","","Guard/Commands/Pause.html","",""],["Guard::Commands::Reload","","Guard/Commands/Reload.html","",""],["Guard::Commands::Scope","","Guard/Commands/Scope.html","",""],["Guard::Commands::Show","","Guard/Commands/Show.html","",""],["Guard::Config","","Guard/Config.html","",""],["Guard::Deprecated","","Guard/Deprecated.html","",""],["Guard::Deprecated::Dsl","","Guard/Deprecated/Dsl.html","",""],["Guard::Deprecated::Dsl::ClassMethods","","Guard/Deprecated/Dsl/ClassMethods.html","",""],["Guard::Deprecated::Evaluator","","Guard/Deprecated/Evaluator.html","",""],["Guard::Deprecated::Guard","","Guard/Deprecated/Guard.html","",""],["Guard::Deprecated::Guard::ClassMethods","","Guard/Deprecated/Guard/ClassMethods.html","",""],["Guard::Deprecated::Guardfile","","Guard/Deprecated/Guardfile.html","",""],["Guard::Deprecated::Guardfile::ClassMethods","","Guard/Deprecated/Guardfile/ClassMethods.html","",""],["Guard::Deprecated::Watcher","","Guard/Deprecated/Watcher.html","",""],["Guard::Deprecated::Watcher::ClassMethods","","Guard/Deprecated/Watcher/ClassMethods.html","",""],["Guard::Dsl","","Guard/Dsl.html","",""],["Guard::Dsl::Error","","Guard/Dsl/Error.html","",""],["Guard::DslDescriber","","Guard/DslDescriber.html","","<p>The DslDescriber evaluates the Guardfile and creates an internal structure\nof it that is used in some …\n"],["Guard::Group","","Guard/Group.html","","<p>A group of Guard plugins. There are two reasons why you want to group your\nGuard plugins:\n<p>You can start …\n"],["Guard::Guardfile","","Guard/Guardfile.html","",""],["Guard::Guardfile::Evaluator","","Guard/Guardfile/Evaluator.html","",""],["Guard::Guardfile::Evaluator::Error","","Guard/Guardfile/Evaluator/Error.html","",""],["Guard::Guardfile::Evaluator::NoCustomGuardfile","","Guard/Guardfile/Evaluator/NoCustomGuardfile.html","",""],["Guard::Guardfile::Evaluator::NoGuardfileError","","Guard/Guardfile/Evaluator/NoGuardfileError.html","",""],["Guard::Guardfile::Evaluator::NoPluginsError","","Guard/Guardfile/Evaluator/NoPluginsError.html","",""],["Guard::Guardfile::Generator","","Guard/Guardfile/Generator.html","","<p>This class is responsible for generating the Guardfile and adding\nGuard&#39; plugins&#39; templates into …\n"],["Guard::Interactor","","Guard/Interactor.html","",""],["Guard::Internals","","Guard/Internals.html","","<p>@private api\n<p>@private api\n<p>@private api\n"],["Guard::Internals::Debugging","","Guard/Internals/Debugging.html","",""],["Guard::Internals::Environment","","Guard/Internals/Environment.html","",""],["Guard::Internals::Environment::AlreadyExistsError","","Guard/Internals/Environment/AlreadyExistsError.html","",""],["Guard::Internals::Environment::Dumper","","Guard/Internals/Environment/Dumper.html","",""],["Guard::Internals::Environment::Error","","Guard/Internals/Environment/Error.html","",""],["Guard::Internals::Environment::Loader","","Guard/Internals/Environment/Loader.html","",""],["Guard::Internals::Environment::MethodError","","Guard/Internals/Environment/MethodError.html","",""],["Guard::Internals::Environment::NoMethodError","","Guard/Internals/Environment/NoMethodError.html","",""],["Guard::Internals::Groups","","Guard/Internals/Groups.html","",""],["Guard::Internals::Helpers","","Guard/Internals/Helpers.html","",""],["Guard::Internals::Plugins","","Guard/Internals/Plugins.html","",""],["Guard::Internals::Queue","","Guard/Internals/Queue.html","",""],["Guard::Internals::Scope","","Guard/Internals/Scope.html","",""],["Guard::Internals::Session","","Guard/Internals/Session.html","","<p>TODO: split into a commandline class and session (plugins, groups) TODO:\nswap session and metadata This …\n"],["Guard::Internals::State","","Guard/Internals/State.html","",""],["Guard::Internals::Tracing","","Guard/Internals/Tracing.html","",""],["Guard::Internals::Tracing::mod;","","Guard/Internals/Tracing/mod;.html","",""],["Guard::Internals::Traps","","Guard/Internals/Traps.html","",""],["Guard::Jobs","","Guard/Jobs.html","",""],["Guard::Jobs::Base","","Guard/Jobs/Base.html","",""],["Guard::Jobs::PryWrapper","","Guard/Jobs/PryWrapper.html","",""],["Guard::Jobs::Sleep","","Guard/Jobs/Sleep.html","",""],["Guard::Jobs::TerminalSettings","","Guard/Jobs/TerminalSettings.html","",""],["Guard::Notifier","","Guard/Notifier.html","","<p>The notifier handles sending messages to different notifiers. Currently the\nfollowing libraries are supported: …\n"],["Guard::Notifier::Base","","Guard/Notifier/Base.html","","<p>Base class for all notifiers.\n"],["Guard::Notifier::Detected","","Guard/Notifier/Detected.html","","<p>@private api\n"],["Guard::Notifier::Detected::NoneAvailableError","","Guard/Notifier/Detected/NoneAvailableError.html","",""],["Guard::Notifier::Emacs","","Guard/Notifier/Emacs.html","","<p>Send a notification to Emacs with emacsclient\n(www.emacswiki.org/emacs/EmacsClient).\n<p>@example Add the …\n"],["Guard::Notifier::FileNotifier","","Guard/Notifier/FileNotifier.html","","<p>Writes Guard notification results to a file.\n<p>@example Add the `:file` notifier to your `Guardfile`\n\n<pre>notification ...</pre>\n"],["Guard::Notifier::GNTP","","Guard/Notifier/GNTP.html","","<p>System notifications using the [ruby_gntp](github.com/snaka/ruby_gntp) gem.\n<p>This gem is available for …\n"],["Guard::Notifier::Growl","","Guard/Notifier/Growl.html","","<p>System notifications using the [growl](github.com/visionmedia/growl) gem.\n<p>This gem is available for OS …\n"],["Guard::Notifier::Libnotify","","Guard/Notifier/Libnotify.html","","<p>System notifications using the [libnotify](github.com/splattael/libnotify)\ngem.\n<p>This gem is available …\n"],["Guard::Notifier::NotServer","","Guard/Notifier/NotServer.html","",""],["Guard::Notifier::Notifu","","Guard/Notifier/Notifu.html","","<p>System notifications using the\n[rb-notifu](github.com/stereobooster/rb-notifu) gem.\n<p>This gem is available …\n"],["Guard::Notifier::NotifySend","","Guard/Notifier/NotifySend.html","","<p>System notifications using notify-send, a binary that ships with the\nlibnotify-bin package on many Debian-based …\n"],["Guard::Notifier::TerminalNotifier","","Guard/Notifier/TerminalNotifier.html","","<p>System notifications using the\n<p>[terminal-notifier](github.com/Springest/terminal-notifier-guard)\n<p>gem.\n"],["Guard::Notifier::TerminalTitle","","Guard/Notifier/TerminalTitle.html","","<p>Shows system notifications in the terminal title bar.\n"],["Guard::Notifier::Tmux","","Guard/Notifier/Tmux.html","","<p>Changes the color of the Tmux status bar and optionally shows messages in\nthe status bar.\n<p>@example Add …\n"],["Guard::Notifier::Tmux::Client","","Guard/Notifier/Tmux/Client.html","",""],["Guard::Notifier::Tmux::Defaults","","Guard/Notifier/Tmux/Defaults.html","","<p>Default options for the tmux notifications.\n"],["Guard::Notifier::Tmux::Error","","Guard/Notifier/Tmux/Error.html","",""],["Guard::Notifier::Tmux::Session","","Guard/Notifier/Tmux/Session.html","",""],["Guard::Options","","Guard/Options.html","","<p>A class that holds options. Can be instantiated with default options.\n"],["Guard::Plugin","","Guard/Plugin.html","","<p>Base class from which every Guard plugin implementation must inherit.\n<p>Guard will trigger the {#start}, …\n"],["Guard::PluginUtil","","Guard/PluginUtil.html","","<p>This class contains useful methods to:\n<p>Fetch all the Guard plugins names;\n<p>Initialize a plugin, get its …\n"],["Guard::RakeTask","","Guard/RakeTask.html","","<p>Provides a method to define a Rake task that runs the Guard plugins.\n"],["Guard::Reevaluator","","Guard/Reevaluator.html","",""],["Guard::Runner","","Guard/Runner.html","","<p>The runner is responsible for running all methods defined on each plugin.\n"],["Guard::Sheller","","Guard/Sheller.html","","<p>The Guard sheller abstract the actual subshell calls and allow easier\nstubbing.\n"],["Guard::Terminal","","Guard/Terminal.html","",""],["Guard::UI","","Guard/UI.html","","<p>The UI class helps to format messages for the user. Everything that is\nlogged through this class is considered …\n"],["Guard::UI::Colors","","Guard/UI/Colors.html","",""],["Guard::Watcher","","Guard/Watcher.html","",""],["Pathname","","Pathname.html","",""],["<<","Guard::Internals::Queue","Guard/Internals/Queue.html#method-i-3C-3C","(changes)",""],["[]","Guard::Notifier::Tmux::Defaults","Guard/Notifier/Tmux/Defaults.html#method-c-5B-5D","(name)",""],["_add_hooks","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_add_hooks","(options)","<p>Add Pry hooks:\n<p>Load `~/.guardrc` within each new Pry session.\n<p>Load project&#39;s `.guardrc` within each …\n"],["_add_load_guard_rc_hook","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_add_load_guard_rc_hook","(guard_rc)","<p>Add a `when_started` hook that loads a global .guardrc if it exists.\n"],["_add_load_project_guard_rc_hook","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_add_load_project_guard_rc_hook","(guard_rc)","<p>Add a `when_started` hook that loads a project .guardrc if it exists.\n"],["_add_restore_visibility_hook","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_add_restore_visibility_hook","()","<p>Add a `after_eval` hook that restores visibility after a command is eval.\n"],["_add_row","Guard::DslDescriber","Guard/DslDescriber.html#method-i-_add_row","(rows, name, available, used, option, value)",""],["_add_self_to_plugins","Guard::Reevaluator","Guard/Reevaluator.html#method-i-_add_self_to_plugins","()",""],["_all?","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-i-_all-3F","()",""],["_build_scope","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-_build_scope","(type)","<p>TODO: let the Plugins and Groups classes handle this? TODO: why even\ninstantiate?? just to check if it …\n"],["_capture","Guard::Notifier::Tmux::Client","Guard/Notifier/Tmux/Client.html#method-i-_capture","(*args)",""],["_check_server!","Guard::Notifier","Guard/Notifier.html#method-i-_check_server-21","()",""],["_client","Guard::Notifier::GNTP","Guard/Notifier/GNTP.html#method-i-_client","(opts = {})",""],["_client?","Guard::Notifier","Guard/Notifier.html#method-i-_client-3F","()",""],["_clip_name","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_clip_name","(target)",""],["_configure_prompt","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_configure_prompt","()","<p>Configures the pry prompt to see `guard` instead of `pry`.\n"],["_constant_name","Guard::PluginUtil","Guard/PluginUtil.html#method-i-_constant_name","()","<p>Guesses the most probable name for the current plugin based on its name.\n<p>@example Returns the most probable …\n"],["_create_command_aliases","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_create_command_aliases","()","<p>Creates command aliases for the commands: `help`, `reload`, `change`,\n`scope`, `notification`, `pause`, …\n"],["_create_env","Guard::Config","Guard/Config.html#method-i-_create_env","()",""],["_create_env","Guard::Notifier","Guard/Notifier.html#method-i-_create_env","()",""],["_create_group_commands","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_create_group_commands","()","<p>Create a shorthand command to run the `:run_all` action on a specific Guard\ngroup. For example, when …\n"],["_create_guard_commands","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_create_guard_commands","()","<p>Create a shorthand command to run the `:run_all` action on a specific Guard\nplugin. For example, when …\n"],["_create_run_all_command","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_create_run_all_command","()","<p>Creates a command that triggers the `:run_all` action when the command is\nempty (just pressing enter …\n"],["_data","Guard::Notifier::Detected","Guard/Notifier/Detected.html#method-i-_data","()",""],["_end_session","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-c-_end_session","()",""],["_env","Guard::Config","Guard/Config.html#method-i-_env","()",""],["_env","Guard::Notifier","Guard/Notifier.html#method-i-_env","()",""],["_evaluator","Guard::Reevaluator","Guard/Reevaluator.html#method-i-_evaluator","()",""],["_filter","Guard::UI","Guard/UI.html#method-i-_filter","(plugin)","<p>Filters log messages depending on either the `:only“ or `:except` option.\n<p>@param [String] plugin the …\n"],["_filtered_logger_message","Guard::UI","Guard/UI.html#method-i-_filtered_logger_message","(message, method, color_name, options = {})","<p>@private\n"],["_find_non_empty_scope","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-_find_non_empty_scope","(type, local_scope)",""],["_full_gem_path","Guard::PluginUtil","Guard/PluginUtil.html#method-i-_full_gem_path","(name)",""],["_gem_valid?","Guard::PluginUtil","Guard/PluginUtil.html#method-c-_gem_valid-3F","(gem)",""],["_groups","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-_groups","()",""],["_image_path","Guard::Notifier::Base","Guard/Notifier/Base.html#method-i-_image_path","(image)","<p>Get the image path for an image symbol for the following known image types:\n<p>failed\n<p>pending\n"],["_instantiate","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-_instantiate","(meth, obj)",""],["_kill_pry","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_kill_pry","()",""],["_killed?","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_killed-3F","()",""],["_libnotify_urgency","Guard::Notifier::Libnotify","Guard/Notifier/Libnotify.html#method-i-_libnotify_urgency","(type)","<p>Convert Guards notification type to the best matching libnotify urgency.\n<p>@param [String] type the Guard …\n"],["_merge_options","Guard::DslDescriber","Guard/DslDescriber.html#method-i-_merge_options","(klass, notifier)",""],["_notification_type","Guard::Notifier::Base","Guard/Notifier/Base.html#method-i-_notification_type","(image)","<p>Get the notification type depending on the image that has been selected for\nthe notification.\n<p>@param [Symbol, …\n"],["_notifu_type","Guard::Notifier::Notifu","Guard/Notifier/Notifu.html#method-i-_notifu_type","(type)","<p>Converts Guards notification type to the best matching Notifu type.\n<p>@param [String] type the Guard notification …\n"],["_notify","Guard::Internals::Debugging","Guard/Internals/Debugging.html#method-i-_notify","(*args)",""],["_notify","Guard::Notifier","Guard/Notifier.html#method-i-_notify","(klass, options, message, message_options)",""],["_notifysend_binary_available?","Guard::Notifier::NotifySend","Guard/Notifier/NotifySend.html#method-c-_notifysend_binary_available-3F","()","<p>@private\n<p>@return [Boolean] whether or not the notify-send binary is available\n"],["_notifysend_urgency","Guard::Notifier::NotifySend","Guard/Notifier/NotifySend.html#method-i-_notifysend_urgency","(type)","<p>Converts Guards notification type to the best matching notify-send urgency.\n<p>@param [String] type the  …\n"],["_parse_option","Guard::Notifier::Tmux::Client","Guard/Notifier/Tmux/Client.html#method-i-_parse_option","(line)",""],["_plugin_constant","Guard::PluginUtil","Guard/PluginUtil.html#method-i-_plugin_constant","()","<p>Returns the constant for the current plugin.\n<p>@example Returns the constant for a plugin\n\n<pre>&gt; Guard::PluginUtil.new(&#39;rspec&#39;).send(:_plugin_constant) ...</pre>\n"],["_plugins","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-_plugins","()",""],["_prompt","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_prompt","(ending_char)","<p>Returns a proc that will return itself a string ending with the given\n`ending_char` when called.\n"],["_register!","Guard::Notifier::GNTP","Guard/Notifier/GNTP.html#method-i-_register-21","(gntp_client)",""],["_register!","Guard::Notifier::Growl","Guard/Notifier/Growl.html#method-c-_register-21","(opts)","<p>@private\n<p>Detects if the Growl gem is available and if not, displays an error message\nunless `opts` is …\n"],["_register!","Guard::Notifier::NotifySend","Guard/Notifier/NotifySend.html#method-c-_register-21","(opts)","<p>@private\n<p>Detects if the notify-send binary is available and if not, displays an\nerror message unless ` …\n"],["_register!","Guard::Notifier::TerminalNotifier","Guard/Notifier/TerminalNotifier.html#method-c-_register-21","(opts)","<p>@private\n<p>Detects if the terminal-notifier-guard gem is available and if not,\ndisplays an error message …\n"],["_register_callbacks","Guard::Plugin","Guard/Plugin.html#method-i-_register_callbacks","()","<p>Add all the Guard::Plugin&#39;s callbacks to the global @callbacks array\nthat&#39;s used by Guard to …\n"],["_relative_pathname","Guard::Internals::Helpers","Guard/Internals/Helpers.html#method-i-_relative_pathname","(path)",""],["_replace_reset_command","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_replace_reset_command","()","<p>Replaces reset defined inside of Pry with a reset that instead restarts\nguard.\n"],["_require_guardfile","Guard::CLI","Guard/CLI.html#method-i-_require_guardfile","(options)",""],["_reset","Guard::Internals::Debugging","Guard/Internals/Debugging.html#method-i-_reset","()","<p>reset singleton - called by tests\n"],["_run","Guard::Notifier::Tmux::Client","Guard/Notifier/Tmux/Client.html#method-i-_run","(*args)",""],["_run_actions","Guard::Internals::Queue","Guard/Internals/Queue.html#method-i-_run_actions","(actions)",""],["_run_cmd","Guard::Notifier::Emacs","Guard/Notifier/Emacs.html#method-i-_run_cmd","(cmd, *args)",""],["_run_group_plugins","Guard::Runner","Guard/Runner.html#method-i-_run_group_plugins","(plugins)",""],["_sanitize","Guard::Internals::Environment","Guard/Internals/Environment.html#method-i-_sanitize","(meth)",""],["_scope_for_prompt","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_scope_for_prompt","()","<p>Returns the plugins scope, or the groups scope ready for display in the\nprompt.\n"],["_scope_names","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-_scope_names","(new_scope, name)","<p>TODO: move to session\n"],["_session","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-c-_session","()",""],["_setup","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_setup","(options)",""],["_setup_commands","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_setup_commands","()",""],["_shellize_if_needed","Guard::Sheller","Guard/Sheller.html#method-c-_shellize_if_needed","(args)","<p>Only needed on JRUBY, because MRI properly detects &#39;;&#39; and\nmetachars\n"],["_start","Guard::CLI","Guard/CLI.html#method-i-_start","(options)",""],["_start_session","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-c-_start_session","()",""],["_supervise","Guard::Runner","Guard/Runner.html#method-i-_supervise","(plugin, task, *args)","<p>Run a Guard plugin task, but remove the Guard plugin when his work leads to\na system failure.\n<p>When the …\n"],["_supported_host?","Guard::Notifier::Base","Guard/Notifier/Base.html#method-c-_supported_host-3F","()","<p>@private\n<p>Checks if the current OS is supported by the notifier.\n<p>@see .supported_hosts\n"],["_switch_to_pry","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-_switch_to_pry","()",""],["_system_with_capture","Guard::Sheller","Guard/Sheller.html#method-c-_system_with_capture","(*args)",""],["_system_with_no_capture","Guard::Sheller","Guard/Sheller.html#method-c-_system_with_no_capture","(*args)",""],["_to_arguments","Guard::Notifier::NotifySend","Guard/Notifier/NotifySend.html#method-i-_to_arguments","(command, supported, opts = {})","<p>Builds a shell command out of a command string and option hash.\n<p>@param [String] command the command execute …\n"],["_to_bool","Guard::Internals::Environment::Loader","Guard/Internals/Environment/Loader.html#method-i-_to_bool","(raw_value)",""],["_to_module","Guard::Notifier::Detected","Guard/Notifier/Detected.html#method-i-_to_module","(name)",""],["_trace","Guard::Internals::Debugging","Guard/Internals/Debugging.html#method-i-_trace","(mod, meth, &block)",""],["_ui","Guard::Guardfile::Generator","Guard/Guardfile/Generator.html#method-i-_ui","(*args)",""],["_untrace","Guard::Internals::Debugging","Guard/Internals/Debugging.html#method-i-_untrace","(mod, meth)",""],["_verify_bundler_presence","Guard::CLI","Guard/CLI.html#method-i-_verify_bundler_presence","()","<p>Verifies if Guard is run with `bundle exec` and shows a hint to do so if\nnot.\n<p>TODO: move this elsewhere!!! …\n"],["_write","Guard::Notifier::FileNotifier","Guard/Notifier/FileNotifier.html#method-i-_write","(path, contents)",""],["action_with_scopes","Guard::UI","Guard/UI.html#method-i-action_with_scopes","(action, scope)","<p>Show a scoped action message.\n<p>@param [String] action the action to show @param [Hash] scope hash with …\n"],["active?","Guard::Notifier","Guard/Notifier.html#method-i-active-3F","()","<p>Test if notifiers are currently turned on\n"],["add","Guard::Internals::Groups","Guard/Internals/Groups.html#method-i-add","(name, options = {})",""],["add","Guard::Internals::Plugins","Guard/Internals/Plugins.html#method-i-add","(name, options)","<p>TODO: should it allow duplicates? (probably yes because of different\nconfigs or groups)\n"],["add","Guard::Notifier","Guard/Notifier.html#method-i-add","(name, options = {})","<p>Add a notification library to be used.\n<p>@param [Symbol] name the name of the notifier to use @param [Hash] …\n"],["add","Guard::Notifier::Detected","Guard/Notifier/Detected.html#method-i-add","(name, opts)",""],["add_callback","Guard::Plugin","Guard/Plugin.html#method-c-add_callback","(listener, guard_plugin, events)","<p>Add a callback.\n<p>@param [Block] listener the listener to notify @param [Guard::Plugin]\nguard_plugin the …\n"],["add_notifier","Guard::Notifier","Guard/Notifier.html#method-i-add_notifier","(name, options = {})","<p>TODO: deprecate/remove\n"],["add_to_guardfile","Guard::PluginUtil","Guard/PluginUtil.html#method-i-add_to_guardfile","()","<p>Adds a plugin&#39;s template to the Guardfile.\n"],["all","Guard::Internals::Groups","Guard/Internals/Groups.html#method-i-all","(filter = nil)",""],["all","Guard::Internals::Plugins","Guard/Internals/Plugins.html#method-i-all","(filter = nil)",""],["available","Guard::Notifier::Detected","Guard/Notifier/Detected.html#method-i-available","()",""],["available?","Guard::Notifier::Base","Guard/Notifier/Base.html#method-c-available-3F","(opts = {})","<p>Test if the notifier can be used.\n<p>@param [Hash] opts notifier options @option opts [Boolean] silent true …\n"],["available?","Guard::Notifier::Emacs","Guard/Notifier/Emacs.html#method-c-available-3F","(opts = {})",""],["available?","Guard::Notifier::FileNotifier","Guard/Notifier/FileNotifier.html#method-c-available-3F","(opts = {})","<p>@param [Hash] opts some options @option opts [Boolean] path the path to a\nfile where Guard notification …\n"],["available?","Guard::Notifier::GNTP","Guard/Notifier/GNTP.html#method-c-available-3F","(opts = {})",""],["available?","Guard::Notifier::Growl","Guard/Notifier/Growl.html#method-c-available-3F","(opts = {})",""],["available?","Guard::Notifier::Libnotify","Guard/Notifier/Libnotify.html#method-c-available-3F","(opts = {})",""],["available?","Guard::Notifier::Notifu","Guard/Notifier/Notifu.html#method-c-available-3F","(opts = {})",""],["available?","Guard::Notifier::NotifySend","Guard/Notifier/NotifySend.html#method-c-available-3F","(opts = {})",""],["available?","Guard::Notifier::TerminalNotifier","Guard/Notifier/TerminalNotifier.html#method-c-available-3F","(opts = {})",""],["available?","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-c-available-3F","(opts = {})",""],["background","Guard::Interactor","Guard/Interactor.html#method-i-background","()","<p>Remove interactor so other tasks can run in foreground\n"],["background","Guard::Jobs::Base","Guard/Jobs/Base.html#method-i-background","()",""],["background","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-background","()",""],["background","Guard::Jobs::Sleep","Guard/Jobs/Sleep.html#method-i-background","()",""],["binwrite","Pathname","Pathname.html#method-i-binwrite","(*args)",""],["callbacks","Guard::Plugin","Guard/Plugin.html#method-c-callbacks","()","<p>Get all callbacks registered for all Guard plugins present in the\nGuardfile.\n"],["calling_plugin_name","Guard::UI","Guard/UI.html#method-i-calling_plugin_name","(depth = 2)","<p>Tries to extract the calling Guard plugin name from the call stack.\n<p>@param [Integer] depth the stack depth …\n"],["clear","Guard::Terminal","Guard/Terminal.html#method-i-clear","()",""],["clear","Guard::UI","Guard/UI.html#method-i-clear","(opts = {})","<p>Clear the output if clearable.\n"],["clear?","Guard::Internals::Session","Guard/Internals/Session.html#method-i-clear-3F","()",""],["clearable","Guard::UI","Guard/UI.html#method-i-clearable","()","<p>Allow the screen to be cleared again.\n"],["clearing","Guard::Internals::Session","Guard/Internals/Session.html#method-i-clearing","(on)",""],["clearing?","Guard::Internals::Session","Guard/Internals/Session.html#method-i-clearing-3F","()",""],["clients","Guard::Notifier::Tmux::Client","Guard/Notifier/Tmux/Client.html#method-i-clients","()",""],["close","Guard::Notifier::Tmux::Session","Guard/Notifier/Tmux/Session.html#method-i-close","()",""],["cmdline_groups","Guard::Internals::Session","Guard/Internals/Session.html#method-i-cmdline_groups","()",""],["cmdline_plugins","Guard::Internals::Session","Guard/Internals/Session.html#method-i-cmdline_plugins","()",""],["color","Guard::UI","Guard/UI.html#method-i-color","(text, *color_options)","<p>Colorizes a text message. See the constant in the UI class for possible\ncolor_options parameters. You …\n"],["color_enabled?","Guard::UI","Guard/UI.html#method-i-color_enabled-3F","()","<p>Checks if color output can be enabled.\n<p>@return [Boolean] whether color is enabled or not\n"],["configurable?","Guard::Jobs::TerminalSettings","Guard/Jobs/TerminalSettings.html#method-i-configurable-3F","()",""],["connect","Guard::Notifier","Guard/Notifier.html#method-i-connect","(options = {})",""],["convert_scope","Guard::Interactor","Guard/Interactor.html#method-i-convert_scope","(entries)","<p>Converts and validates a plain text scope to a valid plugin or group scope.\n<p>@param [Array&lt;String&gt;] …\n"],["create_guardfile","Guard::Guardfile::Generator","Guard/Guardfile/Generator.html#method-i-create_guardfile","()","<p>Creates the initial Guardfile template when it does not already exist.\n<p>@see Guard::CLI#init\n"],["create_method","Guard::Internals::Environment","Guard/Internals/Environment.html#method-i-create_method","(meth, &block)",""],["debug","Guard::UI","Guard/UI.html#method-i-debug","(message, options = {})","<p>Show a debug message that is prefixed with DEBUG and a timestamp.\n<p>@param [String] message the message …\n"],["debug?","Guard::Internals::Session","Guard/Internals/Session.html#method-i-debug-3F","()",""],["deprecation","Guard::UI","Guard/UI.html#method-i-deprecation","(message, options = {})","<p>Show a red deprecation message that is prefixed with DEPRECATION. It has a\nlog level of `warn`.\n<p>@param …\n"],["detect","Guard::Notifier::Detected","Guard/Notifier/Detected.html#method-i-detect","()",""],["disconnect","Guard::Notifier","Guard/Notifier.html#method-i-disconnect","()",""],["display","Guard::Notifier::Tmux::Client","Guard/Notifier/Tmux/Client.html#method-i-display","(client, message)",""],["display_message","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-i-display_message","(type, title, message, opts = {})","<p>Displays a message in the status bar of tmux.\n<p>@param [String] type the notification type. Either &#39;success&#39;, …\n"],["display_title","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-i-display_title","(type, title, message, options = {})","<p>Displays a message in the title bar of the terminal.\n<p>@param [String] title the notification title @param …\n"],["dump","Guard::Internals::Environment::Dumper","Guard/Internals/Environment/Dumper.html#method-i-dump","(raw_value, &callback)",""],["echo","Guard::Jobs::TerminalSettings","Guard/Jobs/TerminalSettings.html#method-i-echo","()",""],["emacs_color","Guard::Notifier::Emacs","Guard/Notifier/Emacs.html#method-i-emacs_color","(type, options = {})","<p>Get the Emacs color for the notification type. You can configure your own\ncolor by overwrite the defaults. …\n"],["enabled?","Guard::Interactor","Guard/Interactor.html#method-i-enabled-3F","()","<p>TODO: allow custom user idle jobs, e.g. [:pry, :sleep, :exit, …]\n"],["enabled?","Guard::Notifier","Guard/Notifier.html#method-i-enabled-3F","()","<p>Test if the notifications can be enabled based on ENV\n"],["error","Guard::UI","Guard/UI.html#method-i-error","(message, options = {})","<p>Show a red error message that is prefixed with ERROR.\n<p>@param [String] message the message to show @option …\n"],["evaluator_options","Guard::Internals::Session","Guard/Internals/Session.html#method-i-evaluator_options","()",""],["execute","Guard::ArubaAdapter","Guard/ArubaAdapter.html#method-i-execute","()",""],["execute!","Guard::ArubaAdapter","Guard/ArubaAdapter.html#method-i-execute-21","()",""],["foreground","Guard::Interactor","Guard/Interactor.html#method-i-foreground","()","<p>Run in foreground and wait until interrupted or closed\n"],["foreground","Guard::Jobs::Base","Guard/Jobs/Base.html#method-i-foreground","()","<p>@return [Symbol] :stopped once job is finished @return [Symbol] :exit to\ntell Guard to terminate\n"],["foreground","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-foreground","()",""],["foreground","Guard::Jobs::Sleep","Guard/Jobs/Sleep.html#method-i-foreground","()",""],["from_interactor","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-from_interactor","(scope)",""],["gem_name","Guard::Notifier::Base","Guard/Notifier/Base.html#method-c-gem_name","()","<p>Returns the name of the notifier&#39;s gem. By default it returns the\nnotifier name. This method can …\n"],["gem_name","Guard::Notifier::GNTP","Guard/Notifier/GNTP.html#method-c-gem_name","()",""],["gem_name","Guard::Notifier::Notifu","Guard/Notifier/Notifu.html#method-c-gem_name","()",""],["gem_name","Guard::Notifier::TerminalNotifier","Guard/Notifier/TerminalNotifier.html#method-c-gem_name","()",""],["grouped_plugins","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-grouped_plugins","(scope = { plugins: [], groups: [] })","<p>TODO: refactor\n"],["guardfile_scope","Guard::Internals::Session","Guard/Internals/Session.html#method-i-guardfile_scope","(scope)",""],["handle","Guard::Internals::Traps","Guard/Internals/Traps.html#method-c-handle","(signal, &block)",""],["handle_interrupt","Guard::Interactor","Guard/Interactor.html#method-i-handle_interrupt","()",""],["handle_interrupt","Guard::Jobs::Base","Guard/Jobs/Base.html#method-i-handle_interrupt","()","<p>Signal handler calls this, so avoid actually doing anything other than\nsignaling threads\n"],["handle_interrupt","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-handle_interrupt","()",""],["handle_interrupt","Guard::Jobs::Sleep","Guard/Jobs/Sleep.html#method-i-handle_interrupt","()",""],["hook","Guard::Plugin","Guard/Plugin.html#method-i-hook","(event, *args)","<p>When event is a Symbol, {#hook} will generate a hook name by concatenating\nthe method name from where …\n"],["images_path","Guard::Notifier::Base","Guard/Notifier/Base.html#method-i-images_path","()","<p>Paths where all Guard images are located\n<p>@return [Pathname] the path to the images directory\n"],["import","Guard::Commands::All","Guard/Commands/All.html#method-c-import","()",""],["import","Guard::Commands::Change","Guard/Commands/Change.html#method-c-import","()",""],["import","Guard::Commands::Notification","Guard/Commands/Notification.html#method-c-import","()",""],["import","Guard::Commands::Pause","Guard/Commands/Pause.html#method-c-import","()",""],["import","Guard::Commands::Reload","Guard/Commands/Reload.html#method-c-import","()",""],["import","Guard::Commands::Scope","Guard/Commands/Scope.html#method-c-import","()",""],["import","Guard::Commands::Show","Guard/Commands/Show.html#method-c-import","()",""],["info","Guard::UI","Guard/UI.html#method-i-info","(message, options = {})","<p>Show an info message.\n<p>@param [String] message the message to show @option options [Boolean] reset\nwhether …\n"],["init","Guard::CLI","Guard/CLI.html#method-i-init","(*plugin_names)","<p>Initializes the templates of all installed Guard plugins and adds them to\nthe `Guardfile` when no Guard …\n"],["initialize_all_templates","Guard::Guardfile::Generator","Guard/Guardfile/Generator.html#method-i-initialize_all_templates","()","<p>Adds the templates of all installed Guard implementations to an existing\nGuardfile.\n<p>@see Guard::CLI#init …\n"],["initialize_plugin","Guard::PluginUtil","Guard/PluginUtil.html#method-i-initialize_plugin","(options)","<p>Initializes a new `Guard::Plugin` with the given `options` hash. This\nmethods handles plugins that inherit …\n"],["initialize_template","Guard::Guardfile::Generator","Guard/Guardfile/Generator.html#method-i-initialize_template","(plugin_name)","<p>Adds the Guardfile template of a Guard plugin to an existing Guardfile.\n<p>@see Guard::CLI#init\n<p>@param [String] …\n"],["interactive?","Guard::Interactor","Guard/Interactor.html#method-i-interactive-3F","()",""],["interactor_name","Guard::Internals::Session","Guard/Internals/Session.html#method-i-interactor_name","()",""],["level=","Guard::UI","Guard/UI.html#method-i-level-3D","(new_level)","<p>Assigns a log level\n"],["list","Guard::CLI","Guard/CLI.html#method-i-list","()","<p>List the Guard plugins that are available for use in your system and marks\nthose that are currently used …\n"],["list","Guard::DslDescriber","Guard/DslDescriber.html#method-i-list","()","<p>List the Guard plugins that are available for use in your system and marks\nthose that are currently used …\n"],["listener_args","Guard::Internals::Session","Guard/Internals/Session.html#method-i-listener_args","()",""],["load","Guard::Internals::Environment::Loader","Guard/Internals/Environment/Loader.html#method-i-load","(raw_value, &callback)",""],["logger","Guard::UI","Guard/UI.html#method-i-logger","()","<p>Get the Guard::UI logger instance\n"],["matcher_for","Guard::Internals::Groups","Guard/Internals/Groups.html#method-i-matcher_for","(filter)",""],["matcher_for","Guard::Internals::Plugins","Guard/Internals/Plugins.html#method-i-matcher_for","(filter)",""],["message","Guard::Internals::Environment::AlreadyExistsError","Guard/Internals/Environment/AlreadyExistsError.html#method-i-message","()",""],["message","Guard::Internals::Environment::NoMethodError","Guard/Internals/Environment/NoMethodError.html#method-i-message","()",""],["method_missing","Guard::Internals::Environment","Guard/Internals/Environment.html#method-i-method_missing","(*args)",""],["name","Guard::Notifier::Base","Guard/Notifier/Base.html#method-i-name","()","<p>Returns the name of the notifier.\n<p>@example Un-modulize, underscorize and downcase the class name\n\n<pre>Guard::Notifier::FileNotifier.new.name ...</pre>\n"],["name","Guard::Notifier::Base","Guard/Notifier/Base.html#method-c-name","()","<p>Returns the name of the notifier.\n<p>@example Un-modulize, underscorize and downcase the class name\n\n<pre>Guard::Notifier::FileNotifier.name ...</pre>\n"],["name","Guard::Plugin","Guard/Plugin.html#method-i-name","()","<p>Returns the plugin&#39;s name (without “guard-”).\n<p>@example Name for Guard::RSpec\n\n<pre>Guard::RSpec.new.name ...</pre>\n"],["new","Guard::ArubaAdapter","Guard/ArubaAdapter.html#method-c-new","(argv, stdin = STDIN, stdout = STDOUT, stderr = STDERR, kernel = Kernel)",""],["new","Guard::DslDescriber","Guard/DslDescriber.html#method-c-new","(options = nil)",""],["new","Guard::Group","Guard/Group.html#method-c-new","(name, options = {})","<p>Initializes a Group.\n<p>@param [String] name the name of the group @param [Hash] options the group\noptions …\n"],["new","Guard::Interactor","Guard/Interactor.html#method-c-new","(no_interaction = false)","<p>Initializes the interactor. This configures Pry and creates some custom\ncommands and aliases for Guard …\n"],["new","Guard::Internals::Environment","Guard/Internals/Environment.html#method-c-new","(namespace)",""],["new","Guard::Internals::Environment::Dumper","Guard/Internals/Environment/Dumper.html#method-c-new","()",""],["new","Guard::Internals::Environment::Loader","Guard/Internals/Environment/Loader.html#method-c-new","(meth)",""],["new","Guard::Internals::Environment::MethodError","Guard/Internals/Environment/MethodError.html#method-c-new","(meth)",""],["new","Guard::Internals::Groups","Guard/Internals/Groups.html#method-c-new","()",""],["new","Guard::Internals::Plugins","Guard/Internals/Plugins.html#method-c-new","()",""],["new","Guard::Internals::Queue","Guard/Internals/Queue.html#method-c-new","(commander)",""],["new","Guard::Internals::Scope","Guard/Internals/Scope.html#method-c-new","()",""],["new","Guard::Internals::Session","Guard/Internals/Session.html#method-c-new","(new_options)",""],["new","Guard::Internals::State","Guard/Internals/State.html#method-c-new","(cmdline_opts)","<p>Minimal setup for non-interactive commands (list, init, show, etc.)\n"],["new","Guard::Jobs::Base","Guard/Jobs/Base.html#method-c-new","(_options)",""],["new","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-c-new","(options)",""],["new","Guard::Jobs::TerminalSettings","Guard/Jobs/TerminalSettings.html#method-c-new","()",""],["new","Guard::Notifier::Base","Guard/Notifier/Base.html#method-c-new","(opts = {})",""],["new","Guard::Notifier::Detected","Guard/Notifier/Detected.html#method-c-new","(supported)",""],["new","Guard::Notifier::Tmux::Session","Guard/Notifier/Tmux/Session.html#method-c-new","(_tmux)",""],["new","Guard::Options","Guard/Options.html#method-c-new","(opts = {}, default_opts = {})","<p>Initializes an Guard::Options object. `default_opts` is merged into `opts`.\n<p>@param [Hash] opts the options …\n"],["new","Guard::Plugin","Guard/Plugin.html#method-c-new","(options = {})","<p>Initializes a Guard plugin. Don&#39;t do any work here, especially as Guard\nplugins get initialized even …\n"],["new","Guard::PluginUtil","Guard/PluginUtil.html#method-c-new","(name)","<p>Initializes a new `Guard::PluginUtil` object.\n<p>@param [String] name the name of the Guard plugin\n"],["new","Guard::RakeTask","Guard/RakeTask.html#method-c-new","(name = :guard, options = \"\")","<p>Initialize the Rake task\n<p>@param [Symbol] name the name of the Rake task @param [String] options the\nCLI …\n"],["new","Guard::Sheller","Guard/Sheller.html#method-c-new","(*args)","<p>Creates a new Guard::Sheller object.\n<p>@param [String] args a command to run in a subshell @param\n[Array&lt;String&gt;] …\n"],["non_namespaced_classname","Guard::Plugin","Guard/Plugin.html#method-c-non_namespaced_classname","()","<p>Returns the non-namespaced class name of the plugin\n<p>@example Non-namespaced class name for Guard::RSpec …\n"],["non_namespaced_name","Guard::Plugin","Guard/Plugin.html#method-c-non_namespaced_name","()","<p>Returns the non-namespaced name of the plugin\n<p>@example Non-namespaced name for Guard::RSpec\n\n<pre>Guard::RSpec.non_namespaced_name ...</pre>\n"],["normalize_standard_options!","Guard::Notifier::Base","Guard/Notifier/Base.html#method-i-normalize_standard_options-21","(opts)","<p>Set or modify the `:title`, `:type` and `:image` options for a\nnotification. Should be used in `#notify`. …\n"],["notifiers","Guard::CLI","Guard/CLI.html#method-i-notifiers","()","<p>List the Notifiers for use in your system.\n<p>@see Guard::DslDescriber.notifiers\n"],["notifiers","Guard::DslDescriber","Guard/DslDescriber.html#method-i-notifiers","()","<p>Shows all notifiers and their options that are defined in the `Guardfile`.\n<p>@see CLI#show\n"],["notifiers","Guard::Notifier","Guard/Notifier.html#method-i-notifiers","()","<p>Used by dsl describer\n"],["notify","Guard::Notifier","Guard/Notifier.html#method-i-notify","(message, message_opts = {})","<p>Show a system notification with all configured notifiers.\n<p>@param [String] message the message to show …\n"],["notify","Guard::Notifier::Base","Guard/Notifier/Base.html#method-i-notify","(_message, opts = {})","<p>This method must be overriden.\n"],["notify","Guard::Notifier::Emacs","Guard/Notifier/Emacs.html#method-i-notify","(message, opts = {})","<p>Shows a system notification.\n<p>@param [String] type the notification type. Either &#39;success&#39;,\n\n<pre>&#39;pending&#39;, ...</pre>\n"],["notify","Guard::Notifier::FileNotifier","Guard/Notifier/FileNotifier.html#method-i-notify","(message, opts = {})","<p>Writes the notification to a file. By default it writes type, title, and\nmessage separated by newlines. …\n"],["notify","Guard::Notifier::GNTP","Guard/Notifier/GNTP.html#method-i-notify","(message, opts = {})","<p>Shows a system notification.\n<p>@param [String] message the notification message body @param [Hash] opts …\n"],["notify","Guard::Notifier::Growl","Guard/Notifier/Growl.html#method-i-notify","(message, opts = {})","<p>Shows a system notification.\n<p>The documented options are for GrowlNotify 1.3, but the older options are …\n"],["notify","Guard::Notifier::Libnotify","Guard/Notifier/Libnotify.html#method-i-notify","(message, opts = {})","<p>Shows a system notification.\n<p>@param [String] message the notification message body @param [Hash] opts …\n"],["notify","Guard::Notifier::Notifu","Guard/Notifier/Notifu.html#method-i-notify","(message, opts = {})","<p>Shows a system notification.\n<p>@param [String] message the notification message body @param [Hash] opts …\n"],["notify","Guard::Notifier::NotifySend","Guard/Notifier/NotifySend.html#method-i-notify","(message, opts = {})","<p>Shows a system notification.\n<p>@param [String] message the notification message body @param [Hash] opts …\n"],["notify","Guard::Notifier::TerminalNotifier","Guard/Notifier/TerminalNotifier.html#method-i-notify","(message, opts = {})","<p>Shows a system notification.\n<p>@param [String] message the notification message body @param [Hash] opts …\n"],["notify","Guard::Notifier::TerminalTitle","Guard/Notifier/TerminalTitle.html#method-i-notify","(message, opts = {})","<p>Shows a system notification.\n<p>@param [Hash] opts additional notification library options @option opts\n[String] …\n"],["notify","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-i-notify","(message, options = {})","<p>Shows a system notification.\n<p>By default, the Tmux notifier only makes use of a color based notification,\n…\n"],["notify","Guard::Plugin","Guard/Plugin.html#method-c-notify","(guard_plugin, event, *args)","<p>Notify a callback.\n<p>@param [Guard::Plugin] guard_plugin the Guard plugin to add the callback\n@param [Symbol] …\n"],["notify_options","Guard::Internals::Session","Guard/Internals/Session.html#method-i-notify_options","()",""],["ok?","Guard::Sheller","Guard/Sheller.html#method-i-ok-3F","()","<p>Returns true if the command succeeded, false otherwise.\n<p>@return [Boolean] whether or not the command succeeded …\n"],["option","Guard::Notifier::Tmux::Defaults","Guard/Notifier/Tmux/Defaults.html#method-c-option","(opts, name)",""],["options","Guard::Interactor","Guard/Interactor.html#method-i-options","()",""],["options","Guard::UI","Guard/UI.html#method-i-options","()","<p>Get the logger options\n<p>@return [Hash] the logger options\n"],["options=","Guard::UI","Guard/UI.html#method-i-options-3D","(options)","<p>Set the logger options\n<p>@param [Hash] options the logger options @option options [Symbol] level the\nlog …\n"],["parse_options","Guard::Notifier::Tmux::Client","Guard/Notifier/Tmux/Client.html#method-i-parse_options","(client)",""],["pause","Guard::Commander","Guard/Commander.html#method-i-pause","(expected = nil)","<p>Pause Guard listening to file changes.\n"],["pending?","Guard::Internals::Queue","Guard/Internals/Queue.html#method-i-pending-3F","()",""],["plugin_class","Guard::PluginUtil","Guard/PluginUtil.html#method-i-plugin_class","(options = {})","<p>Tries to load the Guard plugin main class. This transforms the supplied\nplugin name into a class name: …\n"],["plugin_location","Guard::PluginUtil","Guard/PluginUtil.html#method-i-plugin_location","()","<p>Locates a path to a Guard plugin gem.\n<p>@return [String] the full path to the plugin gem\n"],["plugin_names","Guard::PluginUtil","Guard/PluginUtil.html#method-c-plugin_names","()","<p>Returns a list of Guard plugin Gem names installed locally.\n<p>@return [Array&lt;String&gt;] a list of Guard …\n"],["process","Guard::Commands::All","Guard/Commands/All.html#method-i-process","(*entries)",""],["process","Guard::Commands::Change","Guard/Commands/Change.html#method-i-process","(*files)",""],["process","Guard::Commands::Notification","Guard/Commands/Notification.html#method-i-process","()",""],["process","Guard::Commands::Pause","Guard/Commands/Pause.html#method-i-process","()",""],["process","Guard::Commands::Reload","Guard/Commands/Reload.html#method-i-process","(*entries)",""],["process","Guard::Commands::Scope","Guard/Commands/Scope.html#method-i-process","(*entries)",""],["process","Guard::Commands::Show","Guard/Commands/Show.html#method-i-process","()",""],["process","Guard::Internals::Queue","Guard/Internals/Queue.html#method-i-process","()","<p>Process the change queue, running tasks within the main Guard thread\n"],["process","Guard::Jobs::PryWrapper","Guard/Jobs/PryWrapper.html#method-i-process","()",""],["ran?","Guard::Sheller","Guard/Sheller.html#method-i-ran-3F","()","<p>Returns true if the command has already been run, false otherwise.\n<p>@return [Boolean] whether or not the …\n"],["reevaluate","Guard::Reevaluator","Guard/Reevaluator.html#method-i-reevaluate","()",""],["reload","Guard::Commander","Guard/Commander.html#method-i-reload","(scopes = {})","<p>Reload Guardfile and all Guard plugins currently enabled. If no scope is\ngiven, then the Guardfile will …\n"],["remove","Guard::Internals::Plugins","Guard/Internals/Plugins.html#method-i-remove","(plugin)",""],["require_gem_safely","Guard::Notifier::Base","Guard/Notifier/Base.html#method-c-require_gem_safely","(opts = {})","<p>This method tries to require the gem whose name is returned by `.gem_name`.\nIf a LoadError or NameError …\n"],["reset","Guard::Notifier::Detected","Guard/Notifier/Detected.html#method-i-reset","()",""],["reset_and_clear","Guard::UI","Guard/UI.html#method-i-reset_and_clear","()","<p>TODO: arguments: UI uses Guard::options anyway @private api\n"],["reset_callbacks!","Guard::Plugin","Guard/Plugin.html#method-c-reset_callbacks-21","()","<p>Reset all callbacks.\n<p>TODO: remove (not used anywhere)\n"],["reset_line","Guard::UI","Guard/UI.html#method-i-reset_line","()","<p>Reset a line.\n"],["reset_logger","Guard::UI","Guard/UI.html#method-i-reset_logger","()","<p>Since logger is global, for Aruba in-process to properly separate output\nbetween calls, we need to reset …\n"],["reset_session","Guard::Internals::State","Guard/Internals/State.html#method-i-reset_session","()","<p>@private api used to clear instance variables during reevaluation\n"],["restore","Guard::Jobs::TerminalSettings","Guard/Jobs/TerminalSettings.html#method-i-restore","()",""],["run","Guard::Runner","Guard/Runner.html#method-i-run","(task, scope_hash = {})","<p>Runs a Guard-task on all registered plugins.\n<p>@param [Symbol] task the task to run\n<p>@param [Hash] scopes …\n"],["run","Guard::Sheller","Guard/Sheller.html#method-i-run","()","<p>Runs the command.\n<p>@return [Boolean] whether or not the command succeeded.\n"],["run","Guard::Sheller","Guard/Sheller.html#method-c-run","(*args)","<p>Shortcut for new(command).run\n"],["run_all","Guard::Commander","Guard/Commander.html#method-i-run_all","(scopes = {})","<p>Trigger `run_all` on all Guard plugins currently enabled.\n<p>@param [Hash] scopes hash with a Guard plugin …\n"],["run_on_changes","Guard::Runner","Guard/Runner.html#method-i-run_on_changes","(modified, added, removed)","<p>Runs the appropriate tasks on all registered plugins based on the passed\nchanges.\n<p>@param [Array&lt;String&gt;] …\n"],["run_on_modifications","Guard::Reevaluator","Guard/Reevaluator.html#method-i-run_on_modifications","(files)",""],["save","Guard::Jobs::TerminalSettings","Guard/Jobs/TerminalSettings.html#method-i-save","()",""],["set","Guard::Notifier::Tmux::Client","Guard/Notifier/Tmux/Client.html#method-i-set","(client, key, value)",""],["show","Guard::CLI","Guard/CLI.html#method-i-show","()","<p>Shows all Guard plugins and their options that are defined in the\n`Guardfile`\n<p>@see Guard::DslDescriber.show …\n"],["show","Guard::Commander","Guard/Commander.html#method-i-show","()",""],["show","Guard::DslDescriber","Guard/DslDescriber.html#method-i-show","()","<p>Shows all Guard plugins and their options that are defined in the\n`Guardfile`.\n<p>@see CLI#show\n"],["silence_deprecations?","Guard::Config","Guard/Config.html#method-i-silence_deprecations-3F","()",""],["start","Guard::CLI","Guard/CLI.html#method-i-start","()","<p>Start Guard by initializing the defined Guard plugins and watch the file\nsystem.\n<p>This is the default task, …\n"],["start","Guard::Commander","Guard/Commander.html#method-i-start","(options = {})","<p>Start Guard by evaluating the `Guardfile`, initializing declared Guard\nplugins and starting the available …\n"],["start","Guard::Internals::Debugging","Guard/Internals/Debugging.html#method-i-start","()","<p>Sets up debugging:\n<p>aborts on thread exceptions\n<p>Set the logging level to `:debug`\n"],["stderr","Guard::Sheller","Guard/Sheller.html#method-c-stderr","(*args)","<p>Shortcut for new(command).run.stderr\n"],["stderr","Guard::Sheller","Guard/Sheller.html#method-i-stderr","()","<p>Returns the command&#39;s error output.\n<p>@return [String] the command output\n"],["stdout","Guard::Sheller","Guard/Sheller.html#method-c-stdout","(*args)","<p>Shortcut for new(command).run.stdout\n"],["stdout","Guard::Sheller","Guard/Sheller.html#method-i-stdout","()","<p>Returns the command&#39;s output.\n<p>@return [String] the command output\n"],["stop","Guard::Commander","Guard/Commander.html#method-i-stop","()",""],["stop","Guard::Internals::Debugging","Guard/Internals/Debugging.html#method-i-stop","()",""],["stopping_symbol_for","Guard::Runner","Guard/Runner.html#method-c-stopping_symbol_for","(guard)","<p>Returns the symbol that has to be caught when running a supervised task.\n<p>@note If a Guard group is being …\n"],["strict?","Guard::Config","Guard/Config.html#method-i-strict-3F","()",""],["supported_hosts","Guard::Notifier::Base","Guard/Notifier/Base.html#method-c-supported_hosts","()","<p>This method should be overriden by subclasses and return an array of OSes\nthe notifier supports. By default, …\n"],["supported_hosts","Guard::Notifier::GNTP","Guard/Notifier/GNTP.html#method-c-supported_hosts","()",""],["supported_hosts","Guard::Notifier::Growl","Guard/Notifier/Growl.html#method-c-supported_hosts","()",""],["supported_hosts","Guard::Notifier::Libnotify","Guard/Notifier/Libnotify.html#method-c-supported_hosts","()",""],["supported_hosts","Guard::Notifier::Notifu","Guard/Notifier/Notifu.html#method-c-supported_hosts","()",""],["supported_hosts","Guard::Notifier::NotifySend","Guard/Notifier/NotifySend.html#method-c-supported_hosts","()",""],["supported_hosts","Guard::Notifier::TerminalNotifier","Guard/Notifier/TerminalNotifier.html#method-c-supported_hosts","()",""],["system","Guard::Sheller","Guard/Sheller.html#method-c-system","(*args)","<p>No output capturing\n<p>NOTE: `$stdout.puts system(&#39;cls&#39;)` on Windows won&#39;t work like\nit does …\n"],["template","Guard::Plugin","Guard/Plugin.html#method-c-template","(plugin_location)","<p>Specify the source for the Guardfile template. Each Guard plugin can\nredefine this method to add its …\n"],["title","Guard::Group","Guard/Group.html#method-i-title","()","<p>Returns the group title.\n<p>@example Title for a group named &#39;backend&#39;\n\n<pre>&gt; Guard::Group.new(&#39;backend&#39;).title ...</pre>\n"],["title","Guard::Notifier::Base","Guard/Notifier/Base.html#method-c-title","()","<p>Returns the title of the notifier.\n<p>@example Un-modulize the class name\n\n<pre>Guard::Notifier::FileNotifier.title ...</pre>\n"],["title","Guard::Notifier::Base","Guard/Notifier/Base.html#method-i-title","()","<p>Returns the title of the notifier.\n<p>@example Un-modulize the class name\n\n<pre>Guard::Notifier::FileNotifier.new.title ...</pre>\n"],["title","Guard::Plugin","Guard/Plugin.html#method-i-title","()","<p>Returns the plugin&#39;s class name without the Guard &mdash; namespace.\n\n<p>@example Title for Guard::RSpec\n\n<pre>Guard::RSpec.new.title ...</pre>\n"],["titles","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-titles","(scope = nil)",""],["tmux_color","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-i-tmux_color","(type, opts = {})","<p>Get the Tmux color for the notification type. You can configure your own\ncolor by overwriting the defaults. …\n"],["to_hash","Guard::Internals::Scope","Guard/Internals/Scope.html#method-i-to_hash","()",""],["to_s","Guard::Group","Guard/Group.html#method-i-to_s","()","<p>String representation of the group.\n<p>@example String representation of a group named &#39;backend&#39; …\n"],["to_s","Guard::Plugin","Guard/Plugin.html#method-i-to_s","()","<p>String representation of the plugin.\n<p>@example String representation of an instance of the Guard::RSpec …\n"],["toggle","Guard::Notifier","Guard/Notifier.html#method-i-toggle","()","<p>Toggle the system notifications on/off\n"],["trace","Guard::Internals::Tracing","Guard/Internals/Tracing.html#method-c-trace","(mod, meth)",""],["turn_off","Guard::Notifier","Guard/Notifier.html#method-i-turn_off","()","<p>Turn notifications off.\n"],["turn_off","Guard::Notifier::TerminalTitle","Guard/Notifier/TerminalTitle.html#method-c-turn_off","()","<p>Clears the terminal title\n"],["turn_off","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-c-turn_off","()","<p>Notification stopping. Restore the previous Tmux state if available\n(existing options are restored, new …\n"],["turn_on","Guard::Notifier","Guard/Notifier.html#method-i-turn_on","(options = {})","<p>Turn notifications on.\n<p>@param [Hash] options the turn_on options @option options [Boolean] silent\ndisable …\n"],["turn_on","Guard::Notifier::Tmux","Guard/Notifier/Tmux.html#method-c-turn_on","()","<p>Notification starting, save the current Tmux settings and quiet the Tmux\noutput.\n"],["unset","Guard::Notifier::Tmux::Client","Guard/Notifier/Tmux/Client.html#method-i-unset","(client, key, value)",""],["untrace","Guard::Internals::Tracing","Guard/Internals/Tracing.html#method-c-untrace","(mod, meth)",""],["version","Guard::CLI","Guard/CLI.html#method-i-version","()","<p>Shows the current version of Guard.\n<p>@see Guard::VERSION\n"],["version","Guard::Notifier::Tmux::Client","Guard/Notifier/Tmux/Client.html#method-i-version","()",""],["warning","Guard::UI","Guard/UI.html#method-i-warning","(message, options = {})","<p>Show a yellow warning message that is prefixed with WARNING.\n<p>@param [String] message the message to show …\n"],["watchdirs","Guard::Internals::Session","Guard/Internals/Session.html#method-i-watchdirs","()",""],["watchdirs=","Guard::Internals::Session","Guard/Internals/Session.html#method-i-watchdirs-3D","(dirs)","<p>set by Dsl with :directories() command\n"],["guard.rb.orig","","lib/guard_rb_orig.html","","<p>require “thread” require “listen”\n<p>require “guard/config” require “guard/deprecated/guard” …\n"],["helper.rb.orig","","lib/guard/compat/test/helper_rb_orig.html","",""],["dsl.rb.orig","","lib/guard/dsl_rb_orig.html","","<p>require “guard/guardfile/evaluator” require “guard/interactor” require\n“guard/notifier” …\n"],["session.rb.orig","","lib/guard/internals/session_rb_orig.html","","<p>require “guard/internals/plugins” require “guard/internals/groups”\n<p>require “guard/options” …\n"],["plugin_util.rb.orig","","lib/guard/plugin_util_rb_orig.html","","<p>require “guard/ui”\n<p>module Guard\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># This class contains useful methods to:</span>\n<span class=\"ruby-comment\">#</span>\n<span class=\"ruby-comment\"># * Fetch all the ...</span>\n</pre>\n"],["Guardfile","","lib/guard/templates/Guardfile.html","","<p>A sample Guardfile More info at github.com/guard/guard#readme\n\n<pre>Uncomment and set this to only include directories ...</pre>\n"],["ui.rb.orig","","lib/guard/ui_rb_orig.html","","<p>require “lumberjack”\n<p>require “guard/internals/state”\n<p>require “guard/options” …\n"],["version.rb.orig","","lib/guard/version_rb_orig.html","","<p>module Guard\n\n<pre>VERSION = &quot;2.10.0&quot;</pre>\n<p>end\n"]]}}