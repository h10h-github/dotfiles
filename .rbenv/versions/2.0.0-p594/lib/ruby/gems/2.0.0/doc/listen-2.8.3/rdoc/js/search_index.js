var search_data = {"index":{"searchIndex":["listen","adapter","bsd","base","darwin","linux","polling","tcp","windows","cli","change","directory","file","forwarder","internals","logging","threadpool","listener","options","queueoptimizer","record","entry","symlinkdetector","error","silencer","tcp","broadcaster","message","_adapter_class()","_add_listener()","_async_changes()","_auto_hash()","_calculate_add_remove_difference()","_change()","_change()","_change()","_change()","_configure()","_configure()","_configure()","_configure()","_configure()","_debug()","_debug_level()","_detect_possible_editor_save()","_dir_event?()","_error_exception()","_event_path()","_fail()","_fast_build()","_fast_build_dir()","_fast_try_file()","_fast_unset_path()","_fast_update_file()","_find()","_format_error()","_info()","_init_actors()","_init_ignores()","_init_options()","_init_tcp_options()","_join()","_log()","_log()","_log()","_log()","_log()","_log()","_log()","_log_exception()","_logical_action_for()","_process_changes()","_process_event()","_process_event()","_process_event()","_process_event()","_process_event()","_queue_change()","_queue_raw_change()","_reconfigure_silencer()","_reinterpret_related_changes()","_run()","_run()","_run()","_run()","_run()","_silenced?()","_skip_event?()","_smoosh_changes()","_squash_changes()","_start_adapter()","_start_wait_thread()","_stop_wait_thread()","_unicast()","_usable_adapter_class()","_wait_for_changes()","_wakeup_wait_thread()","_warn()","_warn_polling_fallback()","_watch_file()","_watch_for_new_file()","add()","add_dir()","async()","broadcast()","build()","change()","change()","children()","configure()","configure()","dir_entries()","file_data()","finalize()","finalize()","from_buffer()","handle_data()","handle_message()","ignore()","ignore!()","inaccurate_mac_time?()","listen?()","local_fs?()","local_fs?()","meta()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","object=()","on()","only()","pause()","paused()","paused=()","paused?()","payload=()","processing?()","queue()","real_path()","record_dir_key()","run()","run()","scan()","select()","silenced?()","start()","start()","start()","start()","start()","start()","stop()","stop()","stop()","sync()","sys_path()","to()","unpause()","unset_path()","update_file()","usable?()","usable?()","usable?()","verify_unwatched!()"],"longSearchIndex":["listen","listen::adapter","listen::adapter::bsd","listen::adapter::base","listen::adapter::darwin","listen::adapter::linux","listen::adapter::polling","listen::adapter::tcp","listen::adapter::windows","listen::cli","listen::change","listen::directory","listen::file","listen::forwarder","listen::internals","listen::internals::logging","listen::internals::threadpool","listen::listener","listen::options","listen::queueoptimizer","listen::record","listen::record::entry","listen::record::symlinkdetector","listen::record::symlinkdetector::error","listen::silencer","listen::tcp","listen::tcp::broadcaster","listen::tcp::message","listen::listener#_adapter_class()","listen#_add_listener()","listen::directory::_async_changes()","listen::record#_auto_hash()","listen::queueoptimizer#_calculate_add_remove_difference()","listen::adapter::bsd#_change()","listen::adapter::linux#_change()","listen::adapter::windows#_change()","listen::directory::_change()","listen::adapter::bsd#_configure()","listen::adapter::darwin#_configure()","listen::adapter::linux#_configure()","listen::adapter::polling#_configure()","listen::adapter::windows#_configure()","listen::internals::logging#_debug()","listen::listener#_debug_level()","listen::queueoptimizer#_detect_possible_editor_save()","listen::adapter::linux#_dir_event?()","listen::internals::logging#_error_exception()","listen::adapter::bsd#_event_path()","listen::record::symlinkdetector#_fail()","listen::record#_fast_build()","listen::record#_fast_build_dir()","listen::record#_fast_try_file()","listen::record#_fast_unset_path()","listen::record#_fast_update_file()","listen::adapter::bsd#_find()","listen::internals::logging#_format_error()","listen::internals::logging#_info()","listen::listener#_init_actors()","listen::silencer#_init_ignores()","listen::listener#_init_options()","listen::listener#_init_tcp_options()","listen::record::entry#_join()","listen::adapter::_log()","listen::adapter::base#_log()","listen::adapter::base::_log()","listen::change#_log()","listen::directory::_log()","listen::internals::logging#_log()","listen::tcp::broadcaster#_log()","listen::adapter::base#_log_exception()","listen::queueoptimizer#_logical_action_for()","listen::listener#_process_changes()","listen::adapter::bsd#_process_event()","listen::adapter::darwin#_process_event()","listen::adapter::linux#_process_event()","listen::adapter::polling#_process_event()","listen::adapter::windows#_process_event()","listen::adapter::base#_queue_change()","listen::listener#_queue_raw_change()","listen::listener#_reconfigure_silencer()","listen::queueoptimizer#_reinterpret_related_changes()","listen::adapter::bsd#_run()","listen::adapter::darwin#_run()","listen::adapter::linux#_run()","listen::adapter::polling#_run()","listen::adapter::windows#_run()","listen::listener#_silenced?()","listen::adapter::linux#_skip_event?()","listen::queueoptimizer#_smoosh_changes()","listen::queueoptimizer#_squash_changes()","listen::listener#_start_adapter()","listen::listener#_start_wait_thread()","listen::listener#_stop_wait_thread()","listen::tcp::broadcaster#_unicast()","listen::adapter::_usable_adapter_class()","listen::listener#_wait_for_changes()","listen::listener#_wakeup_wait_thread()","listen::internals::logging#_warn()","listen::adapter::_warn_polling_fallback()","listen::adapter::bsd#_watch_file()","listen::adapter::bsd#_watch_for_new_file()","listen::internals::threadpool::add()","listen::record#add_dir()","listen::listener#async()","listen::tcp::broadcaster#broadcast()","listen::record#build()","listen::change#change()","listen::file::change()","listen::record::entry#children()","listen::adapter::base#configure()","listen::silencer#configure()","listen::record#dir_entries()","listen::record#file_data()","listen::adapter::tcp#finalize()","listen::tcp::broadcaster#finalize()","listen::tcp::message::from_buffer()","listen::adapter::tcp#handle_data()","listen::adapter::tcp#handle_message()","listen::listener#ignore()","listen::listener#ignore!()","listen::file::inaccurate_mac_time?()","listen::listener#listen?()","listen::adapter::base::local_fs?()","listen::adapter::tcp::local_fs?()","listen::record::entry#meta()","listen::options#method_missing()","listen::adapter::base::new()","listen::change::new()","listen::forwarder::new()","listen::listener::new()","listen::options::new()","listen::record::new()","listen::record::entry::new()","listen::record::symlinkdetector::new()","listen::silencer::new()","listen::tcp::broadcaster::new()","listen::tcp::message::new()","listen::tcp::message#object=()","listen#on()","listen::listener#only()","listen::listener#pause()","listen::listener#paused()","listen::listener#paused=()","listen::listener#paused?()","listen::tcp::message#payload=()","listen::listener#processing?()","listen::listener#queue()","listen::record::entry#real_path()","listen::record::entry#record_dir_key()","listen::adapter::tcp#run()","listen::tcp::broadcaster#run()","listen::directory::scan()","listen::adapter::select()","listen::silencer#silenced?()","listen::adapter::base#start()","listen::adapter::tcp#start()","listen::cli#start()","listen::forwarder#start()","listen::listener#start()","listen::tcp::broadcaster#start()","listen#stop()","listen::internals::threadpool::stop()","listen::listener#stop()","listen::listener#sync()","listen::record::entry#sys_path()","listen#to()","listen::listener#unpause()","listen::record#unset_path()","listen::record#update_file()","listen::adapter::bsd::usable?()","listen::adapter::base::usable?()","listen::adapter::windows::usable?()","listen::record::symlinkdetector#verify_unwatched!()"],"info":[["Listen","","Listen.html","","<p>Listener implementation for BSD&#39;s `kqueue`. @see\nwww.freebsd.org/cgi/man.cgi?query=kqueue @see\ngithub.com/mat813/rb-kqueue/blob/master/lib/rb-kqueue/queue.rb …\n"],["Listen::Adapter","","Listen/Adapter.html","",""],["Listen::Adapter::BSD","","Listen/Adapter/BSD.html","",""],["Listen::Adapter::Base","","Listen/Adapter/Base.html","",""],["Listen::Adapter::Darwin","","Listen/Adapter/Darwin.html","","<p>Adapter implementation for Mac OS X `FSEvents`.\n"],["Listen::Adapter::Linux","","Listen/Adapter/Linux.html","","<p>@see github.com/nex3/rb-inotify\n"],["Listen::Adapter::Polling","","Listen/Adapter/Polling.html","","<p>Polling Adapter that works cross-platform and has no dependencies. This is\nthe adapter that uses the …\n"],["Listen::Adapter::TCP","","Listen/Adapter/TCP.html","","<p>Adapter to receive file system modifications over TCP\n"],["Listen::Adapter::Windows","","Listen/Adapter/Windows.html","","<p>Adapter implementation for Windows `wdm`.\n"],["Listen::CLI","","Listen/CLI.html","",""],["Listen::Change","","Listen/Change.html","",""],["Listen::Directory","","Listen/Directory.html","",""],["Listen::File","","Listen/File.html","",""],["Listen::Forwarder","","Listen/Forwarder.html","",""],["Listen::Internals","","Listen/Internals.html","","<p>@private api\n"],["Listen::Internals::Logging","","Listen/Internals/Logging.html","",""],["Listen::Internals::ThreadPool","","Listen/Internals/ThreadPool.html","","<p>Just a wrapper for tests to avoid interfereing with Celluloid&#39;s threads\n"],["Listen::Listener","","Listen/Listener.html","",""],["Listen::Options","","Listen/Options.html","",""],["Listen::QueueOptimizer","","Listen/QueueOptimizer.html","",""],["Listen::Record","","Listen/Record.html","","<p>@private api\n<p>@private api\n"],["Listen::Record::Entry","","Listen/Record/Entry.html","","<p>Represents a directory entry (dir or file)\n"],["Listen::Record::SymlinkDetector","","Listen/Record/SymlinkDetector.html","",""],["Listen::Record::SymlinkDetector::Error","","Listen/Record/SymlinkDetector/Error.html","",""],["Listen::Silencer","","Listen/Silencer.html","",""],["Listen::TCP","","Listen/TCP.html","",""],["Listen::TCP::Broadcaster","","Listen/TCP/Broadcaster.html","",""],["Listen::TCP::Message","","Listen/TCP/Message.html","",""],["_adapter_class","Listen::Listener","Listen/Listener.html#method-i-_adapter_class","()",""],["_add_listener","Listen","Listen.html#method-i-_add_listener","(*args, &block)",""],["_async_changes","Listen::Directory","Listen/Directory.html#method-c-_async_changes","(dir, path, queue, previous, options)",""],["_auto_hash","Listen::Record","Listen/Record.html#method-i-_auto_hash","()",""],["_calculate_add_remove_difference","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_calculate_add_remove_difference","(actions, path, default_if_exists)",""],["_change","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_change","(event_flags)",""],["_change","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_change","(event_flags)",""],["_change","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_change","(type)",""],["_change","Listen::Directory","Listen/Directory.html#method-c-_change","(queue, type, dir, path, options)",""],["_configure","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_configure","(directory, &_callback)",""],["_configure","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_configure","(dir, &callback)","<p>NOTE: each directory gets a DIFFERENT callback!\n"],["_configure","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_configure","(directory, &callback)",""],["_configure","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_configure","(_, &callback)",""],["_configure","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_configure","(dir, &callback)",""],["_debug","Listen::Internals::Logging","Listen/Internals/Logging.html#method-i-_debug","(*args)",""],["_debug_level","Listen::Listener","Listen/Listener.html#method-i-_debug_level","()",""],["_detect_possible_editor_save","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_detect_possible_editor_save","(changes)",""],["_dir_event?","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_dir_event-3F","(event)",""],["_error_exception","Listen::Internals::Logging","Listen/Internals/Logging.html#method-i-_error_exception","(fmt)",""],["_event_path","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_event_path","(event)",""],["_fail","Listen::Record::SymlinkDetector","Listen/Record/SymlinkDetector.html#method-i-_fail","(symlinked, real_path)",""],["_fast_build","Listen::Record","Listen/Record.html#method-i-_fast_build","(root)","<p>TODO: test with a file name given TODO: test other permissions TODO: test\nwith mixed encoding\n"],["_fast_build_dir","Listen::Record","Listen/Record.html#method-i-_fast_build_dir","(remaining, symlink_detector)",""],["_fast_try_file","Listen::Record","Listen/Record.html#method-i-_fast_try_file","(entry)",""],["_fast_unset_path","Listen::Record","Listen/Record.html#method-i-_fast_unset_path","(dir, dirname, basename)",""],["_fast_update_file","Listen::Record","Listen/Record.html#method-i-_fast_update_file","(dir, dirname, basename, data)",""],["_find","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_find","(*paths)","<p>Quick rubocop workaround\n"],["_format_error","Listen::Internals::Logging","Listen/Internals/Logging.html#method-i-_format_error","(fmt)",""],["_info","Listen::Internals::Logging","Listen/Internals/Logging.html#method-i-_info","(*args)",""],["_init_actors","Listen::Listener","Listen/Listener.html#method-i-_init_actors","()",""],["_init_ignores","Listen::Silencer","Listen/Silencer.html#method-i-_init_ignores","(ignores, overrides)",""],["_init_options","Listen::Listener","Listen/Listener.html#method-i-_init_options","(options = {})",""],["_init_tcp_options","Listen::Listener","Listen/Listener.html#method-i-_init_tcp_options","(target)",""],["_join","Listen::Record::Entry","Listen/Record/Entry.html#method-i-_join","()",""],["_log","Listen::Adapter","Listen/Adapter.html#method-c-_log","(type, message)",""],["_log","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_log","(*args)",""],["_log","Listen::Adapter::Base","Listen/Adapter/Base.html#method-c-_log","(*args)",""],["_log","Listen::Change","Listen/Change.html#method-i-_log","(type, message)",""],["_log","Listen::Directory","Listen/Directory.html#method-c-_log","(type, &block)",""],["_log","Listen::Internals::Logging","Listen/Internals/Logging.html#method-i-_log","(*args)",""],["_log","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-_log","(type, message)",""],["_log_exception","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_log_exception","(msg)",""],["_logical_action_for","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_logical_action_for","(path, actions)",""],["_process_changes","Listen::Listener","Listen/Listener.html#method-i-_process_changes","()","<p>for easier testing without sleep loop\n"],["_process_event","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_process_event","(dir, event)",""],["_process_event","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_process_event","(dir, event)",""],["_process_event","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_process_event","(dir, event)",""],["_process_event","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_process_event","(dir, _)",""],["_process_event","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_process_event","(dir, event)",""],["_queue_change","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_queue_change","(type, dir, rel_path, options)",""],["_queue_raw_change","Listen::Listener","Listen/Listener.html#method-i-_queue_raw_change","(type, dir, rel_path, options)",""],["_reconfigure_silencer","Listen::Listener","Listen/Listener.html#method-i-_reconfigure_silencer","(extra_options)",""],["_reinterpret_related_changes","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_reinterpret_related_changes","(cookies)","<p>remove extraneous rb-inotify events, keeping them only if it&#39;s a\npossible editor rename() call (e.g. …\n"],["_run","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_run","()",""],["_run","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_run","()","<p>NOTE: _run is called within a thread, so run every other worker in it&#39;s\nown thread\n"],["_run","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_run","()",""],["_run","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_run","()",""],["_run","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_run","()",""],["_silenced?","Listen::Listener","Listen/Listener.html#method-i-_silenced-3F","(path, type)",""],["_skip_event?","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_skip_event-3F","(event)",""],["_smoosh_changes","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_smoosh_changes","(changes)",""],["_squash_changes","Listen::QueueOptimizer","Listen/QueueOptimizer.html#method-i-_squash_changes","(changes)","<p>groups changes into the expected structure expected by clients\n"],["_start_adapter","Listen::Listener","Listen/Listener.html#method-i-_start_adapter","()",""],["_start_wait_thread","Listen::Listener","Listen/Listener.html#method-i-_start_wait_thread","()",""],["_stop_wait_thread","Listen::Listener","Listen/Listener.html#method-i-_stop_wait_thread","()",""],["_unicast","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-_unicast","(socket, payload)",""],["_usable_adapter_class","Listen::Adapter","Listen/Adapter.html#method-c-_usable_adapter_class","()",""],["_wait_for_changes","Listen::Listener","Listen/Listener.html#method-i-_wait_for_changes","()",""],["_wakeup_wait_thread","Listen::Listener","Listen/Listener.html#method-i-_wakeup_wait_thread","()",""],["_warn","Listen::Internals::Logging","Listen/Internals/Logging.html#method-i-_warn","(*args)",""],["_warn_polling_fallback","Listen::Adapter","Listen/Adapter.html#method-c-_warn_polling_fallback","(options)",""],["_watch_file","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_watch_file","(path, queue)",""],["_watch_for_new_file","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_watch_for_new_file","(event)",""],["add","Listen::Internals::ThreadPool","Listen/Internals/ThreadPool.html#method-c-add","(&block)",""],["add_dir","Listen::Record","Listen/Record.html#method-i-add_dir","(dir, rel_path)",""],["async","Listen::Listener","Listen/Listener.html#method-i-async","(type)",""],["broadcast","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-broadcast","(payload)","<p>Broadcasts given payload to all connected sockets\n"],["build","Listen::Record","Listen/Record.html#method-i-build","()",""],["change","Listen::Change","Listen/Change.html#method-i-change","(type, watched_dir, rel_path, options = {})",""],["change","Listen::File","Listen/File.html#method-c-change","(record, dir, rel_path)",""],["children","Listen::Record::Entry","Listen/Record/Entry.html#method-i-children","()",""],["configure","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-configure","()","<p>TODO: it&#39;s a separate method as a temporary workaround for tests\n"],["configure","Listen::Silencer","Listen/Silencer.html#method-i-configure","(options)",""],["dir_entries","Listen::Record","Listen/Record.html#method-i-dir_entries","(dir, rel_path)",""],["file_data","Listen::Record","Listen/Record.html#method-i-file_data","(dir, rel_path)",""],["finalize","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-finalize","()","<p>Cleans up buffer and socket\n"],["finalize","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-finalize","()","<p>Cleans up sockets and server\n"],["from_buffer","Listen::TCP::Message","Listen/TCP/Message.html#method-c-from_buffer","(buffer)","<p>Extracts a message from given buffer\n"],["handle_data","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-handle_data","(data)","<p>Buffers incoming data and handles messages accordingly\n"],["handle_message","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-handle_message","(message)","<p>Handles incoming message by notifying of path changes\n"],["ignore","Listen::Listener","Listen/Listener.html#method-i-ignore","(regexps)","<p>Add files and dirs to ignore on top of defaults\n<p>(@see Listen::Silencer for default ignored files and dirs) …\n"],["ignore!","Listen::Listener","Listen/Listener.html#method-i-ignore-21","(regexps)","<p>Replace default ignore patterns with provided regexp\n"],["inaccurate_mac_time?","Listen::File","Listen/File.html#method-c-inaccurate_mac_time-3F","(stat)",""],["listen?","Listen::Listener","Listen/Listener.html#method-i-listen-3F","()","<p>TODO: deprecate\n"],["local_fs?","Listen::Adapter::Base","Listen/Adapter/Base.html#method-c-local_fs-3F","()",""],["local_fs?","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-c-local_fs-3F","()",""],["meta","Listen::Record::Entry","Listen/Record/Entry.html#method-i-meta","()",""],["method_missing","Listen::Options","Listen/Options.html#method-i-method_missing","(name, *_)",""],["new","Listen::Adapter::Base","Listen/Adapter/Base.html#method-c-new","(opts)",""],["new","Listen::Change","Listen/Change.html#method-c-new","(listener)",""],["new","Listen::Forwarder","Listen/Forwarder.html#method-c-new","(options)",""],["new","Listen::Listener","Listen/Listener.html#method-c-new","(*args, &block)","<p>Initializes the directories listener.\n<p>@param [String] directory the directories to listen to @param [Hash] …\n"],["new","Listen::Options","Listen/Options.html#method-c-new","(opts, defaults)",""],["new","Listen::Record","Listen/Record.html#method-c-new","(listener)",""],["new","Listen::Record::Entry","Listen/Record/Entry.html#method-c-new","(root, relative, name = nil)","<p>file: “/home/me/watched_dir”, “app/models”, “foo.rb” dir,\n“/home/me/watched_dir”, …\n"],["new","Listen::Record::SymlinkDetector","Listen/Record/SymlinkDetector.html#method-c-new","()",""],["new","Listen::Silencer","Listen/Silencer.html#method-c-new","()",""],["new","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-c-new","(host, port)","<p>Initializes a Celluloid::IO-powered TCP-broadcaster\n<p>@param [String] host to broadcast on @param [String] …\n"],["new","Listen::TCP::Message","Listen/TCP/Message.html#method-c-new","(*args)","<p>Initializes a new message\n<p>@param [Object] object to initialize message with\n"],["object=","Listen::TCP::Message","Listen/TCP/Message.html#method-i-object-3D","(obj)","<p>Generates message size and payload for given object\n"],["on","Listen","Listen.html#method-i-on","(target, *args, &block)","<p>Listens to file system modifications broadcast over TCP.\n<p>@param [String/Fixnum] target to listen on (hostname:port …\n"],["only","Listen::Listener","Listen/Listener.html#method-i-only","(regexps)","<p>Listen only to files and dirs matching regexp\n"],["pause","Listen::Listener","Listen/Listener.html#method-i-pause","()","<p>Stops invoking callbacks (messages pile up)\n"],["paused","Listen::Listener","Listen/Listener.html#method-i-paused","()","<p>TODO: deprecate\n"],["paused=","Listen::Listener","Listen/Listener.html#method-i-paused-3D","(value)","<p>TODO: deprecate\n"],["paused?","Listen::Listener","Listen/Listener.html#method-i-paused-3F","()",""],["payload=","Listen::TCP::Message","Listen/TCP/Message.html#method-i-payload-3D","(payload)","<p>Extracts message size and loads object from given payload\n"],["processing?","Listen::Listener","Listen/Listener.html#method-i-processing-3F","()","<p>processing means callbacks are called\n"],["queue","Listen::Listener","Listen/Listener.html#method-i-queue","(type, change, dir, path, options = {})",""],["real_path","Listen::Record::Entry","Listen/Record/Entry.html#method-i-real_path","()",""],["record_dir_key","Listen::Record::Entry","Listen/Record/Entry.html#method-i-record_dir_key","()","<p>record hash is e.g. if @record[“project/app/models”] if\n@record[“project/app”] record_dir_key …\n"],["run","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-run","()","<p>Continuously receive and asynchronously handle data\n"],["run","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-run","()","<p>Continuously accept and handle incoming connections\n"],["scan","Listen::Directory","Listen/Directory.html#method-c-scan","(queue, sync_record, dir, rel_path, options)",""],["select","Listen::Adapter","Listen/Adapter.html#method-c-select","(options = {})",""],["silenced?","Listen::Silencer","Listen/Silencer.html#method-i-silenced-3F","(relative_path, type)","<p>TODO: switch type and path places - and verify\n"],["start","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-start","()",""],["start","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-start","()","<p>Initializes and starts a Celluloid::IO-powered TCP-recipient\n"],["start","Listen::CLI","Listen/CLI.html#method-i-start","()",""],["start","Listen::Forwarder","Listen/Forwarder.html#method-i-start","()",""],["start","Listen::Listener","Listen/Listener.html#method-i-start","()","<p>Starts processing events and starts adapters or resumes invoking callbacks\nif paused\n"],["start","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-start","()","<p>Asynchronously start accepting connections\n"],["stop","Listen","Listen.html#method-i-stop","()","<p>Stop all listeners &amp; Celluloid\n<p>Use it for testing purpose or when you are sure that Celluloid could …\n"],["stop","Listen::Internals::ThreadPool","Listen/Internals/ThreadPool.html#method-c-stop","()",""],["stop","Listen::Listener","Listen/Listener.html#method-i-stop","()","<p>Stops processing and terminates all actors\n"],["sync","Listen::Listener","Listen/Listener.html#method-i-sync","(type)",""],["sys_path","Listen::Record::Entry","Listen/Record/Entry.html#method-i-sys_path","()",""],["to","Listen","Listen.html#method-i-to","(*args, &block)","<p>Listens to file system modifications on a either single directory or\nmultiple directories.\n<p>When :forward_to …\n"],["unpause","Listen::Listener","Listen/Listener.html#method-i-unpause","()","<p>TODO: depreciate\n"],["unset_path","Listen::Record","Listen/Record.html#method-i-unset_path","(dir, rel_path)",""],["update_file","Listen::Record","Listen/Record.html#method-i-update_file","(dir, rel_path, data)",""],["usable?","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Base","Listen/Adapter/Base.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-c-usable-3F","()",""],["verify_unwatched!","Listen::Record::SymlinkDetector","Listen/Record/SymlinkDetector.html#method-i-verify_unwatched-21","(entry)",""]]}}