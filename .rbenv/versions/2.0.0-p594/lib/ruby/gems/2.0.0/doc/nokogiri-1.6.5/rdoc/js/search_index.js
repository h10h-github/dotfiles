var search_data = {"index":{"searchIndex":["nokogiri","css","node","parser","syntaxerror","tokenizer","scanerror","xpathvisitor","decorators","slop","encodinghandler","html","builder","document","encodingfound","encodingreader","jumpsaxhandler","saxhandler","documentfragment","elementdescription","entitydescription","entitylookup","sax","parser","parsercontext","pushparser","syntaxerror","versioninfo","xml","attr","attributedecl","builder","nodebuilder","cdata","characterdata","comment","dtd","document","documentfragment","element","elementcontent","elementdecl","entitydecl","entityreference","namespace","node","saveoptions","nodeset","notation","pp","characterdata","node","parseoptions","processinginstruction","reader","relaxng","sax","document","parser","attribute","parsercontext","pushparser","schema","syntaxerror","text","xpath","syntaxerror","xpathcontext","xslt","stylesheet","object","xsd","xmlparser","nokogiri","%()","%()","&()","+()","-()","/()","/()","<<()","<<()","<<()","<<()","<<()","<=>()","==()","==()",">()",">()","html()","nokogiri()","reader()","relaxng()","schema()","slop()","xml()","xslt()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","_reduce_1()","_reduce_11()","_reduce_12()","_reduce_13()","_reduce_14()","_reduce_15()","_reduce_16()","_reduce_18()","_reduce_2()","_reduce_20()","_reduce_21()","_reduce_22()","_reduce_23()","_reduce_25()","_reduce_26()","_reduce_27()","_reduce_28()","_reduce_29()","_reduce_3()","_reduce_30()","_reduce_31()","_reduce_32()","_reduce_33()","_reduce_34()","_reduce_35()","_reduce_36()","_reduce_37()","_reduce_4()","_reduce_40()","_reduce_41()","_reduce_42()","_reduce_43()","_reduce_44()","_reduce_45()","_reduce_48()","_reduce_49()","_reduce_5()","_reduce_50()","_reduce_51()","_reduce_52()","_reduce_58()","_reduce_59()","_reduce_6()","_reduce_60()","_reduce_62()","_reduce_63()","_reduce_64()","_reduce_65()","_reduce_66()","_reduce_67()","_reduce_68()","_reduce_69()","_reduce_7()","_reduce_8()","_reduce_9()","_reduce_none()","accept()","accept()","add_child()","add_child()","add_child_node_and_reparent_attrs()","add_class()","add_namespace()","add_namespace_definition()","add_next_sibling()","add_previous_sibling()","add_sibling()","after()","after()","alias()","ancestors()","apply_to()","at()","at()","at_css()","at_css()","at_xpath()","at_xpath()","attr()","attr()","attr_nodes()","attribute()","attribute()","attribute()","attribute_at()","attribute_count()","attribute_nodes()","attribute_nodes()","attribute_type()","attribute_with_ns()","attributes()","attributes()","attributes()","attributes?()","base_uri()","before()","before()","blank?()","block?()","c1()","c2()","canonicalize()","canonicalize()","cdata()","cdata?()","cdata_block()","cdata_block()","characters()","check_encoding()","child()","children()","children()","children()","children=()","clear_aliases!()","clear_cache()","clone()","clone()","coerce()","collect_namespaces()","column()","comment()","comment()","comment?()","compare()","content()","content()","content()","content=()","content=()","content=()","create_cdata()","create_comment()","create_element()","create_entity()","create_external_subset()","create_internal_subset()","create_text_node()","css()","css()","css()","css_path()","decorate()","decorate!()","decorators()","default()","default?()","default_desc()","default_namespace=()","default_sub_element()","delete()","delete()","delete()","deprecated?()","deprecated_attributes()","depth()","description()","description()","do_parse()","do_xinclude()","document()","document()","document?()","dump_html()","dup()","dup()","dup()","each()","each()","each()","each()","elem?()","element?()","element_children()","element_type()","elements()","elements()","empty?()","empty?()","empty_doc?()","empty_element?()","encode_special_chars()","encoding()","encoding=()","end_document()","end_element()","end_element()","end_element_namespace()","end_element_namespace()","entities()","entity_type()","enumeration()","error()","error()","error?()","evaluate()","external_id()","external_id()","external_subset()","fatal?()","file()","file()","filter()","find_by_type()","finish()","first()","first_element_child()","fragment()","fragment()","fragment()","fragment()","fragment?()","from_document()","from_document()","from_io()","from_memory()","get()","get()","get_attribute()","has_attribute?()","href()","html5_dtd?()","html?()","html_dtd?()","implied_end_tag?()","implied_start_tag?()","implied_xpath_context()","implied_xpath_context()","in_context()","include?()","index()","initialize_native()","initialize_native()","inline?()","inner_html()","inner_html()","inner_html=()","inner_text()","inner_text()","inner_xml()","insert()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect_attributes()","inspect_attributes()","inspect_attributes()","inspect_attributes()","internal_subset()","io()","key?()","keys()","keys()","lang()","last()","last_element_child()","length()","line()","line()","local_name()","make()","matches?()","memory()","memory()","meta_content_type()","meta_encoding()","meta_encoding=()","method_missing()","name()","name()","name()","name()","name()","name()","name()","name()","name=()","namespace()","namespace=()","namespace_declarations()","namespace_definitions()","namespace_scopes()","namespace_uri()","namespaced_key?()","namespaces()","namespaces()","namespaces()","native_content=()","native_write()","native_write()","native_write_to()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next()","next_element()","next_sibling()","next_token()","node_name()","node_name=()","node_type()","node_type()","none?()","notations()","occur()","on_error()","optional_attributes()","options()","options=()","original_content()","outer_xml()","parent()","parent=()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_file()","parse_file()","parse_io()","parse_memory()","parse_memory()","parse_stylesheet_doc()","parse_with()","parse_with()","path()","pointer_id()","pop()","prefix()","prefix()","prefix()","prefix()","prepend_child()","previous()","previous=()","previous_element()","previous_sibling()","process_xincludes()","processing_instruction()","processing_instruction?()","push()","quote_params()","read()","read_io()","read_io()","read_memory()","read_memory()","read_memory()","read_memory()","read_only?()","recovery()","recovery=()","register()","register_namespaces()","register_ns()","register_variable()","remove()","remove()","remove_attr()","remove_attribute()","remove_class()","remove_namespaces!()","replace()","replace_entities()","replace_entities=()","required_attributes()","respond_to_missing?()","reverse()","root()","root=()","save_end_tag?()","search()","search()","self_closing?()","serialize()","serialize()","serialize()","serialize()","set()","set()","set_attribute()","set_metadata_element()","set_namespace()","shift()","size()","slice()","slop!()","start_document()","start_element()","start_element()","start_element()","start_element_namespace()","start_element_namespace()","state()","strict()","strict?()","sub_elements()","swap()","system_id()","system_id()","text()","text()","text()","text?()","title()","title=()","to_a()","to_a()","to_ary()","to_format()","to_html()","to_html()","to_html()","to_html()","to_java()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","to_type()","to_xhtml()","to_xhtml()","to_xhtml()","to_xml()","to_xml()","to_xml()","to_xml()","to_xpath()","transform()","traverse()","type()","type()","type()","unlink()","unlink()","url()","valid?()","validate()","validate()","validate()","validate_document()","validate_document()","validate_file()","value()","value=()","value?()","values()","version()","warning()","warning()","warning?()","with()","without_cache()","wrap()","wrap()","write()","write_format_to()","write_html_to()","write_to()","write_xhtml_to()","write_xml_to()","xml?()","xml_version()","xmldecl()","xpath()","xpath()","xpath_for()","xpath_for()","|()","changelog.ja","changelog","c_coding_style","manifest","readme.ja","readme","roadmap","standard_responses","y_u_no_gemspec","tokenizer.rex","readme"],"longSearchIndex":["nokogiri","nokogiri::css","nokogiri::css::node","nokogiri::css::parser","nokogiri::css::syntaxerror","nokogiri::css::tokenizer","nokogiri::css::tokenizer::scanerror","nokogiri::css::xpathvisitor","nokogiri::decorators","nokogiri::decorators::slop","nokogiri::encodinghandler","nokogiri::html","nokogiri::html::builder","nokogiri::html::document","nokogiri::html::document::encodingfound","nokogiri::html::document::encodingreader","nokogiri::html::document::encodingreader::jumpsaxhandler","nokogiri::html::document::encodingreader::saxhandler","nokogiri::html::documentfragment","nokogiri::html::elementdescription","nokogiri::html::entitydescription","nokogiri::html::entitylookup","nokogiri::html::sax","nokogiri::html::sax::parser","nokogiri::html::sax::parsercontext","nokogiri::html::sax::pushparser","nokogiri::syntaxerror","nokogiri::versioninfo","nokogiri::xml","nokogiri::xml::attr","nokogiri::xml::attributedecl","nokogiri::xml::builder","nokogiri::xml::builder::nodebuilder","nokogiri::xml::cdata","nokogiri::xml::characterdata","nokogiri::xml::comment","nokogiri::xml::dtd","nokogiri::xml::document","nokogiri::xml::documentfragment","nokogiri::xml::element","nokogiri::xml::elementcontent","nokogiri::xml::elementdecl","nokogiri::xml::entitydecl","nokogiri::xml::entityreference","nokogiri::xml::namespace","nokogiri::xml::node","nokogiri::xml::node::saveoptions","nokogiri::xml::nodeset","nokogiri::xml::notation","nokogiri::xml::pp","nokogiri::xml::pp::characterdata","nokogiri::xml::pp::node","nokogiri::xml::parseoptions","nokogiri::xml::processinginstruction","nokogiri::xml::reader","nokogiri::xml::relaxng","nokogiri::xml::sax","nokogiri::xml::sax::document","nokogiri::xml::sax::parser","nokogiri::xml::sax::parser::attribute","nokogiri::xml::sax::parsercontext","nokogiri::xml::sax::pushparser","nokogiri::xml::schema","nokogiri::xml::syntaxerror","nokogiri::xml::text","nokogiri::xml::xpath","nokogiri::xml::xpath::syntaxerror","nokogiri::xml::xpathcontext","nokogiri::xslt","nokogiri::xslt::stylesheet","object","xsd","xsd::xmlparser","xsd::xmlparser::nokogiri","nokogiri::xml::node#%()","nokogiri::xml::nodeset#%()","nokogiri::xml::nodeset#&()","nokogiri::xml::nodeset#+()","nokogiri::xml::nodeset#-()","nokogiri::xml::node#/()","nokogiri::xml::nodeset#/()","nokogiri::xml::builder#<<()","nokogiri::xml::document#<<()","nokogiri::xml::node#<<()","nokogiri::xml::nodeset#<<()","nokogiri::xml::sax::pushparser#<<()","nokogiri::xml::node#<=>()","nokogiri::xml::node#==()","nokogiri::xml::nodeset#==()","nokogiri::xml::node#>()","nokogiri::xml::nodeset#>()","nokogiri#html()","object#nokogiri()","nokogiri::xml#reader()","nokogiri::xml#relaxng()","nokogiri::xml#schema()","nokogiri#slop()","nokogiri#xml()","nokogiri#xslt()","nokogiri::css::parser#[]()","nokogiri::encodinghandler::[]()","nokogiri::html::elementdescription::[]()","nokogiri::html::entitylookup#[]()","nokogiri::xml::builder#[]()","nokogiri::xml::node#[]()","nokogiri::xml::nodeset#[]()","nokogiri::css::parser#[]=()","nokogiri::xml::node#[]=()","nokogiri::css::parser#_reduce_1()","nokogiri::css::parser#_reduce_11()","nokogiri::css::parser#_reduce_12()","nokogiri::css::parser#_reduce_13()","nokogiri::css::parser#_reduce_14()","nokogiri::css::parser#_reduce_15()","nokogiri::css::parser#_reduce_16()","nokogiri::css::parser#_reduce_18()","nokogiri::css::parser#_reduce_2()","nokogiri::css::parser#_reduce_20()","nokogiri::css::parser#_reduce_21()","nokogiri::css::parser#_reduce_22()","nokogiri::css::parser#_reduce_23()","nokogiri::css::parser#_reduce_25()","nokogiri::css::parser#_reduce_26()","nokogiri::css::parser#_reduce_27()","nokogiri::css::parser#_reduce_28()","nokogiri::css::parser#_reduce_29()","nokogiri::css::parser#_reduce_3()","nokogiri::css::parser#_reduce_30()","nokogiri::css::parser#_reduce_31()","nokogiri::css::parser#_reduce_32()","nokogiri::css::parser#_reduce_33()","nokogiri::css::parser#_reduce_34()","nokogiri::css::parser#_reduce_35()","nokogiri::css::parser#_reduce_36()","nokogiri::css::parser#_reduce_37()","nokogiri::css::parser#_reduce_4()","nokogiri::css::parser#_reduce_40()","nokogiri::css::parser#_reduce_41()","nokogiri::css::parser#_reduce_42()","nokogiri::css::parser#_reduce_43()","nokogiri::css::parser#_reduce_44()","nokogiri::css::parser#_reduce_45()","nokogiri::css::parser#_reduce_48()","nokogiri::css::parser#_reduce_49()","nokogiri::css::parser#_reduce_5()","nokogiri::css::parser#_reduce_50()","nokogiri::css::parser#_reduce_51()","nokogiri::css::parser#_reduce_52()","nokogiri::css::parser#_reduce_58()","nokogiri::css::parser#_reduce_59()","nokogiri::css::parser#_reduce_6()","nokogiri::css::parser#_reduce_60()","nokogiri::css::parser#_reduce_62()","nokogiri::css::parser#_reduce_63()","nokogiri::css::parser#_reduce_64()","nokogiri::css::parser#_reduce_65()","nokogiri::css::parser#_reduce_66()","nokogiri::css::parser#_reduce_67()","nokogiri::css::parser#_reduce_68()","nokogiri::css::parser#_reduce_69()","nokogiri::css::parser#_reduce_7()","nokogiri::css::parser#_reduce_8()","nokogiri::css::parser#_reduce_9()","nokogiri::css::parser#_reduce_none()","nokogiri::css::node#accept()","nokogiri::xml::node#accept()","nokogiri::xml::document#add_child()","nokogiri::xml::node#add_child()","nokogiri::xml::node#add_child_node_and_reparent_attrs()","nokogiri::xml::nodeset#add_class()","nokogiri::xml::node#add_namespace()","nokogiri::xml::node#add_namespace_definition()","nokogiri::xml::node#add_next_sibling()","nokogiri::xml::node#add_previous_sibling()","nokogiri::xml::node#add_sibling()","nokogiri::xml::node#after()","nokogiri::xml::nodeset#after()","nokogiri::encodinghandler::alias()","nokogiri::xml::node#ancestors()","nokogiri::xslt::stylesheet#apply_to()","nokogiri::xml::node#at()","nokogiri::xml::nodeset#at()","nokogiri::xml::node#at_css()","nokogiri::xml::nodeset#at_css()","nokogiri::xml::node#at_xpath()","nokogiri::xml::nodeset#at_xpath()","nokogiri::xml::node#attr()","nokogiri::xml::nodeset#attr()","nokogiri::xml::reader#attr_nodes()","nokogiri::xml::node#attribute()","nokogiri::xml::nodeset#attribute()","nokogiri::xml::reader#attribute()","nokogiri::xml::reader#attribute_at()","nokogiri::xml::reader#attribute_count()","nokogiri::xml::node#attribute_nodes()","nokogiri::xml::reader#attribute_nodes()","nokogiri::xml::attributedecl#attribute_type()","nokogiri::xml::node#attribute_with_ns()","nokogiri::xml::dtd#attributes()","nokogiri::xml::node#attributes()","nokogiri::xml::reader#attributes()","nokogiri::xml::reader#attributes?()","nokogiri::xml::reader#base_uri()","nokogiri::xml::node#before()","nokogiri::xml::nodeset#before()","nokogiri::xml::node#blank?()","nokogiri::html::elementdescription#block?()","nokogiri::xml::elementcontent#c1()","nokogiri::xml::elementcontent#c2()","nokogiri::xml::document#canonicalize()","nokogiri::xml::node#canonicalize()","nokogiri::xml::builder#cdata()","nokogiri::xml::node#cdata?()","nokogiri::xml::sax::document#cdata_block()","xsd::xmlparser::nokogiri#cdata_block()","nokogiri::xml::sax::document#characters()","nokogiri::xml::sax::parser#check_encoding()","nokogiri::xml::node#child()","nokogiri::xml::elementcontent#children()","nokogiri::xml::node#children()","nokogiri::xml::nodeset#children()","nokogiri::xml::node#children=()","nokogiri::encodinghandler::clear_aliases!()","nokogiri::css::parser#clear_cache()","nokogiri::xml::document#clone()","nokogiri::xml::node#clone()","nokogiri::xml::documentfragment#coerce()","nokogiri::xml::document#collect_namespaces()","nokogiri::xml::sax::parsercontext#column()","nokogiri::xml::builder#comment()","nokogiri::xml::sax::document#comment()","nokogiri::xml::node#comment?()","nokogiri::xml::node#compare()","nokogiri::xml::elementdecl#content()","nokogiri::xml::entitydecl#content()","nokogiri::xml::node#content()","nokogiri::xml::attr#content=()","nokogiri::xml::node#content=()","nokogiri::xml::text#content=()","nokogiri::xml::document#create_cdata()","nokogiri::xml::document#create_comment()","nokogiri::xml::document#create_element()","nokogiri::xml::document#create_entity()","nokogiri::xml::node#create_external_subset()","nokogiri::xml::node#create_internal_subset()","nokogiri::xml::document#create_text_node()","nokogiri::xml::documentfragment#css()","nokogiri::xml::node#css()","nokogiri::xml::nodeset#css()","nokogiri::xml::node#css_path()","nokogiri::xml::document#decorate()","nokogiri::xml::node#decorate!()","nokogiri::xml::document#decorators()","nokogiri::xml::attributedecl#default()","nokogiri::xml::reader#default?()","nokogiri::html::elementdescription#default_desc()","nokogiri::xml::node#default_namespace=()","nokogiri::html::elementdescription#default_sub_element()","nokogiri::encodinghandler::delete()","nokogiri::xml::node#delete()","nokogiri::xml::nodeset#delete()","nokogiri::html::elementdescription#deprecated?()","nokogiri::html::elementdescription#deprecated_attributes()","nokogiri::xml::reader#depth()","nokogiri::html::elementdescription#description()","nokogiri::xml::node#description()","xsd::xmlparser::nokogiri#do_parse()","nokogiri::xml::node#do_xinclude()","nokogiri::xml::document#document()","nokogiri::xml::node#document()","nokogiri::xml::node#document?()","nokogiri::xml::node#dump_html()","nokogiri::xml::document#dup()","nokogiri::xml::node#dup()","nokogiri::xml::nodeset#dup()","nokogiri::xml::dtd#each()","nokogiri::xml::node#each()","nokogiri::xml::nodeset#each()","nokogiri::xml::reader#each()","nokogiri::xml::node#elem?()","nokogiri::xml::node#element?()","nokogiri::xml::node#element_children()","nokogiri::xml::elementdecl#element_type()","nokogiri::xml::dtd#elements()","nokogiri::xml::node#elements()","nokogiri::html::elementdescription#empty?()","nokogiri::xml::nodeset#empty?()","nokogiri::xml::document::empty_doc?()","nokogiri::xml::reader#empty_element?()","nokogiri::xml::node#encode_special_chars()","nokogiri::xml::document#encoding()","nokogiri::xml::document#encoding=()","nokogiri::xml::sax::document#end_document()","nokogiri::xml::sax::document#end_element()","xsd::xmlparser::nokogiri#end_element()","nokogiri::xml::sax::document#end_element_namespace()","xsd::xmlparser::nokogiri#end_element_namespace()","nokogiri::xml::dtd#entities()","nokogiri::xml::entitydecl#entity_type()","nokogiri::xml::attributedecl#enumeration()","nokogiri::xml::sax::document#error()","xsd::xmlparser::nokogiri#error()","nokogiri::xml::syntaxerror#error?()","nokogiri::xml::xpathcontext#evaluate()","nokogiri::xml::dtd#external_id()","nokogiri::xml::entitydecl#external_id()","nokogiri::xml::node#external_subset()","nokogiri::xml::syntaxerror#fatal?()","nokogiri::html::sax::parsercontext::file()","nokogiri::xml::sax::parsercontext::file()","nokogiri::xml::nodeset#filter()","nokogiri::css::node#find_by_type()","nokogiri::xml::sax::pushparser#finish()","nokogiri::xml::nodeset#first()","nokogiri::xml::node#first_element_child()","nokogiri::html::document#fragment()","nokogiri::xml#fragment()","nokogiri::xml::document#fragment()","nokogiri::xml::node#fragment()","nokogiri::xml::node#fragment?()","nokogiri::xml::relaxng::from_document()","nokogiri::xml::schema::from_document()","nokogiri::xml::reader::from_io()","nokogiri::xml::reader::from_memory()","nokogiri::html::entitylookup#get()","nokogiri::xml::node#get()","nokogiri::xml::node#get_attribute()","nokogiri::xml::node#has_attribute?()","nokogiri::xml::namespace#href()","nokogiri::xml::dtd#html5_dtd?()","nokogiri::xml::node#html?()","nokogiri::xml::dtd#html_dtd?()","nokogiri::html::elementdescription#implied_end_tag?()","nokogiri::html::elementdescription#implied_start_tag?()","nokogiri::xml::document#implied_xpath_context()","nokogiri::xml::node#implied_xpath_context()","nokogiri::xml::node#in_context()","nokogiri::xml::nodeset#include?()","nokogiri::xml::nodeset#index()","nokogiri::html::sax::pushparser#initialize_native()","nokogiri::xml::sax::pushparser#initialize_native()","nokogiri::html::elementdescription#inline?()","nokogiri::xml::node#inner_html()","nokogiri::xml::nodeset#inner_html()","nokogiri::xml::node#inner_html=()","nokogiri::xml::node#inner_text()","nokogiri::xml::nodeset#inner_text()","nokogiri::xml::reader#inner_xml()","nokogiri::xml::builder#insert()","nokogiri::html::elementdescription#inspect()","nokogiri::xml::attributedecl#inspect()","nokogiri::xml::elementdecl#inspect()","nokogiri::xml::entitydecl#inspect()","nokogiri::xml::nodeset#inspect()","nokogiri::xml::parseoptions#inspect()","nokogiri::xml::attr#inspect_attributes()","nokogiri::xml::document#inspect_attributes()","nokogiri::xml::namespace#inspect_attributes()","nokogiri::xml::node#inspect_attributes()","nokogiri::xml::node#internal_subset()","nokogiri::xml::sax::parsercontext::io()","nokogiri::xml::node#key?()","nokogiri::xml::dtd#keys()","nokogiri::xml::node#keys()","nokogiri::xml::reader#lang()","nokogiri::xml::nodeset#last()","nokogiri::xml::node#last_element_child()","nokogiri::xml::nodeset#length()","nokogiri::xml::node#line()","nokogiri::xml::sax::parsercontext#line()","nokogiri::xml::reader#local_name()","nokogiri#make()","nokogiri::xml::node#matches?()","nokogiri::html::sax::parsercontext::memory()","nokogiri::xml::sax::parsercontext::memory()","nokogiri::html::document#meta_content_type()","nokogiri::html::document#meta_encoding()","nokogiri::html::document#meta_encoding=()","nokogiri::decorators::slop#method_missing()","nokogiri::encodinghandler#name()","nokogiri::html::elementdescription#name()","nokogiri::xml::cdata#name()","nokogiri::xml::document#name()","nokogiri::xml::documentfragment#name()","nokogiri::xml::elementcontent#name()","nokogiri::xml::node#name()","nokogiri::xml::reader#name()","nokogiri::xml::node#name=()","nokogiri::xml::node#namespace()","nokogiri::xml::node#namespace=()","nokogiri::xml::documentfragment#namespace_declarations()","nokogiri::xml::node#namespace_definitions()","nokogiri::xml::node#namespace_scopes()","nokogiri::xml::reader#namespace_uri()","nokogiri::xml::node#namespaced_key?()","nokogiri::xml::document#namespaces()","nokogiri::xml::node#namespaces()","nokogiri::xml::reader#namespaces()","nokogiri::xml::node#native_content=()","nokogiri::html::sax::pushparser#native_write()","nokogiri::xml::sax::pushparser#native_write()","nokogiri::xml::node#native_write_to()","nokogiri::css::node::new()","nokogiri::css::parser::new()","nokogiri::html::document::new()","nokogiri::html::document::encodingreader::jumpsaxhandler::new()","nokogiri::html::documentfragment::new()","nokogiri::html::sax::parsercontext::new()","nokogiri::html::sax::pushparser::new()","nokogiri::xml::attr::new()","nokogiri::xml::builder::new()","nokogiri::xml::cdata::new()","nokogiri::xml::comment::new()","nokogiri::xml::document::new()","nokogiri::xml::documentfragment::new()","nokogiri::xml::documentfragment::new()","nokogiri::xml::entitydecl::new()","nokogiri::xml::entityreference::new()","nokogiri::xml::node::new()","nokogiri::xml::node::saveoptions::new()","nokogiri::xml::nodeset::new()","nokogiri::xml::parseoptions::new()","nokogiri::xml::processinginstruction::new()","nokogiri::xml::processinginstruction::new()","nokogiri::xml::sax::parser::new()","nokogiri::xml::sax::parsercontext::new()","nokogiri::xml::sax::pushparser::new()","nokogiri::xml::schema::new()","nokogiri::xml::text::new()","nokogiri::xml::xpathcontext::new()","xsd::xmlparser::nokogiri::new()","nokogiri::xml::node#next()","nokogiri::xml::node#next_element()","nokogiri::xml::node#next_sibling()","nokogiri::css::parser#next_token()","nokogiri::xml::node#node_name()","nokogiri::xml::node#node_name=()","nokogiri::xml::node#node_type()","nokogiri::xml::reader#node_type()","nokogiri::xml::syntaxerror#none?()","nokogiri::xml::dtd#notations()","nokogiri::xml::elementcontent#occur()","nokogiri::css::parser#on_error()","nokogiri::html::elementdescription#optional_attributes()","nokogiri::xml::sax::pushparser#options()","nokogiri::xml::sax::pushparser#options=()","nokogiri::xml::entitydecl#original_content()","nokogiri::xml::reader#outer_xml()","nokogiri::xml::node#parent()","nokogiri::xml::node#parent=()","nokogiri#parse()","nokogiri::css#parse()","nokogiri::css::parser#parse()","nokogiri::html::document#parse()","nokogiri::html::documentfragment::parse()","nokogiri::xml#parse()","nokogiri::xml::document::parse()","nokogiri::xml::documentfragment#parse()","nokogiri::xml::node#parse()","nokogiri::xml::sax::parser#parse()","nokogiri::xslt#parse()","nokogiri::html::sax::parser#parse_file()","nokogiri::xml::sax::parser#parse_file()","nokogiri::xml::sax::parser#parse_io()","nokogiri::html::sax::parser#parse_memory()","nokogiri::xml::sax::parser#parse_memory()","nokogiri::xslt::stylesheet::parse_stylesheet_doc()","nokogiri::html::sax::parsercontext#parse_with()","nokogiri::xml::sax::parsercontext#parse_with()","nokogiri::xml::node#path()","nokogiri::xml::node#pointer_id()","nokogiri::xml::nodeset#pop()","nokogiri::xml::elementcontent#prefix()","nokogiri::xml::elementdecl#prefix()","nokogiri::xml::namespace#prefix()","nokogiri::xml::reader#prefix()","nokogiri::xml::node#prepend_child()","nokogiri::xml::node#previous()","nokogiri::xml::node#previous=()","nokogiri::xml::node#previous_element()","nokogiri::xml::node#previous_sibling()","nokogiri::xml::node#process_xincludes()","nokogiri::xml::sax::document#processing_instruction()","nokogiri::xml::node#processing_instruction?()","nokogiri::xml::nodeset#push()","nokogiri::xslt#quote_params()","nokogiri::xml::reader#read()","nokogiri::html::document::read_io()","nokogiri::xml::document::read_io()","nokogiri::html::document::read_memory()","nokogiri::xml::document::read_memory()","nokogiri::xml::relaxng::read_memory()","nokogiri::xml::schema::read_memory()","nokogiri::xml::node#read_only?()","nokogiri::xml::sax::parsercontext#recovery()","nokogiri::xml::sax::parsercontext#recovery=()","nokogiri::xslt::register()","nokogiri::xml::xpathcontext#register_namespaces()","nokogiri::xml::xpathcontext#register_ns()","nokogiri::xml::xpathcontext#register_variable()","nokogiri::xml::node#remove()","nokogiri::xml::nodeset#remove()","nokogiri::xml::nodeset#remove_attr()","nokogiri::xml::node#remove_attribute()","nokogiri::xml::nodeset#remove_class()","nokogiri::xml::document#remove_namespaces!()","nokogiri::xml::node#replace()","nokogiri::xml::sax::parsercontext#replace_entities()","nokogiri::xml::sax::parsercontext#replace_entities=()","nokogiri::html::elementdescription#required_attributes()","nokogiri::decorators::slop#respond_to_missing?()","nokogiri::xml::nodeset#reverse()","nokogiri::xml::document#root()","nokogiri::xml::document#root=()","nokogiri::html::elementdescription#save_end_tag?()","nokogiri::xml::node#search()","nokogiri::xml::nodeset#search()","nokogiri::xml::reader#self_closing?()","nokogiri::html::document#serialize()","nokogiri::xml::documentfragment#serialize()","nokogiri::xml::node#serialize()","nokogiri::xslt::stylesheet#serialize()","nokogiri::xml::node#set()","nokogiri::xml::nodeset#set()","nokogiri::xml::node#set_attribute()","nokogiri::html::document#set_metadata_element()","nokogiri::xml::node#set_namespace()","nokogiri::xml::nodeset#shift()","nokogiri::xml::nodeset#size()","nokogiri::xml::nodeset#slice()","nokogiri::xml::document#slop!()","nokogiri::xml::sax::document#start_document()","nokogiri::html::document::encodingreader::jumpsaxhandler#start_element()","nokogiri::xml::sax::document#start_element()","xsd::xmlparser::nokogiri#start_element()","nokogiri::xml::sax::document#start_element_namespace()","xsd::xmlparser::nokogiri#start_element_namespace()","nokogiri::xml::reader#state()","nokogiri::xml::parseoptions#strict()","nokogiri::xml::parseoptions#strict?()","nokogiri::html::elementdescription#sub_elements()","nokogiri::xml::node#swap()","nokogiri::xml::dtd#system_id()","nokogiri::xml::entitydecl#system_id()","nokogiri::xml::builder#text()","nokogiri::xml::node#text()","nokogiri::xml::nodeset#text()","nokogiri::xml::node#text?()","nokogiri::html::document#title()","nokogiri::html::document#title=()","nokogiri::css::node#to_a()","nokogiri::xml::nodeset#to_a()","nokogiri::xml::nodeset#to_ary()","nokogiri::xml::node#to_format()","nokogiri::html::builder#to_html()","nokogiri::xml::documentfragment#to_html()","nokogiri::xml::node#to_html()","nokogiri::xml::nodeset#to_html()","nokogiri::xml::document#to_java()","nokogiri::html::elementdescription#to_s()","nokogiri::xml::documentfragment#to_s()","nokogiri::xml::node#to_s()","nokogiri::xml::nodeset#to_s()","nokogiri::xml::syntaxerror#to_s()","nokogiri::xml::xpath::syntaxerror#to_s()","nokogiri::xml::node#to_str()","nokogiri::css::node#to_type()","nokogiri::xml::documentfragment#to_xhtml()","nokogiri::xml::node#to_xhtml()","nokogiri::xml::nodeset#to_xhtml()","nokogiri::xml::builder#to_xml()","nokogiri::xml::documentfragment#to_xml()","nokogiri::xml::node#to_xml()","nokogiri::xml::nodeset#to_xml()","nokogiri::css::node#to_xpath()","nokogiri::xslt::stylesheet#transform()","nokogiri::xml::node#traverse()","nokogiri::html::document#type()","nokogiri::xml::elementcontent#type()","nokogiri::xml::node#type()","nokogiri::xml::node#unlink()","nokogiri::xml::nodeset#unlink()","nokogiri::xml::document#url()","nokogiri::xml::schema#valid?()","nokogiri::xml::dtd#validate()","nokogiri::xml::document#validate()","nokogiri::xml::schema#validate()","nokogiri::xml::relaxng#validate_document()","nokogiri::xml::schema#validate_document()","nokogiri::xml::schema#validate_file()","nokogiri::xml::reader#value()","nokogiri::xml::attr#value=()","nokogiri::xml::reader#value?()","nokogiri::xml::node#values()","nokogiri::xml::document#version()","nokogiri::xml::sax::document#warning()","xsd::xmlparser::nokogiri#warning()","nokogiri::xml::syntaxerror#warning?()","nokogiri::xml::builder::with()","nokogiri::css::parser#without_cache()","nokogiri::xml::document::wrap()","nokogiri::xml::nodeset#wrap()","nokogiri::xml::sax::pushparser#write()","nokogiri::xml::node#write_format_to()","nokogiri::xml::node#write_html_to()","nokogiri::xml::node#write_to()","nokogiri::xml::node#write_xhtml_to()","nokogiri::xml::node#write_xml_to()","nokogiri::xml::node#xml?()","nokogiri::xml::reader#xml_version()","nokogiri::xml::sax::document#xmldecl()","nokogiri::xml::node#xpath()","nokogiri::xml::nodeset#xpath()","nokogiri::css#xpath_for()","nokogiri::css::parser#xpath_for()","nokogiri::xml::nodeset#|()","","","","","","","","","","",""],"info":[["Nokogiri","","Nokogiri.html","","<p>Nokogiri parses and searches XML/HTML very quickly, and also has correctly\nimplemented CSS3 selector …\n"],["Nokogiri::CSS","","Nokogiri/CSS.html","",""],["Nokogiri::CSS::Node","","Nokogiri/CSS/Node.html","",""],["Nokogiri::CSS::Parser","","Nokogiri/CSS/Parser.html","",""],["Nokogiri::CSS::SyntaxError","","Nokogiri/CSS/SyntaxError.html","",""],["Nokogiri::CSS::Tokenizer","","Nokogiri/CSS/Tokenizer.html","",""],["Nokogiri::CSS::Tokenizer::ScanError","","Nokogiri/CSS/Tokenizer/ScanError.html","",""],["Nokogiri::CSS::XPathVisitor","","Nokogiri/CSS/XPathVisitor.html","",""],["Nokogiri::Decorators","","Nokogiri/Decorators.html","",""],["Nokogiri::Decorators::Slop","","Nokogiri/Decorators/Slop.html","","<p>The Slop decorator implements method missing such that a methods may be\nused instead of XPath or CSS …\n"],["Nokogiri::EncodingHandler","","Nokogiri/EncodingHandler.html","",""],["Nokogiri::HTML","","Nokogiri/HTML.html","",""],["Nokogiri::HTML::Builder","","Nokogiri/HTML/Builder.html","","<p>Nokogiri HTML builder is used for building HTML documents.  It is very\nsimilar to the Nokogiri::XML::Builder …\n"],["Nokogiri::HTML::Document","","Nokogiri/HTML/Document.html","",""],["Nokogiri::HTML::Document::EncodingFound","","Nokogiri/HTML/Document/EncodingFound.html","",""],["Nokogiri::HTML::Document::EncodingReader","","Nokogiri/HTML/Document/EncodingReader.html","",""],["Nokogiri::HTML::Document::EncodingReader::JumpSAXHandler","","Nokogiri/HTML/Document/EncodingReader/JumpSAXHandler.html","",""],["Nokogiri::HTML::Document::EncodingReader::SAXHandler","","Nokogiri/HTML/Document/EncodingReader/SAXHandler.html","",""],["Nokogiri::HTML::DocumentFragment","","Nokogiri/HTML/DocumentFragment.html","",""],["Nokogiri::HTML::ElementDescription","","Nokogiri/HTML/ElementDescription.html","",""],["Nokogiri::HTML::EntityDescription","","Nokogiri/HTML/EntityDescription.html","",""],["Nokogiri::HTML::EntityLookup","","Nokogiri/HTML/EntityLookup.html","",""],["Nokogiri::HTML::SAX","","Nokogiri/HTML/SAX.html","","<p>Nokogiri lets you write a SAX parser to process HTML but get HTML\ncorrection features.\n<p>See Nokogiri::HTML::SAX::Parser …\n"],["Nokogiri::HTML::SAX::Parser","","Nokogiri/HTML/SAX/Parser.html","","<p>This class lets you perform SAX style parsing on HTML with HTML error\ncorrection.\n<p>Here is a basic usage …\n"],["Nokogiri::HTML::SAX::ParserContext","","Nokogiri/HTML/SAX/ParserContext.html","","<p>Context for HTML SAX parsers.  This class is usually not instantiated by\nthe user.  Instead, you should …\n"],["Nokogiri::HTML::SAX::PushParser","","Nokogiri/HTML/SAX/PushParser.html","",""],["Nokogiri::SyntaxError","","Nokogiri/SyntaxError.html","","<p>The XML::SyntaxError is raised on parse errors\n"],["Nokogiri::VersionInfo","","Nokogiri/VersionInfo.html","",""],["Nokogiri::XML","","Nokogiri/XML.html","","<p>Nokogiri::XML\n"],["Nokogiri::XML::Attr","","Nokogiri/XML/Attr.html","","<p>Attr represents a Attr node in an xml document.\n"],["Nokogiri::XML::AttributeDecl","","Nokogiri/XML/AttributeDecl.html","","<p>Represents an attribute declaration in a DTD\n"],["Nokogiri::XML::Builder","","Nokogiri/XML/Builder.html","","<p>Nokogiri builder can be used for building XML and HTML documents.\n<p>Synopsis:\n\n<pre>builder = Nokogiri::XML::Builder.new ...</pre>\n"],["Nokogiri::XML::Builder::NodeBuilder","","Nokogiri/XML/Builder/NodeBuilder.html","",""],["Nokogiri::XML::CDATA","","Nokogiri/XML/CDATA.html","","<p>CData represents a CData node in an xml document.\n"],["Nokogiri::XML::CharacterData","","Nokogiri/XML/CharacterData.html","",""],["Nokogiri::XML::Comment","","Nokogiri/XML/Comment.html","","<p>Comment represents a comment node in an xml document.\n"],["Nokogiri::XML::DTD","","Nokogiri/XML/DTD.html","","<p>Nokogiri::XML::DTD wraps DTD nodes in an XML document\n"],["Nokogiri::XML::Document","","Nokogiri/XML/Document.html","","<p>Nokogiri::XML::Document wraps an xml document.\n<p>Nokogiri::XML::Document is the main entry point for dealing …\n"],["Nokogiri::XML::DocumentFragment","","Nokogiri/XML/DocumentFragment.html","","<p>DocumentFragment represents a DocumentFragment node in an xml document.\n"],["Nokogiri::XML::Element","","Nokogiri/XML/Element.html","",""],["Nokogiri::XML::ElementContent","","Nokogiri/XML/ElementContent.html","","<p>Represents the allowed content in an Element Declaration inside a DTD:\n\n<pre>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;?TEST-STYLE ...</pre>\n"],["Nokogiri::XML::ElementDecl","","Nokogiri/XML/ElementDecl.html","",""],["Nokogiri::XML::EntityDecl","","Nokogiri/XML/EntityDecl.html","",""],["Nokogiri::XML::EntityReference","","Nokogiri/XML/EntityReference.html","","<p>EntityReference represents an EntityReference node in an xml document.\n"],["Nokogiri::XML::Namespace","","Nokogiri/XML/Namespace.html","",""],["Nokogiri::XML::Node","","Nokogiri/XML/Node.html","","<p>Nokogiri::XML::Node is your window to the fun filled world of dealing with\nXML and HTML tags.  A Nokogiri::XML::Node …\n"],["Nokogiri::XML::Node::SaveOptions","","Nokogiri/XML/Node/SaveOptions.html","","<p>Save options for serializing nodes\n"],["Nokogiri::XML::NodeSet","","Nokogiri/XML/NodeSet.html","","<p>A NodeSet contains a list of Nokogiri::XML::Node objects.  Typically a\nNodeSet is return as a result …\n"],["Nokogiri::XML::Notation","","Nokogiri/XML/Notation.html","",""],["Nokogiri::XML::PP","","Nokogiri/XML/PP.html","",""],["Nokogiri::XML::PP::CharacterData","","Nokogiri/XML/PP/CharacterData.html","",""],["Nokogiri::XML::PP::Node","","Nokogiri/XML/PP/Node.html","",""],["Nokogiri::XML::ParseOptions","","Nokogiri/XML/ParseOptions.html","","<p>Parse options for passing to Nokogiri.XML or Nokogiri.HTML\n"],["Nokogiri::XML::ProcessingInstruction","","Nokogiri/XML/ProcessingInstruction.html","","<p>ProcessingInstruction represents a ProcessingInstruction node in an xml\ndocument.\n"],["Nokogiri::XML::Reader","","Nokogiri/XML/Reader.html","","<p>The Reader parser allows you to effectively pull parse an XML document.\nOnce instantiated, call Nokogiri::XML::Reader#each …\n"],["Nokogiri::XML::RelaxNG","","Nokogiri/XML/RelaxNG.html","","<p>Nokogiri::XML::RelaxNG is used for validating XML against a RelaxNG schema.\n<p>Synopsis\n<p>Validate an XML document …\n"],["Nokogiri::XML::SAX","","Nokogiri/XML/SAX.html","","<p>SAX Parsers are event driven parsers.  Nokogiri provides two different\nevent based parsers when dealing …\n"],["Nokogiri::XML::SAX::Document","","Nokogiri/XML/SAX/Document.html","","<p>This class is used for registering types of events you are interested in\nhandling.  All of the methods …\n"],["Nokogiri::XML::SAX::Parser","","Nokogiri/XML/SAX/Parser.html","","<p>This parser is a SAX style parser that reads it&#39;s input as it deems\nnecessary.  The parser takes …\n"],["Nokogiri::XML::SAX::Parser::Attribute","","Nokogiri/XML/SAX/Parser/Attribute.html","",""],["Nokogiri::XML::SAX::ParserContext","","Nokogiri/XML/SAX/ParserContext.html","","<p>Context for XML SAX parsers.  This class is usually not instantiated by the\nuser.  Instead, you should …\n"],["Nokogiri::XML::SAX::PushParser","","Nokogiri/XML/SAX/PushParser.html","","<p>PushParser can parse a document that is fed to it manually.  It must be\ngiven a SAX::Document object …\n"],["Nokogiri::XML::Schema","","Nokogiri/XML/Schema.html","","<p>Nokogiri::XML::Schema is used for validating XML against a schema (usually\nfrom an xsd file).\n<p>Synopsis …\n"],["Nokogiri::XML::SyntaxError","","Nokogiri/XML/SyntaxError.html","","<p>The XML::SyntaxError is raised on parse errors\n<p>This class provides information about XML SyntaxErrors …\n"],["Nokogiri::XML::Text","","Nokogiri/XML/Text.html","","<p>Wraps Text nodes.\n"],["Nokogiri::XML::XPath","","Nokogiri/XML/XPath.html","",""],["Nokogiri::XML::XPath::SyntaxError","","Nokogiri/XML/XPath/SyntaxError.html","",""],["Nokogiri::XML::XPathContext","","Nokogiri/XML/XPathContext.html","","<p>XPathContext is the entry point for searching a Document by using XPath.\n"],["Nokogiri::XSLT","","Nokogiri/XSLT.html","","<p>See Nokogiri::XSLT::Stylesheet for creating and manipulating Stylesheet\nobject.\n"],["Nokogiri::XSLT::Stylesheet","","Nokogiri/XSLT/Stylesheet.html","","<p>A Stylesheet represents an XSLT Stylesheet object.  Stylesheet creation is\ndone through Nokogiri.XSLT. …\n"],["Object","","Object.html","",""],["XSD","","XSD.html","",""],["XSD::XMLParser","","XSD/XMLParser.html","",""],["XSD::XMLParser::Nokogiri","","XSD/XMLParser/Nokogiri.html","","<p>Nokogiri XML parser for soap4r.\n<p>Nokogiri may be used as the XML parser in soap4r.  Simply require\n&#39;xsd/xmlparser/nokogiri&#39; …\n"],["%","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-25","(path, ns = document.root ? document.root.namespaces : {})",""],["%","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-25","(path, ns = document.root ? document.root.namespaces : {})",""],["&","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-26","(p1)","<p>Set Intersection — Returns a new NodeSet containing nodes common to the two\nNodeSets.\n"],["+","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-2B","(p1)",""],["-","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-2D","(p1)","<p>Difference - returns a new NodeSet that is a copy of this NodeSet, removing\neach item that also appears …\n"],["/","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-2F","(*paths)",""],["/","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-2F","(*paths)",""],["<<","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-3C-3C","(string)","<p>Append the given raw XML <code>string</code> to the document\n"],["<<","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-3C-3C","(node_or_tags)",""],["<<","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3C-3C","(node_or_tags)","<p>Add <code>node_or_tags</code> as a child of this Node.\n<code>node_or_tags</code> can be a Nokogiri::XML::Node, a\n::DocumentFragment …\n"],["<<","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-3C-3C","(p1)",""],["<<","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-3C-3C","(chunk, last_chunk = false)",""],["<=>","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3C-3D-3E","(other)","<p>Compare two Node objects with respect to their Document.  Nodes from\ndifferent documents cannot be compared. …\n"],["==","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3D-3D","(other)","<p>Test to see if this Node is equal to <code>other</code>\n"],["==","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-3D-3D","(other)","<p>Equality – Two NodeSets are equal if the contain the same number of\nelements and if each element is …\n"],[">","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-3E","(selector)","<p>Search this node&#39;s immediate children using CSS selector\n<code>selector</code>\n"],[">","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-3E","(selector)","<p>Search this NodeSet&#39;s nodes&#39; immediate children using CSS selector\n<code>selector</code>\n"],["HTML","Nokogiri","Nokogiri.html#method-i-HTML","(thing, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML, &block)","<p>Parse HTML.  Convenience method for Nokogiri::HTML::Document.parse\n"],["Nokogiri","Object","Object.html#method-i-Nokogiri","(*args, &block)","<p>Parser a document contained in <code>args</code>.  Nokogiri will try to\nguess what type of document you are attempting …\n"],["Reader","Nokogiri::XML","Nokogiri/XML.html#method-i-Reader","(string_or_io, url = nil, encoding = nil, options = ParseOptions::STRICT)","<p>Parse an XML document using the Nokogiri::XML::Reader API.  See\nNokogiri::XML::Reader for mor information …\n"],["RelaxNG","Nokogiri::XML","Nokogiri/XML.html#method-i-RelaxNG","(string_or_io)","<p>Create a new Nokogiri::XML::RelaxNG document from\n<code>string_or_io</code>. See Nokogiri::XML::RelaxNG for an example. …\n"],["Schema","Nokogiri::XML","Nokogiri/XML.html#method-i-Schema","(string_or_io)","<p>Create a new Nokogiri::XML::Schema object using a <code>string_or_io</code>\nobject.\n"],["Slop","Nokogiri","Nokogiri.html#method-i-Slop","(*args, &block)","<p>Parse a document and add the Slop decorator.  The Slop decorator implements\nmethod_missing such that …\n"],["XML","Nokogiri","Nokogiri.html#method-i-XML","(thing, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_XML, &block)","<p>Parse XML.  Convenience method for Nokogiri::XML::Document.parse\n"],["XSLT","Nokogiri","Nokogiri.html#method-i-XSLT","(stylesheet, modules = {})","<p>Create a Nokogiri::XSLT::Stylesheet with <code>stylesheet</code>.\n<p>Example:\n\n<pre>xslt = Nokogiri::XSLT(File.read(ARGV[0]))</pre>\n"],["[]","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-5B-5D","(string)","<p>Get the css selector in <code>string</code> from the cache\n"],["[]","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-5B-5D","(p1)","<p>Get the encoding handler for <code>name</code>\n"],["[]","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-c-5B-5D","(p1)","<p>Get ElemementDescription for <code>tag_name</code>\n"],["[]","Nokogiri::HTML::EntityLookup","Nokogiri/HTML/EntityLookup.html#method-i-5B-5D","(name)","<p>Look up entity with <code>name</code>\n"],["[]","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-5B-5D","(ns)","<p>Build a tag that is associated with namespace <code>ns</code>.  Raises an\nArgumentError if <code>ns</code> has not been defined …\n"],["[]","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-5B-5D","(name)","<p>Get the attribute value for the attribute <code>name</code>\n"],["[]","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-5B-5D","(p1, p2 = v2)","<p>Element reference - returns the node at <code>index</code>, or returns a\nNodeSet containing nodes starting at <code>start</code> …\n"],["[]=","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-5B-5D-3D","(string, value)","<p>Set the css selector in <code>string</code> in the cache to\n<code>value</code>\n"],["[]=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-5B-5D-3D","(name, value)","<p>Set the attribute value for the attribute <code>name</code> to\n<code>value</code>\n"],["_reduce_1","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_1","(val, _values, result)","<p>reduce 0 omitted\n"],["_reduce_11","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_11","(val, _values, result)","<p>reduce 10 omitted\n"],["_reduce_12","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_12","(val, _values, result)",""],["_reduce_13","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_13","(val, _values, result)",""],["_reduce_14","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_14","(val, _values, result)",""],["_reduce_15","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_15","(val, _values, result)",""],["_reduce_16","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_16","(val, _values, result)",""],["_reduce_18","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_18","(val, _values, result)","<p>reduce 17 omitted\n"],["_reduce_2","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_2","(val, _values, result)",""],["_reduce_20","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_20","(val, _values, result)","<p>reduce 19 omitted\n"],["_reduce_21","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_21","(val, _values, result)",""],["_reduce_22","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_22","(val, _values, result)",""],["_reduce_23","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_23","(val, _values, result)",""],["_reduce_25","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_25","(val, _values, result)","<p>reduce 24 omitted\n"],["_reduce_26","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_26","(val, _values, result)",""],["_reduce_27","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_27","(val, _values, result)",""],["_reduce_28","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_28","(val, _values, result)",""],["_reduce_29","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_29","(val, _values, result)",""],["_reduce_3","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_3","(val, _values, result)",""],["_reduce_30","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_30","(val, _values, result)",""],["_reduce_31","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_31","(val, _values, result)",""],["_reduce_32","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_32","(val, _values, result)",""],["_reduce_33","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_33","(val, _values, result)",""],["_reduce_34","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_34","(val, _values, result)",""],["_reduce_35","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_35","(val, _values, result)",""],["_reduce_36","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_36","(val, _values, result)",""],["_reduce_37","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_37","(val, _values, result)",""],["_reduce_4","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_4","(val, _values, result)",""],["_reduce_40","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_40","(val, _values, result)","<p>reduce 39 omitted\n"],["_reduce_41","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_41","(val, _values, result)",""],["_reduce_42","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_42","(val, _values, result)",""],["_reduce_43","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_43","(val, _values, result)",""],["_reduce_44","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_44","(val, _values, result)",""],["_reduce_45","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_45","(val, _values, result)",""],["_reduce_48","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_48","(val, _values, result)","<p>reduce 47 omitted\n"],["_reduce_49","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_49","(val, _values, result)",""],["_reduce_5","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_5","(val, _values, result)",""],["_reduce_50","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_50","(val, _values, result)",""],["_reduce_51","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_51","(val, _values, result)",""],["_reduce_52","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_52","(val, _values, result)",""],["_reduce_58","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_58","(val, _values, result)","<p>reduce 57 omitted\n"],["_reduce_59","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_59","(val, _values, result)",""],["_reduce_6","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_6","(val, _values, result)",""],["_reduce_60","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_60","(val, _values, result)",""],["_reduce_62","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_62","(val, _values, result)","<p>reduce 61 omitted\n"],["_reduce_63","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_63","(val, _values, result)",""],["_reduce_64","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_64","(val, _values, result)",""],["_reduce_65","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_65","(val, _values, result)",""],["_reduce_66","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_66","(val, _values, result)",""],["_reduce_67","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_67","(val, _values, result)",""],["_reduce_68","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_68","(val, _values, result)",""],["_reduce_69","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_69","(val, _values, result)",""],["_reduce_7","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_7","(val, _values, result)",""],["_reduce_8","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_8","(val, _values, result)",""],["_reduce_9","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_9","(val, _values, result)",""],["_reduce_none","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-_reduce_none","(val, _values, result)","<p>reduce 74 omitted\n"],["accept","Nokogiri::CSS::Node","Nokogiri/CSS/Node.html#method-i-accept","(visitor)","<p>Accept <code>visitor</code>\n"],["accept","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-accept","(visitor)","<p>Accept a visitor.  This method calls “visit” on <code>visitor</code> with\nself.\n"],["add_child","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-add_child","(node_or_tags)",""],["add_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_child","(node_or_tags)","<p>Add <code>node_or_tags</code> as a child of this Node.\n<code>node_or_tags</code> can be a Nokogiri::XML::Node, a\n::DocumentFragment …\n"],["add_child_node_and_reparent_attrs","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_child_node_and_reparent_attrs","(node)",""],["add_class","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-add_class","(name)","<p>Append the class attribute <code>name</code> to all Node objects in the\nNodeSet.\n"],["add_namespace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_namespace","(p1, p2)",""],["add_namespace_definition","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_namespace_definition","(p1, p2)","<p>Adds a namespace definition with <code>prefix</code> using\n<code>href</code> value. The result is as if parsed XML for this node …\n"],["add_next_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_next_sibling","(node_or_tags)","<p>Insert <code>node_or_tags</code> after this Node (as a sibling).\n<code>node_or_tags</code> can be a Nokogiri::XML::Node, a\n::DocumentFragment …\n"],["add_previous_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_previous_sibling","(node_or_tags)","<p>Insert <code>node_or_tags</code> before this Node (as a sibling).\n<code>node_or_tags</code> can be a Nokogiri::XML::Node, a\n::DocumentFragment …\n"],["add_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-add_sibling","(next_or_previous, node_or_tags)",""],["after","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-after","(node_or_tags)","<p>Insert <code>node_or_tags</code> after this node (as a sibling).\n<code>node_or_tags</code> can be a Nokogiri::XML::Node, a\nNokogiri::XML::DocumentFragment …\n"],["after","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-after","(datum)","<p>Insert <code>datum</code> after the last Node in this NodeSet\n"],["alias","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-alias","(p1, p2)","<p>Alias encoding handler with name <code>from</code> to name <code>to</code>\n"],["ancestors","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-ancestors","(selector = nil)","<p>Get a list of ancestor Node for this Node.  If <code>selector</code> is\ngiven, the ancestors must match <code>selector</code>\n"],["apply_to","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-i-apply_to","(document, params = [])","<p>Apply an XSLT stylesheet to an XML::Document. <code>params</code> is an\narray of strings used as XSLT parameters. …\n"],["at","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-at","(path, ns = document.root ? document.root.namespaces : {})","<p>Search for the first occurrence of <code>path</code>.\n<p>Returns nil if nothing is found, otherwise a Node.\n"],["at","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-at","(path, ns = document.root ? document.root.namespaces : {})","<p>If path is a string, search this document for <code>path</code> returning\nthe first Node.  Otherwise, index in to …\n"],["at_css","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-at_css","(*rules)","<p>Search this node for the first occurrence of CSS <code>rules</code>.\nEquivalent to <code>css(rules).first</code> See Node#css for …\n"],["at_css","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-at_css","(*rules)","<p>Search this NodeSet for the first occurrence of CSS <code>rules</code>.\nEquivalent to <code>css(rules).first</code> See NodeSet#css …\n"],["at_xpath","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-at_xpath","(*paths)","<p>Search this node for the first occurrence of XPath <code>paths</code>.\nEquivalent to <code>xpath(paths).first</code> See Node#xpath …\n"],["at_xpath","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-at_xpath","(*paths)","<p>Search this NodeSet for the first occurrence of XPath <code>paths</code>.\nEquivalent to <code>xpath(paths).first</code> See NodeSet#xpath …\n"],["attr","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attr","(name)",""],["attr","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-attr","(key, value = nil, &blk)","<p>Set the attribute <code>key</code> to <code>value</code> or the return\nvalue of <code>blk</code> on all Node objects in the NodeSet.\n"],["attr_nodes","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attr_nodes","()","<p>Get a list of attributes for this Node\n"],["attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attribute","(p1)","<p>Get the attribute node with <code>name</code>\n"],["attribute","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-attribute","(key, value = nil, &blk)",""],["attribute","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute","(p1)","<p>Get the value of attribute named <code>name</code>\n"],["attribute_at","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute_at","(p1)","<p>Get the value of attribute at <code>index</code>\n"],["attribute_count","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute_count","()","<p>Get the number of attributes for the current node\n"],["attribute_nodes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attribute_nodes","()","<p>returns a list containing the Node attributes.\n"],["attribute_nodes","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attribute_nodes","()","<p>Get a list of attributes for the current node\n"],["attribute_type","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-attribute_type","()","<p>The attribute_type for this AttributeDecl\n"],["attribute_with_ns","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attribute_with_ns","(p1, p2)","<p>Get the attribute node with <code>name</code> and <code>namespace</code>\n"],["attributes","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-attributes","()","<p>Get a hash of the attributes for this DTD.\n"],["attributes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attributes","()","<p>Returns a hash containing the node&#39;s attributes.  The key is the\nattribute name without any namespace, …\n"],["attributes","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attributes","()","<p>Get a list of attributes for the current node.\n"],["attributes?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-attributes-3F","()","<p>Does this node have attributes?\n"],["base_uri","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-base_uri","()","<p>Get the xml:base of the node\n"],["before","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-before","(node_or_tags)","<p>Insert <code>node_or_tags</code> before this node (as a sibling).\n<code>node_or_tags</code> can be a Nokogiri::XML::Node, a\n::DocumentFragment …\n"],["before","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-before","(datum)","<p>Insert <code>datum</code> before the first Node in this NodeSet\n"],["blank?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-blank-3F","()","<p>Is this node blank?\n"],["block?","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-block-3F","()","<p>Is this element a block element?\n"],["c1","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-c1","()","<p>Get the first child.\n"],["c2","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-c2","()","<p>Get the first child.\n"],["canonicalize","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-canonicalize","(p1 = v1, p2 = v2, p3 = v3)","<p>Canonicalize a document and return the results.  Takes an optional block\nthat takes two parameters: the …\n"],["canonicalize","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-canonicalize","(mode=XML::XML_C14N_1_0,inclusive_namespaces=nil,with_comments=false)",""],["cdata","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-cdata","(string)","<p>Create a CDATA Node with content of <code>string</code>\n"],["cdata?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-cdata-3F","()","<p>Returns true if this is a CDATA\n"],["cdata_block","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-cdata_block","(string)","<p>Called when cdata blocks are found <code>string</code> contains the cdata\ncontent\n"],["cdata_block","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-cdata_block","(string)","<p>Handle cdata_blocks containing <code>string</code>\n"],["characters","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-characters","(string)","<p>Characters read between a tag.  This method might be called multiple times\ngiven one contiguous string …\n"],["check_encoding","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-check_encoding","(encoding)",""],["child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-child","()","<p>Returns the child node\n"],["children","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-children","()","<p>Get the children of this ElementContent node\n"],["children","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-children","()","<p>Get the list of children for this node as a NodeSet\n"],["children","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-children","()","<p>Returns a new NodeSet containing all the children of all the nodes in the\nNodeSet\n"],["children=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-children-3D","(node_or_tags)","<p>Set the inner html for this Node <code>node_or_tags</code>\n<code>node_or_tags</code> can be a Nokogiri::XML::Node, a\nNokogiri::XML::DocumentFragment …\n"],["clear_aliases!","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-clear_aliases-21","()","<p>Remove all encoding aliases.\n"],["clear_cache","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-clear_cache","()","<p>Clear the cache\n"],["clone","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-clone","(p1 = v1)",""],["clone","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-clone","(p1 = v1)",""],["coerce","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-coerce","(data)",""],["collect_namespaces","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-collect_namespaces","()","<p>Recursively get all namespaces from this node and its subtree and return\nthem as a hash.\n<p>For example, …\n"],["column","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-column","()","<p>Get the current column the parser context is processing.\n"],["comment","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-comment","(string)","<p>Create a Comment Node with content of <code>string</code>\n"],["comment","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-comment","(string)","<p>Called when comments are encountered <code>string</code> contains the\ncomment data\n"],["comment?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-comment-3F","()","<p>Returns true if this is a Comment\n"],["compare","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-compare","(p1)","<p>Compare this Node to <code>other</code> with respect to their Document\n"],["content","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-content","()","<p>The allowed content for this ElementDecl\n"],["content","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-content","()","<p>Get the content\n"],["content","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-content","()","<p>Returns the content for this Node\n"],["content=","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-i-content-3D","(p1)",""],["content=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-content-3D","(string)","<p>Set the Node&#39;s content to a Text node containing <code>string</code>.\nThe string gets XML escaped, not interpreted …\n"],["content=","Nokogiri::XML::Text","Nokogiri/XML/Text.html#method-i-content-3D","(string)",""],["create_cdata","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_cdata","(string, &block)","<p>Create a CDATA Node containing <code>string</code>\n"],["create_comment","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_comment","(string, &block)","<p>Create a Comment Node containing <code>string</code>\n"],["create_element","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_element","(name, *args, &block)","<p>Create an element with <code>name</code>, and optionally setting the\ncontent and attributes.\n\n<pre>doc.create_element &quot;div&quot; ...</pre>\n"],["create_entity","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_entity","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = v5)","<p>Create a new entity named <code>name</code>.\n<p><code>type</code> is an integer representing the type of entity to be\ncreated, and …\n"],["create_external_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-create_external_subset","(p1, p2, p3)","<p>Create an external subset\n"],["create_internal_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-create_internal_subset","(p1, p2, p3)","<p>Create the internal subset of a document.\n\n<pre>doc.create_internal_subset(&quot;chapter&quot;, &quot;-//OASIS//DTD DocBook ...</pre>\n"],["create_text_node","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-create_text_node","(string, &block)","<p>Create a Text Node with <code>string</code>\n"],["css","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-css","(*args)","<p>Search this fragment.  See Nokogiri::XML::Node#css\n"],["css","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-css","(*rules)","<p>Search this node for CSS <code>rules</code>. <code>rules</code> must be one\nor more CSS selectors. For example:\n\n<pre>node.css(&#39;title&#39;) ...</pre>\n"],["css","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-css","(*paths)","<p>Search this NodeSet for css <code>paths</code>\n<p>For more information see Nokogiri::XML::Node#css\n"],["css_path","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-css_path","()","<p>Get the path to this node as a CSS expression\n"],["decorate","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-decorate","(node)","<p>Apply any decorators to <code>node</code>\n"],["decorate!","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-decorate-21","()","<p>Decorate this node with the decorators set up in this node&#39;s Document\n"],["decorators","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-decorators","(key)","<p>Get the list of decorators given <code>key</code>\n"],["default","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-default","()","<p>The default value\n"],["default?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-default-3F","()","<p>Was an attribute generated from the default value in the DTD or schema?\n"],["default_desc","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-default_desc","()",""],["default_namespace=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-default_namespace-3D","(url)","<p>Adds a default namespace supplied as a string <code>url</code> href, to\nself. The consequence is as an xmlns attribute …\n"],["default_sub_element","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-default_sub_element","()","<p>The default sub element for this element\n"],["delete","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-c-delete","(p1)","<p>Delete the encoding alias named <code>name</code>\n"],["delete","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-delete","(name)",""],["delete","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-delete","(p1)","<p>Delete <code>node</code> from the Nodeset, if it is a member. Returns the\ndeleted node if found, otherwise returns …\n"],["deprecated?","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-deprecated-3F","()","<p>Is this element deprecated?\n"],["deprecated_attributes","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-deprecated_attributes","()","<p>A list of deprecated attributes for this element\n"],["depth","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-depth","()","<p>Get the depth of the node\n"],["description","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-description","()","<p>The description for this element\n"],["description","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-description","()","<p>Fetch the Nokogiri::HTML::ElementDescription for this node.  Returns nil on\nXML documents and on unknown …\n"],["do_parse","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-do_parse","(string_or_readable)","<p>Start parsing <code>string_or_readable</code>\n"],["do_xinclude","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-do_xinclude","(options = XML::ParseOptions::DEFAULT_XML, &block)","<p>Do xinclude substitution on the subtree below node. If given a block, a\nNokogiri::XML::ParseOptions object …\n"],["document","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-document","()","<p>A reference to <code>self</code>\n"],["document","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-document","()","<p>Get the document for this Node\n"],["document?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-document-3F","()","<p>Returns true if this is a Document\n"],["dump_html","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-dump_html","()","<p>Returns the Node as html.\n"],["dup","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-dup","(p1 = v1)","<p>Copy this Document.  An optional depth may be passed in, but it defaults to\na deep copy.  0 is a shallow …\n"],["dup","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-dup","(p1 = v1)","<p>Copy this node.  An optional depth may be passed in, but it defaults to a\ndeep copy.  0 is a shallow …\n"],["dup","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-dup","()","<p>Duplicate this node set\n"],["each","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-each","(&block)",""],["each","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-each","()","<p>Iterate over each attribute name and value pair for this Node.\n"],["each","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-each","(&block)","<p>Iterate over each node, yielding  to <code>block</code>\n"],["each","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-each","()","<p>Move the cursor through the document yielding the cursor to the block\n"],["elem?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-elem-3F","()",""],["element?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-element-3F","()","<p>Returns true if this is an Element node\n"],["element_children","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-element_children","()","<p>Get the list of children for this node as a NodeSet.  All nodes will be\nelement nodes.\n<p>Example:\n\n<pre>@doc.root.element_children.all? ...</pre>\n"],["element_type","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-element_type","()","<p>The element_type\n"],["elements","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-elements","()","<p>Get a hash of the elements for this DTD.\n"],["elements","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-elements","()",""],["empty?","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-empty-3F","()","<p>Is this an empty element?\n"],["empty?","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-empty-3F","()","<p>Is this NodeSet empty?\n"],["empty_doc?","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-empty_doc-3F","(string_or_io)",""],["empty_element?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-empty_element-3F","()","<p>Returns true if the current node is empty, otherwise false.\n"],["encode_special_chars","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-encode_special_chars","(p1)","<p>Encode any special characters in <code>string</code>\n"],["encoding","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-encoding","()","<p>Get the encoding for this Document\n"],["encoding=","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-encoding-3D","(p1)","<p>Set the encoding string for this Document\n"],["end_document","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-end_document","()","<p>Called when document ends parsing\n"],["end_element","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-end_element","(name)","<p>Called at the end of an element <code>name</code> is the tag name\n"],["end_element","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-end_element","(name)","<p>Handle the end_element event with <code>name</code>\n"],["end_element_namespace","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-end_element_namespace","(name, prefix = nil, uri = nil)","<p>Called at the end of an element <code>name</code> is the element&#39;s name\n<code>prefix</code> is the namespace prefix associated …\n"],["end_element_namespace","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-end_element_namespace","(name, prefix = nil, uri = nil)","<p>Called at the end of an element <code>name</code> is the element&#39;s name\n<code>prefix</code> is the namespace prefix associated …\n"],["entities","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-entities","()","<p>Get a hash of the elements for this DTD.\n"],["entity_type","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-entity_type","()","<p>Get the entity type\n"],["enumeration","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-enumeration","()","<p>An enumeration of possible values\n"],["error","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-error","(string)","<p>Called on document errors <code>string</code> contains the error\n"],["error","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-error","(msg)","<p>Handle errors with message <code>msg</code>\n"],["error?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-error-3F","()","<p>return true if this is an error\n"],["evaluate","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-evaluate","(p1, p2 = v2)","<p>Evaluate the <code>search_path</code> returning an XML::XPath object.\n"],["external_id","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-external_id","()","<p>Get the External ID for this DTD\n"],["external_id","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-external_id","()","<p>Get the external identifier for PUBLIC\n"],["external_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-external_subset","()","<p>Get the external subset\n"],["fatal?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-fatal-3F","()","<p>return true if this error is fatal\n"],["file","Nokogiri::HTML::SAX::ParserContext","Nokogiri/HTML/SAX/ParserContext.html#method-c-file","(p1, p2)",""],["file","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-file","(p1)","<p>Parse file given <code>filename</code>\n"],["filter","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-filter","(expr)","<p>Filter this list for nodes that match <code>expr</code>\n"],["find_by_type","Nokogiri::CSS::Node","Nokogiri/CSS/Node.html#method-i-find_by_type","(types)","<p>Find a node by type using <code>types</code>\n"],["finish","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-finish","()","<p>Finish the parsing.  This method is only necessary for\nNokogiri::XML::SAX::Document#end_document to be …\n"],["first","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-first","(n = nil)","<p>Get the first element of the NodeSet.\n"],["first_element_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-first_element_child","()","<p>Returns the first child node of this node that is an element.\n<p>Example:\n\n<pre>@doc.root.first_element_child.element? ...</pre>\n"],["fragment","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-fragment","(tags = nil)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code>\n"],["fragment","Nokogiri::XML","Nokogiri/XML.html#method-i-fragment","(string)","<p>Parse a fragment from <code>string</code> in to a NodeSet.\n"],["fragment","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-fragment","(tags = nil)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code> Returns an\nempty fragment if <code>tags</code> is nil.\n"],["fragment","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-fragment","(tags)","<p>Create a DocumentFragment containing <code>tags</code> that is relative to\n<em>this</em> context node.\n"],["fragment?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-fragment-3F","()","<p>Returns true if this is a DocumentFragment\n"],["from_document","Nokogiri::XML::RelaxNG","Nokogiri/XML/RelaxNG.html#method-c-from_document","(p1)","<p>Create a new RelaxNG schema from the Nokogiri::XML::Document\n<code>doc</code>\n"],["from_document","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-c-from_document","(p1)","<p>Create a new Schema from the Nokogiri::XML::Document <code>doc</code>\n"],["from_io","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-c-from_io","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Create a new reader that parses <code>io</code>\n"],["from_memory","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-c-from_memory","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Create a new reader that parses <code>string</code>\n"],["get","Nokogiri::HTML::EntityLookup","Nokogiri/HTML/EntityLookup.html#method-i-get","(p1)","<p>Get the HTML::EntityDescription for <code>key</code>\n"],["get","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-get","(p1)","<p>Get the value for <code>attribute</code>\n"],["get_attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-get_attribute","(name)",""],["has_attribute?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-has_attribute-3F","(p1)",""],["href","Nokogiri::XML::Namespace","Nokogiri/XML/Namespace.html#method-i-href","()","<p>Get the href for this namespace\n"],["html5_dtd?","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-html5_dtd-3F","()",""],["html?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-html-3F","()","<p>Returns true if this is an HTML::Document node\n"],["html_dtd?","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-html_dtd-3F","()",""],["implied_end_tag?","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-implied_end_tag-3F","()","<p>Can the end tag be implied for this tag?\n"],["implied_start_tag?","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-implied_start_tag-3F","()","<p>Can the start tag be implied for this tag?\n"],["implied_xpath_context","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-implied_xpath_context","()",""],["implied_xpath_context","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-implied_xpath_context","()",""],["in_context","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-in_context","(p1, p2)","<p>TODO: DOCUMENT ME\n"],["include?","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-include-3F","(p1)","<p>Returns true if any member of node set equals <code>node</code>.\n"],["index","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-index","(node)","<p>Returns the index of the first node in self that is == to\n<code>node</code>. Returns nil if no match is found.\n"],["initialize_native","Nokogiri::HTML::SAX::PushParser","Nokogiri/HTML/SAX/PushParser.html#method-i-initialize_native","(p1, p2, p3)","<p>Initialize the push parser with <code>xml_sax</code> using\n<code>filename</code>\n"],["initialize_native","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-initialize_native","(p1, p2)","<p>Initialize the push parser with <code>xml_sax</code> using\n<code>filename</code>\n"],["inline?","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-inline-3F","()","<p>Is this element an inline element?\n"],["inner_html","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inner_html","(*args)","<p>Get the inner_html for this node&#39;s Node#children\n"],["inner_html","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-inner_html","(*args)","<p>Get the inner html of all contained Node objects\n"],["inner_html=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inner_html-3D","(node_or_tags)","<p>Set the inner html for this Node to <code>node_or_tags</code>\n<code>node_or_tags</code> can be a Nokogiri::XML::Node, a\nNokogiri::XML::DocumentFragment …\n"],["inner_text","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inner_text","()",""],["inner_text","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-inner_text","()","<p>Get the inner text of all contained Node objects\n"],["inner_xml","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-inner_xml","()","<p>Read the contents of the current node, including child nodes and markup.\nReturns a utf-8 encoded string. …\n"],["insert","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-insert","(node, &block)","<p>Insert <code>node</code> as a child of the current Node\n"],["inspect","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-inspect","()","<p>Inspection information\n"],["inspect","Nokogiri::XML::AttributeDecl","Nokogiri/XML/AttributeDecl.html#method-i-inspect","()",""],["inspect","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-inspect","()",""],["inspect","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-inspect","()",""],["inspect","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-inspect","()","<p>Return a nicely formated string representation\n"],["inspect","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-inspect","()",""],["inspect_attributes","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-i-inspect_attributes","()",""],["inspect_attributes","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-inspect_attributes","()",""],["inspect_attributes","Nokogiri::XML::Namespace","Nokogiri/XML/Namespace.html#method-i-inspect_attributes","()",""],["inspect_attributes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-inspect_attributes","()",""],["internal_subset","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-internal_subset","()","<p>Get the internal subset\n"],["io","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-io","(p1, p2)","<p>Parse <code>io</code> object with <code>encoding</code>\n"],["key?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-key-3F","(p1)","<p>Returns true if <code>attribute</code> is set\n"],["keys","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-keys","()",""],["keys","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-keys","()","<p>Get the attribute names for this Node.\n"],["lang","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-lang","()","<p>Get the xml:lang scope within which the node resides.\n"],["last","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-last","()","<p>Get the last element of the NodeSet.\n"],["last_element_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-last_element_child","()","<p>Returns the last child node of this node that is an element.\n<p>Example:\n\n<pre>@doc.root.last_element_child.element? ...</pre>\n"],["length","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-length","()","<p>Get the length of the node set\n"],["line","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-line","()","<p>Returns the line for this Node\n"],["line","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-line","()","<p>Get the current line the parser context is processing.\n"],["local_name","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-local_name","()","<p>Get the local name of the node\n"],["make","Nokogiri","Nokogiri.html#method-i-make","(input = nil, opts = {})","<p>Create a new Nokogiri::XML::DocumentFragment\n"],["matches?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-matches-3F","(selector)","<p>Returns true if this Node matches <code>selector</code>\n"],["memory","Nokogiri::HTML::SAX::ParserContext","Nokogiri/HTML/SAX/ParserContext.html#method-c-memory","(p1, p2)",""],["memory","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-memory","(p1)","<p>Parse the XML stored in memory in <code>data</code>\n"],["meta_content_type","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-meta_content_type","()",""],["meta_encoding","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-meta_encoding","()","<p>Get the meta tag encoding for this document.  If there is no meta tag, then\nnil is returned.\n"],["meta_encoding=","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-meta_encoding-3D","(encoding)","<p>Set the meta tag encoding for this document.\n<p>If an meta encoding tag is already present, its content is …\n"],["method_missing","Nokogiri::Decorators::Slop","Nokogiri/Decorators/Slop.html#method-i-method_missing","(name, *args, &block)","<p>look for node with <code>name</code>.  See Nokogiri.Slop\n"],["name","Nokogiri::EncodingHandler","Nokogiri/EncodingHandler.html#method-i-name","()","<p>Get the name of this EncodingHandler\n"],["name","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-name","()","<p>Get the tag name for this ElemementDescription\n"],["name","Nokogiri::XML::CDATA","Nokogiri/XML/CDATA.html#method-i-name","()","<p>Get the name of this CDATA node\n"],["name","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-name","()","<p>The name of this document.  Always returns “document”\n"],["name","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-name","()","<p>return the name for DocumentFragment\n"],["name","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-name","()","<p>Get the require element <code>name</code>\n"],["name","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-name","()",""],["name","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-name","()","<p>Get the name of the node. Returns a utf-8 encoded string.\n"],["name=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-name-3D","(p1)",""],["namespace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace","()","<p>returns the namespace of the element or attribute node as a Namespace\nobject, or nil if there is no namespace …\n"],["namespace=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace-3D","(ns)","<p>Set the default namespace on this node (as would be defined with an\n“xmlns=” attribute in  …\n"],["namespace_declarations","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-namespace_declarations","(ctx)","<p>fix for issue 770\n"],["namespace_definitions","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace_definitions","()","<p>returns namespaces defined on self element directly, as an array of\nNamespace objects. Includes both …\n"],["namespace_scopes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespace_scopes","()","<p>returns namespaces in scope for self – those defined on self element\ndirectly or any ancestor node – …\n"],["namespace_uri","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-namespace_uri","()","<p>Get the URI defining the namespace associated with the node\n"],["namespaced_key?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespaced_key-3F","(p1, p2)","<p>Returns true if <code>attribute</code> is set with <code>namespace</code>\n"],["namespaces","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-namespaces","()","<p>Get the hash of namespaces on the root Nokogiri::XML::Node\n"],["namespaces","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-namespaces","()","<p>Returns a Hash of {prefix =&gt; value} for all namespaces on this node and\nits ancestors.\n<p>This method …\n"],["namespaces","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-namespaces","()","<p>Get a hash of namespaces for this Node\n"],["native_content=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-native_content-3D","(p1)","<p>Set the content for this Node\n"],["native_write","Nokogiri::HTML::SAX::PushParser","Nokogiri/HTML/SAX/PushParser.html#method-i-native_write","(p1, p2)","<p>Write <code>chunk</code> to PushParser. <code>last_chunk</code> triggers\nthe end_document handle\n"],["native_write","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-native_write","(p1, p2)","<p>Write <code>chunk</code> to PushParser. <code>last_chunk</code> triggers\nthe end_document handle\n"],["native_write_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-native_write_to","(p1, p2, p3, p4)","<p>Write this Node to <code>io</code> with <code>encoding</code> and\n<code>options</code>\n"],["new","Nokogiri::CSS::Node","Nokogiri/CSS/Node.html#method-c-new","(type, value)","<p>Create a new Node with <code>type</code> and <code>value</code>\n"],["new","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-c-new","(namespaces = {})","<p>Create a new CSS parser with respect to <code>namespaces</code>\n"],["new","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-c-new","(*args)","<p>Create a new document\n"],["new","Nokogiri::HTML::Document::EncodingReader::JumpSAXHandler","Nokogiri/HTML/Document/EncodingReader/JumpSAXHandler.html#method-c-new","(jumptag)",""],["new","Nokogiri::HTML::DocumentFragment","Nokogiri/HTML/DocumentFragment.html#method-c-new","(document, tags = nil, ctx = nil)",""],["new","Nokogiri::HTML::SAX::ParserContext","Nokogiri/HTML/SAX/ParserContext.html#method-c-new","(thing, encoding = 'UTF-8')",""],["new","Nokogiri::HTML::SAX::PushParser","Nokogiri/HTML/SAX/PushParser.html#method-c-new","(doc = XML::SAX::Document.new, file_name = nil, encoding = 'UTF-8')",""],["new","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-c-new","(p1, p2, *args)","<p>Create a new Attr element on the <code>document</code> with\n<code>name</code>\n"],["new","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-c-new","(options = {})","<p>Create a new Builder object.  <code>options</code> are sent to the top\nlevel Document that is being built.\n<p>Building …\n"],["new","Nokogiri::XML::CDATA","Nokogiri/XML/CDATA.html#method-c-new","(p1, p2, *args)","<p>Create a new CDATA element on the <code>document</code> with\n<code>content</code>\n"],["new","Nokogiri::XML::Comment","Nokogiri/XML/Comment.html#method-c-new","(p1, p2, *args)","<p>Create a new Comment element on the <code>document</code> with\n<code>content</code>\n"],["new","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-new","(*args)","<p>Create a new document with <code>version</code> (defaults to “1.0”)\n"],["new","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-c-new","(document, tags = nil, ctx = nil)","<p>Create a new DocumentFragment from <code>tags</code>.\n<p>If <code>ctx</code> is present, it is used as a context node for the\nsubtree …\n"],["new","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-c-new","(p1, *args)","<p>Create a new DocumentFragment element on the <code>document</code>\n"],["new","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-c-new","(name, doc, *args)",""],["new","Nokogiri::XML::EntityReference","Nokogiri/XML/EntityReference.html#method-c-new","(p1, p2, *args)","<p>Create a new EntityReference element on the <code>document</code> with\n<code>name</code>\n"],["new","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-c-new","(p1, p2, *args)","<p>Create a new node with <code>name</code> sharing GC lifecycle with\n<code>document</code>\n"],["new","Nokogiri::XML::Node::SaveOptions","Nokogiri/XML/Node/SaveOptions.html#method-c-new","(options = 0;)","<p>Create a new SaveOptions object with <code>options</code>\n"],["new","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-c-new","(document, list = [])","<p>Create a NodeSet with <code>document</code> defaulting to <code>list</code>\n"],["new","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-c-new","(options = STRICT)",""],["new","Nokogiri::XML::ProcessingInstruction","Nokogiri/XML/ProcessingInstruction.html#method-c-new","(document, name, content)",""],["new","Nokogiri::XML::ProcessingInstruction","Nokogiri/XML/ProcessingInstruction.html#method-c-new","(p1, p2, p3, *args)","<p>Create a new ProcessingInstruction element on the <code>document</code>\nwith <code>name</code> and <code>content</code>\n"],["new","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-c-new","(doc = Nokogiri::XML::SAX::Document.new, encoding = 'UTF-8')","<p>Create a new Parser with <code>doc</code> and <code>encoding</code>\n"],["new","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-c-new","(thing, encoding = 'UTF-8')",""],["new","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-c-new","(doc = XML::SAX::Document.new, file_name = nil, encoding = 'UTF-8')","<p>Create a new PushParser with <code>doc</code> as the SAX Document,\nproviding an optional <code>file_name</code> and <code>encoding</code>\n"],["new","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-c-new","(string_or_io)","<p>Create a new Nokogiri::XML::Schema object using a <code>string_or_io</code>\nobject.\n"],["new","Nokogiri::XML::Text","Nokogiri/XML/Text.html#method-c-new","(p1, p2, *args)","<p>Create a new Text element on the <code>document</code> with\n<code>content</code>\n"],["new","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-c-new","(p1)","<p>Create a new XPathContext with <code>node</code> as the reference point.\n"],["new","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-c-new","(host, opt = {})","<p>Create a new XSD parser with <code>host</code> and <code>opt</code>\n"],["next","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next","()",""],["next_element","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next_element","()","<p>Returns the next Nokogiri::XML::Element type sibling node.\n"],["next_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-next_sibling","()","<p>Returns the next sibling node\n"],["next_token","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-next_token","()",""],["node_name","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-node_name","()","<p>Returns the name for this Node\n"],["node_name=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-node_name-3D","(p1)","<p>Set the name for this Node\n"],["node_type","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-node_type","()","<p>Get the type for this Node\n"],["node_type","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-node_type","()","<p>Get the type of readers current node\n"],["none?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-none-3F","()","<p>return true if this is a non error\n"],["notations","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-notations","()","<p>Get a hash of the notations for this DTD.\n"],["occur","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-occur","()","<p>Get the element content <code>occur</code> flag.  Possible values are ONCE,\nOPT, MULT or PLUS.\n"],["on_error","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-on_error","(error_token_id, error_value, value_stack)","<p>On CSS parser error, raise an exception\n"],["optional_attributes","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-optional_attributes","()","<p>A list of optional attributes for this element\n"],["options","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-options","()",""],["options=","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-options-3D","(p1)",""],["original_content","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-original_content","()","<p>Get the original_content before ref substitution\n"],["outer_xml","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-outer_xml","()","<p>Read the current node and its contents, including child nodes and markup.\nReturns a utf-8 encoded string. …\n"],["parent","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parent","()","<p>Get the parent Node for this Node\n"],["parent=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parent-3D","(parent_node)","<p>Set the parent Node for this Node\n"],["parse","Nokogiri","Nokogiri.html#method-i-parse","(string, url = nil, encoding = nil, options = nil)","<p>Parse an HTML or XML document.  <code>string</code> contains the document.\n"],["parse","Nokogiri::CSS","Nokogiri/CSS.html#method-i-parse","(selector)","<p>Parse this CSS selector in <code>selector</code>.  Returns an AST.\n"],["parse","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-parse","(selector)","<p>Parse this CSS selector in <code>selector</code>.  Returns an AST.\n"],["parse","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-parse","(string_or_io, url = nil, encoding = nil, options = XML::ParseOptions::DEFAULT_HTML)","<p>Parse HTML.  <code>string_or_io</code> may be a String, or any object that\nresponds to <em>read</em> and <em>close</em> such as an  …\n"],["parse","Nokogiri::HTML::DocumentFragment","Nokogiri/HTML/DocumentFragment.html#method-c-parse","(tags, encoding = nil)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code>, using\n<code>encoding</code>\n"],["parse","Nokogiri::XML","Nokogiri/XML.html#method-i-parse","(thing, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML, &block)","<p>Parse XML.  Convenience method for Nokogiri::XML::Document.parse\n"],["parse","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-parse","(string_or_io, url = nil, encoding = nil, options = ParseOptions::DEFAULT_XML, &block)","<p>Parse an XML file.\n<p><code>string_or_io</code> may be a String, or any object that responds to\n<em>read</em> and <em>close</em> such as …\n"],["parse","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-parse","(tags)","<p>Create a Nokogiri::XML::DocumentFragment from <code>tags</code>\n"],["parse","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parse","(string_or_io, options = nil)","<p>Parse <code>string_or_io</code> as a document fragment within the context\nof <strong>this</strong> node.  Returns a XML::NodeSet containing …\n"],["parse","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse","(thing, &block)","<p>Parse given <code>thing</code> which may be a string containing xml, or an\nIO object.\n"],["parse","Nokogiri::XSLT","Nokogiri/XSLT.html#method-i-parse","(string, modules = {})","<p>Parse the stylesheet in <code>string</code>, register any\n<code>modules</code>\n"],["parse_file","Nokogiri::HTML::SAX::Parser","Nokogiri/HTML/SAX/Parser.html#method-i-parse_file","(filename, encoding = 'UTF-8')","<p>Parse a file with <code>filename</code>\n"],["parse_file","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse_file","(filename)","<p>Parse a file with <code>filename</code>\n"],["parse_io","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse_io","(io, encoding = 'ASCII')","<p>Parse given <code>io</code>\n"],["parse_memory","Nokogiri::HTML::SAX::Parser","Nokogiri/HTML/SAX/Parser.html#method-i-parse_memory","(data, encoding = 'UTF-8')","<p>Parse html stored in <code>data</code> using <code>encoding</code>\n"],["parse_memory","Nokogiri::XML::SAX::Parser","Nokogiri/XML/SAX/Parser.html#method-i-parse_memory","(data)",""],["parse_stylesheet_doc","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-c-parse_stylesheet_doc","(p1)","<p>Parse a stylesheet from <code>document</code>.\n"],["parse_with","Nokogiri::HTML::SAX::ParserContext","Nokogiri/HTML/SAX/ParserContext.html#method-i-parse_with","(p1)",""],["parse_with","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-parse_with","(p1)","<p>Use <code>sax_handler</code> and parse the current document\n"],["path","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-path","()","<p>Returns the path associated with this Node\n"],["pointer_id","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-pointer_id","()","<p>Get the internal pointer number\n"],["pop","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-pop","()","<p>Removes the last element from set and returns it, or <code>nil</code> if\nthe set is empty\n"],["prefix","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-prefix","()","<p>Get the element content namespace <code>prefix</code>.\n"],["prefix","Nokogiri::XML::ElementDecl","Nokogiri/XML/ElementDecl.html#method-i-prefix","()","<p>The namespace prefix for this ElementDecl\n"],["prefix","Nokogiri::XML::Namespace","Nokogiri/XML/Namespace.html#method-i-prefix","()","<p>Get the prefix for this namespace.  Returns <code>nil</code> if there is no\nprefix.\n"],["prefix","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-prefix","()","<p>Get the shorthand reference to the namespace associated with the node.\n"],["prepend_child","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-prepend_child","(node_or_tags)","<p>Add <code>node_or_tags</code> as the first child of this Node.\n<code>node_or_tags</code> can be a Nokogiri::XML::Node, a\n::DocumentFragment …\n"],["previous","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous","()",""],["previous=","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous-3D","(node_or_tags)",""],["previous_element","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous_element","()","<p>Returns the previous Nokogiri::XML::Element type sibling node.\n"],["previous_sibling","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-previous_sibling","()","<p>Returns the previous sibling node\n"],["process_xincludes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-process_xincludes","(p1)","<p>Loads and substitutes all xinclude elements below the node. The parser\ncontext will be initialized with …\n"],["processing_instruction","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-processing_instruction","(name, content)","<p>Called when processing instructions are found <code>name</code> is the\ntarget of the instruction <code>content</code> is the value …\n"],["processing_instruction?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-processing_instruction-3F","()","<p>Returns true if this is a ProcessingInstruction node\n"],["push","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-push","(p1)","<p>Append <code>node</code> to the NodeSet.\n"],["quote_params","Nokogiri::XSLT","Nokogiri/XSLT.html#method-i-quote_params","(params)","<p>Quote parameters in <code>params</code> for stylesheet safety\n"],["read","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-read","()","<p>Move the Reader forward through the XML document.\n"],["read_io","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-c-read_io","(p1, p2, p3, p4)","<p>Read the HTML document from <code>io</code> with given <code>url</code>,\n<code>encoding</code>, and <code>options</code>.  See Nokogiri::HTML.parse\n"],["read_io","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-read_io","(p1, p2, p3, p4)","<p>Create a new document from an IO object\n"],["read_memory","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-c-read_memory","(p1, p2, p3, p4)","<p>Read the HTML document contained in <code>string</code> with given\n<code>url</code>, <code>encoding</code>, and <code>options</code>.  See\nNokogiri::HTML.parse …\n"],["read_memory","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-read_memory","(p1, p2, p3, p4)","<p>Create a new document from a String\n"],["read_memory","Nokogiri::XML::RelaxNG","Nokogiri/XML/RelaxNG.html#method-c-read_memory","(p1)","<p>Create a new RelaxNG from the contents of <code>string</code>\n"],["read_memory","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-c-read_memory","(p1)","<p>Create a new Schema from the contents of <code>string</code>\n"],["read_only?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-read_only-3F","()","<p>Is this a read only node?\n"],["recovery","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-recovery","()","<p>Should this parser recover from structural errors? It will not stop\nprocessing file on structural errors …\n"],["recovery=","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-recovery-3D","(p1)","<p>Should this parser recover from structural errors? It will not stop\nprocessing file on structural errors …\n"],["register","Nokogiri::XSLT","Nokogiri/XSLT.html#method-c-register","(p1, p2)","<p>Register a class that implements custom XSLT transformation functions.\n"],["register_namespaces","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_namespaces","(namespaces)","<p>Register namespaces in <code>namespaces</code>\n"],["register_ns","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_ns","(p1, p2)","<p>Register the namespace with <code>prefix</code> and <code>uri</code>.\n"],["register_variable","Nokogiri::XML::XPathContext","Nokogiri/XML/XPathContext.html#method-i-register_variable","(p1, p2)","<p>Register the variable <code>name</code> with <code>value</code>.\n"],["remove","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-remove","()",""],["remove","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove","()",""],["remove_attr","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove_attr","(name)","<p>Remove the attributed named <code>name</code> from all Node objects in the\nNodeSet\n"],["remove_attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-remove_attribute","(name)","<p>Remove the attribute named <code>name</code>\n"],["remove_class","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-remove_class","(name = nil)","<p>Remove the class attribute <code>name</code> from all Node objects in the\nNodeSet. If <code>name</code> is nil, remove the class …\n"],["remove_namespaces!","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-remove_namespaces-21","()","<p>Remove all namespaces from all nodes in the document.\n<p>This could be useful for developers who either don&#39;t …\n"],["replace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-replace","(node_or_tags)","<p>Replace this Node with <code>node_or_tags</code>. <code>node_or_tags</code>\ncan be a Nokogiri::XML::Node, a ::DocumentFragment …\n"],["replace_entities","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-replace_entities","()","<p>Should this parser replace entities?  &amp;amp; will get converted to\n&#39;&amp;&#39; if set to true …\n"],["replace_entities=","Nokogiri::XML::SAX::ParserContext","Nokogiri/XML/SAX/ParserContext.html#method-i-replace_entities-3D","(p1)","<p>Should this parser replace entities?  &amp;amp; will get converted to\n&#39;&amp;&#39; if set to true …\n"],["required_attributes","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-required_attributes","()","<p>A list of required attributes for this element\n"],["respond_to_missing?","Nokogiri::Decorators::Slop","Nokogiri/Decorators/Slop.html#method-i-respond_to_missing-3F","(name, include_private = false)",""],["reverse","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-reverse","()","<p>Returns a new NodeSet containing all the nodes in the NodeSet in reverse\norder\n"],["root","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-root","()","<p>Get the root node for this document.\n"],["root=","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-root-3D","(p1)","<p>Set the root element on this document\n"],["save_end_tag?","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-save_end_tag-3F","()","<p>Should the end tag be saved?\n"],["search","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-search","(*paths)","<p>Search this node for <code>paths</code>.  <code>paths</code> can be XPath\nor CSS, and an optional hash of namespaces may be appended. …\n"],["search","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-search","(*paths)","<p>Search this document for <code>paths</code>\n<p>For more information see Nokogiri::XML::Node#css and\nNokogiri::XML::Node#xpath …\n"],["self_closing?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-self_closing-3F","()",""],["serialize","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-serialize","(options = {})","<p>Serialize Node using <code>options</code>.  Save options can also be set\nusing a block. See SaveOptions.\n<p>These two …\n"],["serialize","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-serialize","()",""],["serialize","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-serialize","(*args, &block)","<p>Serialize Node using <code>options</code>.  Save options can also be set\nusing a block. See SaveOptions.\n<p>These two …\n"],["serialize","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-i-serialize","(p1)","<p>Serialize <code>document</code> to an xml string.\n"],["set","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-set","(p1, p2)","<p>Set the <code>property</code> to <code>value</code>\n"],["set","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-set","(key, value = nil, &blk)",""],["set_attribute","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-set_attribute","(name, value)",""],["set_metadata_element","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-set_metadata_element","(element)",""],["set_namespace","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-set_namespace","(p1)","<p>Set the namespace to <code>namespace</code>\n"],["shift","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-shift","()","<p>Returns the first element of the NodeSet and removes it.  Returns\n<code>nil</code> if the set is empty.\n"],["size","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-size","()",""],["slice","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-slice","(p1, p2 = v2)","<p>Element reference - returns the node at <code>index</code>, or returns a\nNodeSet containing nodes starting at <code>start</code> …\n"],["slop!","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-slop-21","()","<p>Explore a document with shortcut methods. See Nokogiri::Slop for details.\n<p>Note that any nodes that have …\n"],["start_document","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-start_document","()","<p>Called when document starts parsing\n"],["start_element","Nokogiri::HTML::Document::EncodingReader::JumpSAXHandler","Nokogiri/HTML/Document/EncodingReader/JumpSAXHandler.html#method-i-start_element","(name, attrs = [])",""],["start_element","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-start_element","(name, attrs = [])","<p>Called at the beginning of an element\n<p><code>name</code> is the name of the tag\n<p><code>attrs</code> are an assoc list of namespaces …\n"],["start_element","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-start_element","(name, attrs = [])","<p>Handle the start_element event with <code>name</code> and\n<code>attrs</code>\n"],["start_element_namespace","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-start_element_namespace","(name, attrs = [], prefix = nil, uri = nil, ns = [])","<p>Called at the beginning of an element <code>name</code> is the element name\n<code>attrs</code> is a list of attributes <code>prefix</code> is …\n"],["start_element_namespace","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-start_element_namespace","(name, attrs = [], prefix = nil, uri = nil, ns = [])","<p>Called at the beginning of an element <code>name</code> is the element name\n<code>attrs</code> is a list of attributes <code>prefix</code> is …\n"],["state","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-state","()","<p>Get the state of the reader\n"],["strict","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-strict","()",""],["strict?","Nokogiri::XML::ParseOptions","Nokogiri/XML/ParseOptions.html#method-i-strict-3F","()",""],["sub_elements","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-sub_elements","()","<p>A list of allowed sub elements for this element.\n"],["swap","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-swap","(node_or_tags)","<p>Swap this Node for <code>node_or_tags</code> <code>node_or_tags</code> can\nbe a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet …\n"],["system_id","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-system_id","()","<p>Get the System ID for this DTD\n"],["system_id","Nokogiri::XML::EntityDecl","Nokogiri/XML/EntityDecl.html#method-i-system_id","()","<p>Get the URI for a SYSTEM or PUBLIC Entity\n"],["text","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-text","(string)","<p>Create a Text Node with content of <code>string</code>\n"],["text","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-text","()",""],["text","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-text","()",""],["text?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-text-3F","()","<p>Returns true if this is a Text node\n"],["title","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-title","()","<p>Get the title string of this document.  Return nil if there is no title\ntag.\n"],["title=","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-title-3D","(text)","<p>Set the title string of this document.\n<p>If a title element is already present, its content is replaced …\n"],["to_a","Nokogiri::CSS::Node","Nokogiri/CSS/Node.html#method-i-to_a","()","<p>Convert to array\n"],["to_a","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_a","()","<p>Return this list as an Array\n"],["to_ary","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_ary","()",""],["to_format","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_format","(save_option, options)",""],["to_html","Nokogiri::HTML::Builder","Nokogiri/HTML/Builder.html#method-i-to_html","()","<p>Convert the builder to HTML\n"],["to_html","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_html","(*args)","<p>Convert this DocumentFragment to html See Nokogiri::XML::NodeSet#to_html\n"],["to_html","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_html","(options = {})","<p>Serialize this Node to HTML\n\n<pre>doc.to_html</pre>\n<p>See Node#write_to for a list of <code>options</code>.  For formatted\noutput, …\n"],["to_html","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_html","(*args)","<p>Convert this NodeSet to HTML\n"],["to_java","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-to_java","()","<p><code>JRuby</code> Returns Java&#39;s org.w3c.dom.document of this\nDocument.\n"],["to_s","Nokogiri::HTML::ElementDescription","Nokogiri/HTML/ElementDescription.html#method-i-to_s","()","<p>Convert this description to a string\n"],["to_s","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_s","()","<p>Convert this DocumentFragment to a string\n"],["to_s","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_s","()","<p>Turn this node in to a string.  If the document is HTML, this method\nreturns html.  If the document is …\n"],["to_s","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_s","()","<p>Convert this NodeSet to a string.\n"],["to_s","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-to_s","()",""],["to_s","Nokogiri::XML::XPath::SyntaxError","Nokogiri/XML/XPath/SyntaxError.html#method-i-to_s","()",""],["to_str","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_str","()",""],["to_type","Nokogiri::CSS::Node","Nokogiri/CSS/Node.html#method-i-to_type","()","<p>Convert to_type\n"],["to_xhtml","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_xhtml","(*args)","<p>Convert this DocumentFragment to xhtml See Nokogiri::XML::NodeSet#to_xhtml\n"],["to_xhtml","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_xhtml","(options = {})","<p>Serialize this Node to XHTML using <code>options</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_xhtml</span>(:<span class=\"ruby-identifier\">indent</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">5</span>, :<span class=\"ruby-identifier\">encoding</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;UTF-8&#39;</span>)\n</pre>\n<p>See Node#write_to …\n"],["to_xhtml","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_xhtml","(*args)","<p>Convert this NodeSet to XHTML\n"],["to_xml","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-i-to_xml","(*args)","<p>Convert this Builder object to XML\n"],["to_xml","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_xml","(*args)","<p>Convert this DocumentFragment to xml See Nokogiri::XML::NodeSet#to_xml\n"],["to_xml","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_xml","(options = {})","<p>Serialize this Node to XML using <code>options</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">to_xml</span>(:<span class=\"ruby-identifier\">indent</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">5</span>, :<span class=\"ruby-identifier\">encoding</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;UTF-8&#39;</span>)\n</pre>\n<p>See Node#write_to …\n"],["to_xml","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_xml","(*args)","<p>Convert this NodeSet to XML\n"],["to_xpath","Nokogiri::CSS::Node","Nokogiri/CSS/Node.html#method-i-to_xpath","(prefix = '//', visitor = XPathVisitor.new)","<p>Convert this CSS node to xpath with <code>prefix</code> using\n<code>visitor</code>\n"],["transform","Nokogiri::XSLT::Stylesheet","Nokogiri/XSLT/Stylesheet.html#method-i-transform","(p1, p2 = v2)","<p>Apply an XSLT stylesheet to an XML::Document. <code>params</code> is an\narray of strings used as XSLT parameters. …\n"],["traverse","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-traverse","(&block)","<p>Yields self and all children to <code>block</code> recursively.\n"],["type","Nokogiri::HTML::Document","Nokogiri/HTML/Document.html#method-i-type","()","<p>The type for this document\n"],["type","Nokogiri::XML::ElementContent","Nokogiri/XML/ElementContent.html#method-i-type","()","<p>Get the element content <code>type</code>.  Possible values are PCDATA,\nELEMENT, SEQ, or OR.\n"],["type","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-type","()",""],["unlink","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-unlink","()","<p>Unlink this node from its current context.\n"],["unlink","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-unlink","()","<p>Unlink this NodeSet and all Node objects it contains from their current\ncontext.\n"],["url","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-url","()","<p>Get the url name for this document.\n"],["valid?","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-i-valid-3F","(thing)","<p>Returns true if <code>thing</code> is a valid Nokogiri::XML::Document or\nfile.\n"],["validate","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-validate","(p1)","<p>Validate <code>document</code> returning a list of errors\n"],["validate","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-validate","()","<p>Validate this Document against it&#39;s DTD.  Returns a list of errors on\nthe document or <code>nil</code> when there …\n"],["validate","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-i-validate","(thing)","<p>Validate <code>thing</code> against this schema.  <code>thing</code> can be\na Nokogiri::XML::Document object, or a filename.   …\n"],["validate_document","Nokogiri::XML::RelaxNG","Nokogiri/XML/RelaxNG.html#method-i-validate_document","(p1)","<p>Validate a Nokogiri::XML::Document against this RelaxNG schema.\n"],["validate_document","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-i-validate_document","(p1)","<p>Validate a Nokogiri::XML::Document against this Schema.\n"],["validate_file","Nokogiri::XML::Schema","Nokogiri/XML/Schema.html#method-i-validate_file","(p1)","<p>Validate a file against this Schema.\n"],["value","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-value","()","<p>Get the text value of the node if present. Returns a utf-8 encoded string.\n"],["value=","Nokogiri::XML::Attr","Nokogiri/XML/Attr.html#method-i-value-3D","(p1)","<p>Set the value for this Attr to <code>content</code>\n"],["value?","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-value-3F","()","<p>Does this node have a text value?\n"],["values","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-values","()","<p>Get the attribute values for this Node.\n"],["version","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-version","()","<p>Get the XML version for this Document\n"],["warning","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-warning","(string)","<p>Called on document warnings <code>string</code> contains the warning\n"],["warning","XSD::XMLParser::Nokogiri","XSD/XMLParser/Nokogiri.html#method-i-warning","(msg)",""],["warning?","Nokogiri::XML::SyntaxError","Nokogiri/XML/SyntaxError.html#method-i-warning-3F","()","<p>return true if this is a warning\n"],["with","Nokogiri::XML::Builder","Nokogiri/XML/Builder.html#method-c-with","(root, &block)","<p>Create a builder with an existing root object.  This is for use when you\nhave an existing document that …\n"],["without_cache","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-without_cache","(&block)","<p>Execute <code>block</code> without cache\n"],["wrap","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-c-wrap","(document)","<p><code>JRuby</code> Wraps Java&#39;s org.w3c.dom.document and returns\nNokogiri::XML::Document\n"],["wrap","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-wrap","(html, &blk)","<p>Wrap this NodeSet with <code>html</code> or the results of the builder in\n<code>blk</code>\n"],["write","Nokogiri::XML::SAX::PushParser","Nokogiri/XML/SAX/PushParser.html#method-i-write","(chunk, last_chunk = false)","<p>Write a <code>chunk</code> of XML to the PushParser.  Any callback methods\nthat can be called will be called immediately. …\n"],["write_format_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_format_to","(save_option, io, options)",""],["write_html_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_html_to","(io, options = {})","<p>Write Node as HTML to <code>io</code> with <code>options</code>\n<p>See Node#write_to for a list of <code>options</code>\n"],["write_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_to","(io, *options)","<p>Write Node to <code>io</code> with <code>options</code>.\n<code>options</code> modify the output of this method.  Valid options are:\n<p><code>:encoding</code> …\n"],["write_xhtml_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_xhtml_to","(io, options = {})","<p>Write Node as XHTML to <code>io</code> with <code>options</code>\n<p>See Node#write_to for a list of <code>options</code>\n"],["write_xml_to","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-write_xml_to","(io, options = {})","<p>Write Node as XML to <code>io</code> with <code>options</code>\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">write_xml_to</span> <span class=\"ruby-identifier\">io</span>, :<span class=\"ruby-identifier\">encoding</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;UTF-8&#39;</span>\n</pre>\n<p>See Node#write_to for a …\n"],["xml?","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-xml-3F","()","<p>Returns true if this is an XML::Document node\n"],["xml_version","Nokogiri::XML::Reader","Nokogiri/XML/Reader.html#method-i-xml_version","()","<p>Get the XML version of the document being read\n"],["xmldecl","Nokogiri::XML::SAX::Document","Nokogiri/XML/SAX/Document.html#method-i-xmldecl","(version, encoding, standalone)","<p>Called when an XML declaration is parsed\n"],["xpath","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-xpath","(*paths)","<p>Search this node for XPath <code>paths</code>. <code>paths</code> must be\none or more XPath queries.\n\n<pre>node.xpath(&#39;.//title&#39;)</pre>\n<p>A hash …\n"],["xpath","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-xpath","(*paths)","<p>Search this NodeSet for XPath <code>paths</code>\n<p>For more information see Nokogiri::XML::Node#xpath\n"],["xpath_for","Nokogiri::CSS","Nokogiri/CSS.html#method-i-xpath_for","(selector, options={})","<p>Get the XPath for <code>selector</code>.\n"],["xpath_for","Nokogiri::CSS::Parser","Nokogiri/CSS/Parser.html#method-i-xpath_for","(string, options={})","<p>Get the xpath for <code>string</code> using <code>options</code>\n"],["|","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-7C","(p1)","<p>Returns a new set built by merging the set and the elements of the given\nset.\n"],["CHANGELOG.ja","","CHANGELOG_ja_rdoc.html","","<p>1.6.5 / 未リリース\n<p>機能\n<p>Slop#respond_to_missing? を実装 (#1176)\n"],["CHANGELOG","","CHANGELOG_rdoc.html","","<p>1.6.5 / unreleased\n<p>Features\n<p>Implement Slop#respond_to_missing?. (#1176)\n"],["C_CODING_STYLE","","C_CODING_STYLE_rdoc.html","","<p>C/C++ mode style for Nokogiri\n<p>Please don&#39;t propose commits that only change whitespace. However, if …\n"],["Manifest","","Manifest_txt.html","","<p>.autotest .editorconfig .gemtest .travis.yml CHANGELOG.ja.rdoc\nCHANGELOG.rdoc C_CODING_STYLE.rdoc Gemfile …\n"],["README.ja","","README_ja_rdoc.html","","<p>Nokogiri (鋸) <img src=\"https://secure.travis-ci.org/sparklemotion/nokogiri.png?rvm=1.9.3\" /> <img src=“https://codeclimate.com/badge.png” …\n"],["README","","README_rdoc.html","","<p>Nokogiri <img src=\"https://secure.travis-ci.org/sparklemotion/nokogiri.png?rvm=1.9.3\" /> <img src=“https://codeclimate.com/github/sparklemotion/nokogiri.png” …\n"],["ROADMAP","","ROADMAP_md.html","","<p>Roadmap for 2.0\n<p>overhaul serialize/pretty printing API\n<p>github.com/sparklemotion/nokogiri/issues/530\n XHTML ...\n"],["STANDARD_RESPONSES","","STANDARD_RESPONSES_md.html","","<p>Standard Responses to Requests\n<p>These responses are needed often enough that I figured, let&#39;s just …\n"],["Y_U_NO_GEMSPEC","","Y_U_NO_GEMSPEC_md.html","","<p>(note: this was originally a blog post published at\nblog.flavorjon.es/2012/03/y-u-no-gemspec.html)\n<p>tl;dr …\n"],["tokenizer.rex","","lib/nokogiri/css/tokenizer_rex.html","","<p>module Nokogiri module CSS class Tokenizer # :nodoc:\n<p>macro\n\n<pre>nl        \\n|\\r\\n|\\r|\\f\nw         [\\s]*\nnonascii ...</pre>\n"],["README","","suppressions/README_txt.html","","<p>This directory contains valgrind suppression files generated by the\nhoe-debugging gem.\n"]]}}