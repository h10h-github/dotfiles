var search_data = {"index":{"searchIndex":["fcgi","stream","rack","auth","abstracthandler","abstractrequest","basic","request","digest","md5","nonce","params","request","bodyproxy","builder","cascade","chunked","body","commonlogger","conditionalget","config","contentlength","contenttype","deflater","deflatestream","gzipstream","directory","etag","file","forwardrequest","handler","cgi","eventedmongrel","fastcgi","lsws","mongrel","scgi","swiftipliedmongrel","thin","webrick","head","lint","assertion","errorwrapper","hijackwrapper","inputwrapper","linterror","lobster","lock","logger","methodoverride","mime","mockrequest","fatalwarner","fatalwarning","mockresponse","multipart","multipart","generator","multipartpartlimiterror","parser","uploadedfile","nulllogger","recursive","reloader","stat","request","response","helpers","rewindableinput","tempfile","runtime","sendfile","server","options","session","abstract","id","sessionhash","cookie","base64","json","marshal","zipjson","identity","memcache","pool","showexceptions","showstatus","static","tempfilereaper","urlmap","utils","context","headerhash","invalidparametererror","keyspaceconstrainedparams","okjson","error","utf8error","parametertypeerror","uri","webrick","httpresponse","<<()","<<()","=~()","a1()","a2()","dir_file_escape()","get()","h()","kd()","post()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","_call()","_call()","_call()","_close()","_rack_setup_header()","abbrev()","accept_encoding()","accept_language()","accepted?()","accepts_html?()","add()","add()","allowed_methods()","app()","app()","applicable_rules()","arrenc()","arrparse()","authorization_key()","bad_request()","bad_request?()","base_url()","basic?()","best_q_match()","best_q_match()","body()","body()","build_app()","build_app_and_options_from_config()","build_app_from_string()","build_multipart()","build_multipart()","build_nested_query()","build_nested_query()","build_query()","build_query()","byte_ranges()","byte_ranges()","bytesize()","bytesize()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","can_serve()","casecmp?()","challenge()","challenge()","check_forbidden()","check_pid!()","chunkable_version?()","clean_path_info()","clean_path_info()","clear()","client_error?()","close()","close()","close()","close()","close()","close()","close()","closed?()","commit_session()","commit_session?()","content_charset()","content_for_other()","content_for_tempfile()","content_length()","content_length()","content_type()","content_type()","context()","context()","cookies()","correct_uri?()","create()","created?()","credentials()","current_session_id()","daemonize_app()","datetime_format()","datetime_format=()","debug()","debug?()","decode()","decode()","decode()","decode()","decode()","decode()","default()","default_middleware_by_environment()","default_options()","delete()","delete()","delete()","delete?()","delete_cookie()","delete_cookie_header!()","delete_cookie_header!()","delete_param()","dequote()","destroy()","destroy_session()","destroy_session()","destroy_session()","destroy_session()","digest()","digest()","digest?()","digest_body()","digest_match?()","dump()","dump_exception()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","eat()","empty?()","empty?()","empty?()","encode()","encode()","encode()","encode()","encode()","encode()","entity_not_found()","env_for()","error()","error?()","escape()","escape()","escape_html()","escape_html()","escape_path()","escape_path()","etag_body?()","etag_matches?()","etag_status?()","exists?()","extract_content_length()","extract_session_id()","extract_session_id()","fail()","falsetok()","fast_forward_to_first_boundary()","fatal()","fatal?()","fetch()","figure_path()","filesize()","filesize_format()","filesystem_has_posix_semantics?()","find()","finish()","flattened_params()","flush()","forbidden?()","force_options?()","forced_session_update?()","form_data?()","formatter()","formatter=()","fresh?()","fresh?()","full_boundary()","fullpath()","generate_hmac()","generate_map()","generate_sid()","generate_sid()","generate_sid()","get()","get()","get?()","get_current_head_and_filename_and_content_type_and_name_and_body()","get_data()","get_filename()","get_session()","get_session()","get_session()","get_session()","gets()","handler_opts()","has_key?()","has_key?()","head()","head?()","hexdec4()","host()","host_with_port()","i_m_a_teapot?()","id()","include()","include?()","include?()","include?()","include?()","info()","info?()","informational?()","initialize_sid()","inspect()","invalid?()","ip()","key?()","key?()","key?()","keyenc()","keys()","level()","level=()","lex()","link?()","list_directory()","list_path()","load!()","load_for_read!()","load_for_write!()","load_session()","loaded?()","loaded_session?()","local_path()","location()","log()","logger()","logging_middleware()","make_rewindable()","map()","map_accel_path()","match()","match?()","match?()","md5()","media_type()","media_type_params()","member?()","merge()","merge!()","merge!()","method()","method_missing()","method_missing()","method_not_allowed?()","method_override()","method_override_param()","middleware()","mime_type()","mime_type()","mime_type()","modified_since?()","multipart?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_from_string()","nibble()","nonce()","normalize_params()","normalize_params()","not_found?()","nulltok()","numenc()","numtok()","objenc()","objparse()","ok?()","opt_parser()","options()","options()","options()","options?()","overwrite_file_path()","pairparse()","params()","params()","params()","params()","params_hash_type?()","params_hash_type?()","parse()","parse()","parse()","parse!()","parse_file()","parse_http_accept_header()","parse_multipart()","parse_multipart()","parse_multipart()","parse_nested_query()","parse_nested_query()","parse_options()","parse_query()","parse_query()","parse_query()","parse_uri_rfc2396()","parseable_data?()","parts()","passwords_hashed?()","patch()","patch?()","path()","path()","path_info()","path_info=()","persistent_session_id!()","pick()","pidfile_process_status()","port()","post()","post?()","prefers_plaintext?()","prepare_session()","pretty()","process()","process_request()","progname()","progname=()","provided?()","put()","put?()","puts()","q_values()","q_values()","query_string()","quote()","read()","recontext()","redirect()","redirect?()","redirection?()","referer()","referrer()","register()","reject_trusted_ip_addresses()","release()","reload!()","remap()","replace()","replace()","request()","request()","request_method()","respond_to?()","respond_to?()","respond_to?()","response_body()","rewind()","rfc2109()","rfc2109()","rfc2822()","rfc2822()","rotation()","route_file()","run()","run()","run()","run()","run()","run()","run()","run()","rx()","safe_load()","safe_stat()","scheme()","scheme()","script_name()","script_name=()","scrub_filename()","secure_compare()","secure_compare()","security_matches?()","select_best_encoding()","select_best_encoding()","send_body()","send_body()","send_body()","send_headers()","send_headers()","send_headers()","serve()","serve()","serve()","server()","server_error?()","service()","serving()","session()","session_class()","session_exists?()","session_options()","set()","set_cookie()","set_cookie()","set_cookie_header!()","set_cookie_header!()","set_options()","set_session()","set_session()","set_session()","set_session()","setup_header()","sev_threshold()","sev_threshold=()","should_deflate?()","shutdown()","skip_caching?()","split_header_value()","split_ip_addresses()","ssl?()","stale?()","start()","start()","stat()","status_code()","status_code()","store()","strenc()","string()","stringify_keys()","strip_doublequotes()","strtok()","subst()","successful?()","surrogate?()","tag_multipart_encoding()","textparse()","to_a()","to_app()","to_ary()","to_hash()","to_hash()","to_params_hash()","to_rfc2822()","to_s()","to_s()","tok()","trace?()","truetok()","trusted_proxy?()","try_require()","ucharcopy()","ucharenc()","unauthorized()","unauthorized?()","unescape()","unescape()","unknown()","unlink?()","unpacked_cookie_data()","unprocessable?()","unquote()","update()","update_param()","url()","use()","user_agent()","username()","valenc()","valid?()","valid?()","valid?()","valid_digest?()","valid_nonce?()","valid_opaque?()","valid_options()","valid_options()","valid_options()","valid_options()","valid_options()","valid_qop?()","valparse()","values()","values_at()","variation()","version()","warmup()","warn()","warn?()","with_lock()","with_lock()","wrapped_app()","write()","write()","write()","write_pid()","xhr?()","known-issues","readme"],"longSearchIndex":["fcgi","fcgi::stream","rack","rack::auth","rack::auth::abstracthandler","rack::auth::abstractrequest","rack::auth::basic","rack::auth::basic::request","rack::auth::digest","rack::auth::digest::md5","rack::auth::digest::nonce","rack::auth::digest::params","rack::auth::digest::request","rack::bodyproxy","rack::builder","rack::cascade","rack::chunked","rack::chunked::body","rack::commonlogger","rack::conditionalget","rack::config","rack::contentlength","rack::contenttype","rack::deflater","rack::deflater::deflatestream","rack::deflater::gzipstream","rack::directory","rack::etag","rack::file","rack::forwardrequest","rack::handler","rack::handler::cgi","rack::handler::eventedmongrel","rack::handler::fastcgi","rack::handler::lsws","rack::handler::mongrel","rack::handler::scgi","rack::handler::swiftipliedmongrel","rack::handler::thin","rack::handler::webrick","rack::head","rack::lint","rack::lint::assertion","rack::lint::errorwrapper","rack::lint::hijackwrapper","rack::lint::inputwrapper","rack::lint::linterror","rack::lobster","rack::lock","rack::logger","rack::methodoverride","rack::mime","rack::mockrequest","rack::mockrequest::fatalwarner","rack::mockrequest::fatalwarning","rack::mockresponse","rack::multipart","rack::multipart","rack::multipart::generator","rack::multipart::multipartpartlimiterror","rack::multipart::parser","rack::multipart::uploadedfile","rack::nulllogger","rack::recursive","rack::reloader","rack::reloader::stat","rack::request","rack::response","rack::response::helpers","rack::rewindableinput","rack::rewindableinput::tempfile","rack::runtime","rack::sendfile","rack::server","rack::server::options","rack::session","rack::session::abstract","rack::session::abstract::id","rack::session::abstract::sessionhash","rack::session::cookie","rack::session::cookie::base64","rack::session::cookie::base64::json","rack::session::cookie::base64::marshal","rack::session::cookie::base64::zipjson","rack::session::cookie::identity","rack::session::memcache","rack::session::pool","rack::showexceptions","rack::showstatus","rack::static","rack::tempfilereaper","rack::urlmap","rack::utils","rack::utils::context","rack::utils::headerhash","rack::utils::invalidparametererror","rack::utils::keyspaceconstrainedparams","rack::utils::okjson","rack::utils::okjson::error","rack::utils::okjson::utf8error","rack::utils::parametertypeerror","uri","webrick","webrick::httpresponse","rack::cascade#<<()","rack::nulllogger#<<()","rack::mockresponse#=~()","rack::auth::digest::md5#a1()","rack::auth::digest::md5#a2()","rack::directory#dir_file_escape()","rack::request#get()","rack::auth::digest::md5#h()","rack::auth::digest::md5#kd()","rack::request#post()","rack::auth::digest::params#[]()","rack::request#[]()","rack::response#[]()","rack::session::abstract::sessionhash#[]()","rack::utils::headerhash#[]()","rack::utils::keyspaceconstrainedparams#[]()","rack::auth::digest::params#[]=()","rack::request#[]=()","rack::response#[]=()","rack::session::abstract::sessionhash#[]=()","rack::utils::headerhash#[]=()","rack::utils::keyspaceconstrainedparams#[]=()","rack::directory#_call()","rack::file#_call()","rack::recursive#_call()","rack::rewindableinput::tempfile#_close()","webrick::httpresponse#_rack_setup_header()","rack::utils::okjson#abbrev()","rack::request#accept_encoding()","rack::request#accept_language()","rack::response::helpers#accepted?()","rack::showexceptions#accepts_html?()","rack::cascade#add()","rack::nulllogger#add()","rack::methodoverride#allowed_methods()","rack::builder::app()","rack::server#app()","rack::static#applicable_rules()","rack::utils::okjson#arrenc()","rack::utils::okjson#arrparse()","rack::auth::abstractrequest#authorization_key()","rack::auth::abstracthandler#bad_request()","rack::response::helpers#bad_request?()","rack::request#base_url()","rack::auth::basic::request#basic?()","rack::utils#best_q_match()","rack::utils::best_q_match()","rack::mockresponse#body()","rack::request#body()","rack::server#build_app()","rack::server#build_app_and_options_from_config()","rack::server#build_app_from_string()","rack::multipart#build_multipart()","rack::multipart#build_multipart()","rack::utils#build_nested_query()","rack::utils::build_nested_query()","rack::utils#build_query()","rack::utils::build_query()","rack::utils::byte_ranges()","rack::utils#byte_ranges()","rack::utils::bytesize()","rack::utils#bytesize()","rack::auth::basic#call()","rack::auth::digest::md5#call()","rack::builder#call()","rack::cascade#call()","rack::chunked#call()","rack::commonlogger#call()","rack::conditionalget#call()","rack::config#call()","rack::contentlength#call()","rack::contenttype#call()","rack::deflater#call()","rack::directory#call()","rack::etag#call()","rack::file#call()","rack::head#call()","rack::lobster#call()","rack::lock#call()","rack::logger#call()","rack::methodoverride#call()","rack::nulllogger#call()","rack::recursive#call()","rack::reloader#call()","rack::runtime#call()","rack::sendfile#call()","rack::session::abstract::id#call()","rack::showexceptions#call()","rack::showstatus#call()","rack::static#call()","rack::tempfilereaper#call()","rack::urlmap#call()","rack::utils::context#call()","rack::static#can_serve()","rack::urlmap#casecmp?()","rack::auth::basic#challenge()","rack::auth::digest::md5#challenge()","rack::directory#check_forbidden()","rack::server#check_pid!()","rack::chunked#chunkable_version?()","rack::utils::clean_path_info()","rack::utils#clean_path_info()","rack::session::abstract::sessionhash#clear()","rack::response::helpers#client_error?()","rack::bodyproxy#close()","rack::chunked::body#close()","rack::deflater::deflatestream#close()","rack::deflater::gzipstream#close()","rack::nulllogger#close()","rack::response#close()","rack::rewindableinput#close()","rack::bodyproxy#closed?()","rack::session::abstract::id#commit_session()","rack::session::abstract::id#commit_session?()","rack::request#content_charset()","rack::multipart::generator#content_for_other()","rack::multipart::generator#content_for_tempfile()","rack::request#content_length()","rack::response::helpers#content_length()","rack::request#content_type()","rack::response::helpers#content_type()","rack::session::abstract::id#context()","rack::utils::context#context()","rack::request#cookies()","rack::auth::digest::request#correct_uri?()","rack::multipart::parser::create()","rack::response::helpers#created?()","rack::auth::basic::request#credentials()","rack::session::abstract::id#current_session_id()","rack::server#daemonize_app()","rack::nulllogger#datetime_format()","rack::nulllogger#datetime_format=()","rack::nulllogger#debug()","rack::nulllogger#debug?()","rack::session::cookie::base64#decode()","rack::session::cookie::base64::json#decode()","rack::session::cookie::base64::marshal#decode()","rack::session::cookie::base64::zipjson#decode()","rack::session::cookie::identity#decode()","rack::utils::okjson#decode()","rack::handler::default()","rack::server#default_middleware_by_environment()","rack::server#default_options()","rack::mockrequest#delete()","rack::session::abstract::sessionhash#delete()","rack::utils::headerhash#delete()","rack::request#delete?()","rack::response#delete_cookie()","rack::utils::delete_cookie_header!()","rack::utils#delete_cookie_header!()","rack::request#delete_param()","rack::auth::digest::params::dequote()","rack::session::abstract::sessionhash#destroy()","rack::session::abstract::id#destroy_session()","rack::session::cookie#destroy_session()","rack::session::memcache#destroy_session()","rack::session::pool#destroy_session()","rack::auth::digest::md5#digest()","rack::auth::digest::nonce#digest()","rack::auth::digest::request#digest?()","rack::etag#digest_body()","rack::session::cookie#digest_match?()","rack::multipart::generator#dump()","rack::showexceptions#dump_exception()","rack::bodyproxy#each()","rack::chunked::body#each()","rack::deflater::deflatestream#each()","rack::deflater::gzipstream#each()","rack::directory#each()","rack::file#each()","rack::response#each()","rack::rewindableinput#each()","rack::session::abstract::sessionhash#each()","rack::utils::headerhash#each()","rack::utils::okjson#eat()","rack::mockresponse#empty?()","rack::response#empty?()","rack::session::abstract::sessionhash#empty?()","rack::session::cookie::base64#encode()","rack::session::cookie::base64::json#encode()","rack::session::cookie::base64::marshal#encode()","rack::session::cookie::base64::zipjson#encode()","rack::session::cookie::identity#encode()","rack::utils::okjson#encode()","rack::directory#entity_not_found()","rack::mockrequest::env_for()","rack::nulllogger#error()","rack::nulllogger#error?()","rack::utils#escape()","rack::utils::escape()","rack::utils#escape_html()","rack::utils::escape_html()","rack::utils::escape_path()","rack::utils#escape_path()","rack::etag#etag_body?()","rack::conditionalget#etag_matches?()","rack::etag#etag_status?()","rack::session::abstract::sessionhash#exists?()","rack::commonlogger#extract_content_length()","rack::session::abstract::id#extract_session_id()","rack::session::cookie#extract_session_id()","rack::file#fail()","rack::utils::okjson#falsetok()","rack::multipart::parser#fast_forward_to_first_boundary()","rack::nulllogger#fatal()","rack::nulllogger#fatal?()","rack::session::abstract::sessionhash#fetch()","rack::reloader::stat#figure_path()","rack::file#filesize()","rack::directory#filesize_format()","rack::rewindableinput#filesystem_has_posix_semantics?()","rack::session::abstract::sessionhash::find()","rack::response#finish()","rack::multipart::generator#flattened_params()","rack::mockrequest::fatalwarner#flush()","rack::response::helpers#forbidden?()","rack::session::abstract::id#force_options?()","rack::session::abstract::id#forced_session_update?()","rack::request#form_data?()","rack::nulllogger#formatter()","rack::nulllogger#formatter=()","rack::auth::digest::nonce#fresh?()","rack::conditionalget#fresh?()","rack::multipart::parser#full_boundary()","rack::request#fullpath()","rack::session::cookie#generate_hmac()","rack::builder#generate_map()","rack::session::abstract::id#generate_sid()","rack::session::memcache#generate_sid()","rack::session::pool#generate_sid()","rack::handler::get()","rack::mockrequest#get()","rack::request#get?()","rack::multipart::parser#get_current_head_and_filename_and_content_type_and_name_and_body()","rack::multipart::parser#get_data()","rack::multipart::parser#get_filename()","rack::session::abstract::id#get_session()","rack::session::cookie#get_session()","rack::session::memcache#get_session()","rack::session::pool#get_session()","rack::rewindableinput#gets()","rack::server::options#handler_opts()","rack::session::abstract::sessionhash#has_key?()","rack::utils::headerhash#has_key?()","rack::mockrequest#head()","rack::request#head?()","rack::utils::okjson#hexdec4()","rack::request#host()","rack::request#host_with_port()","rack::response::helpers#i_m_a_teapot?()","rack::session::abstract::sessionhash#id()","rack::recursive#include()","rack::cascade#include?()","rack::response::helpers#include?()","rack::session::abstract::sessionhash#include?()","rack::utils::headerhash#include?()","rack::nulllogger#info()","rack::nulllogger#info?()","rack::response::helpers#informational?()","rack::session::abstract::id#initialize_sid()","rack::session::abstract::sessionhash#inspect()","rack::response::helpers#invalid?()","rack::request#ip()","rack::session::abstract::sessionhash#key?()","rack::utils::headerhash#key?()","rack::utils::keyspaceconstrainedparams#key?()","rack::utils::okjson#keyenc()","rack::session::abstract::sessionhash#keys()","rack::nulllogger#level()","rack::nulllogger#level=()","rack::utils::okjson#lex()","rack::request#link?()","rack::directory#list_directory()","rack::directory#list_path()","rack::session::abstract::sessionhash#load!()","rack::session::abstract::sessionhash#load_for_read!()","rack::session::abstract::sessionhash#load_for_write!()","rack::session::abstract::id#load_session()","rack::session::abstract::sessionhash#loaded?()","rack::session::abstract::id#loaded_session?()","rack::multipart::uploadedfile#local_path()","rack::response::helpers#location()","rack::commonlogger#log()","rack::request#logger()","rack::server#logging_middleware()","rack::rewindableinput#make_rewindable()","rack::builder#map()","rack::sendfile#map_accel_path()","rack::mockresponse#match()","rack::mime#match?()","rack::mime::match?()","rack::auth::digest::md5#md5()","rack::request#media_type()","rack::request#media_type_params()","rack::utils::headerhash#member?()","rack::utils::headerhash#merge()","rack::session::abstract::sessionhash#merge!()","rack::utils::headerhash#merge!()","rack::auth::digest::request#method()","rack::auth::digest::request#method_missing()","rack::bodyproxy#method_missing()","rack::response::helpers#method_not_allowed?()","rack::methodoverride#method_override()","rack::methodoverride#method_override_param()","rack::server#middleware()","rack::file#mime_type()","rack::mime::mime_type()","rack::mime#mime_type()","rack::conditionalget#modified_since?()","rack::multipart::generator#multipart?()","rack::auth::abstracthandler::new()","rack::auth::abstractrequest::new()","rack::auth::digest::md5::new()","rack::auth::digest::nonce::new()","rack::auth::digest::params::new()","rack::bodyproxy::new()","rack::builder::new()","rack::cascade::new()","rack::chunked::new()","rack::chunked::body::new()","rack::commonlogger::new()","rack::conditionalget::new()","rack::config::new()","rack::contentlength::new()","rack::contenttype::new()","rack::deflater::new()","rack::deflater::deflatestream::new()","rack::deflater::gzipstream::new()","rack::directory::new()","rack::etag::new()","rack::file::new()","rack::forwardrequest::new()","rack::handler::mongrel::new()","rack::handler::scgi::new()","rack::handler::webrick::new()","rack::head::new()","rack::lint::new()","rack::lock::new()","rack::logger::new()","rack::methodoverride::new()","rack::mockrequest::new()","rack::mockresponse::new()","rack::multipart::generator::new()","rack::multipart::parser::new()","rack::multipart::uploadedfile::new()","rack::nulllogger::new()","rack::recursive::new()","rack::reloader::new()","rack::request::new()","rack::response::new()","rack::rewindableinput::new()","rack::runtime::new()","rack::sendfile::new()","rack::server::new()","rack::session::abstract::id::new()","rack::session::abstract::sessionhash::new()","rack::session::cookie::new()","rack::session::memcache::new()","rack::session::pool::new()","rack::showexceptions::new()","rack::showstatus::new()","rack::static::new()","rack::tempfilereaper::new()","rack::urlmap::new()","rack::utils::context::new()","rack::utils::headerhash::new()","rack::utils::headerhash::new()","rack::utils::keyspaceconstrainedparams::new()","rack::builder::new_from_string()","rack::utils::okjson#nibble()","rack::auth::digest::request#nonce()","rack::utils#normalize_params()","rack::utils::normalize_params()","rack::response::helpers#not_found?()","rack::utils::okjson#nulltok()","rack::utils::okjson#numenc()","rack::utils::okjson#numtok()","rack::utils::okjson#objenc()","rack::utils::okjson#objparse()","rack::response::helpers#ok?()","rack::server#opt_parser()","rack::mockrequest#options()","rack::server#options()","rack::session::abstract::sessionhash#options()","rack::request#options?()","rack::static#overwrite_file_path()","rack::utils::okjson#pairparse()","rack::auth::abstractrequest#params()","rack::auth::digest::md5#params()","rack::auth::digest::request#params()","rack::request#params()","rack::utils#params_hash_type?()","rack::utils::params_hash_type?()","rack::auth::digest::nonce::parse()","rack::auth::digest::params::parse()","rack::multipart::parser#parse()","rack::server::options#parse!()","rack::builder::parse_file()","rack::request#parse_http_accept_header()","rack::multipart#parse_multipart()","rack::multipart#parse_multipart()","rack::request#parse_multipart()","rack::utils#parse_nested_query()","rack::utils::parse_nested_query()","rack::server#parse_options()","rack::request#parse_query()","rack::utils#parse_query()","rack::utils::parse_query()","rack::mockrequest::parse_uri_rfc2396()","rack::request#parseable_data?()","rack::auth::abstractrequest#parts()","rack::auth::digest::md5#passwords_hashed?()","rack::mockrequest#patch()","rack::request#patch?()","rack::multipart::uploadedfile#path()","rack::request#path()","rack::request#path_info()","rack::request#path_info=()","rack::session::cookie#persistent_session_id!()","rack::handler::pick()","rack::server#pidfile_process_status()","rack::request#port()","rack::mockrequest#post()","rack::request#post?()","rack::showexceptions#prefers_plaintext?()","rack::session::abstract::id#prepare_session()","rack::showexceptions#pretty()","rack::handler::mongrel#process()","rack::handler::scgi#process_request()","rack::nulllogger#progname()","rack::nulllogger#progname=()","rack::auth::abstractrequest#provided?()","rack::mockrequest#put()","rack::request#put?()","rack::mockrequest::fatalwarner#puts()","rack::utils#q_values()","rack::utils::q_values()","rack::request#query_string()","rack::auth::digest::params#quote()","rack::rewindableinput#read()","rack::utils::context#recontext()","rack::response#redirect()","rack::response::helpers#redirect?()","rack::response::helpers#redirection?()","rack::request#referer()","rack::request#referrer()","rack::handler::register()","rack::request#reject_trusted_ip_addresses()","rack::release()","rack::reloader#reload!()","rack::urlmap#remap()","rack::session::abstract::sessionhash#replace()","rack::utils::headerhash#replace()","rack::auth::abstractrequest#request()","rack::mockrequest#request()","rack::request#request_method()","rack::auth::digest::request#respond_to?()","rack::bodyproxy#respond_to?()","rack::multipart::uploadedfile#respond_to?()","rack::file#response_body()","rack::rewindableinput#rewind()","rack::utils#rfc2109()","rack::utils::rfc2109()","rack::utils::rfc2822()","rack::utils#rfc2822()","rack::reloader::stat#rotation()","rack::static#route_file()","rack::builder#run()","rack::handler::cgi::run()","rack::handler::fastcgi::run()","rack::handler::lsws::run()","rack::handler::mongrel::run()","rack::handler::scgi::run()","rack::handler::thin::run()","rack::handler::webrick::run()","rack::multipart::parser#rx()","rack::reloader#safe_load()","rack::reloader::stat#safe_stat()","rack::auth::abstractrequest#scheme()","rack::request#scheme()","rack::request#script_name()","rack::request#script_name=()","rack::multipart::parser#scrub_filename()","rack::utils::secure_compare()","rack::utils#secure_compare()","rack::session::abstract::id#security_matches?()","rack::utils#select_best_encoding()","rack::utils::select_best_encoding()","rack::handler::cgi::send_body()","rack::handler::fastcgi::send_body()","rack::handler::lsws::send_body()","rack::handler::cgi::send_headers()","rack::handler::fastcgi::send_headers()","rack::handler::lsws::send_headers()","rack::handler::cgi::serve()","rack::handler::fastcgi::serve()","rack::handler::lsws::serve()","rack::server#server()","rack::response::helpers#server_error?()","rack::handler::webrick#service()","rack::file#serving()","rack::request#session()","rack::session::abstract::id#session_class()","rack::session::abstract::id#session_exists?()","rack::request#session_options()","rack::session::abstract::sessionhash::set()","rack::response#set_cookie()","rack::session::abstract::id#set_cookie()","rack::utils#set_cookie_header!()","rack::utils::set_cookie_header!()","rack::session::abstract::sessionhash::set_options()","rack::session::abstract::id#set_session()","rack::session::cookie#set_session()","rack::session::memcache#set_session()","rack::session::pool#set_session()","webrick::httpresponse#setup_header()","rack::nulllogger#sev_threshold()","rack::nulllogger#sev_threshold=()","rack::deflater#should_deflate?()","rack::handler::webrick::shutdown()","rack::etag#skip_caching?()","rack::auth::digest::params::split_header_value()","rack::request#split_ip_addresses()","rack::request#ssl?()","rack::auth::digest::nonce#stale?()","rack::server::start()","rack::server#start()","rack::directory#stat()","rack::utils::status_code()","rack::utils#status_code()","rack::session::abstract::sessionhash#store()","rack::utils::okjson#strenc()","rack::mockrequest::fatalwarner#string()","rack::session::abstract::sessionhash#stringify_keys()","rack::request#strip_doublequotes()","rack::utils::okjson#strtok()","rack::utils::okjson#subst()","rack::response::helpers#successful?()","rack::utils::okjson#surrogate?()","rack::multipart::parser#tag_multipart_encoding()","rack::utils::okjson#textparse()","rack::response#to_a()","rack::builder#to_app()","rack::response#to_ary()","rack::session::abstract::sessionhash#to_hash()","rack::utils::headerhash#to_hash()","rack::utils::keyspaceconstrainedparams#to_params_hash()","rack::conditionalget#to_rfc2822()","rack::auth::digest::nonce#to_s()","rack::auth::digest::params#to_s()","rack::utils::okjson#tok()","rack::request#trace?()","rack::utils::okjson#truetok()","rack::request#trusted_proxy?()","rack::handler::try_require()","rack::utils::okjson#ucharcopy()","rack::utils::okjson#ucharenc()","rack::auth::abstracthandler#unauthorized()","rack::response::helpers#unauthorized?()","rack::utils#unescape()","rack::utils::unescape()","rack::nulllogger#unknown()","rack::request#unlink?()","rack::session::cookie#unpacked_cookie_data()","rack::response::helpers#unprocessable?()","rack::utils::okjson#unquote()","rack::session::abstract::sessionhash#update()","rack::request#update_param()","rack::request#url()","rack::builder#use()","rack::request#user_agent()","rack::auth::basic::request#username()","rack::utils::okjson#valenc()","rack::auth::basic#valid?()","rack::auth::digest::md5#valid?()","rack::auth::digest::nonce#valid?()","rack::auth::digest::md5#valid_digest?()","rack::auth::digest::md5#valid_nonce?()","rack::auth::digest::md5#valid_opaque?()","rack::handler::fastcgi::valid_options()","rack::handler::mongrel::valid_options()","rack::handler::scgi::valid_options()","rack::handler::thin::valid_options()","rack::handler::webrick::valid_options()","rack::auth::digest::md5#valid_qop?()","rack::utils::okjson#valparse()","rack::session::abstract::sessionhash#values()","rack::request#values_at()","rack::sendfile#variation()","rack::version()","rack::builder#warmup()","rack::nulllogger#warn()","rack::nulllogger#warn?()","rack::session::memcache#with_lock()","rack::session::pool#with_lock()","rack::server#wrapped_app()","rack::deflater::gzipstream#write()","rack::mockrequest::fatalwarner#write()","rack::response#write()","rack::server#write_pid()","rack::request#xhr?()","",""],"info":[["FCGI","","FCGI.html","",""],["FCGI::Stream","","FCGI/Stream.html","",""],["Rack","","Rack.html","","<p>The Rack main module, serving as a namespace for all core Rack modules and\nclasses.\n<p>All modules meant …\n"],["Rack::Auth","","Rack/Auth.html","",""],["Rack::Auth::AbstractHandler","","Rack/Auth/AbstractHandler.html","","<p>Rack::Auth::AbstractHandler implements common authentication functionality.\n<p><code>realm</code> should be set for all …\n"],["Rack::Auth::AbstractRequest","","Rack/Auth/AbstractRequest.html","",""],["Rack::Auth::Basic","","Rack/Auth/Basic.html","","<p>Rack::Auth::Basic implements HTTP Basic Authentication, as per RFC 2617.\n<p>Initialize with the Rack application …\n"],["Rack::Auth::Basic::Request","","Rack/Auth/Basic/Request.html","",""],["Rack::Auth::Digest","","Rack/Auth/Digest.html","",""],["Rack::Auth::Digest::MD5","","Rack/Auth/Digest/MD5.html","","<p>Rack::Auth::Digest::MD5 implements the MD5 algorithm version of HTTP Digest\nAuthentication, as per RFC …\n"],["Rack::Auth::Digest::Nonce","","Rack/Auth/Digest/Nonce.html","","<p>Rack::Auth::Digest::Nonce is the default nonce generator for the\nRack::Auth::Digest::MD5 authentication …\n"],["Rack::Auth::Digest::Params","","Rack/Auth/Digest/Params.html","",""],["Rack::Auth::Digest::Request","","Rack/Auth/Digest/Request.html","",""],["Rack::BodyProxy","","Rack/BodyProxy.html","",""],["Rack::Builder","","Rack/Builder.html","","<p>Rack::Builder implements a small DSL to iteratively construct Rack\napplications.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;rack/lobster&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Rack::Cascade","","Rack/Cascade.html","","<p>Rack::Cascade tries a request on several apps, and returns the first\nresponse that is not 404 or 405 …\n"],["Rack::Chunked","","Rack/Chunked.html","","<p>Middleware that applies chunked transfer encoding to response bodies when\nthe response does not include …\n"],["Rack::Chunked::Body","","Rack/Chunked/Body.html","","<p>A body wrapper that emits chunked responses\n"],["Rack::CommonLogger","","Rack/CommonLogger.html","","<p>Rack::CommonLogger forwards every request to the given <code>app</code>,\nand logs a line in the Apache common log …\n"],["Rack::ConditionalGet","","Rack/ConditionalGet.html","","<p>Middleware that enables conditional GET using If-None-Match and\nIf-Modified-Since. The application should …\n"],["Rack::Config","","Rack/Config.html","","<p>Rack::Config modifies the environment using the block given during\ninitialization.\n<p>Example:\n\n<pre>use Rack::Config ...</pre>\n"],["Rack::ContentLength","","Rack/ContentLength.html","","<p>Sets the Content-Length header on responses with fixed-length bodies.\n"],["Rack::ContentType","","Rack/ContentType.html","","<p>Sets the Content-Type header on responses which don&#39;t have one.\n<p>Builder Usage:\n\n<pre>use Rack::ContentType, ...</pre>\n"],["Rack::Deflater","","Rack/Deflater.html","","<p>This middleware enables compression of http responses.\n<p>Currently supported compression algorithms:\n\n<pre>* gzip ...</pre>\n"],["Rack::Deflater::DeflateStream","","Rack/Deflater/DeflateStream.html","",""],["Rack::Deflater::GzipStream","","Rack/Deflater/GzipStream.html","",""],["Rack::Directory","","Rack/Directory.html","","<p>Rack::Directory serves entries below the <code>root</code> given, according\nto the path info of the Rack request. …\n"],["Rack::ETag","","Rack/ETag.html","","<p>Automatically sets the ETag header on all String bodies.\n<p>The ETag header is skipped if ETag or Last-Modified …\n"],["Rack::File","","Rack/File.html","","<p>Rack::File serves files below the <code>root</code> directory given,\naccording to the path info of the Rack request. …\n"],["Rack::ForwardRequest","","Rack/ForwardRequest.html","","<p>Rack::ForwardRequest gets caught by Rack::Recursive and redirects the\ncurrent request to the app at  …\n"],["Rack::Handler","","Rack/Handler.html","","<p><strong>Handlers</strong> connect web servers with Rack.\n<p>Rack includes Handlers for Thin, WEBrick, FastCGI, CGI, SCGI and …\n"],["Rack::Handler::CGI","","Rack/Handler/CGI.html","",""],["Rack::Handler::EventedMongrel","","Rack/Handler/EventedMongrel.html","",""],["Rack::Handler::FastCGI","","Rack/Handler/FastCGI.html","",""],["Rack::Handler::LSWS","","Rack/Handler/LSWS.html","",""],["Rack::Handler::Mongrel","","Rack/Handler/Mongrel.html","",""],["Rack::Handler::SCGI","","Rack/Handler/SCGI.html","",""],["Rack::Handler::SwiftipliedMongrel","","Rack/Handler/SwiftipliedMongrel.html","",""],["Rack::Handler::Thin","","Rack/Handler/Thin.html","",""],["Rack::Handler::WEBrick","","Rack/Handler/WEBrick.html","",""],["Rack::Head","","Rack/Head.html","",""],["Rack::Lint","","Rack/Lint.html","","<p>Rack::Lint validates your application and the requests and responses\naccording to the Rack spec.\n"],["Rack::Lint::Assertion","","Rack/Lint/Assertion.html","",""],["Rack::Lint::ErrorWrapper","","Rack/Lint/ErrorWrapper.html","",""],["Rack::Lint::HijackWrapper","","Rack/Lint/HijackWrapper.html","",""],["Rack::Lint::InputWrapper","","Rack/Lint/InputWrapper.html","",""],["Rack::Lint::LintError","","Rack/Lint/LintError.html","",""],["Rack::Lobster","","Rack/Lobster.html","","<p>Paste has a Pony, Rack has a Lobster!\n"],["Rack::Lock","","Rack/Lock.html","","<p>Rack::Lock locks every request inside a mutex, so that every request will\neffectively be executed synchronously. …\n"],["Rack::Logger","","Rack/Logger.html","","<p>Sets up rack.logger to write to rack.errors stream\n"],["Rack::MethodOverride","","Rack/MethodOverride.html","",""],["Rack::Mime","","Rack/Mime.html","",""],["Rack::MockRequest","","Rack/MockRequest.html","","<p>Rack::MockRequest helps testing your Rack application without actually\nusing HTTP.\n<p>After performing a …\n"],["Rack::MockRequest::FatalWarner","","Rack/MockRequest/FatalWarner.html","",""],["Rack::MockRequest::FatalWarning","","Rack/MockRequest/FatalWarning.html","",""],["Rack::MockResponse","","Rack/MockResponse.html","","<p>Rack::MockResponse provides useful helpers for testing your apps. Usually,\nyou don&#39;t create the  …\n"],["Rack::Multipart","","Rack/Multipart.html","","<p>A multipart form data parser, adapted from IOWA.\n<p>Usually, Rack::Request#POST takes care of calling this. …\n"],["Rack::Multipart","","Rack/Multipart.html","","<p>A multipart form data parser, adapted from IOWA.\n<p>Usually, Rack::Request#POST takes care of calling this. …\n"],["Rack::Multipart::Generator","","Rack/Multipart/Generator.html","",""],["Rack::Multipart::MultipartPartLimitError","","Rack/Multipart/MultipartPartLimitError.html","",""],["Rack::Multipart::Parser","","Rack/Multipart/Parser.html","",""],["Rack::Multipart::UploadedFile","","Rack/Multipart/UploadedFile.html","",""],["Rack::NullLogger","","Rack/NullLogger.html","",""],["Rack::Recursive","","Rack/Recursive.html","","<p>Rack::Recursive allows applications called down the chain to include data\nfrom other applications (by …\n"],["Rack::Reloader","","Rack/Reloader.html","","<p>High performant source reloader\n<p>This class acts as Rack middleware.\n<p>What makes it especially suited for …\n"],["Rack::Reloader::Stat","","Rack/Reloader/Stat.html","",""],["Rack::Request","","Rack/Request.html","","<p>Rack::Request provides a convenient interface to a Rack environment.  It is\nstateless, the environment …\n"],["Rack::Response","","Rack/Response.html","","<p>Rack::Response provides a convenient interface to create a Rack response.\n<p>It allows setting of headers …\n"],["Rack::Response::Helpers","","Rack/Response/Helpers.html","",""],["Rack::RewindableInput","","Rack/RewindableInput.html","","<p>Class which can make any IO object rewindable, including non-rewindable\nones. It does this by buffering …\n"],["Rack::RewindableInput::Tempfile","","Rack/RewindableInput/Tempfile.html","","<p>Ruby&#39;s Tempfile class has a bug. Subclass it and fix it.\n"],["Rack::Runtime","","Rack/Runtime.html","","<p>Sets an “X-Runtime” response header, indicating the response time of the\nrequest, in seconds …\n"],["Rack::Sendfile","","Rack/Sendfile.html","","<p>Sendfile\n<p>The Sendfile middleware intercepts responses whose body is being served\nfrom a file and replaces …\n"],["Rack::Server","","Rack/Server.html","",""],["Rack::Server::Options","","Rack/Server/Options.html","",""],["Rack::Session","","Rack/Session.html","",""],["Rack::Session::Abstract","","Rack/Session/Abstract.html","",""],["Rack::Session::Abstract::ID","","Rack/Session/Abstract/ID.html","","<p>ID sets up a basic framework for implementing an id based sessioning\nservice. Cookies sent to the client …\n"],["Rack::Session::Abstract::SessionHash","","Rack/Session/Abstract/SessionHash.html","","<p>SessionHash is responsible to lazily load the session from store.\n"],["Rack::Session::Cookie","","Rack/Session/Cookie.html","","<p>Rack::Session::Cookie provides simple cookie based session management. By\ndefault, the session is a  …\n"],["Rack::Session::Cookie::Base64","","Rack/Session/Cookie/Base64.html","","<p>Encode session cookies as Base64\n"],["Rack::Session::Cookie::Base64::JSON","","Rack/Session/Cookie/Base64/JSON.html","","<p>N.B. Unlike other encoding methods, the contained objects must be a valid\nJSON composite type, either …\n"],["Rack::Session::Cookie::Base64::Marshal","","Rack/Session/Cookie/Base64/Marshal.html","","<p>Encode session cookies as Marshaled Base64 data\n"],["Rack::Session::Cookie::Base64::ZipJSON","","Rack/Session/Cookie/Base64/ZipJSON.html","",""],["Rack::Session::Cookie::Identity","","Rack/Session/Cookie/Identity.html","","<p>Use no encoding for session cookies\n"],["Rack::Session::Memcache","","Rack/Session/Memcache.html","","<p>Rack::Session::Memcache provides simple cookie based session management.\nSession data is stored in memcached. …\n"],["Rack::Session::Pool","","Rack/Session/Pool.html","","<p>Rack::Session::Pool provides simple cookie based session management.\nSession data is stored in a hash …\n"],["Rack::ShowExceptions","","Rack/ShowExceptions.html","","<p>Rack::ShowExceptions catches all exceptions raised from the app it wraps. \nIt shows a useful backtrace …\n"],["Rack::ShowStatus","","Rack/ShowStatus.html","","<p>Rack::ShowStatus catches all empty responses and replaces them with a site\nexplaining the error.\n<p>Additional …\n"],["Rack::Static","","Rack/Static.html","","<p>The Rack::Static middleware intercepts requests for static files\n(javascript files, images, stylesheets, …\n"],["Rack::TempfileReaper","","Rack/TempfileReaper.html","","<p>Middleware tracks and cleans Tempfiles created throughout a request (i.e.\nRack::Multipart) Ideas/strategy …\n"],["Rack::URLMap","","Rack/URLMap.html","","<p>Rack::URLMap takes a hash mapping urls or paths to apps, and dispatches\naccordingly.  Support for HTTP/1.1 …\n"],["Rack::Utils","","Rack/Utils.html","","<p>Rack::Utils contains a grab-bag of useful methods for writing web\napplications adopted from all kinds …\n"],["Rack::Utils::Context","","Rack/Utils/Context.html","","<p>Context allows the use of a compatible middleware at different points in a\nrequest handling stack. A …\n"],["Rack::Utils::HeaderHash","","Rack/Utils/HeaderHash.html","","<p>A case-insensitive Hash that preserves the original case of a header when\nset.\n"],["Rack::Utils::InvalidParameterError","","Rack/Utils/InvalidParameterError.html","","<p>InvalidParameterError is the error that is raised when incoming structural\nparameters (parsed by parse_nested_query …\n"],["Rack::Utils::KeySpaceConstrainedParams","","Rack/Utils/KeySpaceConstrainedParams.html","",""],["Rack::Utils::OkJson","","Rack/Utils/OkJson.html","","<p>Some parts adapted from golang.org/src/pkg/json/decode.go and\ngolang.org/src/pkg/utf8/utf8.go\n"],["Rack::Utils::OkJson::Error","","Rack/Utils/OkJson/Error.html","",""],["Rack::Utils::OkJson::Utf8Error","","Rack/Utils/OkJson/Utf8Error.html","",""],["Rack::Utils::ParameterTypeError","","Rack/Utils/ParameterTypeError.html","","<p>ParameterTypeError is the error that is raised when incoming structural\nparameters (parsed by parse_nested_query …\n"],["URI","","URI.html","",""],["WEBrick","","WEBrick.html","",""],["WEBrick::HTTPResponse","","WEBrick/HTTPResponse.html","","<p>This monkey patch allows for applications to perform their own chunking\nthrough WEBrick::HTTPResponse …\n"],["<<","Rack::Cascade","Rack/Cascade.html#method-i-3C-3C","(app)",""],["<<","Rack::NullLogger","Rack/NullLogger.html#method-i-3C-3C","(msg)",""],["=~","Rack::MockResponse","Rack/MockResponse.html#method-i-3D-7E","(other)",""],["A1","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-A1","(auth, password)",""],["A2","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-A2","(auth)",""],["DIR_FILE_escape","Rack::Directory","Rack/Directory.html#method-i-DIR_FILE_escape","(url, *html)","<p>Assumes url is already escaped.\n"],["GET","Rack::Request","Rack/Request.html#method-i-GET","()","<p>Returns the data received in the query string.\n"],["H","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-H","(data)",""],["KD","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-KD","(secret, data)",""],["POST","Rack::Request","Rack/Request.html#method-i-POST","()","<p>Returns the data received in the request body.\n<p>This method support both application/x-www-form-urlencoded …\n"],["[]","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-i-5B-5D","(k)",""],["[]","Rack::Request","Rack/Request.html#method-i-5B-5D","(key)","<p>shortcut for request.params\n"],["[]","Rack::Response","Rack/Response.html#method-i-5B-5D","(key)",""],["[]","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-5B-5D","(key)",""],["[]","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-5B-5D","(k)",""],["[]","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-i-5B-5D","(key)",""],["[]=","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-i-5B-5D-3D","(k, v)",""],["[]=","Rack::Request","Rack/Request.html#method-i-5B-5D-3D","(key, value)","<p>shortcut for request.params = value\n<p>Note that modifications will not be persisted in the env. Use update_param\n…\n"],["[]=","Rack::Response","Rack/Response.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-5B-5D-3D","(k, v)",""],["[]=","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-i-5B-5D-3D","(key, value)",""],["_call","Rack::Directory","Rack/Directory.html#method-i-_call","(env)",""],["_call","Rack::File","Rack/File.html#method-i-_call","(env)",""],["_call","Rack::Recursive","Rack/Recursive.html#method-i-_call","(env)",""],["_close","Rack::RewindableInput::Tempfile","Rack/RewindableInput/Tempfile.html#method-i-_close","()",""],["_rack_setup_header","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-_rack_setup_header","()",""],["abbrev","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-abbrev","(s)",""],["accept_encoding","Rack::Request","Rack/Request.html#method-i-accept_encoding","()",""],["accept_language","Rack::Request","Rack/Request.html#method-i-accept_language","()",""],["accepted?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-accepted-3F","()",""],["accepts_html?","Rack::ShowExceptions","Rack/ShowExceptions.html#method-i-accepts_html-3F","(env)",""],["add","Rack::Cascade","Rack/Cascade.html#method-i-add","(app)",""],["add","Rack::NullLogger","Rack/NullLogger.html#method-i-add","(severity, message = nil, progname = nil, &block)",""],["allowed_methods","Rack::MethodOverride","Rack/MethodOverride.html#method-i-allowed_methods","()",""],["app","Rack::Builder","Rack/Builder.html#method-c-app","(default_app = nil, &block)",""],["app","Rack::Server","Rack/Server.html#method-i-app","()",""],["applicable_rules","Rack::Static","Rack/Static.html#method-i-applicable_rules","(path)","<p>Convert HTTP header rules to HTTP headers\n"],["arrenc","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-arrenc","(a)",""],["arrparse","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-arrparse","(ts)","<p>Parses an “array” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["authorization_key","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-authorization_key","()",""],["bad_request","Rack::Auth::AbstractHandler","Rack/Auth/AbstractHandler.html#method-i-bad_request","()",""],["bad_request?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-bad_request-3F","()",""],["base_url","Rack::Request","Rack/Request.html#method-i-base_url","()",""],["basic?","Rack::Auth::Basic::Request","Rack/Auth/Basic/Request.html#method-i-basic-3F","()",""],["best_q_match","Rack::Utils","Rack/Utils.html#method-i-best_q_match","(q_value_header, available_mimes)",""],["best_q_match","Rack::Utils","Rack/Utils.html#method-c-best_q_match","(q_value_header, available_mimes)",""],["body","Rack::MockResponse","Rack/MockResponse.html#method-i-body","()",""],["body","Rack::Request","Rack/Request.html#method-i-body","()",""],["build_app","Rack::Server","Rack/Server.html#method-i-build_app","(app)",""],["build_app_and_options_from_config","Rack::Server","Rack/Server.html#method-i-build_app_and_options_from_config","()",""],["build_app_from_string","Rack::Server","Rack/Server.html#method-i-build_app_from_string","()",""],["build_multipart","Rack::Multipart","Rack/Multipart.html#method-i-build_multipart","(params, first = true)",""],["build_multipart","Rack::Multipart","Rack/Multipart.html#method-i-build_multipart","(params, first = true)",""],["build_nested_query","Rack::Utils","Rack/Utils.html#method-i-build_nested_query","(value, prefix = nil)",""],["build_nested_query","Rack::Utils","Rack/Utils.html#method-c-build_nested_query","(value, prefix = nil)",""],["build_query","Rack::Utils","Rack/Utils.html#method-i-build_query","(params)",""],["build_query","Rack::Utils","Rack/Utils.html#method-c-build_query","(params)",""],["byte_ranges","Rack::Utils","Rack/Utils.html#method-c-byte_ranges","(env, size)","<p>Parses the “Range:” header, if present, into an array of Range objects.\nReturns nil if the …\n"],["byte_ranges","Rack::Utils","Rack/Utils.html#method-i-byte_ranges","(env, size)","<p>Parses the “Range:” header, if present, into an array of Range objects.\nReturns nil if the …\n"],["bytesize","Rack::Utils","Rack/Utils.html#method-c-bytesize","(string)",""],["bytesize","Rack::Utils","Rack/Utils.html#method-i-bytesize","(string)",""],["call","Rack::Auth::Basic","Rack/Auth/Basic.html#method-i-call","(env)",""],["call","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-call","(env)",""],["call","Rack::Builder","Rack/Builder.html#method-i-call","(env)",""],["call","Rack::Cascade","Rack/Cascade.html#method-i-call","(env)",""],["call","Rack::Chunked","Rack/Chunked.html#method-i-call","(env)",""],["call","Rack::CommonLogger","Rack/CommonLogger.html#method-i-call","(env)",""],["call","Rack::ConditionalGet","Rack/ConditionalGet.html#method-i-call","(env)",""],["call","Rack::Config","Rack/Config.html#method-i-call","(env)",""],["call","Rack::ContentLength","Rack/ContentLength.html#method-i-call","(env)",""],["call","Rack::ContentType","Rack/ContentType.html#method-i-call","(env)",""],["call","Rack::Deflater","Rack/Deflater.html#method-i-call","(env)",""],["call","Rack::Directory","Rack/Directory.html#method-i-call","(env)",""],["call","Rack::ETag","Rack/ETag.html#method-i-call","(env)",""],["call","Rack::File","Rack/File.html#method-i-call","(env)",""],["call","Rack::Head","Rack/Head.html#method-i-call","(env)",""],["call","Rack::Lobster","Rack/Lobster.html#method-i-call","(env)",""],["call","Rack::Lock","Rack/Lock.html#method-i-call","(env)",""],["call","Rack::Logger","Rack/Logger.html#method-i-call","(env)",""],["call","Rack::MethodOverride","Rack/MethodOverride.html#method-i-call","(env)",""],["call","Rack::NullLogger","Rack/NullLogger.html#method-i-call","(env)",""],["call","Rack::Recursive","Rack/Recursive.html#method-i-call","(env)",""],["call","Rack::Reloader","Rack/Reloader.html#method-i-call","(env)",""],["call","Rack::Runtime","Rack/Runtime.html#method-i-call","(env)",""],["call","Rack::Sendfile","Rack/Sendfile.html#method-i-call","(env)",""],["call","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-call","(env)",""],["call","Rack::ShowExceptions","Rack/ShowExceptions.html#method-i-call","(env)",""],["call","Rack::ShowStatus","Rack/ShowStatus.html#method-i-call","(env)",""],["call","Rack::Static","Rack/Static.html#method-i-call","(env)",""],["call","Rack::TempfileReaper","Rack/TempfileReaper.html#method-i-call","(env)",""],["call","Rack::URLMap","Rack/URLMap.html#method-i-call","(env)",""],["call","Rack::Utils::Context","Rack/Utils/Context.html#method-i-call","(env)",""],["can_serve","Rack::Static","Rack/Static.html#method-i-can_serve","(path)",""],["casecmp?","Rack::URLMap","Rack/URLMap.html#method-i-casecmp-3F","(v1, v2)",""],["challenge","Rack::Auth::Basic","Rack/Auth/Basic.html#method-i-challenge","()",""],["challenge","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-challenge","(hash = {})",""],["check_forbidden","Rack::Directory","Rack/Directory.html#method-i-check_forbidden","()",""],["check_pid!","Rack::Server","Rack/Server.html#method-i-check_pid-21","()",""],["chunkable_version?","Rack::Chunked","Rack/Chunked.html#method-i-chunkable_version-3F","(ver)","<p>pre-HTTP/1.0 (informally “HTTP/0.9”) HTTP requests did not have a version\n(nor response headers) …\n"],["clean_path_info","Rack::Utils","Rack/Utils.html#method-c-clean_path_info","(path_info)",""],["clean_path_info","Rack::Utils","Rack/Utils.html#method-i-clean_path_info","(path_info)",""],["clear","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-clear","()",""],["client_error?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-client_error-3F","()",""],["close","Rack::BodyProxy","Rack/BodyProxy.html#method-i-close","()",""],["close","Rack::Chunked::Body","Rack/Chunked/Body.html#method-i-close","()",""],["close","Rack::Deflater::DeflateStream","Rack/Deflater/DeflateStream.html#method-i-close","()",""],["close","Rack::Deflater::GzipStream","Rack/Deflater/GzipStream.html#method-i-close","()",""],["close","Rack::NullLogger","Rack/NullLogger.html#method-i-close","()",""],["close","Rack::Response","Rack/Response.html#method-i-close","()",""],["close","Rack::RewindableInput","Rack/RewindableInput.html#method-i-close","()","<p>Closes this RewindableInput object without closing the originally wrapped\nIO oject. Cleans up any temporary …\n"],["closed?","Rack::BodyProxy","Rack/BodyProxy.html#method-i-closed-3F","()",""],["commit_session","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-commit_session","(env, status, headers, body)","<p>Acquires the session from the environment and the session id from the\nsession options and passes them …\n"],["commit_session?","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-commit_session-3F","(env, session, options)","<p>Session should be committed if it was loaded, any of specific options like\n:renew, :drop or :expire_after …\n"],["content_charset","Rack::Request","Rack/Request.html#method-i-content_charset","()","<p>The character set of the request body if a “charset” media type parameter\nwas given, or nil …\n"],["content_for_other","Rack::Multipart::Generator","Rack/Multipart/Generator.html#method-i-content_for_other","(file, name)",""],["content_for_tempfile","Rack::Multipart::Generator","Rack/Multipart/Generator.html#method-i-content_for_tempfile","(io, file, name)",""],["content_length","Rack::Request","Rack/Request.html#method-i-content_length","()",""],["content_length","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-content_length","()",""],["content_type","Rack::Request","Rack/Request.html#method-i-content_type","()",""],["content_type","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-content_type","()",""],["context","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-context","(env, app=@app)",""],["context","Rack::Utils::Context","Rack/Utils/Context.html#method-i-context","(env, app=@app)",""],["cookies","Rack::Request","Rack/Request.html#method-i-cookies","()",""],["correct_uri?","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-correct_uri-3F","()",""],["create","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-c-create","(env)",""],["created?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-created-3F","()",""],["credentials","Rack::Auth::Basic::Request","Rack/Auth/Basic/Request.html#method-i-credentials","()",""],["current_session_id","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-current_session_id","(env)","<p>Returns the current session id from the SessionHash.\n"],["daemonize_app","Rack::Server","Rack/Server.html#method-i-daemonize_app","()",""],["datetime_format","Rack::NullLogger","Rack/NullLogger.html#method-i-datetime_format","()",""],["datetime_format=","Rack::NullLogger","Rack/NullLogger.html#method-i-datetime_format-3D","(datetime_format)",""],["debug","Rack::NullLogger","Rack/NullLogger.html#method-i-debug","(progname = nil, &block)",""],["debug?","Rack::NullLogger","Rack/NullLogger.html#method-i-debug-3F","()",""],["decode","Rack::Session::Cookie::Base64","Rack/Session/Cookie/Base64.html#method-i-decode","(str)",""],["decode","Rack::Session::Cookie::Base64::JSON","Rack/Session/Cookie/Base64/JSON.html#method-i-decode","(str)",""],["decode","Rack::Session::Cookie::Base64::Marshal","Rack/Session/Cookie/Base64/Marshal.html#method-i-decode","(str)",""],["decode","Rack::Session::Cookie::Base64::ZipJSON","Rack/Session/Cookie/Base64/ZipJSON.html#method-i-decode","(str)",""],["decode","Rack::Session::Cookie::Identity","Rack/Session/Cookie/Identity.html#method-i-decode","(str)",""],["decode","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-decode","(s)","<p>Decodes a json document in string s and returns the corresponding ruby\nvalue. String s must be valid …\n"],["default","Rack::Handler","Rack/Handler.html#method-c-default","(options = {})",""],["default_middleware_by_environment","Rack::Server","Rack/Server.html#method-i-default_middleware_by_environment","()",""],["default_options","Rack::Server","Rack/Server.html#method-i-default_options","()",""],["delete","Rack::MockRequest","Rack/MockRequest.html#method-i-delete","(uri, opts={})",""],["delete","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-delete","(key)",""],["delete","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-delete","(k)",""],["delete?","Rack::Request","Rack/Request.html#method-i-delete-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type DELETE\n"],["delete_cookie","Rack::Response","Rack/Response.html#method-i-delete_cookie","(key, value={})",""],["delete_cookie_header!","Rack::Utils","Rack/Utils.html#method-c-delete_cookie_header-21","(header, key, value = {})",""],["delete_cookie_header!","Rack::Utils","Rack/Utils.html#method-i-delete_cookie_header-21","(header, key, value = {})",""],["delete_param","Rack::Request","Rack/Request.html#method-i-delete_param","(k)","<p>Destructively delete a parameter, whether it&#39;s in GET or POST. Returns\nthe value of the deleted parameter. …\n"],["dequote","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-c-dequote","(str)",""],["destroy","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-destroy","()",""],["destroy_session","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-destroy_session","(env, sid, options)","<p>All thread safety and session destroy procedures should occur here. Should\nreturn a new session id or …\n"],["destroy_session","Rack::Session::Cookie","Rack/Session/Cookie.html#method-i-destroy_session","(env, session_id, options)",""],["destroy_session","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-destroy_session","(env, session_id, options)",""],["destroy_session","Rack::Session::Pool","Rack/Session/Pool.html#method-i-destroy_session","(env, session_id, options)",""],["digest","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-digest","(auth, password)",""],["digest","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-digest","()",""],["digest?","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-digest-3F","()",""],["digest_body","Rack::ETag","Rack/ETag.html#method-i-digest_body","(body)",""],["digest_match?","Rack::Session::Cookie","Rack/Session/Cookie.html#method-i-digest_match-3F","(data, digest)",""],["dump","Rack::Multipart::Generator","Rack/Multipart/Generator.html#method-i-dump","()",""],["dump_exception","Rack::ShowExceptions","Rack/ShowExceptions.html#method-i-dump_exception","(exception)",""],["each","Rack::BodyProxy","Rack/BodyProxy.html#method-i-each","(*args, &block)","<p>N.B. This method is a special case to address the bug described by #434. We\nare applying this special …\n"],["each","Rack::Chunked::Body","Rack/Chunked/Body.html#method-i-each","()",""],["each","Rack::Deflater::DeflateStream","Rack/Deflater/DeflateStream.html#method-i-each","()",""],["each","Rack::Deflater::GzipStream","Rack/Deflater/GzipStream.html#method-i-each","(&block)",""],["each","Rack::Directory","Rack/Directory.html#method-i-each","()",""],["each","Rack::File","Rack/File.html#method-i-each","()",""],["each","Rack::Response","Rack/Response.html#method-i-each","(&callback)",""],["each","Rack::RewindableInput","Rack/RewindableInput.html#method-i-each","(&block)",""],["each","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-each","(&block)",""],["each","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-each","()",""],["eat","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-eat","(typ, ts)",""],["empty?","Rack::MockResponse","Rack/MockResponse.html#method-i-empty-3F","()",""],["empty?","Rack::Response","Rack/Response.html#method-i-empty-3F","()",""],["empty?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-empty-3F","()",""],["encode","Rack::Session::Cookie::Base64","Rack/Session/Cookie/Base64.html#method-i-encode","(str)",""],["encode","Rack::Session::Cookie::Base64::JSON","Rack/Session/Cookie/Base64/JSON.html#method-i-encode","(obj)",""],["encode","Rack::Session::Cookie::Base64::Marshal","Rack/Session/Cookie/Base64/Marshal.html#method-i-encode","(str)",""],["encode","Rack::Session::Cookie::Base64::ZipJSON","Rack/Session/Cookie/Base64/ZipJSON.html#method-i-encode","(obj)",""],["encode","Rack::Session::Cookie::Identity","Rack/Session/Cookie/Identity.html#method-i-encode","(str)",""],["encode","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-encode","(x)","<p>Encodes x into a json text. It may contain only Array, Hash, String,\nNumeric, true, false, nil. (Note, …\n"],["entity_not_found","Rack::Directory","Rack/Directory.html#method-i-entity_not_found","()",""],["env_for","Rack::MockRequest","Rack/MockRequest.html#method-c-env_for","(uri=\"\", opts={})","<p>Return the Rack environment used for a request to <code>uri</code>.\n"],["error","Rack::NullLogger","Rack/NullLogger.html#method-i-error","(progname = nil, &block)",""],["error?","Rack::NullLogger","Rack/NullLogger.html#method-i-error-3F","()",""],["escape","Rack::Utils","Rack/Utils.html#method-i-escape","(s)","<p>URI escapes. (CGI style space to +)\n"],["escape","Rack::Utils","Rack/Utils.html#method-c-escape","(s)","<p>URI escapes. (CGI style space to +)\n"],["escape_html","Rack::Utils","Rack/Utils.html#method-i-escape_html","(string)","<p>Escape ampersands, brackets and quotes to their HTML/XML entities.\n"],["escape_html","Rack::Utils","Rack/Utils.html#method-c-escape_html","(string)","<p>Escape ampersands, brackets and quotes to their HTML/XML entities.\n"],["escape_path","Rack::Utils","Rack/Utils.html#method-c-escape_path","(s)","<p>Like URI escaping, but with %20 instead of +. Strictly speaking this is\ntrue URI escaping.\n"],["escape_path","Rack::Utils","Rack/Utils.html#method-i-escape_path","(s)","<p>Like URI escaping, but with %20 instead of +. Strictly speaking this is\ntrue URI escaping.\n"],["etag_body?","Rack::ETag","Rack/ETag.html#method-i-etag_body-3F","(body)",""],["etag_matches?","Rack::ConditionalGet","Rack/ConditionalGet.html#method-i-etag_matches-3F","(none_match, headers)",""],["etag_status?","Rack::ETag","Rack/ETag.html#method-i-etag_status-3F","(status)",""],["exists?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-exists-3F","()",""],["extract_content_length","Rack::CommonLogger","Rack/CommonLogger.html#method-i-extract_content_length","(headers)",""],["extract_session_id","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-extract_session_id","(env)","<p>Extract session id from request object.\n"],["extract_session_id","Rack::Session::Cookie","Rack/Session/Cookie.html#method-i-extract_session_id","(env)",""],["fail","Rack::File","Rack/File.html#method-i-fail","(status, body, headers = {})",""],["falsetok","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-falsetok","(s)",""],["fast_forward_to_first_boundary","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-fast_forward_to_first_boundary","()",""],["fatal","Rack::NullLogger","Rack/NullLogger.html#method-i-fatal","(progname = nil, &block)",""],["fatal?","Rack::NullLogger","Rack/NullLogger.html#method-i-fatal-3F","()",""],["fetch","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-fetch","(key)",""],["figure_path","Rack::Reloader::Stat","Rack/Reloader/Stat.html#method-i-figure_path","(file, paths)","<p>Takes a relative or absolute <code>file</code> name, a couple possible\n<code>paths</code> that the <code>file</code> might reside in. Returns …\n"],["filesize","Rack::File","Rack/File.html#method-i-filesize","()",""],["filesize_format","Rack::Directory","Rack/Directory.html#method-i-filesize_format","(int)",""],["filesystem_has_posix_semantics?","Rack::RewindableInput","Rack/RewindableInput.html#method-i-filesystem_has_posix_semantics-3F","()",""],["find","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-c-find","(env)",""],["finish","Rack::Response","Rack/Response.html#method-i-finish","(&block)",""],["flattened_params","Rack::Multipart::Generator","Rack/Multipart/Generator.html#method-i-flattened_params","()",""],["flush","Rack::MockRequest::FatalWarner","Rack/MockRequest/FatalWarner.html#method-i-flush","()",""],["forbidden?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-forbidden-3F","()",""],["force_options?","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-force_options-3F","(options)",""],["forced_session_update?","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-forced_session_update-3F","(session, options)",""],["form_data?","Rack::Request","Rack/Request.html#method-i-form_data-3F","()","<p>Determine whether the request body contains form-data by checking the\nrequest Content-Type for one of …\n"],["formatter","Rack::NullLogger","Rack/NullLogger.html#method-i-formatter","()",""],["formatter=","Rack::NullLogger","Rack/NullLogger.html#method-i-formatter-3D","(formatter)",""],["fresh?","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-fresh-3F","()",""],["fresh?","Rack::ConditionalGet","Rack/ConditionalGet.html#method-i-fresh-3F","(env, headers)",""],["full_boundary","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-full_boundary","()",""],["fullpath","Rack::Request","Rack/Request.html#method-i-fullpath","()",""],["generate_hmac","Rack::Session::Cookie","Rack/Session/Cookie.html#method-i-generate_hmac","(data, secret)",""],["generate_map","Rack::Builder","Rack/Builder.html#method-i-generate_map","(default_app, mapping)",""],["generate_sid","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-generate_sid","(secure = @sid_secure)","<p>Generate a new session id using Ruby #rand.  The size of the session id is\ncontrolled by the :sidbits …\n"],["generate_sid","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-generate_sid","()",""],["generate_sid","Rack::Session::Pool","Rack/Session/Pool.html#method-i-generate_sid","()",""],["get","Rack::Handler","Rack/Handler.html#method-c-get","(server)",""],["get","Rack::MockRequest","Rack/MockRequest.html#method-i-get","(uri, opts={})",""],["get?","Rack::Request","Rack/Request.html#method-i-get-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type GET\n"],["get_current_head_and_filename_and_content_type_and_name_and_body","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-get_current_head_and_filename_and_content_type_and_name_and_body","()",""],["get_data","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-get_data","(filename, body, content_type, name, head)",""],["get_filename","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-get_filename","(head)",""],["get_session","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-get_session","(env, sid)","<p>All thread safety and session retrieval procedures should occur here.\nShould return [session_id, session]. …\n"],["get_session","Rack::Session::Cookie","Rack/Session/Cookie.html#method-i-get_session","(env, sid)",""],["get_session","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-get_session","(env, sid)",""],["get_session","Rack::Session::Pool","Rack/Session/Pool.html#method-i-get_session","(env, sid)",""],["gets","Rack::RewindableInput","Rack/RewindableInput.html#method-i-gets","()",""],["handler_opts","Rack::Server::Options","Rack/Server/Options.html#method-i-handler_opts","(options)",""],["has_key?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-has_key-3F","(key)",""],["has_key?","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-has_key-3F","(k)",""],["head","Rack::MockRequest","Rack/MockRequest.html#method-i-head","(uri, opts={})",""],["head?","Rack::Request","Rack/Request.html#method-i-head-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type HEAD\n"],["hexdec4","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-hexdec4","(s)",""],["host","Rack::Request","Rack/Request.html#method-i-host","()",""],["host_with_port","Rack::Request","Rack/Request.html#method-i-host_with_port","()",""],["i_m_a_teapot?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-i_m_a_teapot-3F","()",""],["id","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-id","()",""],["include","Rack::Recursive","Rack/Recursive.html#method-i-include","(env, path)",""],["include?","Rack::Cascade","Rack/Cascade.html#method-i-include-3F","(app)",""],["include?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-include-3F","(header)",""],["include?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-include-3F","(key)",""],["include?","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-include-3F","(k)",""],["info","Rack::NullLogger","Rack/NullLogger.html#method-i-info","(progname = nil, &block)",""],["info?","Rack::NullLogger","Rack/NullLogger.html#method-i-info-3F","()",""],["informational?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-informational-3F","()",""],["initialize_sid","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-initialize_sid","()",""],["inspect","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-inspect","()",""],["invalid?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-invalid-3F","()",""],["ip","Rack::Request","Rack/Request.html#method-i-ip","()",""],["key?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-key-3F","(key)",""],["key?","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-key-3F","(k)",""],["key?","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-i-key-3F","(key)",""],["keyenc","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-keyenc","(k)",""],["keys","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-keys","()",""],["level","Rack::NullLogger","Rack/NullLogger.html#method-i-level","()",""],["level=","Rack::NullLogger","Rack/NullLogger.html#method-i-level-3D","(level)",""],["lex","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-lex","(s)","<p>Scans s and returns a list of json tokens, excluding white space (as\ndefined in RFC 4627).\n"],["link?","Rack::Request","Rack/Request.html#method-i-link-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type LINK\n"],["list_directory","Rack::Directory","Rack/Directory.html#method-i-list_directory","()",""],["list_path","Rack::Directory","Rack/Directory.html#method-i-list_path","()","<p>TODO: add correct response if not readable, not sure if 404 is the best\n\n<pre>option</pre>\n"],["load!","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-load-21","()",""],["load_for_read!","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-load_for_read-21","()",""],["load_for_write!","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-load_for_write-21","()",""],["load_session","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-load_session","(env)","<p>Extracts the session id from provided cookies and passes it and the\nenvironment to #get_session.\n"],["loaded?","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-loaded-3F","()",""],["loaded_session?","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-loaded_session-3F","(session)",""],["local_path","Rack::Multipart::UploadedFile","Rack/Multipart/UploadedFile.html#method-i-local_path","()",""],["location","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-location","()",""],["log","Rack::CommonLogger","Rack/CommonLogger.html#method-i-log","(env, status, header, began_at)",""],["logger","Rack::Request","Rack/Request.html#method-i-logger","()",""],["logging_middleware","Rack::Server","Rack/Server.html#method-i-logging_middleware","()",""],["make_rewindable","Rack::RewindableInput","Rack/RewindableInput.html#method-i-make_rewindable","()",""],["map","Rack::Builder","Rack/Builder.html#method-i-map","(path, &block)","<p>Creates a route within the application.\n\n<pre>Rack::Builder.app do\n  map &#39;/&#39; do\n    run Heartbeat\n  end\nend</pre>\n"],["map_accel_path","Rack::Sendfile","Rack/Sendfile.html#method-i-map_accel_path","(env, path)",""],["match","Rack::MockResponse","Rack/MockResponse.html#method-i-match","(other)",""],["match?","Rack::Mime","Rack/Mime.html#method-i-match-3F","(value, matcher)","<p>Returns true if the given value is a mime match for the given mime match\nspecification, false otherwise. …\n"],["match?","Rack::Mime","Rack/Mime.html#method-c-match-3F","(value, matcher)","<p>Returns true if the given value is a mime match for the given mime match\nspecification, false otherwise. …\n"],["md5","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-md5","(data)",""],["media_type","Rack::Request","Rack/Request.html#method-i-media_type","()","<p>The media type (type/subtype) portion of the CONTENT_TYPE header without\nany media type parameters.  …\n"],["media_type_params","Rack::Request","Rack/Request.html#method-i-media_type_params","()","<p>The media type parameters provided in CONTENT_TYPE as a Hash, or an empty\nHash if no CONTENT_TYPE or …\n"],["member?","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-member-3F","(k)",""],["merge","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-merge","(other)",""],["merge!","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-merge-21","(hash)",""],["merge!","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-merge-21","(other)",""],["method","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-method","()",""],["method_missing","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-method_missing","(sym, *args)",""],["method_missing","Rack::BodyProxy","Rack/BodyProxy.html#method-i-method_missing","(*args, &block)",""],["method_not_allowed?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-method_not_allowed-3F","()",""],["method_override","Rack::MethodOverride","Rack/MethodOverride.html#method-i-method_override","(env)",""],["method_override_param","Rack::MethodOverride","Rack/MethodOverride.html#method-i-method_override_param","(req)",""],["middleware","Rack::Server","Rack/Server.html#method-i-middleware","()",""],["mime_type","Rack::File","Rack/File.html#method-i-mime_type","()","<p>The MIME type for the contents of the file located at @path\n"],["mime_type","Rack::Mime","Rack/Mime.html#method-c-mime_type","(ext, fallback='application/octet-stream')","<p>Returns String with mime type if found, otherwise use\n<code>fallback</code>. <code>ext</code> should be filename extension in the\n…\n"],["mime_type","Rack::Mime","Rack/Mime.html#method-i-mime_type","(ext, fallback='application/octet-stream')","<p>Returns String with mime type if found, otherwise use\n<code>fallback</code>. <code>ext</code> should be filename extension in the\n…\n"],["modified_since?","Rack::ConditionalGet","Rack/ConditionalGet.html#method-i-modified_since-3F","(modified_since, headers)",""],["multipart?","Rack::Multipart::Generator","Rack/Multipart/Generator.html#method-i-multipart-3F","()",""],["new","Rack::Auth::AbstractHandler","Rack/Auth/AbstractHandler.html#method-c-new","(app, realm=nil, &authenticator)",""],["new","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-c-new","(env)",""],["new","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-c-new","(app, realm=nil, opaque=nil, &authenticator)",""],["new","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-c-new","(timestamp = Time.now, given_digest = nil)",""],["new","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-c-new","()",""],["new","Rack::BodyProxy","Rack/BodyProxy.html#method-c-new","(body, &block)",""],["new","Rack::Builder","Rack/Builder.html#method-c-new","(default_app = nil,&block)",""],["new","Rack::Cascade","Rack/Cascade.html#method-c-new","(apps, catch=[404, 405])",""],["new","Rack::Chunked","Rack/Chunked.html#method-c-new","(app)",""],["new","Rack::Chunked::Body","Rack/Chunked/Body.html#method-c-new","(body)",""],["new","Rack::CommonLogger","Rack/CommonLogger.html#method-c-new","(app, logger=nil)",""],["new","Rack::ConditionalGet","Rack/ConditionalGet.html#method-c-new","(app)",""],["new","Rack::Config","Rack/Config.html#method-c-new","(app, &block)",""],["new","Rack::ContentLength","Rack/ContentLength.html#method-c-new","(app)",""],["new","Rack::ContentType","Rack/ContentType.html#method-c-new","(app, content_type = \"text/html\")",""],["new","Rack::Deflater","Rack/Deflater.html#method-c-new","(app, options = {})","<p>Creates Rack::Deflater middleware.\n<p>app &mdash; rack app instance\n<p>options &mdash; hash of deflater options, i.e. &#39;if&#39; …\n"],["new","Rack::Deflater::DeflateStream","Rack/Deflater/DeflateStream.html#method-c-new","(body)",""],["new","Rack::Deflater::GzipStream","Rack/Deflater/GzipStream.html#method-c-new","(body, mtime)",""],["new","Rack::Directory","Rack/Directory.html#method-c-new","(root, app=nil)",""],["new","Rack::ETag","Rack/ETag.html#method-c-new","(app, no_cache_control = nil, cache_control = DEFAULT_CACHE_CONTROL)",""],["new","Rack::File","Rack/File.html#method-c-new","(root, headers={}, default_mime = 'text/plain')",""],["new","Rack::ForwardRequest","Rack/ForwardRequest.html#method-c-new","(url, env={})",""],["new","Rack::Handler::Mongrel","Rack/Handler/Mongrel.html#method-c-new","(app)",""],["new","Rack::Handler::SCGI","Rack/Handler/SCGI.html#method-c-new","(settings = {})",""],["new","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-c-new","(server, app)",""],["new","Rack::Head","Rack/Head.html#method-c-new","(app)","<p>Rack::Head returns an empty body for all HEAD requests. It leaves all other\nrequests unchanged.\n"],["new","Rack::Lint","Rack/Lint.html#method-c-new","(app)",""],["new","Rack::Lock","Rack/Lock.html#method-c-new","(app, mutex = Mutex.new)",""],["new","Rack::Logger","Rack/Logger.html#method-c-new","(app, level = ::Logger::INFO)",""],["new","Rack::MethodOverride","Rack/MethodOverride.html#method-c-new","(app)",""],["new","Rack::MockRequest","Rack/MockRequest.html#method-c-new","(app)",""],["new","Rack::MockResponse","Rack/MockResponse.html#method-c-new","(status, headers, body, errors=StringIO.new(\"\"))",""],["new","Rack::Multipart::Generator","Rack/Multipart/Generator.html#method-c-new","(params, first = true)",""],["new","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-c-new","(boundary, io, content_length, env, tempfile, bufsize)",""],["new","Rack::Multipart::UploadedFile","Rack/Multipart/UploadedFile.html#method-c-new","(path, content_type = \"text/plain\", binary = false)",""],["new","Rack::NullLogger","Rack/NullLogger.html#method-c-new","(app)",""],["new","Rack::Recursive","Rack/Recursive.html#method-c-new","(app)",""],["new","Rack::Reloader","Rack/Reloader.html#method-c-new","(app, cooldown = 10, backend = Stat)",""],["new","Rack::Request","Rack/Request.html#method-c-new","(env)",""],["new","Rack::Response","Rack/Response.html#method-c-new","(body=[], status=200, header={})",""],["new","Rack::RewindableInput","Rack/RewindableInput.html#method-c-new","(io)",""],["new","Rack::Runtime","Rack/Runtime.html#method-c-new","(app, name = nil)",""],["new","Rack::Sendfile","Rack/Sendfile.html#method-c-new","(app, variation=nil, mappings=[])",""],["new","Rack::Server","Rack/Server.html#method-c-new","(options = nil)","<p>Options may include:\n<p>:app\n\n<pre>a rack application to run (overrides :config)</pre>\n"],["new","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-c-new","(app, options={})",""],["new","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-c-new","(store, env)",""],["new","Rack::Session::Cookie","Rack/Session/Cookie.html#method-c-new","(app, options={})",""],["new","Rack::Session::Memcache","Rack/Session/Memcache.html#method-c-new","(app, options={})",""],["new","Rack::Session::Pool","Rack/Session/Pool.html#method-c-new","(app, options={})",""],["new","Rack::ShowExceptions","Rack/ShowExceptions.html#method-c-new","(app)",""],["new","Rack::ShowStatus","Rack/ShowStatus.html#method-c-new","(app)",""],["new","Rack::Static","Rack/Static.html#method-c-new","(app, options={})",""],["new","Rack::TempfileReaper","Rack/TempfileReaper.html#method-c-new","(app)",""],["new","Rack::URLMap","Rack/URLMap.html#method-c-new","(map = {})",""],["new","Rack::Utils::Context","Rack/Utils/Context.html#method-c-new","(app_f, app_r)",""],["new","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-c-new","(hash={})",""],["new","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-c-new","(hash={})",""],["new","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-c-new","(limit = Utils.key_space_limit)",""],["new_from_string","Rack::Builder","Rack/Builder.html#method-c-new_from_string","(builder_script, file=\"(rackup)\")",""],["nibble","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-nibble","(c)",""],["nonce","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-nonce","()",""],["normalize_params","Rack::Utils","Rack/Utils.html#method-i-normalize_params","(params, name, v = nil)","<p>normalize_params recursively expands parameters into structural types. If\nthe structural types represented …\n"],["normalize_params","Rack::Utils","Rack/Utils.html#method-c-normalize_params","(params, name, v = nil)","<p>normalize_params recursively expands parameters into structural types. If\nthe structural types represented …\n"],["not_found?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-not_found-3F","()",""],["nulltok","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-nulltok","(s)",""],["numenc","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-numenc","(x)",""],["numtok","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-numtok","(s)",""],["objenc","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-objenc","(x)",""],["objparse","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-objparse","(ts)","<p>Parses an “object” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["ok?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-ok-3F","()",""],["opt_parser","Rack::Server","Rack/Server.html#method-i-opt_parser","()",""],["options","Rack::MockRequest","Rack/MockRequest.html#method-i-options","(uri, opts={})",""],["options","Rack::Server","Rack/Server.html#method-i-options","()",""],["options","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-options","()",""],["options?","Rack::Request","Rack/Request.html#method-i-options-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type OPTIONS\n"],["overwrite_file_path","Rack::Static","Rack/Static.html#method-i-overwrite_file_path","(path)",""],["pairparse","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-pairparse","(ts)","<p>Parses a “member” in the sense of RFC 4627. Returns the parsed values and\nany trailing tokens. …\n"],["params","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-params","()",""],["params","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-params","(hash = {})",""],["params","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-params","()",""],["params","Rack::Request","Rack/Request.html#method-i-params","()","<p>The union of GET and POST data.\n<p>Note that modifications will not be persisted in the env. Use update_param\n…\n"],["params_hash_type?","Rack::Utils","Rack/Utils.html#method-i-params_hash_type-3F","(obj)",""],["params_hash_type?","Rack::Utils","Rack/Utils.html#method-c-params_hash_type-3F","(obj)",""],["parse","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-c-parse","(string)",""],["parse","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-c-parse","(str)",""],["parse","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-parse","()",""],["parse!","Rack::Server::Options","Rack/Server/Options.html#method-i-parse-21","(args)",""],["parse_file","Rack::Builder","Rack/Builder.html#method-c-parse_file","(config, opts = Server::Options.new)",""],["parse_http_accept_header","Rack::Request","Rack/Request.html#method-i-parse_http_accept_header","(header)",""],["parse_multipart","Rack::Multipart","Rack/Multipart.html#method-i-parse_multipart","(env)",""],["parse_multipart","Rack::Multipart","Rack/Multipart.html#method-i-parse_multipart","(env)",""],["parse_multipart","Rack::Request","Rack/Request.html#method-i-parse_multipart","(env)",""],["parse_nested_query","Rack::Utils","Rack/Utils.html#method-i-parse_nested_query","(qs, d = nil)","<p>parse_nested_query expands a query string into structural types. Supported\ntypes are Arrays, Hashes and …\n"],["parse_nested_query","Rack::Utils","Rack/Utils.html#method-c-parse_nested_query","(qs, d = nil)","<p>parse_nested_query expands a query string into structural types. Supported\ntypes are Arrays, Hashes and …\n"],["parse_options","Rack::Server","Rack/Server.html#method-i-parse_options","(args)",""],["parse_query","Rack::Request","Rack/Request.html#method-i-parse_query","(qs)",""],["parse_query","Rack::Utils","Rack/Utils.html#method-i-parse_query","(qs, d = nil, &unescaper)","<p>Stolen from Mongrel, with some small modifications: Parses a query string\nby breaking it up at the &#39;&amp;&#39; …\n"],["parse_query","Rack::Utils","Rack/Utils.html#method-c-parse_query","(qs, d = nil, &unescaper)","<p>Stolen from Mongrel, with some small modifications: Parses a query string\nby breaking it up at the &#39;&amp;&#39; …\n"],["parse_uri_rfc2396","Rack::MockRequest","Rack/MockRequest.html#method-c-parse_uri_rfc2396","(uri)","<p>For historical reasons, we&#39;re pinning to RFC 2396. It&#39;s easier for\nusers and we get support from …\n"],["parseable_data?","Rack::Request","Rack/Request.html#method-i-parseable_data-3F","()","<p>Determine whether the request body contains data by checking the request\nmedia_type against registered …\n"],["parts","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-parts","()",""],["passwords_hashed?","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-passwords_hashed-3F","()",""],["patch","Rack::MockRequest","Rack/MockRequest.html#method-i-patch","(uri, opts={})",""],["patch?","Rack::Request","Rack/Request.html#method-i-patch-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type PATCH\n"],["path","Rack::Multipart::UploadedFile","Rack/Multipart/UploadedFile.html#method-i-path","()",""],["path","Rack::Request","Rack/Request.html#method-i-path","()",""],["path_info","Rack::Request","Rack/Request.html#method-i-path_info","()",""],["path_info=","Rack::Request","Rack/Request.html#method-i-path_info-3D","(s)",""],["persistent_session_id!","Rack::Session::Cookie","Rack/Session/Cookie.html#method-i-persistent_session_id-21","(data, sid=nil)",""],["pick","Rack::Handler","Rack/Handler.html#method-c-pick","(server_names)","<p>Select first available Rack handler given an `Array` of server names.\nRaises `LoadError` if no handler …\n"],["pidfile_process_status","Rack::Server","Rack/Server.html#method-i-pidfile_process_status","()",""],["port","Rack::Request","Rack/Request.html#method-i-port","()",""],["post","Rack::MockRequest","Rack/MockRequest.html#method-i-post","(uri, opts={})",""],["post?","Rack::Request","Rack/Request.html#method-i-post-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type POST\n"],["prefers_plaintext?","Rack::ShowExceptions","Rack/ShowExceptions.html#method-i-prefers_plaintext-3F","(env)",""],["prepare_session","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-prepare_session","(env)","<p>Sets the lazy session at &#39;rack.session&#39; and places options and\nsession metadata into &#39;rack.session.options&#39;. …\n"],["pretty","Rack::ShowExceptions","Rack/ShowExceptions.html#method-i-pretty","(env, exception)",""],["process","Rack::Handler::Mongrel","Rack/Handler/Mongrel.html#method-i-process","(request, response)",""],["process_request","Rack::Handler::SCGI","Rack/Handler/SCGI.html#method-i-process_request","(request, input_body, socket)",""],["progname","Rack::NullLogger","Rack/NullLogger.html#method-i-progname","()",""],["progname=","Rack::NullLogger","Rack/NullLogger.html#method-i-progname-3D","(progname)",""],["provided?","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-provided-3F","()",""],["put","Rack::MockRequest","Rack/MockRequest.html#method-i-put","(uri, opts={})",""],["put?","Rack::Request","Rack/Request.html#method-i-put-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type PUT\n"],["puts","Rack::MockRequest::FatalWarner","Rack/MockRequest/FatalWarner.html#method-i-puts","(warning)",""],["q_values","Rack::Utils","Rack/Utils.html#method-i-q_values","(q_value_header)",""],["q_values","Rack::Utils","Rack/Utils.html#method-c-q_values","(q_value_header)",""],["query_string","Rack::Request","Rack/Request.html#method-i-query_string","()",""],["quote","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-i-quote","(str)",""],["read","Rack::RewindableInput","Rack/RewindableInput.html#method-i-read","(*args)",""],["recontext","Rack::Utils::Context","Rack/Utils/Context.html#method-i-recontext","(app)",""],["redirect","Rack::Response","Rack/Response.html#method-i-redirect","(target, status=302)",""],["redirect?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-redirect-3F","()",""],["redirection?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-redirection-3F","()",""],["referer","Rack::Request","Rack/Request.html#method-i-referer","()","<p>the referer of the client\n"],["referrer","Rack::Request","Rack/Request.html#method-i-referrer","()",""],["register","Rack::Handler","Rack/Handler.html#method-c-register","(server, klass)",""],["reject_trusted_ip_addresses","Rack::Request","Rack/Request.html#method-i-reject_trusted_ip_addresses","(ip_addresses)",""],["release","Rack","Rack.html#method-c-release","()","<p>Return the Rack release as a dotted string.\n"],["reload!","Rack::Reloader","Rack/Reloader.html#method-i-reload-21","(stderr = $stderr)",""],["remap","Rack::URLMap","Rack/URLMap.html#method-i-remap","(map)",""],["replace","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-replace","(hash)",""],["replace","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-replace","(other)",""],["request","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-request","()",""],["request","Rack::MockRequest","Rack/MockRequest.html#method-i-request","(method=\"GET\", uri=\"\", opts={})",""],["request_method","Rack::Request","Rack/Request.html#method-i-request_method","()",""],["respond_to?","Rack::Auth::Digest::Request","Rack/Auth/Digest/Request.html#method-i-respond_to-3F","(sym, *)",""],["respond_to?","Rack::BodyProxy","Rack/BodyProxy.html#method-i-respond_to-3F","(*args)",""],["respond_to?","Rack::Multipart::UploadedFile","Rack/Multipart/UploadedFile.html#method-i-respond_to-3F","(*args)",""],["response_body","Rack::File","Rack/File.html#method-i-response_body","()","<p>By default, the response body for file requests is nil. In this case, the\nresponse body will be generated …\n"],["rewind","Rack::RewindableInput","Rack/RewindableInput.html#method-i-rewind","()",""],["rfc2109","Rack::Utils","Rack/Utils.html#method-i-rfc2109","(time)","<p>Modified version of stdlib time.rb Time#rfc2822 to use &#39;%d-%b-%Y&#39;\ninstead of &#39;% %b %Y&#39;. …\n"],["rfc2109","Rack::Utils","Rack/Utils.html#method-c-rfc2109","(time)","<p>Modified version of stdlib time.rb Time#rfc2822 to use &#39;%d-%b-%Y&#39;\ninstead of &#39;% %b %Y&#39;. …\n"],["rfc2822","Rack::Utils","Rack/Utils.html#method-c-rfc2822","(time)",""],["rfc2822","Rack::Utils","Rack/Utils.html#method-i-rfc2822","(time)",""],["rotation","Rack::Reloader::Stat","Rack/Reloader/Stat.html#method-i-rotation","()",""],["route_file","Rack::Static","Rack/Static.html#method-i-route_file","(path)",""],["run","Rack::Builder","Rack/Builder.html#method-i-run","(app)","<p>Takes an argument that is an object that responds to #call and returns a\nRack response. The simplest …\n"],["run","Rack::Handler::CGI","Rack/Handler/CGI.html#method-c-run","(app, options=nil)",""],["run","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-run","(app, options={})",""],["run","Rack::Handler::LSWS","Rack/Handler/LSWS.html#method-c-run","(app, options=nil)",""],["run","Rack::Handler::Mongrel","Rack/Handler/Mongrel.html#method-c-run","(app, options={})",""],["run","Rack::Handler::SCGI","Rack/Handler/SCGI.html#method-c-run","(app, options=nil)",""],["run","Rack::Handler::Thin","Rack/Handler/Thin.html#method-c-run","(app, options={})",""],["run","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-c-run","(app, options={})",""],["rx","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-rx","()",""],["safe_load","Rack::Reloader","Rack/Reloader.html#method-i-safe_load","(file, mtime, stderr = $stderr)","<p>A safe Kernel::load, issuing the hooks depending on the results\n"],["safe_stat","Rack::Reloader::Stat","Rack/Reloader/Stat.html#method-i-safe_stat","(file)",""],["scheme","Rack::Auth::AbstractRequest","Rack/Auth/AbstractRequest.html#method-i-scheme","()",""],["scheme","Rack::Request","Rack/Request.html#method-i-scheme","()",""],["script_name","Rack::Request","Rack/Request.html#method-i-script_name","()",""],["script_name=","Rack::Request","Rack/Request.html#method-i-script_name-3D","(s)",""],["scrub_filename","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-scrub_filename","(filename)",""],["secure_compare","Rack::Utils","Rack/Utils.html#method-c-secure_compare","(a, b)","<p>Constant time string comparison.\n<p>NOTE: the values compared should be of fixed length, such as strings …\n"],["secure_compare","Rack::Utils","Rack/Utils.html#method-i-secure_compare","(a, b)","<p>Constant time string comparison.\n<p>NOTE: the values compared should be of fixed length, such as strings …\n"],["security_matches?","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-security_matches-3F","(env, options)",""],["select_best_encoding","Rack::Utils","Rack/Utils.html#method-i-select_best_encoding","(available_encodings, accept_encoding)",""],["select_best_encoding","Rack::Utils","Rack/Utils.html#method-c-select_best_encoding","(available_encodings, accept_encoding)",""],["send_body","Rack::Handler::CGI","Rack/Handler/CGI.html#method-c-send_body","(body)",""],["send_body","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-send_body","(out, body)",""],["send_body","Rack::Handler::LSWS","Rack/Handler/LSWS.html#method-c-send_body","(body)",""],["send_headers","Rack::Handler::CGI","Rack/Handler/CGI.html#method-c-send_headers","(status, headers)",""],["send_headers","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-send_headers","(out, status, headers)",""],["send_headers","Rack::Handler::LSWS","Rack/Handler/LSWS.html#method-c-send_headers","(status, headers)",""],["serve","Rack::Handler::CGI","Rack/Handler/CGI.html#method-c-serve","(app)",""],["serve","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-serve","(request, app)",""],["serve","Rack::Handler::LSWS","Rack/Handler/LSWS.html#method-c-serve","(app)",""],["server","Rack::Server","Rack/Server.html#method-i-server","()",""],["server_error?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-server_error-3F","()",""],["service","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-i-service","(req, res)",""],["serving","Rack::File","Rack/File.html#method-i-serving","(env)",""],["session","Rack::Request","Rack/Request.html#method-i-session","()",""],["session_class","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-session_class","()","<p>Allow subclasses to prepare_session for different Session classes\n"],["session_exists?","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-session_exists-3F","(env)","<p>Check if the session exists or not.\n"],["session_options","Rack::Request","Rack/Request.html#method-i-session_options","()",""],["set","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-c-set","(env, session)",""],["set_cookie","Rack::Response","Rack/Response.html#method-i-set_cookie","(key, value)",""],["set_cookie","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-set_cookie","(env, headers, cookie)","<p>Sets the cookie back to the client with session id. We skip the cookie\nsetting if the value didn&#39;t …\n"],["set_cookie_header!","Rack::Utils","Rack/Utils.html#method-i-set_cookie_header-21","(header, key, value)",""],["set_cookie_header!","Rack::Utils","Rack/Utils.html#method-c-set_cookie_header-21","(header, key, value)",""],["set_options","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-c-set_options","(env, options)",""],["set_session","Rack::Session::Abstract::ID","Rack/Session/Abstract/ID.html#method-i-set_session","(env, sid, session, options)","<p>All thread safety and session storage procedures should occur here. Must\nreturn the session id if the …\n"],["set_session","Rack::Session::Cookie","Rack/Session/Cookie.html#method-i-set_session","(env, session_id, session, options)",""],["set_session","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-set_session","(env, session_id, new_session, options)",""],["set_session","Rack::Session::Pool","Rack/Session/Pool.html#method-i-set_session","(env, session_id, new_session, options)",""],["setup_header","WEBrick::HTTPResponse","WEBrick/HTTPResponse.html#method-i-setup_header","()",""],["sev_threshold","Rack::NullLogger","Rack/NullLogger.html#method-i-sev_threshold","()",""],["sev_threshold=","Rack::NullLogger","Rack/NullLogger.html#method-i-sev_threshold-3D","(sev_threshold)",""],["should_deflate?","Rack::Deflater","Rack/Deflater.html#method-i-should_deflate-3F","(env, status, headers, body)",""],["shutdown","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-c-shutdown","()",""],["skip_caching?","Rack::ETag","Rack/ETag.html#method-i-skip_caching-3F","(headers)",""],["split_header_value","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-c-split_header_value","(str)",""],["split_ip_addresses","Rack::Request","Rack/Request.html#method-i-split_ip_addresses","(ip_addresses)",""],["ssl?","Rack::Request","Rack/Request.html#method-i-ssl-3F","()",""],["stale?","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-stale-3F","()",""],["start","Rack::Server","Rack/Server.html#method-c-start","(options = nil)","<p>Start a new rack server (like running rackup). This will parse ARGV and\nprovide standard ARGV rackup …\n"],["start","Rack::Server","Rack/Server.html#method-i-start","(&blk)",""],["stat","Rack::Directory","Rack/Directory.html#method-i-stat","(node, max = 10)",""],["status_code","Rack::Utils","Rack/Utils.html#method-c-status_code","(status)",""],["status_code","Rack::Utils","Rack/Utils.html#method-i-status_code","(status)",""],["store","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-store","(key, value)",""],["strenc","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-strenc","(s)",""],["string","Rack::MockRequest::FatalWarner","Rack/MockRequest/FatalWarner.html#method-i-string","()",""],["stringify_keys","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-stringify_keys","(other)",""],["strip_doublequotes","Rack::Request","Rack/Request.html#method-i-strip_doublequotes","(s)",""],["strtok","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-strtok","(s)",""],["subst","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-subst","(u1, u2)",""],["successful?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-successful-3F","()",""],["surrogate?","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-surrogate-3F","(u)",""],["tag_multipart_encoding","Rack::Multipart::Parser","Rack/Multipart/Parser.html#method-i-tag_multipart_encoding","(filename, content_type, name, body)",""],["textparse","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-textparse","(ts)","<p>Parses a “json text” in the sense of RFC 4627. Returns the parsed value and\nany trailing tokens. …\n"],["to_a","Rack::Response","Rack/Response.html#method-i-to_a","(&block)",""],["to_app","Rack::Builder","Rack/Builder.html#method-i-to_app","()",""],["to_ary","Rack::Response","Rack/Response.html#method-i-to_ary","(&block)",""],["to_hash","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-to_hash","()",""],["to_hash","Rack::Utils::HeaderHash","Rack/Utils/HeaderHash.html#method-i-to_hash","()",""],["to_params_hash","Rack::Utils::KeySpaceConstrainedParams","Rack/Utils/KeySpaceConstrainedParams.html#method-i-to_params_hash","()",""],["to_rfc2822","Rack::ConditionalGet","Rack/ConditionalGet.html#method-i-to_rfc2822","(since)",""],["to_s","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-to_s","()",""],["to_s","Rack::Auth::Digest::Params","Rack/Auth/Digest/Params.html#method-i-to_s","()",""],["tok","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-tok","(s)","<p>Scans the first token in s and returns a 3-element list, or nil if s does\nnot begin with a valid token. …\n"],["trace?","Rack::Request","Rack/Request.html#method-i-trace-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type TRACE\n"],["truetok","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-truetok","(s)",""],["trusted_proxy?","Rack::Request","Rack/Request.html#method-i-trusted_proxy-3F","(ip)",""],["try_require","Rack::Handler","Rack/Handler.html#method-c-try_require","(prefix, const_name)","<p>Transforms server-name constants to their canonical form as filenames, then\ntries to require them but …\n"],["ucharcopy","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-ucharcopy","(t, s, i)","<p>Copies the valid UTF-8 bytes of a single character from string s at\nposition i to I/O object t, and returns …\n"],["ucharenc","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-ucharenc","(a, i, u)","<p>Encodes unicode character u as UTF-8 bytes in string a at position i.\nReturns the number of bytes written. …\n"],["unauthorized","Rack::Auth::AbstractHandler","Rack/Auth/AbstractHandler.html#method-i-unauthorized","(www_authenticate = challenge)",""],["unauthorized?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-unauthorized-3F","()",""],["unescape","Rack::Utils","Rack/Utils.html#method-i-unescape","(s, encoding = Encoding::UTF_8)",""],["unescape","Rack::Utils","Rack/Utils.html#method-c-unescape","(s, encoding = Encoding::UTF_8)",""],["unknown","Rack::NullLogger","Rack/NullLogger.html#method-i-unknown","(progname = nil, &block)",""],["unlink?","Rack::Request","Rack/Request.html#method-i-unlink-3F","()","<p>Checks the HTTP request method (or verb) to see if it was of type UNLINK\n"],["unpacked_cookie_data","Rack::Session::Cookie","Rack/Session/Cookie.html#method-i-unpacked_cookie_data","(env)",""],["unprocessable?","Rack::Response::Helpers","Rack/Response/Helpers.html#method-i-unprocessable-3F","()",""],["unquote","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-unquote","(q)","<p>Converts a quoted json string literal q into a UTF-8-encoded string. The\nrules are different than for …\n"],["update","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-update","(hash)",""],["update_param","Rack::Request","Rack/Request.html#method-i-update_param","(k, v)","<p>Destructively update a parameter, whether it&#39;s in GET and/or POST.\nReturns nil.\n<p>The parameter is updated …\n"],["url","Rack::Request","Rack/Request.html#method-i-url","()","<p>Tries to return a remake of the original request URL as a string.\n"],["use","Rack::Builder","Rack/Builder.html#method-i-use","(middleware, *args, &block)","<p>Specifies middleware to use in a stack.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Middleware</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>(<span class=\"ruby-identifier\">app</span>)\n    <span class=\"ruby-ivar\">@app</span> = <span class=\"ruby-identifier\">app</span>\n  <span class=\"ruby-keyword\">end</span>\n\n <span class=\"ruby-operator\">...</span>\n</pre>\n"],["user_agent","Rack::Request","Rack/Request.html#method-i-user_agent","()",""],["username","Rack::Auth::Basic::Request","Rack/Auth/Basic/Request.html#method-i-username","()",""],["valenc","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-valenc","(x)",""],["valid?","Rack::Auth::Basic","Rack/Auth/Basic.html#method-i-valid-3F","(auth)",""],["valid?","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-valid-3F","(auth)",""],["valid?","Rack::Auth::Digest::Nonce","Rack/Auth/Digest/Nonce.html#method-i-valid-3F","()",""],["valid_digest?","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-valid_digest-3F","(auth)",""],["valid_nonce?","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-valid_nonce-3F","(auth)",""],["valid_opaque?","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-valid_opaque-3F","(auth)",""],["valid_options","Rack::Handler::FastCGI","Rack/Handler/FastCGI.html#method-c-valid_options","()",""],["valid_options","Rack::Handler::Mongrel","Rack/Handler/Mongrel.html#method-c-valid_options","()",""],["valid_options","Rack::Handler::SCGI","Rack/Handler/SCGI.html#method-c-valid_options","()",""],["valid_options","Rack::Handler::Thin","Rack/Handler/Thin.html#method-c-valid_options","()",""],["valid_options","Rack::Handler::WEBrick","Rack/Handler/WEBrick.html#method-c-valid_options","()",""],["valid_qop?","Rack::Auth::Digest::MD5","Rack/Auth/Digest/MD5.html#method-i-valid_qop-3F","(auth)",""],["valparse","Rack::Utils::OkJson","Rack/Utils/OkJson.html#method-i-valparse","(ts)","<p>Parses a “value” in the sense of RFC 4627. Returns the parsed value and any\ntrailing tokens. …\n"],["values","Rack::Session::Abstract::SessionHash","Rack/Session/Abstract/SessionHash.html#method-i-values","()",""],["values_at","Rack::Request","Rack/Request.html#method-i-values_at","(*keys)","<p>like Hash#values_at\n"],["variation","Rack::Sendfile","Rack/Sendfile.html#method-i-variation","(env)",""],["version","Rack","Rack.html#method-c-version","()","<p>Return the Rack protocol version as a dotted string.\n"],["warmup","Rack::Builder","Rack/Builder.html#method-i-warmup","(prc=nil, &block)","<p>Takes a lambda or block that is used to warm-up the application.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">warmup</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">app</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">client</span> = <span class=\"ruby-constant\">Rack</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">MockRequest</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">app</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["warn","Rack::NullLogger","Rack/NullLogger.html#method-i-warn","(progname = nil, &block)",""],["warn?","Rack::NullLogger","Rack/NullLogger.html#method-i-warn-3F","()",""],["with_lock","Rack::Session::Memcache","Rack/Session/Memcache.html#method-i-with_lock","(env)",""],["with_lock","Rack::Session::Pool","Rack/Session/Pool.html#method-i-with_lock","(env)",""],["wrapped_app","Rack::Server","Rack/Server.html#method-i-wrapped_app","()",""],["write","Rack::Deflater::GzipStream","Rack/Deflater/GzipStream.html#method-i-write","(data)",""],["write","Rack::MockRequest::FatalWarner","Rack/MockRequest/FatalWarner.html#method-i-write","(warning)",""],["write","Rack::Response","Rack/Response.html#method-i-write","(str)","<p>Append to body and update Content-Length.\n<p>NOTE: Do not mix #write and direct #body access!\n"],["write_pid","Rack::Server","Rack/Server.html#method-i-write_pid","()",""],["xhr?","Rack::Request","Rack/Request.html#method-i-xhr-3F","()",""],["KNOWN-ISSUES","","KNOWN-ISSUES.html","","<p>Known issues with Rack and ECMA-262\n<p>Many users expect the escape() function defined in ECMA-262 to be …\n\n"],["README","","README_rdoc.html","","<p>Rack, a modular Ruby webserver interface <img src=“https://secure.travis-ci.org/rack/rack.svg” alt=“Build …\n"]]}}