var search_data = {"index":{"searchIndex":["actionview","helpers","sanitizehelper","classmethods","html","html","cdata","conditions","document","fullsanitizer","linksanitizer","node","sanitizer","selector","invalidselectorerror","tag","text","tokenizer","version","whitelistsanitizer","rails","deprecatedsanitizer","railtie","attribute_match()","contains_bad_protocols?()","for_class()","for_id()","match()","new()","next_element()","next_selector()","nth_child()","only_child()","process_attributes_for()","process_node()","process_node()","process_node()","process_node()","sanitize()","sanitize()","sanitize_css()","sanitizeable?()","sanitizeable?()","select()","select()","select_first()","selector()","simple_selector()","tokenize()","tokenize()","validate_options()"],"longSearchIndex":["actionview","actionview::helpers","actionview::helpers::sanitizehelper","actionview::helpers::sanitizehelper::classmethods","actionview::helpers::sanitizehelper::classmethods::html","html","html::cdata","html::conditions","html::document","html::fullsanitizer","html::linksanitizer","html::node","html::sanitizer","html::selector","html::selector::invalidselectorerror","html::tag","html::text","html::tokenizer","html::version","html::whitelistsanitizer","rails","rails::deprecatedsanitizer","rails::deprecatedsanitizer::railtie","html::selector#attribute_match()","html::whitelistsanitizer#contains_bad_protocols?()","html::selector#for_class()","html::selector#for_id()","html::selector#match()","html::selector::new()","html::selector#next_element()","html::selector#next_selector()","html::selector#nth_child()","html::selector#only_child()","html::whitelistsanitizer#process_attributes_for()","html::fullsanitizer#process_node()","html::linksanitizer#process_node()","html::sanitizer#process_node()","html::whitelistsanitizer#process_node()","html::fullsanitizer#sanitize()","html::sanitizer#sanitize()","html::whitelistsanitizer#sanitize_css()","html::linksanitizer#sanitizeable?()","html::sanitizer#sanitizeable?()","html::selector#select()","html::tag#select()","html::selector#select_first()","html::selector()","html::selector#simple_selector()","html::sanitizer#tokenize()","html::whitelistsanitizer#tokenize()","html::sanitizer#validate_options()"],"info":[["ActionView","","ActionView.html","",""],["ActionView::Helpers","","ActionView/Helpers.html","",""],["ActionView::Helpers::SanitizeHelper","","ActionView/Helpers/SanitizeHelper.html","",""],["ActionView::Helpers::SanitizeHelper::ClassMethods","","ActionView/Helpers/SanitizeHelper/ClassMethods.html","",""],["ActionView::Helpers::SanitizeHelper::ClassMethods::HTML","","ActionView/Helpers/SanitizeHelper/ClassMethods/HTML.html","",""],["HTML","","HTML.html","",""],["HTML::CDATA","","HTML/CDATA.html","",""],["HTML::Conditions","","HTML/Conditions.html","",""],["HTML::Document","","HTML/Document.html","",""],["HTML::FullSanitizer","","HTML/FullSanitizer.html","",""],["HTML::LinkSanitizer","","HTML/LinkSanitizer.html","",""],["HTML::Node","","HTML/Node.html","",""],["HTML::Sanitizer","","HTML/Sanitizer.html","",""],["HTML::Selector","","HTML/Selector.html","","<p>Selects HTML elements using CSS 2 selectors.\n<p>The <code>Selector</code> class uses CSS selector expressions to match …\n"],["HTML::Selector::InvalidSelectorError","","HTML/Selector/InvalidSelectorError.html","",""],["HTML::Tag","","HTML/Tag.html","",""],["HTML::Text","","HTML/Text.html","",""],["HTML::Tokenizer","","HTML/Tokenizer.html","",""],["HTML::Version","","HTML/Version.html","",""],["HTML::WhiteListSanitizer","","HTML/WhiteListSanitizer.html","",""],["Rails","","Rails.html","",""],["Rails::DeprecatedSanitizer","","Rails/DeprecatedSanitizer.html","",""],["Rails::DeprecatedSanitizer::Railtie","","Rails/DeprecatedSanitizer/Railtie.html","",""],["attribute_match","HTML::Selector","HTML/Selector.html#method-i-attribute_match","(equality, value)","<p>Create a regular expression to match an attribute value based on the\nequality operator (=, ^=, |=, etc). …\n"],["contains_bad_protocols?","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-contains_bad_protocols-3F","(attr_name, value)",""],["for_class","HTML::Selector","HTML/Selector.html#method-i-for_class","(cls)","<p>Creates a new selector for the given class name.\n"],["for_id","HTML::Selector","HTML/Selector.html#method-i-for_id","(id)","<p>Creates a new selector for the given id.\n"],["match","HTML::Selector","HTML/Selector.html#method-i-match","(element, first_only = false)","<p>Matches an element against the selector.\n<p>For a simple selector this method returns an array with the element …\n"],["new","HTML::Selector","HTML/Selector.html#method-c-new","(selector, *values)","<p>Creates a new selector from a CSS 2 selector expression.\n<p>The first argument is the selector expression. …\n"],["next_element","HTML::Selector","HTML/Selector.html#method-i-next_element","(element, name = nil)","<p>Returns the next element after this one. Skips sibling text nodes.\n<p>With the <code>name</code> argument, returns the …\n"],["next_selector","HTML::Selector","HTML/Selector.html#method-i-next_selector","(statement, values)","<p>Called to create a dependent selector (sibling, descendant, etc). Passes\nthe remainder of the statement …\n"],["nth_child","HTML::Selector","HTML/Selector.html#method-i-nth_child","(a, b, of_type, reverse)","<p>Returns a lambda that can match an element against the nth-child pseudo\nclass, given the following arguments: …\n"],["only_child","HTML::Selector","HTML/Selector.html#method-i-only_child","(of_type)","<p>Creates a only child lambda. Pass <code>of-type</code> to only look at\nelements of its type.\n"],["process_attributes_for","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-process_attributes_for","(node, options)",""],["process_node","HTML::FullSanitizer","HTML/FullSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::LinkSanitizer","HTML/LinkSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::Sanitizer","HTML/Sanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-process_node","(node, result, options)",""],["sanitize","HTML::FullSanitizer","HTML/FullSanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize","HTML::Sanitizer","HTML/Sanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize_css","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of css code. Used by #sanitize when it comes across a\nstyle attribute\n"],["sanitizeable?","HTML::LinkSanitizer","HTML/LinkSanitizer.html#method-i-sanitizeable-3F","(text)",""],["sanitizeable?","HTML::Sanitizer","HTML/Sanitizer.html#method-i-sanitizeable-3F","(text)",""],["select","HTML::Selector","HTML/Selector.html#method-i-select","(root)","<p>Selects and returns an array with all matching elements, beginning with one\nnode and traversing through …\n"],["select","HTML::Tag","HTML/Tag.html#method-i-select","(selector, *values)",""],["select_first","HTML::Selector","HTML/Selector.html#method-i-select_first","(root)","<p>Similar to #select but returns the first matching element. Returns\n<code>nil</code> if no element matches the selector. …\n"],["selector","HTML","HTML.html#method-c-selector","(statement, *values)","<p>See HTML::Selector.new\n"],["simple_selector","HTML::Selector","HTML/Selector.html#method-i-simple_selector","(statement, values, can_negate = true)","<p>Creates a simple selector given the statement and array of substitution\nvalues.\n<p>Returns a hash with the …\n"],["tokenize","HTML::Sanitizer","HTML/Sanitizer.html#method-i-tokenize","(text, options)",""],["tokenize","HTML::WhiteListSanitizer","HTML/WhiteListSanitizer.html#method-i-tokenize","(text, options)",""],["validate_options","HTML::Sanitizer","HTML/Sanitizer.html#method-i-validate_options","(options)",""]]}}