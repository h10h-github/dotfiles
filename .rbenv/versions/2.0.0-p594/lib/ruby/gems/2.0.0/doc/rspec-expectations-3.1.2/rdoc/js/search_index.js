var search_data = {"index":{"searchIndex":["basicobject","minitest","object","rspec","expectations","blockexpectationtarget","configuration","expectationhelper","expectationtarget","legacymacheradapter","legacymatcheradapter","rspec1","rspec2","negativeexpectationhandler","positiveexpectationhandler","syntax","version","matchers","aliasedmatcher","aliasedmatcherwithoperatorsupport","aliasednegatedmatcher","builtin","all","basematcher","defaultfailuremessages","be","beakindof","beaninstanceof","bebetween","becomparedto","befalsey","behelpers","benil","bepredicate","betruthy","bewithin","capturestderr","capturestdout","change","changedetails","changefromvalue","changerelatively","changetovalue","compound","and","nestedevaluator","or","sequentialevaluator","containexactly","pairingsmaximizer","cover","endwith","eq","eql","equal","exist","existencetest","has","haveattributes","include","match","negativeoperatormatcher","nullcapture","operatormatcher","output","positiveoperatormatcher","raiseerror","respondto","satisfy","specificvalueschange","startandendwith","startwith","throwsymbol","yieldcontrol","yieldprobe","yieldsuccessiveargs","yieldwithargs","yieldwithnoargs","composable","dsl","defaultimplementations","macros","deprecated","matcher","matcherdelegator","matcherprotocol","pretty","actual_arg_for()","actual_collection_includes?()","actual_delta()","actual_exists?()","actual_has_attribute?()","actual_hash_has_key?()","actual_hash_includes?()","actual_inspected()","actual_is_unordered()","actual_output_description()","actual_result()","add_new_line_if_needed()","after_value_failure()","apply_pairing_to()","args_description()","args_to_s()","args_to_sentence()","assert_ivars()","before_value_failure()","best_solution()","best_solution_for_pairing()","block_matches?()","by()","by_at_least()","by_at_most()","capture()","capture()","capture()","captured?()","categorize_indexes()","caught()","chain()","chained_method_clause_sentences()","change_description()","change_description()","changed?()","check_message()","clear_generated_description()","comparable?()","compare()","comparing_hash_keys?()","comparing_hash_to_a_subset?()","compound_failure_message()","conjunction()","conjunction()","convert_actual_to_an_array()","default_should_host()","define()","define_user_override()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","detailed_failure_message()","did_change_failure()","did_not_change_failure()","diffable()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","diffable?()","disable_expect()","disable_should()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","does_not_match?()","element_matches?()","element_matches?()","enable_expect()","enable_should()","error_and_message_match?()","eval_block()","eval_match()","evaluate_value_proc()","exclusive()","existence_values()","expect()","expect()","expect_enabled?()","expectation_matched?()","expected()","expected()","expected_error()","expected_is_a_literal_singleton?()","expected_to_sentence()","expecting_specific_exception?()","expects_call_stack_jump?()","expects_call_stack_jump?()","expects_call_stack_jump?()","expects_call_stack_jump?()","expects_call_stack_jump?()","extra_items()","fail_with_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message()","failure_message_args_description()","failure_message_expecting()","failure_message_for_item()","failure_message_for_should()","failure_message_for_should_not()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_message_when_negated()","failure_reason()","find_best_solution()","for()","format_backtrace()","format_date_time()","format_object()","format_time()","from()","from()","generated_description()","get()","given_error()","handle_failure()","handle_matcher()","handle_matcher()","has_default_failure_messages?()","has_non_generic_implementation_of?()","improve_hash_formatting()","inclusive()","indent_multiline_message()","indent_multiline_message()","index_failed_objects()","initialize_copy()","initialize_copy()","initialize_copy()","inner_matcher_block()","inspect()","inspect_object()","inspected_args()","interface_matches?()","interface_matches?()","invalid_type_message()","is_matcher_with_description?()","iterable?()","last_description()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match_for_should()","match_for_should_not()","match_unless_raises()","match_unless_raises()","match_when_negated()","match_when_sorted?()","matcher()","matcher_1_matches?()","matcher_2_matches?()","matcher_expects_call_stack_jump?()","matcher_matches?()","matcher_matches?()","matcher_supports_block_expectations?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches_after?()","matches_before?()","method_description()","method_missing()","method_missing()","method_missing()","missing_items()","modern_matcher_from()","multiline?()","multiline_message()","name()","name()","name()","name()","name_to_sentence()","needs_expected()","negative_failure_reason()","negative_failure_reason()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","not_comparable_clause()","not_given_a_block_failure()","not_numeric_clause()","not_to()","numeric?()","of()","opposite_should_method()","opposite_should_method()","optimal_failure_message()","order_block_matchers()","pairings_maximizer()","parenthesize()","parse_expected()","percent_of()","perform_change()","perform_match()","perform_match()","positive_failure_reason()","positive_failure_reason()","predicate()","predicate()","predicate_accessible?()","predicate_accessible?()","predicate_exists?()","predicate_exists?()","predicate_matches?()","predicate_matches?()","predicates()","prefix_and_expected()","prefix_to_sentence()","present_ivars()","present_tense_predicate()","prevent_invalid_expectations()","prevent_operator_matchers()","private_predicate?()","private_predicate?()","raise_block_syntax_error()","raise_message_already_set()","reciprocal_single_match?()","register()","registry()","respond_to?()","respond_to?()","respond_to_attributes?()","respond_to_failure_message_or()","respond_to_matcher()","respond_to_missing?()","respond_to_missing?()","safe_sort()","setup()","should()","should_enabled?()","should_method()","should_method()","should_not()","simple_failure_message()","singleline_message()","split_words()","split_words()","subset_matches?()","subset_matches?()","supports_block_expectations()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","supports_block_expectations?()","throw_description()","to()","to()","to()","to_not()","to_sentence()","to_stderr()","to_stdout()","to_word()","underscore()","uniq_truthy_values()","unregister()","use_custom_matcher_or_delegate()","valid_test?()","validity_message()","validity_message()","validity_message()","verb()","verb()","verify_message()","warn_about_should!()","warn_about_should_unless_configured()","with_message()","wrap()","wrap()"],"longSearchIndex":["basicobject","minitest","object","rspec","rspec::expectations","rspec::expectations::blockexpectationtarget","rspec::expectations::configuration","rspec::expectations::expectationhelper","rspec::expectations::expectationtarget","rspec::expectations::legacymacheradapter","rspec::expectations::legacymatcheradapter","rspec::expectations::legacymatcheradapter::rspec1","rspec::expectations::legacymatcheradapter::rspec2","rspec::expectations::negativeexpectationhandler","rspec::expectations::positiveexpectationhandler","rspec::expectations::syntax","rspec::expectations::version","rspec::matchers","rspec::matchers::aliasedmatcher","rspec::matchers::aliasedmatcherwithoperatorsupport","rspec::matchers::aliasednegatedmatcher","rspec::matchers::builtin","rspec::matchers::builtin::all","rspec::matchers::builtin::basematcher","rspec::matchers::builtin::basematcher::defaultfailuremessages","rspec::matchers::builtin::be","rspec::matchers::builtin::beakindof","rspec::matchers::builtin::beaninstanceof","rspec::matchers::builtin::bebetween","rspec::matchers::builtin::becomparedto","rspec::matchers::builtin::befalsey","rspec::matchers::builtin::behelpers","rspec::matchers::builtin::benil","rspec::matchers::builtin::bepredicate","rspec::matchers::builtin::betruthy","rspec::matchers::builtin::bewithin","rspec::matchers::builtin::capturestderr","rspec::matchers::builtin::capturestdout","rspec::matchers::builtin::change","rspec::matchers::builtin::changedetails","rspec::matchers::builtin::changefromvalue","rspec::matchers::builtin::changerelatively","rspec::matchers::builtin::changetovalue","rspec::matchers::builtin::compound","rspec::matchers::builtin::compound::and","rspec::matchers::builtin::compound::nestedevaluator","rspec::matchers::builtin::compound::or","rspec::matchers::builtin::compound::sequentialevaluator","rspec::matchers::builtin::containexactly","rspec::matchers::builtin::containexactly::pairingsmaximizer","rspec::matchers::builtin::cover","rspec::matchers::builtin::endwith","rspec::matchers::builtin::eq","rspec::matchers::builtin::eql","rspec::matchers::builtin::equal","rspec::matchers::builtin::exist","rspec::matchers::builtin::exist::existencetest","rspec::matchers::builtin::has","rspec::matchers::builtin::haveattributes","rspec::matchers::builtin::include","rspec::matchers::builtin::match","rspec::matchers::builtin::negativeoperatormatcher","rspec::matchers::builtin::nullcapture","rspec::matchers::builtin::operatormatcher","rspec::matchers::builtin::output","rspec::matchers::builtin::positiveoperatormatcher","rspec::matchers::builtin::raiseerror","rspec::matchers::builtin::respondto","rspec::matchers::builtin::satisfy","rspec::matchers::builtin::specificvalueschange","rspec::matchers::builtin::startandendwith","rspec::matchers::builtin::startwith","rspec::matchers::builtin::throwsymbol","rspec::matchers::builtin::yieldcontrol","rspec::matchers::builtin::yieldprobe","rspec::matchers::builtin::yieldsuccessiveargs","rspec::matchers::builtin::yieldwithargs","rspec::matchers::builtin::yieldwithnoargs","rspec::matchers::composable","rspec::matchers::dsl","rspec::matchers::dsl::defaultimplementations","rspec::matchers::dsl::macros","rspec::matchers::dsl::macros::deprecated","rspec::matchers::dsl::matcher","rspec::matchers::matcherdelegator","rspec::matchers::matcherprotocol","rspec::matchers::pretty","rspec::matchers::dsl::matcher#actual_arg_for()","rspec::matchers::builtin::include#actual_collection_includes?()","rspec::matchers::builtin::changedetails#actual_delta()","rspec::matchers::builtin::exist::existencetest#actual_exists?()","rspec::matchers::builtin::haveattributes#actual_has_attribute?()","rspec::matchers::builtin::include#actual_hash_has_key?()","rspec::matchers::builtin::include#actual_hash_includes?()","rspec::matchers::builtin::equal#actual_inspected()","rspec::matchers::builtin::startandendwith#actual_is_unordered()","rspec::matchers::builtin::output#actual_output_description()","rspec::matchers::builtin::throwsymbol#actual_result()","rspec::matchers::builtin::all#add_new_line_if_needed()","rspec::matchers::builtin::specificvalueschange#after_value_failure()","rspec::matchers::builtin::containexactly::pairingsmaximizer#apply_pairing_to()","rspec::matchers::builtin::has#args_description()","rspec::matchers::builtin::behelpers#args_to_s()","rspec::matchers::builtin::behelpers#args_to_sentence()","rspec::matchers::builtin::basematcher#assert_ivars()","rspec::matchers::builtin::specificvalueschange#before_value_failure()","rspec::matchers::builtin::containexactly#best_solution()","rspec::matchers::builtin::containexactly::pairingsmaximizer#best_solution_for_pairing()","rspec::matchers::builtin::raiseerror#block_matches?()","rspec::matchers::builtin::change#by()","rspec::matchers::builtin::change#by_at_least()","rspec::matchers::builtin::change#by_at_most()","rspec::matchers::builtin::capturestderr::capture()","rspec::matchers::builtin::capturestdout::capture()","rspec::matchers::builtin::nullcapture::capture()","rspec::matchers::builtin::output#captured?()","rspec::matchers::builtin::containexactly::pairingsmaximizer#categorize_indexes()","rspec::matchers::builtin::throwsymbol#caught()","rspec::matchers::dsl::macros#chain()","rspec::matchers::dsl::defaultimplementations#chained_method_clause_sentences()","rspec::matchers::builtin::changefromvalue#change_description()","rspec::matchers::builtin::changetovalue#change_description()","rspec::matchers::builtin::changedetails#changed?()","rspec::expectations::expectationhelper::check_message()","rspec::matchers::clear_generated_description()","rspec::matchers::builtin::bebetween#comparable?()","rspec::matchers::builtin::bebetween#compare()","rspec::matchers::builtin::include#comparing_hash_keys?()","rspec::matchers::builtin::include#comparing_hash_to_a_subset?()","rspec::matchers::builtin::compound#compound_failure_message()","rspec::matchers::builtin::compound::and#conjunction()","rspec::matchers::builtin::compound::or#conjunction()","rspec::matchers::builtin::containexactly#convert_actual_to_an_array()","rspec::expectations::syntax#default_should_host()","rspec::matchers::dsl#define()","rspec::matchers::dsl::macros#define_user_override()","rspec::matchers::aliasedmatcher#description()","rspec::matchers::builtin::all#description()","rspec::matchers::builtin::basematcher#description()","rspec::matchers::builtin::beaninstanceof#description()","rspec::matchers::builtin::bebetween#description()","rspec::matchers::builtin::becomparedto#description()","rspec::matchers::builtin::bepredicate#description()","rspec::matchers::builtin::bewithin#description()","rspec::matchers::builtin::change#description()","rspec::matchers::builtin::changerelatively#description()","rspec::matchers::builtin::compound#description()","rspec::matchers::builtin::containexactly#description()","rspec::matchers::builtin::eq#description()","rspec::matchers::builtin::has#description()","rspec::matchers::builtin::haveattributes#description()","rspec::matchers::builtin::include#description()","rspec::matchers::builtin::match#description()","rspec::matchers::builtin::operatormatcher#description()","rspec::matchers::builtin::output#description()","rspec::matchers::builtin::raiseerror#description()","rspec::matchers::builtin::satisfy#description()","rspec::matchers::builtin::specificvalueschange#description()","rspec::matchers::builtin::startandendwith#description()","rspec::matchers::builtin::throwsymbol#description()","rspec::matchers::dsl::defaultimplementations#description()","rspec::matchers::dsl::macros#description()","rspec::matchers::builtin::equal#detailed_failure_message()","rspec::matchers::builtin::specificvalueschange#did_change_failure()","rspec::matchers::builtin::specificvalueschange#did_not_change_failure()","rspec::matchers::dsl::macros#diffable()","rspec::matchers::builtin::basematcher#diffable?()","rspec::matchers::builtin::eq#diffable?()","rspec::matchers::builtin::eql#diffable?()","rspec::matchers::builtin::equal#diffable?()","rspec::matchers::builtin::include#diffable?()","rspec::matchers::builtin::match#diffable?()","rspec::matchers::builtin::output#diffable?()","rspec::matchers::dsl::defaultimplementations#diffable?()","rspec::expectations::syntax#disable_expect()","rspec::expectations::syntax#disable_should()","rspec::expectations::negativeexpectationhandler::does_not_match?()","rspec::matchers::aliasednegatedmatcher#does_not_match?()","rspec::matchers::builtin::all#does_not_match?()","rspec::matchers::builtin::bepredicate#does_not_match?()","rspec::matchers::builtin::change#does_not_match?()","rspec::matchers::builtin::changefromvalue#does_not_match?()","rspec::matchers::builtin::changerelatively#does_not_match?()","rspec::matchers::builtin::changetovalue#does_not_match?()","rspec::matchers::builtin::compound#does_not_match?()","rspec::matchers::builtin::cover#does_not_match?()","rspec::matchers::builtin::exist#does_not_match?()","rspec::matchers::builtin::has#does_not_match?()","rspec::matchers::builtin::haveattributes#does_not_match?()","rspec::matchers::builtin::include#does_not_match?()","rspec::matchers::builtin::output#does_not_match?()","rspec::matchers::builtin::raiseerror#does_not_match?()","rspec::matchers::builtin::throwsymbol#does_not_match?()","rspec::matchers::builtin::endwith#element_matches?()","rspec::matchers::builtin::startwith#element_matches?()","rspec::expectations::syntax#enable_expect()","rspec::expectations::syntax#enable_should()","rspec::matchers::builtin::raiseerror#error_and_message_match?()","rspec::matchers::builtin::raiseerror#eval_block()","rspec::matchers::builtin::operatormatcher#eval_match()","rspec::matchers::builtin::changedetails#evaluate_value_proc()","rspec::matchers::builtin::bebetween#exclusive()","rspec::matchers::builtin::exist::existencetest#existence_values()","object#expect()","rspec::expectations::syntax#expect()","rspec::expectations::syntax#expect_enabled?()","rspec::matchers::builtin::raiseerror#expectation_matched?()","rspec::matchers::builtin::throwsymbol#expected()","rspec::matchers::dsl::matcher#expected()","rspec::matchers::builtin::raiseerror#expected_error()","rspec::matchers::builtin::equal#expected_is_a_literal_singleton?()","rspec::matchers::builtin::behelpers#expected_to_sentence()","rspec::matchers::builtin::raiseerror#expecting_specific_exception?()","rspec::matchers::builtin::basematcher#expects_call_stack_jump?()","rspec::matchers::builtin::compound#expects_call_stack_jump?()","rspec::matchers::builtin::raiseerror#expects_call_stack_jump?()","rspec::matchers::builtin::throwsymbol#expects_call_stack_jump?()","rspec::matchers::dsl::defaultimplementations#expects_call_stack_jump?()","rspec::matchers::builtin::containexactly#extra_items()","rspec::matchers::builtin::operatormatcher#fail_with_message()","rspec::expectations::legacymatcheradapter::rspec1#failure_message()","rspec::expectations::legacymatcheradapter::rspec2#failure_message()","rspec::matchers::aliasedmatcher#failure_message()","rspec::matchers::aliasednegatedmatcher#failure_message()","rspec::matchers::builtin::all#failure_message()","rspec::matchers::builtin::basematcher::defaultfailuremessages#failure_message()","rspec::matchers::builtin::be#failure_message()","rspec::matchers::builtin::bebetween#failure_message()","rspec::matchers::builtin::becomparedto#failure_message()","rspec::matchers::builtin::befalsey#failure_message()","rspec::matchers::builtin::benil#failure_message()","rspec::matchers::builtin::bepredicate#failure_message()","rspec::matchers::builtin::betruthy#failure_message()","rspec::matchers::builtin::bewithin#failure_message()","rspec::matchers::builtin::change#failure_message()","rspec::matchers::builtin::changerelatively#failure_message()","rspec::matchers::builtin::compound::and#failure_message()","rspec::matchers::builtin::compound::or#failure_message()","rspec::matchers::builtin::containexactly#failure_message()","rspec::matchers::builtin::eq#failure_message()","rspec::matchers::builtin::eql#failure_message()","rspec::matchers::builtin::equal#failure_message()","rspec::matchers::builtin::exist#failure_message()","rspec::matchers::builtin::has#failure_message()","rspec::matchers::builtin::haveattributes#failure_message()","rspec::matchers::builtin::include#failure_message()","rspec::matchers::builtin::output#failure_message()","rspec::matchers::builtin::raiseerror#failure_message()","rspec::matchers::builtin::satisfy#failure_message()","rspec::matchers::builtin::specificvalueschange#failure_message()","rspec::matchers::builtin::startandendwith#failure_message()","rspec::matchers::builtin::throwsymbol#failure_message()","rspec::matchers::dsl::macros#failure_message()","rspec::matchers::builtin::has#failure_message_args_description()","rspec::matchers::builtin::bepredicate#failure_message_expecting()","rspec::matchers::builtin::all#failure_message_for_item()","rspec::matchers::dsl::macros::deprecated#failure_message_for_should()","rspec::matchers::dsl::macros::deprecated#failure_message_for_should_not()","rspec::expectations::legacymatcheradapter::rspec1#failure_message_when_negated()","rspec::expectations::legacymatcheradapter::rspec2#failure_message_when_negated()","rspec::matchers::aliasedmatcher#failure_message_when_negated()","rspec::matchers::aliasednegatedmatcher#failure_message_when_negated()","rspec::matchers::builtin::basematcher::defaultfailuremessages#failure_message_when_negated()","rspec::matchers::builtin::be#failure_message_when_negated()","rspec::matchers::builtin::becomparedto#failure_message_when_negated()","rspec::matchers::builtin::befalsey#failure_message_when_negated()","rspec::matchers::builtin::benil#failure_message_when_negated()","rspec::matchers::builtin::bepredicate#failure_message_when_negated()","rspec::matchers::builtin::betruthy#failure_message_when_negated()","rspec::matchers::builtin::bewithin#failure_message_when_negated()","rspec::matchers::builtin::change#failure_message_when_negated()","rspec::matchers::builtin::changefromvalue#failure_message_when_negated()","rspec::matchers::builtin::containexactly#failure_message_when_negated()","rspec::matchers::builtin::eq#failure_message_when_negated()","rspec::matchers::builtin::eql#failure_message_when_negated()","rspec::matchers::builtin::equal#failure_message_when_negated()","rspec::matchers::builtin::exist#failure_message_when_negated()","rspec::matchers::builtin::has#failure_message_when_negated()","rspec::matchers::builtin::haveattributes#failure_message_when_negated()","rspec::matchers::builtin::include#failure_message_when_negated()","rspec::matchers::builtin::output#failure_message_when_negated()","rspec::matchers::builtin::raiseerror#failure_message_when_negated()","rspec::matchers::builtin::satisfy#failure_message_when_negated()","rspec::matchers::builtin::throwsymbol#failure_message_when_negated()","rspec::matchers::dsl::macros#failure_message_when_negated()","rspec::matchers::builtin::changerelatively#failure_reason()","rspec::matchers::builtin::containexactly::pairingsmaximizer#find_best_solution()","rspec::expectations::expectationtarget::for()","rspec::matchers::builtin::raiseerror#format_backtrace()","rspec::matchers::builtin::eq#format_date_time()","rspec::matchers::builtin::eq#format_object()","rspec::matchers::builtin::eq#format_time()","rspec::matchers::builtin::change#from()","rspec::matchers::builtin::changetovalue#from()","rspec::matchers::generated_description()","rspec::matchers::builtin::operatormatcher#get()","rspec::matchers::builtin::raiseerror#given_error()","rspec::expectations::expectationhelper::handle_failure()","rspec::expectations::negativeexpectationhandler::handle_matcher()","rspec::expectations::positiveexpectationhandler::handle_matcher()","rspec::matchers::builtin::basematcher::defaultfailuremessages::has_default_failure_messages?()","rspec::matchers::builtin::operatormatcher#has_non_generic_implementation_of?()","rspec::matchers::pretty#improve_hash_formatting()","rspec::matchers::builtin::bebetween#inclusive()","rspec::matchers::builtin::all#indent_multiline_message()","rspec::matchers::builtin::compound#indent_multiline_message()","rspec::matchers::builtin::all#index_failed_objects()","rspec::matchers::builtin::all#initialize_copy()","rspec::matchers::builtin::compound#initialize_copy()","rspec::matchers::matcherdelegator#initialize_copy()","rspec::matchers::builtin::compound::nestedevaluator#inner_matcher_block()","rspec::matchers::dsl::matcher#inspect()","rspec::matchers::builtin::equal#inspect_object()","rspec::matchers::builtin::behelpers#inspected_args()","rspec::expectations::legacymatcheradapter::rspec1::interface_matches?()","rspec::expectations::legacymatcheradapter::rspec2::interface_matches?()","rspec::matchers::builtin::include#invalid_type_message()","rspec::matchers::pretty#is_matcher_with_description?()","rspec::matchers::builtin::all#iterable?()","rspec::matchers::last_description()","rspec::matchers::builtin::all#match()","rspec::matchers::builtin::be#match()","rspec::matchers::builtin::beakindof#match()","rspec::matchers::builtin::beaninstanceof#match()","rspec::matchers::builtin::befalsey#match()","rspec::matchers::builtin::benil#match()","rspec::matchers::builtin::betruthy#match()","rspec::matchers::builtin::compound#match()","rspec::matchers::builtin::compound::and#match()","rspec::matchers::builtin::compound::or#match()","rspec::matchers::builtin::containexactly#match()","rspec::matchers::builtin::eq#match()","rspec::matchers::builtin::eql#match()","rspec::matchers::builtin::equal#match()","rspec::matchers::builtin::match#match()","rspec::matchers::builtin::startandendwith#match()","rspec::matchers::dsl::macros#match()","rspec::matchers::dsl::macros::deprecated#match_for_should()","rspec::matchers::dsl::macros::deprecated#match_for_should_not()","rspec::matchers::builtin::basematcher#match_unless_raises()","rspec::matchers::dsl::macros#match_unless_raises()","rspec::matchers::dsl::macros#match_when_negated()","rspec::matchers::builtin::containexactly#match_when_sorted?()","rspec::matchers::dsl#matcher()","rspec::matchers::builtin::compound#matcher_1_matches?()","rspec::matchers::builtin::compound#matcher_2_matches?()","rspec::matchers::builtin::compound::nestedevaluator::matcher_expects_call_stack_jump?()","rspec::matchers::builtin::compound::nestedevaluator#matcher_matches?()","rspec::matchers::builtin::compound::sequentialevaluator#matcher_matches?()","rspec::matchers::builtin::compound#matcher_supports_block_expectations?()","rspec::matchers::aliasednegatedmatcher#matches?()","rspec::matchers::builtin::basematcher#matches?()","rspec::matchers::builtin::bebetween#matches?()","rspec::matchers::builtin::becomparedto#matches?()","rspec::matchers::builtin::bepredicate#matches?()","rspec::matchers::builtin::bewithin#matches?()","rspec::matchers::builtin::change#matches?()","rspec::matchers::builtin::changerelatively#matches?()","rspec::matchers::builtin::cover#matches?()","rspec::matchers::builtin::exist#matches?()","rspec::matchers::builtin::has#matches?()","rspec::matchers::builtin::haveattributes#matches?()","rspec::matchers::builtin::include#matches?()","rspec::matchers::builtin::output#matches?()","rspec::matchers::builtin::raiseerror#matches?()","rspec::matchers::builtin::satisfy#matches?()","rspec::matchers::builtin::specificvalueschange#matches?()","rspec::matchers::builtin::throwsymbol#matches?()","rspec::matchers::builtin::specificvalueschange#matches_after?()","rspec::matchers::builtin::specificvalueschange#matches_before?()","rspec::matchers::builtin::has#method_description()","rspec::matchers::aliasedmatcher#method_missing()","rspec::matchers::dsl::matcher#method_missing()","rspec::matchers::matcherdelegator#method_missing()","rspec::matchers::builtin::containexactly#missing_items()","rspec::expectations::expectationhelper::modern_matcher_from()","rspec::matchers::builtin::compound#multiline?()","rspec::matchers::builtin::compound#multiline_message()","rspec::matchers::builtin::capturestderr::name()","rspec::matchers::builtin::capturestdout::name()","rspec::matchers::builtin::nullcapture::name()","rspec::matchers::pretty#name()","rspec::matchers::pretty#name_to_sentence()","rspec::matchers::builtin::bewithin#needs_expected()","rspec::matchers::builtin::change#negative_failure_reason()","rspec::matchers::builtin::output#negative_failure_reason()","rspec::expectations::expectationtarget::new()","rspec::expectations::legacymatcheradapter::new()","rspec::expectations::legacymatcheradapter::new()","rspec::matchers::aliasedmatcher::new()","rspec::matchers::builtin::all::new()","rspec::matchers::builtin::basematcher::new()","rspec::matchers::builtin::be::new()","rspec::matchers::builtin::bebetween::new()","rspec::matchers::builtin::becomparedto::new()","rspec::matchers::builtin::bepredicate::new()","rspec::matchers::builtin::bewithin::new()","rspec::matchers::builtin::change::new()","rspec::matchers::builtin::changedetails::new()","rspec::matchers::builtin::changefromvalue::new()","rspec::matchers::builtin::changerelatively::new()","rspec::matchers::builtin::changetovalue::new()","rspec::matchers::builtin::compound::new()","rspec::matchers::builtin::compound::nestedevaluator::new()","rspec::matchers::builtin::compound::sequentialevaluator::new()","rspec::matchers::builtin::containexactly::pairingsmaximizer::new()","rspec::matchers::builtin::cover::new()","rspec::matchers::builtin::exist::new()","rspec::matchers::builtin::has::new()","rspec::matchers::builtin::haveattributes::new()","rspec::matchers::builtin::include::new()","rspec::matchers::builtin::operatormatcher::new()","rspec::matchers::builtin::output::new()","rspec::matchers::builtin::raiseerror::new()","rspec::matchers::builtin::satisfy::new()","rspec::matchers::builtin::specificvalueschange::new()","rspec::matchers::builtin::startandendwith::new()","rspec::matchers::builtin::throwsymbol::new()","rspec::matchers::dsl::matcher::new()","rspec::matchers::matcherdelegator::new()","rspec::matchers::builtin::bebetween#not_comparable_clause()","rspec::matchers::builtin::specificvalueschange#not_given_a_block_failure()","rspec::matchers::builtin::bewithin#not_numeric_clause()","rspec::expectations::expectationtarget#not_to()","rspec::matchers::builtin::bewithin#numeric?()","rspec::matchers::builtin::bewithin#of()","rspec::expectations::negativeexpectationhandler::opposite_should_method()","rspec::expectations::positiveexpectationhandler::opposite_should_method()","rspec::matchers::aliasednegatedmatcher#optimal_failure_message()","rspec::matchers::builtin::compound::nestedevaluator#order_block_matchers()","rspec::matchers::builtin::containexactly#pairings_maximizer()","rspec::matchers::builtin::behelpers#parenthesize()","rspec::matchers::builtin::bepredicate#parse_expected()","rspec::matchers::builtin::bewithin#percent_of()","rspec::matchers::builtin::changedetails#perform_change()","rspec::matchers::builtin::haveattributes#perform_match()","rspec::matchers::builtin::include#perform_match()","rspec::matchers::builtin::change#positive_failure_reason()","rspec::matchers::builtin::output#positive_failure_reason()","rspec::matchers::builtin::bepredicate#predicate()","rspec::matchers::builtin::has#predicate()","rspec::matchers::builtin::bepredicate#predicate_accessible?()","rspec::matchers::builtin::has#predicate_accessible?()","rspec::matchers::builtin::bepredicate#predicate_exists?()","rspec::matchers::builtin::has#predicate_exists?()","rspec::matchers::builtin::bepredicate#predicate_matches?()","rspec::matchers::builtin::has#predicate_matches?()","rspec::matchers::builtin::exist::existencetest#predicates()","rspec::matchers::builtin::bepredicate#prefix_and_expected()","rspec::matchers::builtin::bepredicate#prefix_to_sentence()","rspec::matchers::builtin::basematcher#present_ivars()","rspec::matchers::builtin::bepredicate#present_tense_predicate()","rspec::matchers::builtin::raiseerror#prevent_invalid_expectations()","rspec::expectations::expectationtarget#prevent_operator_matchers()","rspec::matchers::builtin::bepredicate#private_predicate?()","rspec::matchers::builtin::has#private_predicate?()","rspec::matchers::builtin::change#raise_block_syntax_error()","rspec::matchers::builtin::raiseerror#raise_message_already_set()","rspec::matchers::builtin::containexactly::pairingsmaximizer#reciprocal_single_match?()","rspec::matchers::builtin::operatormatcher#register()","rspec::matchers::builtin::operatormatcher#registry()","rspec::matchers::dsl::matcher#respond_to?()","rspec::matchers::matcherdelegator#respond_to?()","rspec::matchers::builtin::haveattributes#respond_to_attributes?()","rspec::matchers::builtin::haveattributes#respond_to_failure_message_or()","rspec::matchers::builtin::haveattributes#respond_to_matcher()","rspec::matchers::dsl::matcher#respond_to_missing?()","rspec::matchers::matcherdelegator#respond_to_missing?()","rspec::matchers::builtin::containexactly#safe_sort()","rspec::expectations::expectationhelper::setup()","rspec::expectations::syntax#should()","rspec::expectations::syntax#should_enabled?()","rspec::expectations::negativeexpectationhandler::should_method()","rspec::expectations::positiveexpectationhandler::should_method()","rspec::expectations::syntax#should_not()","rspec::matchers::builtin::equal#simple_failure_message()","rspec::matchers::builtin::compound#singleline_message()","rspec::matchers::pretty#split_words()","rspec::matchers::pretty::split_words()","rspec::matchers::builtin::endwith#subset_matches?()","rspec::matchers::builtin::startwith#subset_matches?()","rspec::matchers::dsl::macros#supports_block_expectations()","rspec::matchers::builtin::basematcher#supports_block_expectations?()","rspec::matchers::builtin::change#supports_block_expectations?()","rspec::matchers::builtin::changerelatively#supports_block_expectations?()","rspec::matchers::builtin::compound#supports_block_expectations?()","rspec::matchers::builtin::output#supports_block_expectations?()","rspec::matchers::builtin::raiseerror#supports_block_expectations?()","rspec::matchers::builtin::specificvalueschange#supports_block_expectations?()","rspec::matchers::builtin::throwsymbol#supports_block_expectations?()","rspec::matchers::dsl::defaultimplementations#supports_block_expectations?()","rspec::matchers::builtin::throwsymbol#throw_description()","rspec::expectations::expectationtarget#to()","rspec::matchers::builtin::change#to()","rspec::matchers::builtin::changefromvalue#to()","rspec::expectations::expectationtarget#to_not()","rspec::matchers::pretty#to_sentence()","rspec::matchers::builtin::output#to_stderr()","rspec::matchers::builtin::output#to_stdout()","rspec::matchers::pretty#to_word()","rspec::matchers::pretty#underscore()","rspec::matchers::builtin::exist::existencetest#uniq_truthy_values()","rspec::matchers::builtin::operatormatcher#unregister()","rspec::matchers::builtin::operatormatcher::use_custom_matcher_or_delegate()","rspec::matchers::builtin::exist::existencetest#valid_test?()","rspec::matchers::builtin::bepredicate#validity_message()","rspec::matchers::builtin::exist::existencetest#validity_message()","rspec::matchers::builtin::has#validity_message()","rspec::expectations::negativeexpectationhandler::verb()","rspec::expectations::positiveexpectationhandler::verb()","rspec::matchers::builtin::raiseerror#verify_message()","rspec::expectations::syntax#warn_about_should!()","rspec::expectations::syntax#warn_about_should_unless_configured()","rspec::matchers::builtin::raiseerror#with_message()","rspec::expectations::legacymatcheradapter::wrap()","rspec::expectations::legacymatcheradapter::wrap()"],"info":[["BasicObject","","BasicObject.html","",""],["Minitest","","Minitest.html","",""],["Object","","Object.html","",""],["RSpec","","RSpec.html","",""],["RSpec::Expectations","","RSpec/Expectations.html","",""],["RSpec::Expectations::BlockExpectationTarget","","RSpec/Expectations/BlockExpectationTarget.html","",""],["RSpec::Expectations::Configuration","","RSpec/Expectations/Configuration.html","",""],["RSpec::Expectations::ExpectationHelper","","RSpec/Expectations/ExpectationHelper.html","","<p>@private\n"],["RSpec::Expectations::ExpectationTarget","","RSpec/Expectations/ExpectationTarget.html","","<p>Wraps the target of an expectation.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expect</span>(<span class=\"ruby-identifier\">something</span>)       <span class=\"ruby-comment\"># =&gt; ExpectationTarget wrapping something ...</span>\n</pre>\n"],["RSpec::Expectations::LegacyMacherAdapter","","RSpec/Expectations/LegacyMacherAdapter.html","","<p>Wraps a matcher written against one of the legacy protocols in order to\npresent the current protocol. …\n"],["RSpec::Expectations::LegacyMatcherAdapter","","RSpec/Expectations/LegacyMatcherAdapter.html","","<p>Wraps a matcher written against one of the legacy protocols in order to\npresent the current protocol. …\n"],["RSpec::Expectations::LegacyMatcherAdapter::RSpec1","","RSpec/Expectations/LegacyMatcherAdapter/RSpec1.html","","<p>Before RSpec 1.2, the failure message protocol was:\n\n<pre>* `failure_message`\n* `negative_failure_message`</pre>\n<p>@private …\n"],["RSpec::Expectations::LegacyMatcherAdapter::RSpec2","","RSpec/Expectations/LegacyMatcherAdapter/RSpec2.html","","<p>Starting in RSpec 1.2 (and continuing through all 2.x releases), the\nfailure message protocol was:\n\n<pre>* `failure_message_for_should` ...</pre>\n"],["RSpec::Expectations::NegativeExpectationHandler","","RSpec/Expectations/NegativeExpectationHandler.html","","<p>@private\n"],["RSpec::Expectations::PositiveExpectationHandler","","RSpec/Expectations/PositiveExpectationHandler.html","","<p>@private\n"],["RSpec::Expectations::Syntax","","RSpec/Expectations/Syntax.html","","<p>@api private Provides methods for enabling and disabling the available\nsyntaxes provided by rspec-expectations. …\n"],["RSpec::Expectations::Version","","RSpec/Expectations/Version.html","","<p>@private\n"],["RSpec::Matchers","","RSpec/Matchers.html","",""],["RSpec::Matchers::AliasedMatcher","","RSpec/Matchers/AliasedMatcher.html","","<p>Decorator that wraps a matcher and overrides `description` using the\nprovided block in order to support …\n"],["RSpec::Matchers::AliasedMatcherWithOperatorSupport","","RSpec/Matchers/AliasedMatcherWithOperatorSupport.html","","<p>Decorator used for matchers that have special implementations of operators\nlike `==` and `===`. @private …\n"],["RSpec::Matchers::AliasedNegatedMatcher","","RSpec/Matchers/AliasedNegatedMatcher.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn","","RSpec/Matchers/BuiltIn.html","",""],["RSpec::Matchers::BuiltIn::All","","RSpec/Matchers/BuiltIn/All.html","","<p>@api private Provides the implementation for `all`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::BaseMatcher","","RSpec/Matchers/BuiltIn/BaseMatcher.html","","<p>@api private\n<p>Used <em>internally</em> as a base class for matchers that ship with\nrspec-expectations and rspec-rails. …\n"],["RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages","","RSpec/Matchers/BuiltIn/BaseMatcher/DefaultFailureMessages.html","","<p>@api private Provides default implementations of failure messages, based on\nthe `description`.\n"],["RSpec::Matchers::BuiltIn::Be","","RSpec/Matchers/BuiltIn/Be.html","","<p>@api private Provides the implementation for `be`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::BeAKindOf","","RSpec/Matchers/BuiltIn/BeAKindOf.html","","<p>@api private Provides the implementation for `be_a_kind_of`. Not intended\nto be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::BeAnInstanceOf","","RSpec/Matchers/BuiltIn/BeAnInstanceOf.html","","<p>@api private Provides the implementation for `be_an_instance_of`. Not\nintended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::BeBetween","","RSpec/Matchers/BuiltIn/BeBetween.html","","<p>@api private Provides the implementation for `be_between`. Not intended to\nbe instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::BeComparedTo","","RSpec/Matchers/BuiltIn/BeComparedTo.html","","<p>@api private Provides the implementation of `be &lt;operator&gt; value`.\nNot intended to be instantiated …\n"],["RSpec::Matchers::BuiltIn::BeFalsey","","RSpec/Matchers/BuiltIn/BeFalsey.html","","<p>@api private Provides the implementation for `be_falsey`. Not intended to\nbe instantiated directly.\n"],["RSpec::Matchers::BuiltIn::BeHelpers","","RSpec/Matchers/BuiltIn/BeHelpers.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::BeNil","","RSpec/Matchers/BuiltIn/BeNil.html","","<p>@api private Provides the implementation for `be_nil`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::BePredicate","","RSpec/Matchers/BuiltIn/BePredicate.html","","<p>@api private Provides the implementation of `be_&lt;predicate&gt;`. Not\nintended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::BeTruthy","","RSpec/Matchers/BuiltIn/BeTruthy.html","","<p>@api private Provides the implementation for `be_truthy`. Not intended to\nbe instantiated directly.\n"],["RSpec::Matchers::BuiltIn::BeWithin","","RSpec/Matchers/BuiltIn/BeWithin.html","","<p>@api private Provides the implementation for `be_within`. Not intended to\nbe instantiated directly.\n"],["RSpec::Matchers::BuiltIn::CaptureStderr","","RSpec/Matchers/BuiltIn/CaptureStderr.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::CaptureStdout","","RSpec/Matchers/BuiltIn/CaptureStdout.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::Change","","RSpec/Matchers/BuiltIn/Change.html","","<p>@api private Provides the implementation for `change`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::ChangeDetails","","RSpec/Matchers/BuiltIn/ChangeDetails.html","","<p>@private Encapsulates the details of the before/after values.\n"],["RSpec::Matchers::BuiltIn::ChangeFromValue","","RSpec/Matchers/BuiltIn/ChangeFromValue.html","","<p>@api private Used to specify a change from a specific value (and,\noptionally, to a specific value).\n"],["RSpec::Matchers::BuiltIn::ChangeRelatively","","RSpec/Matchers/BuiltIn/ChangeRelatively.html","","<p>Used to specify a relative change. @api private\n"],["RSpec::Matchers::BuiltIn::ChangeToValue","","RSpec/Matchers/BuiltIn/ChangeToValue.html","","<p>@api private Used to specify a change to a specific value (and, optionally,\nfrom a specific value).\n"],["RSpec::Matchers::BuiltIn::Compound","","RSpec/Matchers/BuiltIn/Compound.html","","<p>@api private Base class for `and` and `or` compound matchers.\n"],["RSpec::Matchers::BuiltIn::Compound::And","","RSpec/Matchers/BuiltIn/Compound/And.html","","<p>@api public Matcher used to represent a compound `and` expectation.\n"],["RSpec::Matchers::BuiltIn::Compound::NestedEvaluator","","RSpec/Matchers/BuiltIn/Compound/NestedEvaluator.html","","<p>Normally, we evaluate the matching sequentially. For an expression like\n`expect(x).to foo.and bar`, this …\n"],["RSpec::Matchers::BuiltIn::Compound::Or","","RSpec/Matchers/BuiltIn/Compound/Or.html","","<p>@api public Matcher used to represent a compound `or` expectation.\n"],["RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator","","RSpec/Matchers/BuiltIn/Compound/SequentialEvaluator.html","","<p>For value expectations, we can evaluate the matchers sequentially.\n"],["RSpec::Matchers::BuiltIn::ContainExactly","","RSpec/Matchers/BuiltIn/ContainExactly.html","","<p>@api private Provides the implementation for `contain_exactly` and\n`match_array`. Not intended to be …\n"],["RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","","RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html","","<p>Once we started supporting composing matchers, the algorithm for this\nmatcher got much more complicated. …\n"],["RSpec::Matchers::BuiltIn::Cover","","RSpec/Matchers/BuiltIn/Cover.html","","<p>@api private Provides the implementation for `cover`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::EndWith","","RSpec/Matchers/BuiltIn/EndWith.html","","<p>@api private Provides the implementation for `end_with`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::Eq","","RSpec/Matchers/BuiltIn/Eq.html","","<p>@api private Provides the implementation for `eq`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::Eql","","RSpec/Matchers/BuiltIn/Eql.html","","<p>@api private Provides the implementation for `eql`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::Equal","","RSpec/Matchers/BuiltIn/Equal.html","","<p>@api private Provides the implementation for `equal`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::Exist","","RSpec/Matchers/BuiltIn/Exist.html","","<p>@api private Provides the implementation for `exist`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::Exist::ExistenceTest","","RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html","","<p>@api private Simple class for memoizing actual/expected for this matcher\nand examining the match\n"],["RSpec::Matchers::BuiltIn::Has","","RSpec/Matchers/BuiltIn/Has.html","","<p>@api private Provides the implementation for `has_&lt;predicate&gt;`. Not\nintended to be instantiated …\n"],["RSpec::Matchers::BuiltIn::HaveAttributes","","RSpec/Matchers/BuiltIn/HaveAttributes.html","","<p>@api private Provides the implementation for `have_attributes`. Not\nintended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::Include","","RSpec/Matchers/BuiltIn/Include.html","","<p>@api private Provides the implementation for `include`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::Match","","RSpec/Matchers/BuiltIn/Match.html","","<p>@api private Provides the implementation for `match`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::NegativeOperatorMatcher","","RSpec/Matchers/BuiltIn/NegativeOperatorMatcher.html","",""],["RSpec::Matchers::BuiltIn::NullCapture","","RSpec/Matchers/BuiltIn/NullCapture.html","","<p>@private\n"],["RSpec::Matchers::BuiltIn::OperatorMatcher","","RSpec/Matchers/BuiltIn/OperatorMatcher.html","","<p>@api private Provides the implementation for operator matchers. Not\nintended to be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::Output","","RSpec/Matchers/BuiltIn/Output.html","","<p>@api private Provides the implementation for `output`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::PositiveOperatorMatcher","","RSpec/Matchers/BuiltIn/PositiveOperatorMatcher.html","",""],["RSpec::Matchers::BuiltIn::RaiseError","","RSpec/Matchers/BuiltIn/RaiseError.html","","<p>@api private Provides the implementation for `raise_error`. Not intended to\nbe instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::RespondTo","","RSpec/Matchers/BuiltIn/RespondTo.html","",""],["RSpec::Matchers::BuiltIn::Satisfy","","RSpec/Matchers/BuiltIn/Satisfy.html","","<p>@api private Provides the implementation for `satisfy`. Not intended to be\ninstantiated directly.\n"],["RSpec::Matchers::BuiltIn::SpecificValuesChange","","RSpec/Matchers/BuiltIn/SpecificValuesChange.html","","<p>@api private Base class for specifying a change from and/or to specific\nvalues.\n"],["RSpec::Matchers::BuiltIn::StartAndEndWith","","RSpec/Matchers/BuiltIn/StartAndEndWith.html","","<p>@api private Base class for the `end_with` and `start_with` matchers. Not\nintended to be instantiated …\n"],["RSpec::Matchers::BuiltIn::StartWith","","RSpec/Matchers/BuiltIn/StartWith.html","","<p>@api private Provides the implementation for `start_with`. Not intended to\nbe instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::ThrowSymbol","","RSpec/Matchers/BuiltIn/ThrowSymbol.html","","<p>@api private Provides the implementation for `throw_symbol`. Not intended\nto be instantiated directly. …\n"],["RSpec::Matchers::BuiltIn::YieldControl","","RSpec/Matchers/BuiltIn/YieldControl.html","",""],["RSpec::Matchers::BuiltIn::YieldProbe","","RSpec/Matchers/BuiltIn/YieldProbe.html","",""],["RSpec::Matchers::BuiltIn::YieldSuccessiveArgs","","RSpec/Matchers/BuiltIn/YieldSuccessiveArgs.html","",""],["RSpec::Matchers::BuiltIn::YieldWithArgs","","RSpec/Matchers/BuiltIn/YieldWithArgs.html","",""],["RSpec::Matchers::BuiltIn::YieldWithNoArgs","","RSpec/Matchers/BuiltIn/YieldWithNoArgs.html","",""],["RSpec::Matchers::Composable","","RSpec/Matchers/Composable.html","",""],["RSpec::Matchers::DSL","","RSpec/Matchers/DSL.html","","<p>Defines the custom matcher DSL.\n"],["RSpec::Matchers::DSL::DefaultImplementations","","RSpec/Matchers/DSL/DefaultImplementations.html","","<p>Defines default implementations of the matcher protocol methods for custom\nmatchers. You can override …\n"],["RSpec::Matchers::DSL::Macros","","RSpec/Matchers/DSL/Macros.html","","<p>Contains the methods that are available from within the\n`RSpec::Matchers.define` DSL for creating custom …\n"],["RSpec::Matchers::DSL::Macros::Deprecated","","RSpec/Matchers/DSL/Macros/Deprecated.html","","<p>Defines deprecated macro methods from RSpec 2 for backwards compatibility.\n@deprecated Use the methods …\n"],["RSpec::Matchers::DSL::Matcher","","RSpec/Matchers/DSL/Matcher.html","","<p>The class used for custom matchers. The block passed to\n`RSpec::Matchers.define` will be evaluated in …\n"],["RSpec::Matchers::MatcherDelegator","","RSpec/Matchers/MatcherDelegator.html","","<p>Provides the necessary plumbing to wrap a matcher with a decorator.\n@private\n"],["RSpec::Matchers::MatcherProtocol","","RSpec/Matchers/MatcherProtocol.html","","<p>rspec-expectations can work with any matcher object that implements this\nprotocol.\n<p>@note This class is …\n"],["RSpec::Matchers::Pretty","","RSpec/Matchers/Pretty.html","","<p>@api private Contains logic to facilitate converting ruby symbols and\nobjects to english phrases.\n"],["actual_arg_for","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-actual_arg_for","(block)",""],["actual_collection_includes?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-actual_collection_includes-3F","(expected_item)",""],["actual_delta","RSpec::Matchers::BuiltIn::ChangeDetails","RSpec/Matchers/BuiltIn/ChangeDetails.html#method-i-actual_delta","()",""],["actual_exists?","RSpec::Matchers::BuiltIn::Exist::ExistenceTest","RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html#method-i-actual_exists-3F","()","<p>@api private @return [Boolean]\n"],["actual_has_attribute?","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-actual_has_attribute-3F","(attribute_key, attribute_value)",""],["actual_hash_has_key?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-actual_hash_has_key-3F","(expected_key)",""],["actual_hash_includes?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-actual_hash_includes-3F","(expected_key, expected_value)",""],["actual_inspected","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-actual_inspected","()",""],["actual_is_unordered","RSpec::Matchers::BuiltIn::StartAndEndWith","RSpec/Matchers/BuiltIn/StartAndEndWith.html#method-i-actual_is_unordered","()",""],["actual_output_description","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-actual_output_description","()",""],["actual_result","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-actual_result","()",""],["add_new_line_if_needed","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-add_new_line_if_needed","(message)",""],["after_value_failure","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-after_value_failure","()",""],["apply_pairing_to","RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html#method-i-apply_pairing_to","(indeterminates, original_matches, other_list_index)",""],["args_description","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-args_description","()",""],["args_to_s","RSpec::Matchers::BuiltIn::BeHelpers","RSpec/Matchers/BuiltIn/BeHelpers.html#method-i-args_to_s","()",""],["args_to_sentence","RSpec::Matchers::BuiltIn::BeHelpers","RSpec/Matchers/BuiltIn/BeHelpers.html#method-i-args_to_sentence","()",""],["assert_ivars","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-assert_ivars","(*expected_ivars)",""],["before_value_failure","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-before_value_failure","()",""],["best_solution","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-best_solution","()",""],["best_solution_for_pairing","RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html#method-i-best_solution_for_pairing","(expected_index, actual_index)",""],["block_matches?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-block_matches-3F","()",""],["by","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-by","(expected_delta)","<p>@api public Specifies the delta of the expected change.\n"],["by_at_least","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-by_at_least","(minimum)","<p>@api public Specifies a minimum delta of the expected change.\n"],["by_at_most","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-by_at_most","(maximum)","<p>@api public Specifies a maximum delta of the expected change.\n"],["capture","RSpec::Matchers::BuiltIn::CaptureStderr","RSpec/Matchers/BuiltIn/CaptureStderr.html#method-c-capture","(block)",""],["capture","RSpec::Matchers::BuiltIn::CaptureStdout","RSpec/Matchers/BuiltIn/CaptureStdout.html#method-c-capture","(block)",""],["capture","RSpec::Matchers::BuiltIn::NullCapture","RSpec/Matchers/BuiltIn/NullCapture.html#method-c-capture","(_block)",""],["captured?","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-captured-3F","()",""],["categorize_indexes","RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html#method-i-categorize_indexes","(indexes_to_categorize, other_indexes)",""],["caught","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-caught","()",""],["chain","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-chain","(name, &definition)","<p>Convenience for defining methods on this matcher to create a fluent\ninterface. The trick about fluent …\n"],["chained_method_clause_sentences","RSpec::Matchers::DSL::DefaultImplementations","RSpec/Matchers/DSL/DefaultImplementations.html#method-i-chained_method_clause_sentences","()",""],["change_description","RSpec::Matchers::BuiltIn::ChangeFromValue","RSpec/Matchers/BuiltIn/ChangeFromValue.html#method-i-change_description","()",""],["change_description","RSpec::Matchers::BuiltIn::ChangeToValue","RSpec/Matchers/BuiltIn/ChangeToValue.html#method-i-change_description","()",""],["changed?","RSpec::Matchers::BuiltIn::ChangeDetails","RSpec/Matchers/BuiltIn/ChangeDetails.html#method-i-changed-3F","()",""],["check_message","RSpec::Expectations::ExpectationHelper","RSpec/Expectations/ExpectationHelper.html#method-c-check_message","(msg)",""],["clear_generated_description","RSpec::Matchers","RSpec/Matchers.html#method-c-clear_generated_description","()","<p>@api private Used by rspec-core to clear the state used to generate\ndescriptions after an example.\n"],["comparable?","RSpec::Matchers::BuiltIn::BeBetween","RSpec/Matchers/BuiltIn/BeBetween.html#method-i-comparable-3F","()",""],["compare","RSpec::Matchers::BuiltIn::BeBetween","RSpec/Matchers/BuiltIn/BeBetween.html#method-i-compare","()",""],["comparing_hash_keys?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-comparing_hash_keys-3F","(expected_item)",""],["comparing_hash_to_a_subset?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-comparing_hash_to_a_subset-3F","(expected_item)",""],["compound_failure_message","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-compound_failure_message","()",""],["conjunction","RSpec::Matchers::BuiltIn::Compound::And","RSpec/Matchers/BuiltIn/Compound/And.html#method-i-conjunction","()",""],["conjunction","RSpec::Matchers::BuiltIn::Compound::Or","RSpec/Matchers/BuiltIn/Compound/Or.html#method-i-conjunction","()",""],["convert_actual_to_an_array","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-convert_actual_to_an_array","()",""],["default_should_host","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-default_should_host","()","<p>@api private Determines where we add `should` and `should_not`.\n"],["define","RSpec::Matchers::DSL","RSpec/Matchers/DSL.html#method-i-define","(name, &declarations)","<p>Defines a custom matcher. @see RSpec::Matchers\n"],["define_user_override","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-define_user_override","(method_name, user_def, &our_def)","<p>Does the following:\n<p>Defines the named method usign a user-provided block in @user_method_defs,\nwhich is …\n"],["description","RSpec::Matchers::AliasedMatcher","RSpec/Matchers/AliasedMatcher.html#method-i-description","()","<p>Provides the description of the aliased matcher. Aliased matchers are\ndesigned to behave identically …\n"],["description","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-description","()","<p>@api private Generates a “pretty” description using the logic in {Pretty}.\n@return [String] …\n"],["description","RSpec::Matchers::BuiltIn::BeAnInstanceOf","RSpec/Matchers/BuiltIn/BeAnInstanceOf.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BeBetween","RSpec/Matchers/BuiltIn/BeBetween.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::ChangeRelatively","RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-description","()","<p>@private\n"],["description","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Match","RSpec/Matchers/BuiltIn/Match.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-description","()","<p>@private\n"],["description","RSpec::Matchers::BuiltIn::StartAndEndWith","RSpec/Matchers/BuiltIn/StartAndEndWith.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-description","()","<p>@api private @return [String]\n"],["description","RSpec::Matchers::DSL::DefaultImplementations","RSpec/Matchers/DSL/DefaultImplementations.html#method-i-description","()","<p>The default description.\n"],["description","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-description","(&definition)","<p>Customize the description to use for one-liners.  Only use this when the\ndescription generated by default …\n"],["detailed_failure_message","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-detailed_failure_message","()",""],["did_change_failure","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-did_change_failure","()",""],["did_not_change_failure","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-did_not_change_failure","()",""],["diffable","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-diffable","()","<p>Tells the matcher to diff the actual and expected values in the failure\nmessage.\n"],["diffable?","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-diffable-3F","()","<p>@api private Matchers are not diffable by default. Override this to make\nyour subclass diffable.\n"],["diffable?","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Eql","RSpec/Matchers/BuiltIn/Eql.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Match","RSpec/Matchers/BuiltIn/Match.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-diffable-3F","()","<p>@api private @return [Boolean]\n"],["diffable?","RSpec::Matchers::DSL::DefaultImplementations","RSpec/Matchers/DSL/DefaultImplementations.html#method-i-diffable-3F","()","<p>@api private Used internally by objects returns by `should` and\n`should_not`.\n"],["disable_expect","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-disable_expect","(syntax_host=::RSpec::Matchers)","<p>@api private Disables the `expect` syntax.\n"],["disable_should","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-disable_should","(syntax_host=default_should_host)","<p>@api private Disables the `should` syntax.\n"],["does_not_match?","RSpec::Expectations::NegativeExpectationHandler","RSpec/Expectations/NegativeExpectationHandler.html#method-c-does_not_match-3F","(matcher, actual, &block)",""],["does_not_match?","RSpec::Matchers::AliasedNegatedMatcher","RSpec/Matchers/AliasedNegatedMatcher.html#method-i-does_not_match-3F","(*args, &block)",""],["does_not_match?","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-does_not_match-3F","(_actual)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-does_not_match-3F","(actual, &block)",""],["does_not_match?","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-does_not_match-3F","(event_proc)",""],["does_not_match?","RSpec::Matchers::BuiltIn::ChangeFromValue","RSpec/Matchers/BuiltIn/ChangeFromValue.html#method-i-does_not_match-3F","(event_proc)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::ChangeRelatively","RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-does_not_match-3F","(_event_proc)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::ChangeToValue","RSpec/Matchers/BuiltIn/ChangeToValue.html#method-i-does_not_match-3F","(_event_proc)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-does_not_match-3F","(_actual)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Cover","RSpec/Matchers/BuiltIn/Cover.html#method-i-does_not_match-3F","(range)",""],["does_not_match?","RSpec::Matchers::BuiltIn::Exist","RSpec/Matchers/BuiltIn/Exist.html#method-i-does_not_match-3F","(actual)","<p>@api private @return [Boolean]\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-does_not_match-3F","(actual, &block)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-does_not_match-3F","(actual)","<p>@api private @return [Boolean]\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-does_not_match-3F","(actual)","<p>@api private @return [Boolean]\n"],["does_not_match?","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-does_not_match-3F","(block)",""],["does_not_match?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-does_not_match-3F","(given_proc)","<p>@private\n"],["does_not_match?","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-does_not_match-3F","(given_proc)","<p>rubocop:enable MethodLength\n"],["element_matches?","RSpec::Matchers::BuiltIn::EndWith","RSpec/Matchers/BuiltIn/EndWith.html#method-i-element_matches-3F","()",""],["element_matches?","RSpec::Matchers::BuiltIn::StartWith","RSpec/Matchers/BuiltIn/StartWith.html#method-i-element_matches-3F","()",""],["enable_expect","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-enable_expect","(syntax_host=::RSpec::Matchers)","<p>@api private Enables the `expect` syntax.\n"],["enable_should","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-enable_should","(syntax_host=default_should_host)","<p>@api private Enables the `should` syntax.\n"],["error_and_message_match?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-error_and_message_match-3F","()",""],["eval_block","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-eval_block","()",""],["eval_match","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-eval_match","(actual, operator, expected)",""],["evaluate_value_proc","RSpec::Matchers::BuiltIn::ChangeDetails","RSpec/Matchers/BuiltIn/ChangeDetails.html#method-i-evaluate_value_proc","()",""],["exclusive","RSpec::Matchers::BuiltIn::BeBetween","RSpec/Matchers/BuiltIn/BeBetween.html#method-i-exclusive","()","<p>@api public Makes the between comparison exclusive.\n<p>@example\n\n<pre>expect(3).to be_between(2, 4).exclusive</pre>\n"],["existence_values","RSpec::Matchers::BuiltIn::Exist::ExistenceTest","RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html#method-i-existence_values","()",""],["expect","Object","Object.html#method-i-expect","(*a, &b)",""],["expect","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-expect","(value=::RSpec::Expectations::ExpectationTarget::UndefinedValue, &block)",""],["expect_enabled?","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-expect_enabled-3F","(syntax_host=::RSpec::Matchers)","<p>@api private Indicates whether or not the `expect` syntax is enabled.\n"],["expectation_matched?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-expectation_matched-3F","()",""],["expected","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-expected","(symbol_desc='a Symbol')",""],["expected","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-expected","()","<p>Provides the expected value. This will return an array if multiple\narguments were passed to the matcher; …\n"],["expected_error","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-expected_error","()",""],["expected_is_a_literal_singleton?","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-expected_is_a_literal_singleton-3F","()",""],["expected_to_sentence","RSpec::Matchers::BuiltIn::BeHelpers","RSpec/Matchers/BuiltIn/BeHelpers.html#method-i-expected_to_sentence","()",""],["expecting_specific_exception?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-expecting_specific_exception-3F","()",""],["expects_call_stack_jump?","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-expects_call_stack_jump-3F","()","<p>@api private\n"],["expects_call_stack_jump?","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-expects_call_stack_jump-3F","()",""],["expects_call_stack_jump?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-expects_call_stack_jump-3F","()",""],["expects_call_stack_jump?","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-expects_call_stack_jump-3F","()",""],["expects_call_stack_jump?","RSpec::Matchers::DSL::DefaultImplementations","RSpec/Matchers/DSL/DefaultImplementations.html#method-i-expects_call_stack_jump-3F","()","<p>Most matchers do not expect call stack jumps.\n"],["extra_items","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-extra_items","()",""],["fail_with_message","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-fail_with_message","(message)","<p>@private\n"],["failure_message","RSpec::Expectations::LegacyMatcherAdapter::RSpec1","RSpec/Expectations/LegacyMatcherAdapter/RSpec1.html#method-i-failure_message","()",""],["failure_message","RSpec::Expectations::LegacyMatcherAdapter::RSpec2","RSpec/Expectations/LegacyMatcherAdapter/RSpec2.html#method-i-failure_message","()",""],["failure_message","RSpec::Matchers::AliasedMatcher","RSpec/Matchers/AliasedMatcher.html#method-i-failure_message","()","<p>Provides the failure_message of the aliased matcher. Aliased matchers are\ndesigned to behave identically …\n"],["failure_message","RSpec::Matchers::AliasedNegatedMatcher","RSpec/Matchers/AliasedNegatedMatcher.html#method-i-failure_message","()",""],["failure_message","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages","RSpec/Matchers/BuiltIn/BaseMatcher/DefaultFailureMessages.html#method-i-failure_message","()","<p>@api private Provides a good generic failure message. Based on\n`description`. When subclassing, if you …\n"],["failure_message","RSpec::Matchers::BuiltIn::Be","RSpec/Matchers/BuiltIn/Be.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeBetween","RSpec/Matchers/BuiltIn/BeBetween.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeFalsey","RSpec/Matchers/BuiltIn/BeFalsey.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeNil","RSpec/Matchers/BuiltIn/BeNil.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeTruthy","RSpec/Matchers/BuiltIn/BeTruthy.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::ChangeRelatively","RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-failure_message","()","<p>@private\n"],["failure_message","RSpec::Matchers::BuiltIn::Compound::And","RSpec/Matchers/BuiltIn/Compound/And.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Compound::Or","RSpec/Matchers/BuiltIn/Compound/Or.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Eql","RSpec/Matchers/BuiltIn/Eql.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Exist","RSpec/Matchers/BuiltIn/Exist.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-failure_message","()","<p>@private\n"],["failure_message","RSpec::Matchers::BuiltIn::StartAndEndWith","RSpec/Matchers/BuiltIn/StartAndEndWith.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-failure_message","()","<p>@api private @return [String]\n"],["failure_message","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-failure_message","(&definition)","<p>Customizes the failure messsage to use when this matcher is asked to\npositively match. Only use this …\n"],["failure_message_args_description","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-failure_message_args_description","()",""],["failure_message_expecting","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-failure_message_expecting","(value)",""],["failure_message_for_item","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-failure_message_for_item","(index, failure_message)",""],["failure_message_for_should","RSpec::Matchers::DSL::Macros::Deprecated","RSpec/Matchers/DSL/Macros/Deprecated.html#method-i-failure_message_for_should","(&definition)","<p>@deprecated Use {Macros#failure_message} instead.\n"],["failure_message_for_should_not","RSpec::Matchers::DSL::Macros::Deprecated","RSpec/Matchers/DSL/Macros/Deprecated.html#method-i-failure_message_for_should_not","(&definition)","<p>@deprecated Use {Macros#failure_message_when_negated} instead.\n"],["failure_message_when_negated","RSpec::Expectations::LegacyMatcherAdapter::RSpec1","RSpec/Expectations/LegacyMatcherAdapter/RSpec1.html#method-i-failure_message_when_negated","()",""],["failure_message_when_negated","RSpec::Expectations::LegacyMatcherAdapter::RSpec2","RSpec/Expectations/LegacyMatcherAdapter/RSpec2.html#method-i-failure_message_when_negated","()",""],["failure_message_when_negated","RSpec::Matchers::AliasedMatcher","RSpec/Matchers/AliasedMatcher.html#method-i-failure_message_when_negated","()","<p>Provides the failure_message_when_negated of the aliased matcher. Aliased\nmatchers are designed to behave …\n"],["failure_message_when_negated","RSpec::Matchers::AliasedNegatedMatcher","RSpec/Matchers/AliasedNegatedMatcher.html#method-i-failure_message_when_negated","()",""],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages","RSpec/Matchers/BuiltIn/BaseMatcher/DefaultFailureMessages.html#method-i-failure_message_when_negated","()","<p>@api private Provides a good generic negative failure message. Based on\n`description`. When subclassing, …\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Be","RSpec/Matchers/BuiltIn/Be.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeFalsey","RSpec/Matchers/BuiltIn/BeFalsey.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeNil","RSpec/Matchers/BuiltIn/BeNil.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeTruthy","RSpec/Matchers/BuiltIn/BeTruthy.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::ChangeFromValue","RSpec/Matchers/BuiltIn/ChangeFromValue.html#method-i-failure_message_when_negated","()","<p>@private\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Eql","RSpec/Matchers/BuiltIn/Eql.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Exist","RSpec/Matchers/BuiltIn/Exist.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-failure_message_when_negated","()","<p>@api private @return [String]\n"],["failure_message_when_negated","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-failure_message_when_negated","(&definition)","<p>Customize the failure messsage to use when this matcher is asked to\nnegatively match. Only use this when …\n"],["failure_reason","RSpec::Matchers::BuiltIn::ChangeRelatively","RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-failure_reason","()",""],["find_best_solution","RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html#method-i-find_best_solution","()",""],["for","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-c-for","(value, block)","<p>@private\n"],["format_backtrace","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-format_backtrace","(backtrace)",""],["format_date_time","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-format_date_time","(date_time)","<p>ActiveSupport sometimes overrides inspect. If `ActiveSupport` is defined\nuse a custom format string that …\n"],["format_object","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-format_object","(object)",""],["format_time","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-format_time","(time)",""],["from","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-from","(value)","<p>@api public Specifies the original value.\n"],["from","RSpec::Matchers::BuiltIn::ChangeToValue","RSpec/Matchers/BuiltIn/ChangeToValue.html#method-i-from","(value)","<p>@api public Specifies the original value.\n"],["generated_description","RSpec::Matchers","RSpec/Matchers.html#method-c-generated_description","()","<p>@api private Generates an an example description based on the last\nexpectation. Used by rspec-core&#39;s …\n"],["get","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-get","(klass, operator)","<p>@private\n"],["given_error","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-given_error","()",""],["handle_failure","RSpec::Expectations::ExpectationHelper","RSpec/Expectations/ExpectationHelper.html#method-c-handle_failure","(matcher, message, failure_message_method)",""],["handle_matcher","RSpec::Expectations::NegativeExpectationHandler","RSpec/Expectations/NegativeExpectationHandler.html#method-c-handle_matcher","(actual, initial_matcher, message=nil, &block)",""],["handle_matcher","RSpec::Expectations::PositiveExpectationHandler","RSpec/Expectations/PositiveExpectationHandler.html#method-c-handle_matcher","(actual, initial_matcher, message=nil, &block)",""],["has_default_failure_messages?","RSpec::Matchers::BuiltIn::BaseMatcher::DefaultFailureMessages","RSpec/Matchers/BuiltIn/BaseMatcher/DefaultFailureMessages.html#method-c-has_default_failure_messages-3F","(matcher)","<p>@private\n"],["has_non_generic_implementation_of?","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-has_non_generic_implementation_of-3F","(op)",""],["improve_hash_formatting","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-improve_hash_formatting","(inspect_string)","<p>`{ :a =&gt; 5, :b =&gt; 2 }.inspect` produces:\n\n<pre class=\"ruby\">{:<span class=\"ruby-identifier\">a=</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-value\">5</span>, :<span class=\"ruby-identifier\">b=</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-value\">2</span>}\n</pre>\n<p>…but it looks much better as:\n"],["inclusive","RSpec::Matchers::BuiltIn::BeBetween","RSpec/Matchers/BuiltIn/BeBetween.html#method-i-inclusive","()","<p>@api public Makes the between comparison inclusive.\n<p>@example\n\n<pre>expect(3).to be_between(2, 3).inclusive</pre>\n"],["indent_multiline_message","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-indent_multiline_message","(message)",""],["indent_multiline_message","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-indent_multiline_message","(message)",""],["index_failed_objects","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-index_failed_objects","()",""],["initialize_copy","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-initialize_copy","(other)",""],["initialize_copy","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-initialize_copy","(other)",""],["initialize_copy","RSpec::Matchers::MatcherDelegator","RSpec/Matchers/MatcherDelegator.html#method-i-initialize_copy","(other)",""],["inner_matcher_block","RSpec::Matchers::BuiltIn::Compound::NestedEvaluator","RSpec/Matchers/BuiltIn/Compound/NestedEvaluator.html#method-i-inner_matcher_block","(outer_args)","<p>Some block matchers (such as `yield_xyz`) pass args to the `expect` block.\nWhen such a matcher is used …\n"],["inspect","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-inspect","()","<p>Adds the name (rather than a cryptic hex number) so we can identify an\ninstance of the matcher in error …\n"],["inspect_object","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-inspect_object","(o)",""],["inspected_args","RSpec::Matchers::BuiltIn::BeHelpers","RSpec/Matchers/BuiltIn/BeHelpers.html#method-i-inspected_args","()",""],["interface_matches?","RSpec::Expectations::LegacyMatcherAdapter::RSpec1","RSpec/Expectations/LegacyMatcherAdapter/RSpec1.html#method-c-interface_matches-3F","(matcher)","<p>Note: `failure_message` is part of the RSpec 3 protocol (paired with\n`failure_message_when_negated`), …\n"],["interface_matches?","RSpec::Expectations::LegacyMatcherAdapter::RSpec2","RSpec/Expectations/LegacyMatcherAdapter/RSpec2.html#method-c-interface_matches-3F","(matcher)",""],["invalid_type_message","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-invalid_type_message","()",""],["is_matcher_with_description?","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-is_matcher_with_description-3F","(object)",""],["iterable?","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-iterable-3F","()",""],["last_description","RSpec::Matchers","RSpec/Matchers.html#method-c-last_description","()",""],["match","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-i-match","(_expected, _actual)",""],["match","RSpec::Matchers::BuiltIn::Be","RSpec/Matchers/BuiltIn/Be.html#method-i-match","(_, actual)",""],["match","RSpec::Matchers::BuiltIn::BeAKindOf","RSpec/Matchers/BuiltIn/BeAKindOf.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::BeAnInstanceOf","RSpec/Matchers/BuiltIn/BeAnInstanceOf.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::BeFalsey","RSpec/Matchers/BuiltIn/BeFalsey.html#method-i-match","(_, actual)",""],["match","RSpec::Matchers::BuiltIn::BeNil","RSpec/Matchers/BuiltIn/BeNil.html#method-i-match","(_, actual)",""],["match","RSpec::Matchers::BuiltIn::BeTruthy","RSpec/Matchers/BuiltIn/BeTruthy.html#method-i-match","(_, actual)",""],["match","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-match","(_expected, actual)",""],["match","RSpec::Matchers::BuiltIn::Compound::And","RSpec/Matchers/BuiltIn/Compound/And.html#method-i-match","(*)",""],["match","RSpec::Matchers::BuiltIn::Compound::Or","RSpec/Matchers/BuiltIn/Compound/Or.html#method-i-match","(*)",""],["match","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-match","(_expected, _actual)",""],["match","RSpec::Matchers::BuiltIn::Eq","RSpec/Matchers/BuiltIn/Eq.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::Eql","RSpec/Matchers/BuiltIn/Eql.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::Match","RSpec/Matchers/BuiltIn/Match.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::BuiltIn::StartAndEndWith","RSpec/Matchers/BuiltIn/StartAndEndWith.html#method-i-match","(expected, actual)",""],["match","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-match","(&match_block)","<p>Stores the block that is used to determine whether this matcher passes or\nfails. The block should return …\n"],["match_for_should","RSpec::Matchers::DSL::Macros::Deprecated","RSpec/Matchers/DSL/Macros/Deprecated.html#method-i-match_for_should","(&definition)","<p>@deprecated Use {Macros#match} instead.\n"],["match_for_should_not","RSpec::Matchers::DSL::Macros::Deprecated","RSpec/Matchers/DSL/Macros/Deprecated.html#method-i-match_for_should_not","(&definition)","<p>@deprecated Use {Macros#match_when_negated} instead.\n"],["match_unless_raises","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-match_unless_raises","(*exceptions)","<p>@api private Used to wrap a block of code that will indicate failure by\nraising one of the named exceptions. …\n"],["match_unless_raises","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-match_unless_raises","(expected_exception=Exception, &match_block)","<p>Use this instead of `match` when the block will raise an exception rather\nthan returning false to indicate …\n"],["match_when_negated","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-match_when_negated","(&match_block)","<p>Use this to define the block for a negative expectation\n(`expect(…).not_to`) when the positive and …\n"],["match_when_sorted?","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-match_when_sorted-3F","()","<p>This cannot always work (e.g. when dealing with unsortable items, or\nmatchers as expected items), but …\n"],["matcher","RSpec::Matchers::DSL","RSpec/Matchers/DSL.html#method-i-matcher","(name, &declarations)",""],["matcher_1_matches?","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-matcher_1_matches-3F","()",""],["matcher_2_matches?","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-matcher_2_matches-3F","()",""],["matcher_expects_call_stack_jump?","RSpec::Matchers::BuiltIn::Compound::NestedEvaluator","RSpec/Matchers/BuiltIn/Compound/NestedEvaluator.html#method-c-matcher_expects_call_stack_jump-3F","(matcher)",""],["matcher_matches?","RSpec::Matchers::BuiltIn::Compound::NestedEvaluator","RSpec/Matchers/BuiltIn/Compound/NestedEvaluator.html#method-i-matcher_matches-3F","(matcher)",""],["matcher_matches?","RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator","RSpec/Matchers/BuiltIn/Compound/SequentialEvaluator.html#method-i-matcher_matches-3F","(matcher)",""],["matcher_supports_block_expectations?","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-matcher_supports_block_expectations-3F","(matcher)",""],["matches?","RSpec::Matchers::AliasedNegatedMatcher","RSpec/Matchers/AliasedNegatedMatcher.html#method-i-matches-3F","(*args, &block)",""],["matches?","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-matches-3F","(actual)","<p>@api private Indicates if the match is successful. Delegates to `match`,\nwhich should be defined on a …\n"],["matches?","RSpec::Matchers::BuiltIn::BeBetween","RSpec/Matchers/BuiltIn/BeBetween.html#method-i-matches-3F","(actual)","<p>@api private @return [Boolean]\n"],["matches?","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-i-matches-3F","(actual)",""],["matches?","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-matches-3F","(actual, &block)",""],["matches?","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-matches-3F","(actual)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-matches-3F","(event_proc)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::ChangeRelatively","RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-matches-3F","(event_proc)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::Cover","RSpec/Matchers/BuiltIn/Cover.html#method-i-matches-3F","(range)",""],["matches?","RSpec::Matchers::BuiltIn::Exist","RSpec/Matchers/BuiltIn/Exist.html#method-i-matches-3F","(actual)","<p>@api private @return [Boolean]\n"],["matches?","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-matches-3F","(actual, &block)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-matches-3F","(actual)","<p>@api private @return [Boolean]\n"],["matches?","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-matches-3F","(actual)","<p>@api private @return [Boolean]\n"],["matches?","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-matches-3F","(block)",""],["matches?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-matches-3F","(given_proc, negative_expectation=false, &block)","<p>rubocop:disable MethodLength @private\n"],["matches?","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-i-matches-3F","(actual, &block)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-matches-3F","(event_proc)","<p>@private\n"],["matches?","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-matches-3F","(given_proc)","<p>rubocop:disable MethodLength @private\n"],["matches_after?","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-matches_after-3F","()",""],["matches_before?","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-matches_before-3F","()",""],["method_description","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-method_description","()",""],["method_missing","RSpec::Matchers::AliasedMatcher","RSpec/Matchers/AliasedMatcher.html#method-i-method_missing","(*)","<p>Forward messages on to the wrapped matcher. Since many matchers provide a\nfluent interface (e.g. `a_value_within(0.1).of(3)`), …\n"],["method_missing","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-method_missing","(method, *args, &block)","<p>Takes care of forwarding unhandled messages to the\n`@matcher_execution_context` (typically the current …\n"],["method_missing","RSpec::Matchers::MatcherDelegator","RSpec/Matchers/MatcherDelegator.html#method-i-method_missing","(*args, &block)",""],["missing_items","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-missing_items","()",""],["modern_matcher_from","RSpec::Expectations::ExpectationHelper","RSpec/Expectations/ExpectationHelper.html#method-c-modern_matcher_from","(matcher)","<p>Returns an RSpec-3+ compatible matcher, wrapping a legacy one in an adapter\nif necessary.\n<p>@private\n"],["multiline?","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-multiline-3F","(message)",""],["multiline_message","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-multiline_message","(message_1, message_2)",""],["name","RSpec::Matchers::BuiltIn::CaptureStderr","RSpec/Matchers/BuiltIn/CaptureStderr.html#method-c-name","()",""],["name","RSpec::Matchers::BuiltIn::CaptureStdout","RSpec/Matchers/BuiltIn/CaptureStdout.html#method-c-name","()",""],["name","RSpec::Matchers::BuiltIn::NullCapture","RSpec/Matchers/BuiltIn/NullCapture.html#method-c-name","()",""],["name","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-name","()","<p>@api private Provides a name for the matcher.\n"],["name_to_sentence","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-name_to_sentence","()","<p>@private Provides an English expression for the matcher name.\n"],["needs_expected","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-needs_expected","()",""],["negative_failure_reason","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-negative_failure_reason","()",""],["negative_failure_reason","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-negative_failure_reason","()",""],["new","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-c-new","(value)","<p>@api private\n"],["new","RSpec::Expectations::LegacyMatcherAdapter","RSpec/Expectations/LegacyMatcherAdapter.html#method-c-new","(matcher)",""],["new","RSpec::Expectations::LegacyMatcherAdapter","RSpec/Expectations/LegacyMatcherAdapter.html#method-c-new","(matcher)",""],["new","RSpec::Matchers::AliasedMatcher","RSpec/Matchers/AliasedMatcher.html#method-c-new","(base_matcher, description_block)",""],["new","RSpec::Matchers::BuiltIn::All","RSpec/Matchers/BuiltIn/All.html#method-c-new","(matcher)",""],["new","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-c-new","(expected=UNDEFINED)",""],["new","RSpec::Matchers::BuiltIn::Be","RSpec/Matchers/BuiltIn/Be.html#method-c-new","(*args)",""],["new","RSpec::Matchers::BuiltIn::BeBetween","RSpec/Matchers/BuiltIn/BeBetween.html#method-c-new","(min, max)",""],["new","RSpec::Matchers::BuiltIn::BeComparedTo","RSpec/Matchers/BuiltIn/BeComparedTo.html#method-c-new","(operand, operator)",""],["new","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-c-new","(*args, &block)",""],["new","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-c-new","(delta)",""],["new","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-c-new","(receiver=nil, message=nil, &block)",""],["new","RSpec::Matchers::BuiltIn::ChangeDetails","RSpec/Matchers/BuiltIn/ChangeDetails.html#method-c-new","(receiver=nil, message=nil, &block)",""],["new","RSpec::Matchers::BuiltIn::ChangeFromValue","RSpec/Matchers/BuiltIn/ChangeFromValue.html#method-c-new","(change_details, expected_before)",""],["new","RSpec::Matchers::BuiltIn::ChangeRelatively","RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-c-new","(change_details, expected_delta, relativity, &comparer)",""],["new","RSpec::Matchers::BuiltIn::ChangeToValue","RSpec/Matchers/BuiltIn/ChangeToValue.html#method-c-new","(change_details, expected_after)",""],["new","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-c-new","(matcher_1, matcher_2)",""],["new","RSpec::Matchers::BuiltIn::Compound::NestedEvaluator","RSpec/Matchers/BuiltIn/Compound/NestedEvaluator.html#method-c-new","(actual, matcher_1, matcher_2)",""],["new","RSpec::Matchers::BuiltIn::Compound::SequentialEvaluator","RSpec/Matchers/BuiltIn/Compound/SequentialEvaluator.html#method-c-new","(actual, *)",""],["new","RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html#method-c-new","(expected_to_actual_matched_indexes, actual_to_expected_matched_indexes)",""],["new","RSpec::Matchers::BuiltIn::Cover","RSpec/Matchers/BuiltIn/Cover.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::Exist","RSpec/Matchers/BuiltIn/Exist.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-c-new","(method_name, *args, &block)",""],["new","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-c-new","(expected)",""],["new","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-c-new","(actual)",""],["new","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-c-new","(expected)",""],["new","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-c-new","(expected_error_or_message=Exception, expected_message=nil, &block)",""],["new","RSpec::Matchers::BuiltIn::Satisfy","RSpec/Matchers/BuiltIn/Satisfy.html#method-c-new","(&block)",""],["new","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-c-new","(change_details, from, to)",""],["new","RSpec::Matchers::BuiltIn::StartAndEndWith","RSpec/Matchers/BuiltIn/StartAndEndWith.html#method-c-new","(*expected)",""],["new","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-c-new","(expected_symbol=nil, expected_arg=nil)",""],["new","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-c-new","(name, declarations, matcher_execution_context, *expected)","<p>@api private\n"],["new","RSpec::Matchers::MatcherDelegator","RSpec/Matchers/MatcherDelegator.html#method-c-new","(base_matcher)",""],["not_comparable_clause","RSpec::Matchers::BuiltIn::BeBetween","RSpec/Matchers/BuiltIn/BeBetween.html#method-i-not_comparable_clause","()",""],["not_given_a_block_failure","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-not_given_a_block_failure","()",""],["not_numeric_clause","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-not_numeric_clause","()",""],["not_to","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-i-not_to","(matcher=nil, message=nil, &block)","<p>Runs the given expectation, passing if `matcher` returns false. @example\n\n<pre>expect(value).not_to eq(5)</pre>\n<p>@param …\n"],["numeric?","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-numeric-3F","()",""],["of","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-of","(expected)","<p>@api public Sets the expected value.\n"],["opposite_should_method","RSpec::Expectations::NegativeExpectationHandler","RSpec/Expectations/NegativeExpectationHandler.html#method-c-opposite_should_method","()",""],["opposite_should_method","RSpec::Expectations::PositiveExpectationHandler","RSpec/Expectations/PositiveExpectationHandler.html#method-c-opposite_should_method","()",""],["optimal_failure_message","RSpec::Matchers::AliasedNegatedMatcher","RSpec/Matchers/AliasedNegatedMatcher.html#method-i-optimal_failure_message","(same, inverted)","<p>For a matcher that uses the default failure messages, we prefer to use the\noverride provided by the `description_block`, …\n"],["order_block_matchers","RSpec::Matchers::BuiltIn::Compound::NestedEvaluator","RSpec/Matchers/BuiltIn/Compound/NestedEvaluator.html#method-i-order_block_matchers","()","<p>For a matcher like `raise_error` or `throw_symbol`, where the block will\njump up the call stack, we need …\n"],["pairings_maximizer","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-pairings_maximizer","()",""],["parenthesize","RSpec::Matchers::BuiltIn::BeHelpers","RSpec/Matchers/BuiltIn/BeHelpers.html#method-i-parenthesize","(string)",""],["parse_expected","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-parse_expected","(expected)",""],["percent_of","RSpec::Matchers::BuiltIn::BeWithin","RSpec/Matchers/BuiltIn/BeWithin.html#method-i-percent_of","(expected)","<p>@api public Sets the expected value, and makes the matcher do a percent\ncomparison.\n"],["perform_change","RSpec::Matchers::BuiltIn::ChangeDetails","RSpec/Matchers/BuiltIn/ChangeDetails.html#method-i-perform_change","(event_proc)",""],["perform_match","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-perform_match","(predicate)",""],["perform_match","RSpec::Matchers::BuiltIn::Include","RSpec/Matchers/BuiltIn/Include.html#method-i-perform_match","(predicate, hash_subset_predicate)",""],["positive_failure_reason","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-positive_failure_reason","()",""],["positive_failure_reason","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-positive_failure_reason","()",""],["predicate","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-predicate","()",""],["predicate","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-predicate","()",""],["predicate_accessible?","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-predicate_accessible-3F","()",""],["predicate_accessible?","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-predicate_accessible-3F","()",""],["predicate_exists?","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-predicate_exists-3F","()",""],["predicate_exists?","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-predicate_exists-3F","()",""],["predicate_matches?","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-predicate_matches-3F","()",""],["predicate_matches?","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-predicate_matches-3F","()",""],["predicates","RSpec::Matchers::BuiltIn::Exist::ExistenceTest","RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html#method-i-predicates","()",""],["prefix_and_expected","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-prefix_and_expected","(symbol)",""],["prefix_to_sentence","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-prefix_to_sentence","()",""],["present_ivars","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-present_ivars","()",""],["present_tense_predicate","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-present_tense_predicate","()",""],["prevent_invalid_expectations","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-prevent_invalid_expectations","()",""],["prevent_operator_matchers","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-i-prevent_operator_matchers","(verb)",""],["private_predicate?","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-private_predicate-3F","()",""],["private_predicate?","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-private_predicate-3F","()",""],["raise_block_syntax_error","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-raise_block_syntax_error","()",""],["raise_message_already_set","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-raise_message_already_set","()",""],["reciprocal_single_match?","RSpec::Matchers::BuiltIn::ContainExactly::PairingsMaximizer","RSpec/Matchers/BuiltIn/ContainExactly/PairingsMaximizer.html#method-i-reciprocal_single_match-3F","(matches, index, other_list)",""],["register","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-register","(klass, operator, matcher)","<p>@private\n"],["registry","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-registry","()","<p>@private\n"],["respond_to?","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-respond_to-3F","(method, include_private=false)","<p>Indicates that this matcher responds to messages from the\n`@matcher_execution_context` as well.\n"],["respond_to?","RSpec::Matchers::MatcherDelegator","RSpec/Matchers/MatcherDelegator.html#method-i-respond_to-3F","(name, include_all=false)",""],["respond_to_attributes?","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-respond_to_attributes-3F","()",""],["respond_to_failure_message_or","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-respond_to_failure_message_or","()",""],["respond_to_matcher","RSpec::Matchers::BuiltIn::HaveAttributes","RSpec/Matchers/BuiltIn/HaveAttributes.html#method-i-respond_to_matcher","()",""],["respond_to_missing?","RSpec::Matchers::DSL::Matcher","RSpec/Matchers/DSL/Matcher.html#method-i-respond_to_missing-3F","(method, include_private=false)","<p>Indicates that this matcher responds to messages from the\n`@matcher_execution_context` as well. Also …\n"],["respond_to_missing?","RSpec::Matchers::MatcherDelegator","RSpec/Matchers/MatcherDelegator.html#method-i-respond_to_missing-3F","(name, include_all=false)",""],["safe_sort","RSpec::Matchers::BuiltIn::ContainExactly","RSpec/Matchers/BuiltIn/ContainExactly.html#method-i-safe_sort","(array)",""],["setup","RSpec::Expectations::ExpectationHelper","RSpec/Expectations/ExpectationHelper.html#method-c-setup","(handler, matcher, message)",""],["should","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-should","(matcher=nil, message=nil, &block)",""],["should_enabled?","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-should_enabled-3F","(syntax_host=default_should_host)","<p>@api private Indicates whether or not the `should` syntax is enabled.\n"],["should_method","RSpec::Expectations::NegativeExpectationHandler","RSpec/Expectations/NegativeExpectationHandler.html#method-c-should_method","()",""],["should_method","RSpec::Expectations::PositiveExpectationHandler","RSpec/Expectations/PositiveExpectationHandler.html#method-c-should_method","()",""],["should_not","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-should_not","(matcher=nil, message=nil, &block)",""],["simple_failure_message","RSpec::Matchers::BuiltIn::Equal","RSpec/Matchers/BuiltIn/Equal.html#method-i-simple_failure_message","()",""],["singleline_message","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-singleline_message","(message_1, message_2)",""],["split_words","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-split_words","(sym)","<p>@api private Converts a symbol into an english expression.\n"],["split_words","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-c-split_words","(sym)","<p>@api private Converts a symbol into an english expression.\n"],["subset_matches?","RSpec::Matchers::BuiltIn::EndWith","RSpec/Matchers/BuiltIn/EndWith.html#method-i-subset_matches-3F","()",""],["subset_matches?","RSpec::Matchers::BuiltIn::StartWith","RSpec/Matchers/BuiltIn/StartWith.html#method-i-subset_matches-3F","()",""],["supports_block_expectations","RSpec::Matchers::DSL::Macros","RSpec/Matchers/DSL/Macros.html#method-i-supports_block_expectations","()","<p>Declares that the matcher can be used in a block expectation. Users will\nnot be able to use your matcher …\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::BaseMatcher","RSpec/Matchers/BuiltIn/BaseMatcher.html#method-i-supports_block_expectations-3F","()","<p>@api private Most matchers are value matchers (i.e. meant to work with\n`expect(value)`) rather than block …\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::ChangeRelatively","RSpec/Matchers/BuiltIn/ChangeRelatively.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::Compound","RSpec/Matchers/BuiltIn/Compound.html#method-i-supports_block_expectations-3F","()",""],["supports_block_expectations?","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-supports_block_expectations-3F","()","<p>@api private Indicates this matcher matches against a block. @return [True]\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::SpecificValuesChange","RSpec/Matchers/BuiltIn/SpecificValuesChange.html#method-i-supports_block_expectations-3F","()","<p>@private\n"],["supports_block_expectations?","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-supports_block_expectations-3F","()","<p>@api private Indicates this matcher matches against a block. @return [True]\n"],["supports_block_expectations?","RSpec::Matchers::DSL::DefaultImplementations","RSpec/Matchers/DSL/DefaultImplementations.html#method-i-supports_block_expectations-3F","()","<p>Matchers do not support block expectations by default. You must opt-in.\n"],["throw_description","RSpec::Matchers::BuiltIn::ThrowSymbol","RSpec/Matchers/BuiltIn/ThrowSymbol.html#method-i-throw_description","(symbol, arg)",""],["to","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-i-to","(matcher=nil, message=nil, &block)","<p>Runs the given expectation, passing if `matcher` returns true. @example\n\n<pre>expect(value).to eq(5)\nexpect ...</pre>\n"],["to","RSpec::Matchers::BuiltIn::Change","RSpec/Matchers/BuiltIn/Change.html#method-i-to","(value)","<p>@api public Specifies the new value you expect.\n"],["to","RSpec::Matchers::BuiltIn::ChangeFromValue","RSpec/Matchers/BuiltIn/ChangeFromValue.html#method-i-to","(value)","<p>@api public Specifies the new value you expect.\n"],["to_not","RSpec::Expectations::ExpectationTarget","RSpec/Expectations/ExpectationTarget.html#method-i-to_not","(matcher=nil, message=nil, &block)",""],["to_sentence","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-to_sentence","(words)","<p>@api private Converts a collection of objects into an english expression.\n"],["to_stderr","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-to_stderr","()","<p>@api public Tells the matcher to match against stderr.\n"],["to_stdout","RSpec::Matchers::BuiltIn::Output","RSpec/Matchers/BuiltIn/Output.html#method-i-to_stdout","()","<p>@api public Tells the matcher to match against stdout.\n"],["to_word","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-to_word","(item)","<p>@api private Converts the given item to string suitable for use in a list\nexpression.\n"],["underscore","RSpec::Matchers::Pretty","RSpec/Matchers/Pretty.html#method-i-underscore","(camel_cased_word)","<p>@private Borrowed from ActiveSupport\n"],["uniq_truthy_values","RSpec::Matchers::BuiltIn::Exist::ExistenceTest","RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html#method-i-uniq_truthy_values","()",""],["unregister","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-i-unregister","(klass, operator)","<p>@private\n"],["use_custom_matcher_or_delegate","RSpec::Matchers::BuiltIn::OperatorMatcher","RSpec/Matchers/BuiltIn/OperatorMatcher.html#method-c-use_custom_matcher_or_delegate","(operator)","<p>@private\n"],["valid_test?","RSpec::Matchers::BuiltIn::Exist::ExistenceTest","RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html#method-i-valid_test-3F","()","<p>@return [Boolean]\n"],["validity_message","RSpec::Matchers::BuiltIn::BePredicate","RSpec/Matchers/BuiltIn/BePredicate.html#method-i-validity_message","()",""],["validity_message","RSpec::Matchers::BuiltIn::Exist::ExistenceTest","RSpec/Matchers/BuiltIn/Exist/ExistenceTest.html#method-i-validity_message","()","<p>@api private @return [String]\n"],["validity_message","RSpec::Matchers::BuiltIn::Has","RSpec/Matchers/BuiltIn/Has.html#method-i-validity_message","()",""],["verb","RSpec::Expectations::NegativeExpectationHandler","RSpec/Expectations/NegativeExpectationHandler.html#method-c-verb","()",""],["verb","RSpec::Expectations::PositiveExpectationHandler","RSpec/Expectations/PositiveExpectationHandler.html#method-c-verb","()",""],["verify_message","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-verify_message","()",""],["warn_about_should!","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-warn_about_should-21","()","<p>@api private Instructs rspec-expectations to warn on first usage of\n`should` or `should_not`. Enabled …\n"],["warn_about_should_unless_configured","RSpec::Expectations::Syntax","RSpec/Expectations/Syntax.html#method-i-warn_about_should_unless_configured","(method_name)","<p>@api private Generates a deprecation warning for the given method if no\nwarning has already been issued. …\n"],["with_message","RSpec::Matchers::BuiltIn::RaiseError","RSpec/Matchers/BuiltIn/RaiseError.html#method-i-with_message","(expected_message)","<p>@api public Specifies the expected error message.\n"],["wrap","RSpec::Expectations::LegacyMatcherAdapter","RSpec/Expectations/LegacyMatcherAdapter.html#method-c-wrap","(matcher)",""],["wrap","RSpec::Expectations::LegacyMatcherAdapter","RSpec/Expectations/LegacyMatcherAdapter.html#method-c-wrap","(matcher)",""]]}}