var search_data = {"index":{"searchIndex":["basicobject","class","object","rspec","mocks","allowancetarget","andreturnimplementation","andwraporiginalimplementation","andyieldimplementation","anyinstance","chain","customizations","expectchainchain","expectationchain","fluentinterfaceproxy","messagechains","positiveexpectationchain","proxy","recorder","support","stubchain","stubchainchain","anyinstanceallowancetarget","anyinstanceexpectationtarget","argumentlistmatcher","argumentmatchers","anyargmatcher","anyargsmatcher","arrayincludingmatcher","basehashmatcher","booleanmatcher","ducktypematcher","hashexcludingmatcher","hashincludingmatcher","instanceof","kindof","noargsmatcher","classverifyingdouble","configuration","constant","constantmutator","basemutator","constanthider","definedconstantreplacer","undefinedconstantsetter","directmodulereference","directobjectreference","double","errorgenerator","examplemethods","expecthost","expectchain","expectationtarget","implementation","insertontobacktrace","instancemethodreference","instancemethodstasher","object;","instanceverifyingdouble","marshalextension","matchers","expectationcustomization","havereceived","receive","receivemessagechain","receivemessages","messagechain","messageexpectation","methoddouble","@object;","support","methodreference","object;","namedobjectreference","nestedspace","objectmethodreference","object;","objectreference","objectverifyingdouble","objectverifyingdoublemethods","ordergroup","partialclassdoubleproxy","partialclassdoubleproxymethods","partialdoubleproxy","proxy","support","proxyfornil","rootspace","simplemessageexpectation","space","fakemutex","object;","stubchain","syntax","targetbase","testdouble","testdoubleproxy","verifyingdouble","verifyingexistingmethoddouble","verifyingmessageexpectation","verifyingmethoddouble","verifyingpartialclassdoubleproxy","verifyingpartialdoubleproxy","verifyingproxy","verifyingproxymethods","version","==()","===()","===()","===()","===()","===()","===()","===()","===()","===()","[]()","__build_mock_proxy()","__build_mock_proxy_unless_expired()","__disallow_further_usage!()","__mock_proxy()","__raise()","__raise_expired_error()","a_kind_of()","actual_method_call_args_description()","add()","add_default_stub()","add_expectation()","add_message_expectation()","add_simple_expectation()","add_simple_expectation()","add_simple_stub()","add_simple_stub()","add_stub()","add_stub()","add_stub_and_should_receive_to()","all_expectations_fulfilled?()","allow()","allow_any_instance_of()","allow_no_prepended_module_definition_of()","already_observing?()","an_instance_of()","ancestor_is_an_observer?()","any_args()","any_instance()","any_instance_of()","any_instance_proxy_for()","any_instance_proxy_for()","any_instance_recorder_for()","any_instance_recorder_for()","any_instance_recorder_not_found_for()","any_instance_recorders_from_ancestry_of()","any_instance_recorders_from_ancestry_of()","anything()","anythingize_lonely_keys()","apply_constraints_to()","arg_has_valid_description()","arg_list()","arg_message()","args_match?()","array_including()","as_null_object()","as_null_object()","as_null_object()","assign_stubs()","backup_method!()","boolean()","build_alias_method_name()","build_expectation()","build_expectation()","called_max_times?()","chain_on()","check_for_unexpected_arguments()","clear()","clear()","configure_method()","const_to_replace()","const_to_replace()","const_to_replace()","constant_mutator_for()","constrained_to_any_of?()","consume()","count_constraint()","count_message()","create_message_expectation_on()","create_message_expectation_on()","create_message_expectation_on()","create_message_expectation_on()","default_should_syntax_host()","define_matcher()","define_proxy_method()","defined?()","defined?()","defined?()","definition_target()","delegate_not_to()","delegate_to()","describe_expectation()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","disable_expect()","disable_should()","disallow()","disallow_negation()","does_not_match?()","does_not_match?()","duck_type()","dump_with_rspec_mocks()","each_message_on()","each_unfulfilled_expectation_matching()","empty?()","enable_expect()","enable_should()","ensure_count_unconstrained()","ensure_implemented()","ensure_registered()","expect()","expect()","expect_any_instance_of()","expect_chain()","expect_chain()","expect_chain_on()","expect_enabled?()","expectation()","expectation()","expectation()","expectation_for()","expectation_fulfilled!()","expectation_fulfilled?()","expectation_fulfilled?()","expectation_fulfilled?()","expectations_invoked_in_order?()","expected_invocations()","expected_messages_received_in_order?()","expected_method_call_args_description()","expected_part_of_expectation_error()","expression()","failure_message()","failure_message_when_negated()","find_almost_matching_expectation()","find_almost_matching_stub()","find_best_matching_expectation_for()","find_matching_expectation()","find_matching_expectation()","find_matching_method_stub()","find_matching_stub()","find_method()","find_method()","for()","format_args()","format_chain()","format_received_args()","freeze()","generate_failure_message()","handle_order_constraint()","handle_restoration_failures()","has_expectation?()","has_negative_expectation?()","hash_excluding()","hash_including()","hash_not_including()","id_for()","implemented?()","initialize_copy()","inspect()","instance_method_visibility_for()","instance_of()","instance_that_received()","intro()","invocation_order()","invocation_order()","invocation_order()","invocation_order()","invoke()","invoked()","invoked_expectations()","kind_of()","klass()","last_message()","mark_invoked!()","matcher_allowed?()","matches?()","matches?()","matches?()","matches_args?()","message_expectation_class()","message_received()","messages()","method_call_args_description()","method_defined?()","method_defined?()","method_defined_at_any_visibility?()","method_defined_directly_on_klass?()","method_defined_on_klass?()","method_double_for()","method_implemented?()","method_implemented?()","method_is_stashed?()","method_missing()","method_missing()","method_owned_by_klass?()","method_visibility_for()","mock_proxy()","name()","name()","negated?()","never()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_mutex()","new_rspec_prepended_module()","new_scope()","new_scope()","no_args()","normalize_chain()","notify_received_message()","null_object?()","null_object?()","null_object?()","object()","object_singleton_class()","observe!()","opts()","original_method()","original_method()","original_method_handle_for()","patch!()","patch_marshal_to_support_partial_doubles=()","perform_proxying()","playback!()","playback!()","playback!()","playback!()","playback_onto()","prepended_modules_of()","prepended_modules_of_singleton_class()","proxies_of()","proxy_for()","proxy_for()","proxy_method_invoked()","proxy_not_found_for()","proxy_on()","public_protected_or_private_method_defined?()","raise_block_failed_error()","raise_double_negation_error()","raise_expectation_error()","raise_expectation_on_mocked_method()","raise_expectation_on_unstubbed_method()","raise_expired_test_double_error()","raise_if_second_instance_to_receive_message()","raise_invalid_arguments_error()","raise_lifecycle_message()","raise_method_not_stubbed_error()","raise_missing_block_error()","raise_missing_default_stub_error()","raise_missing_default_stub_error()","raise_negation_unsupported()","raise_non_public_error()","raise_only_valid_on_a_partial_double()","raise_out_of_order_error()","raise_similar_message_args_error()","raise_unexpected_message_args_error()","raise_unexpected_message_args_error()","raise_unexpected_message_error()","raise_unexpected_message_error()","raise_unimplemented_error()","raise_unsupported_matcher()","raise_wrong_arity_error()","ready_for?()","receive()","receive_message_chain()","receive_messages()","received_arg_list()","received_expected_message!()","received_expected_message!()","received_message?()","received_message?()","received_part_of_expectation_error()","record()","record()","record_message_received()","register()","register_constant_mutator()","register_constant_mutator()","registered?()","registered?()","remaining_expectations()","remove_dummy_method!()","remove_stub()","remove_stub()","remove_stub_chains_for!()","remove_stub_if_present()","remove_stub_if_present()","replay_received_message_on()","reset()","reset()","reset_all()","reset_all()","reset_syntaxes_to_default()","respond_to?()","respond_to?()","respond_to_missing?()","restore()","restore_method!()","restore_original_method()","restore_original_method!()","restore_original_visibility()","save_original_method!()","setup_allowance()","setup_allowance()","setup_any_instance_allowance()","setup_any_instance_allowance()","setup_any_instance_expectation()","setup_any_instance_expectation()","setup_chain()","setup_expectation()","setup_negative_expectation()","setup_simple_method_double()","should_enabled?()","should_not_receive()","should_not_receive()","should_not_receive()","should_receive()","should_receive()","should_receive()","show_frozen_warning()","stash()","stashed_method_name()","stop_all_observation!()","stop_observing!()","stub()","stub()","stub()","stub_chain()","stub_chain()","stub_chain()","stub_chain_on()","super_class_observers_for()","super_class_observing?()","synchronize()","syntax()","syntax=()","times()","to_s()","transfer_nested_constants?()","unfulfilled_expectations()","unimplemented?()","unpatch!()","unstub()","unstub()","unstub()","usable_rspec_prepended_module()","verify()","verify()","verify()","verify_all()","verify_all()","verify_doubled_constant_names?()","verify_invocation_order()","verify_invocation_order()","verify_invocation_order()","verify_messages_received()","verify_partial_doubles=()","verify_partial_doubles?()","visibility()","visibility()","visibility_for()","visibility_from()","visibility_from()","warn_about_block()","warn_about_should!()","warn_unless_should_configured()","when_loaded()","when_loaded()","with()","with_signature()","yield_receiver_to_any_instance_implementation_blocks?()"],"longSearchIndex":["basicobject","class","object","rspec","rspec::mocks","rspec::mocks::allowancetarget","rspec::mocks::andreturnimplementation","rspec::mocks::andwraporiginalimplementation","rspec::mocks::andyieldimplementation","rspec::mocks::anyinstance","rspec::mocks::anyinstance::chain","rspec::mocks::anyinstance::chain::customizations","rspec::mocks::anyinstance::expectchainchain","rspec::mocks::anyinstance::expectationchain","rspec::mocks::anyinstance::fluentinterfaceproxy","rspec::mocks::anyinstance::messagechains","rspec::mocks::anyinstance::positiveexpectationchain","rspec::mocks::anyinstance::proxy","rspec::mocks::anyinstance::recorder","rspec::mocks::anyinstance::recorder::support","rspec::mocks::anyinstance::stubchain","rspec::mocks::anyinstance::stubchainchain","rspec::mocks::anyinstanceallowancetarget","rspec::mocks::anyinstanceexpectationtarget","rspec::mocks::argumentlistmatcher","rspec::mocks::argumentmatchers","rspec::mocks::argumentmatchers::anyargmatcher","rspec::mocks::argumentmatchers::anyargsmatcher","rspec::mocks::argumentmatchers::arrayincludingmatcher","rspec::mocks::argumentmatchers::basehashmatcher","rspec::mocks::argumentmatchers::booleanmatcher","rspec::mocks::argumentmatchers::ducktypematcher","rspec::mocks::argumentmatchers::hashexcludingmatcher","rspec::mocks::argumentmatchers::hashincludingmatcher","rspec::mocks::argumentmatchers::instanceof","rspec::mocks::argumentmatchers::kindof","rspec::mocks::argumentmatchers::noargsmatcher","rspec::mocks::classverifyingdouble","rspec::mocks::configuration","rspec::mocks::constant","rspec::mocks::constantmutator","rspec::mocks::constantmutator::basemutator","rspec::mocks::constantmutator::constanthider","rspec::mocks::constantmutator::definedconstantreplacer","rspec::mocks::constantmutator::undefinedconstantsetter","rspec::mocks::directmodulereference","rspec::mocks::directobjectreference","rspec::mocks::double","rspec::mocks::errorgenerator","rspec::mocks::examplemethods","rspec::mocks::examplemethods::expecthost","rspec::mocks::expectchain","rspec::mocks::expectationtarget","rspec::mocks::implementation","rspec::mocks::insertontobacktrace","rspec::mocks::instancemethodreference","rspec::mocks::instancemethodstasher","rspec::mocks::instancemethodstasher::object;","rspec::mocks::instanceverifyingdouble","rspec::mocks::marshalextension","rspec::mocks::matchers","rspec::mocks::matchers::expectationcustomization","rspec::mocks::matchers::havereceived","rspec::mocks::matchers::receive","rspec::mocks::matchers::receivemessagechain","rspec::mocks::matchers::receivemessages","rspec::mocks::messagechain","rspec::mocks::messageexpectation","rspec::mocks::methoddouble","rspec::mocks::methoddouble::@object;","rspec::mocks::methoddouble::support","rspec::mocks::methodreference","rspec::mocks::methodreference::object;","rspec::mocks::namedobjectreference","rspec::mocks::nestedspace","rspec::mocks::objectmethodreference","rspec::mocks::objectmethodreference::object;","rspec::mocks::objectreference","rspec::mocks::objectverifyingdouble","rspec::mocks::objectverifyingdoublemethods","rspec::mocks::ordergroup","rspec::mocks::partialclassdoubleproxy","rspec::mocks::partialclassdoubleproxymethods","rspec::mocks::partialdoubleproxy","rspec::mocks::proxy","rspec::mocks::proxy::support","rspec::mocks::proxyfornil","rspec::mocks::rootspace","rspec::mocks::simplemessageexpectation","rspec::mocks::space","rspec::mocks::space::fakemutex","rspec::mocks::space::object;","rspec::mocks::stubchain","rspec::mocks::syntax","rspec::mocks::targetbase","rspec::mocks::testdouble","rspec::mocks::testdoubleproxy","rspec::mocks::verifyingdouble","rspec::mocks::verifyingexistingmethoddouble","rspec::mocks::verifyingmessageexpectation","rspec::mocks::verifyingmethoddouble","rspec::mocks::verifyingpartialclassdoubleproxy","rspec::mocks::verifyingpartialdoubleproxy","rspec::mocks::verifyingproxy","rspec::mocks::verifyingproxymethods","rspec::mocks::version","rspec::mocks::testdouble#==()","rspec::mocks::argumentmatchers::anyargmatcher#===()","rspec::mocks::argumentmatchers::arrayincludingmatcher#===()","rspec::mocks::argumentmatchers::basehashmatcher#===()","rspec::mocks::argumentmatchers::booleanmatcher#===()","rspec::mocks::argumentmatchers::ducktypematcher#===()","rspec::mocks::argumentmatchers::hashexcludingmatcher#===()","rspec::mocks::argumentmatchers::hashincludingmatcher#===()","rspec::mocks::argumentmatchers::instanceof#===()","rspec::mocks::argumentmatchers::kindof#===()","rspec::mocks::anyinstance::messagechains#[]()","rspec::mocks::testdouble#__build_mock_proxy()","rspec::mocks::testdouble#__build_mock_proxy_unless_expired()","rspec::mocks::testdouble#__disallow_further_usage!()","rspec::mocks::testdouble#__mock_proxy()","rspec::mocks::errorgenerator#__raise()","rspec::mocks::testdouble#__raise_expired_error()","rspec::mocks::argumentmatchers#a_kind_of()","rspec::mocks::errorgenerator#actual_method_call_args_description()","rspec::mocks::anyinstance::messagechains#add()","rspec::mocks::methoddouble#add_default_stub()","rspec::mocks::methoddouble#add_expectation()","rspec::mocks::proxy#add_message_expectation()","rspec::mocks::methoddouble#add_simple_expectation()","rspec::mocks::proxy#add_simple_expectation()","rspec::mocks::methoddouble#add_simple_stub()","rspec::mocks::proxy#add_simple_stub()","rspec::mocks::methoddouble#add_stub()","rspec::mocks::proxy#add_stub()","rspec::mocks::configuration#add_stub_and_should_receive_to()","rspec::mocks::anyinstance::messagechains#all_expectations_fulfilled?()","rspec::mocks::syntax#allow()","rspec::mocks::syntax#allow_any_instance_of()","rspec::mocks::anyinstance::recorder#allow_no_prepended_module_definition_of()","rspec::mocks::anyinstance::recorder#already_observing?()","rspec::mocks::argumentmatchers#an_instance_of()","rspec::mocks::anyinstance::recorder#ancestor_is_an_observer?()","rspec::mocks::argumentmatchers#any_args()","rspec::mocks::syntax#any_instance()","rspec::mocks::matchers::receivemessages#any_instance_of()","rspec::mocks::rootspace#any_instance_proxy_for()","rspec::mocks::space#any_instance_proxy_for()","rspec::mocks::rootspace#any_instance_recorder_for()","rspec::mocks::space#any_instance_recorder_for()","rspec::mocks::space#any_instance_recorder_not_found_for()","rspec::mocks::rootspace#any_instance_recorders_from_ancestry_of()","rspec::mocks::space#any_instance_recorders_from_ancestry_of()","rspec::mocks::argumentmatchers#anything()","rspec::mocks::argumentmatchers::anythingize_lonely_keys()","rspec::mocks::matchers::havereceived#apply_constraints_to()","rspec::mocks::errorgenerator#arg_has_valid_description()","rspec::mocks::errorgenerator#arg_list()","rspec::mocks::errorgenerator#arg_message()","rspec::mocks::argumentlistmatcher#args_match?()","rspec::mocks::argumentmatchers#array_including()","rspec::mocks::proxy#as_null_object()","rspec::mocks::syntax#as_null_object()","rspec::mocks::testdouble#as_null_object()","rspec::mocks::testdouble#assign_stubs()","rspec::mocks::anyinstance::recorder#backup_method!()","rspec::mocks::argumentmatchers#boolean()","rspec::mocks::anyinstance::recorder#build_alias_method_name()","rspec::mocks::methoddouble#build_expectation()","rspec::mocks::proxy#build_expectation()","rspec::mocks::simplemessageexpectation#called_max_times?()","rspec::mocks::messagechain#chain_on()","rspec::mocks::proxy#check_for_unexpected_arguments()","rspec::mocks::methoddouble#clear()","rspec::mocks::ordergroup#clear()","rspec::mocks::methoddouble#configure_method()","rspec::mocks::directmodulereference#const_to_replace()","rspec::mocks::directobjectreference#const_to_replace()","rspec::mocks::namedobjectreference#const_to_replace()","rspec::mocks::space#constant_mutator_for()","rspec::mocks::anyinstance::chain#constrained_to_any_of?()","rspec::mocks::ordergroup#consume()","rspec::mocks::matchers::havereceived#count_constraint()","rspec::mocks::errorgenerator#count_message()","rspec::mocks::anyinstance::expectchainchain#create_message_expectation_on()","rspec::mocks::anyinstance::positiveexpectationchain#create_message_expectation_on()","rspec::mocks::anyinstance::stubchain#create_message_expectation_on()","rspec::mocks::anyinstance::stubchainchain#create_message_expectation_on()","rspec::mocks::syntax::default_should_syntax_host()","rspec::mocks::targetbase#define_matcher()","rspec::mocks::methoddouble#define_proxy_method()","rspec::mocks::directobjectreference#defined?()","rspec::mocks::methodreference#defined?()","rspec::mocks::namedobjectreference#defined?()","rspec::mocks::methoddouble#definition_target()","rspec::mocks::targetbase::delegate_not_to()","rspec::mocks::targetbase::delegate_to()","rspec::mocks::errorgenerator#describe_expectation()","rspec::mocks::argumentmatchers::anyargmatcher#description()","rspec::mocks::argumentmatchers::anyargsmatcher#description()","rspec::mocks::argumentmatchers::arrayincludingmatcher#description()","rspec::mocks::argumentmatchers::basehashmatcher#description()","rspec::mocks::argumentmatchers::booleanmatcher#description()","rspec::mocks::argumentmatchers::ducktypematcher#description()","rspec::mocks::argumentmatchers::hashexcludingmatcher#description()","rspec::mocks::argumentmatchers::hashincludingmatcher#description()","rspec::mocks::argumentmatchers::instanceof#description()","rspec::mocks::argumentmatchers::kindof#description()","rspec::mocks::argumentmatchers::noargsmatcher#description()","rspec::mocks::directmodulereference#description()","rspec::mocks::directobjectreference#description()","rspec::mocks::matchers::havereceived#description()","rspec::mocks::namedobjectreference#description()","rspec::mocks::syntax::disable_expect()","rspec::mocks::syntax::disable_should()","rspec::mocks::matchers::havereceived#disallow()","rspec::mocks::targetbase::disallow_negation()","rspec::mocks::matchers::havereceived#does_not_match?()","rspec::mocks::matchers::receivemessages#does_not_match?()","rspec::mocks::argumentmatchers#duck_type()","rspec::mocks::marshalextension#dump_with_rspec_mocks()","rspec::mocks::matchers::receivemessages#each_message_on()","rspec::mocks::anyinstance::messagechains#each_unfulfilled_expectation_matching()","rspec::mocks::ordergroup#empty?()","rspec::mocks::syntax::enable_expect()","rspec::mocks::syntax::enable_should()","rspec::mocks::matchers::havereceived#ensure_count_unconstrained()","rspec::mocks::proxy#ensure_implemented()","rspec::mocks::space#ensure_registered()","rspec::mocks::matchers::havereceived#expect()","rspec::mocks::syntax#expect()","rspec::mocks::syntax#expect_any_instance_of()","rspec::mocks::anyinstance::proxy#expect_chain()","rspec::mocks::anyinstance::recorder#expect_chain()","rspec::mocks::expectchain::expect_chain_on()","rspec::mocks::syntax::expect_enabled?()","rspec::mocks::expectchain#expectation()","rspec::mocks::messagechain#expectation()","rspec::mocks::stubchain#expectation()","rspec::mocks::ordergroup#expectation_for()","rspec::mocks::anyinstance::chain#expectation_fulfilled!()","rspec::mocks::anyinstance::expectchainchain#expectation_fulfilled?()","rspec::mocks::anyinstance::expectationchain#expectation_fulfilled?()","rspec::mocks::anyinstance::stubchain#expectation_fulfilled?()","rspec::mocks::ordergroup#expectations_invoked_in_order?()","rspec::mocks::ordergroup#expected_invocations()","rspec::mocks::matchers::havereceived#expected_messages_received_in_order?()","rspec::mocks::errorgenerator#expected_method_call_args_description()","rspec::mocks::errorgenerator#expected_part_of_expectation_error()","rspec::mocks::targetbase#expression()","rspec::mocks::matchers::havereceived#failure_message()","rspec::mocks::matchers::havereceived#failure_message_when_negated()","rspec::mocks::proxy#find_almost_matching_expectation()","rspec::mocks::proxy#find_almost_matching_stub()","rspec::mocks::proxy#find_best_matching_expectation_for()","rspec::mocks::messagechain#find_matching_expectation()","rspec::mocks::proxy#find_matching_expectation()","rspec::mocks::proxy#find_matching_method_stub()","rspec::mocks::messagechain#find_matching_stub()","rspec::mocks::instancemethodreference#find_method()","rspec::mocks::objectmethodreference#find_method()","rspec::mocks::objectreference::for()","rspec::mocks::errorgenerator#format_args()","rspec::mocks::messagechain#format_chain()","rspec::mocks::errorgenerator#format_received_args()","rspec::mocks::testdouble#freeze()","rspec::mocks::matchers::havereceived#generate_failure_message()","rspec::mocks::ordergroup#handle_order_constraint()","rspec::mocks::instancemethodstasher#handle_restoration_failures()","rspec::mocks::anyinstance::messagechains#has_expectation?()","rspec::mocks::proxy#has_negative_expectation?()","rspec::mocks::argumentmatchers#hash_excluding()","rspec::mocks::argumentmatchers#hash_including()","rspec::mocks::argumentmatchers#hash_not_including()","rspec::mocks::space#id_for()","rspec::mocks::methodreference#implemented?()","rspec::mocks::testdouble#initialize_copy()","rspec::mocks::testdouble#inspect()","rspec::mocks::methodreference::instance_method_visibility_for()","rspec::mocks::argumentmatchers#instance_of()","rspec::mocks::anyinstance::recorder#instance_that_received()","rspec::mocks::errorgenerator#intro()","rspec::mocks::anyinstance::expectchainchain#invocation_order()","rspec::mocks::anyinstance::positiveexpectationchain#invocation_order()","rspec::mocks::anyinstance::stubchain#invocation_order()","rspec::mocks::anyinstance::stubchainchain#invocation_order()","rspec::mocks::simplemessageexpectation#invoke()","rspec::mocks::ordergroup#invoked()","rspec::mocks::ordergroup#invoked_expectations()","rspec::mocks::argumentmatchers#kind_of()","rspec::mocks::anyinstance::proxy#klass()","rspec::mocks::anyinstance::chain#last_message()","rspec::mocks::anyinstance::recorder#mark_invoked!()","rspec::mocks::targetbase#matcher_allowed?()","rspec::mocks::matchers::havereceived#matches?()","rspec::mocks::matchers::receivemessages#matches?()","rspec::mocks::simplemessageexpectation#matches?()","rspec::mocks::anyinstance::chain#matches_args?()","rspec::mocks::methoddouble#message_expectation_class()","rspec::mocks::proxy#message_received()","rspec::mocks::anyinstance::chain#messages()","rspec::mocks::errorgenerator#method_call_args_description()","rspec::mocks::instancemethodreference#method_defined?()","rspec::mocks::objectmethodreference#method_defined?()","rspec::mocks::methodreference::method_defined_at_any_visibility?()","rspec::mocks::instancemethodstasher#method_defined_directly_on_klass?()","rspec::mocks::instancemethodstasher#method_defined_on_klass?()","rspec::mocks::proxy#method_double_for()","rspec::mocks::instancemethodreference#method_implemented?()","rspec::mocks::objectmethodreference#method_implemented?()","rspec::mocks::instancemethodstasher#method_is_stashed?()","rspec::mocks::anyinstance::fluentinterfaceproxy#method_missing()","rspec::mocks::testdouble#method_missing()","rspec::mocks::instancemethodstasher#method_owned_by_klass?()","rspec::mocks::methodreference::method_visibility_for()","rspec::mocks::matchers::havereceived#mock_proxy()","rspec::mocks::matchers::havereceived#name()","rspec::mocks::matchers::receivemessages#name()","rspec::mocks::anyinstance::chain#negated?()","rspec::mocks::anyinstance::chain#never()","rspec::mocks::anyinstance::chain::new()","rspec::mocks::anyinstance::expectchainchain::new()","rspec::mocks::anyinstance::expectationchain::new()","rspec::mocks::anyinstance::fluentinterfaceproxy::new()","rspec::mocks::anyinstance::messagechains::new()","rspec::mocks::anyinstance::proxy::new()","rspec::mocks::anyinstance::recorder::new()","rspec::mocks::anyinstance::stubchainchain::new()","rspec::mocks::argumentlistmatcher::new()","rspec::mocks::argumentmatchers::arrayincludingmatcher::new()","rspec::mocks::argumentmatchers::basehashmatcher::new()","rspec::mocks::argumentmatchers::ducktypematcher::new()","rspec::mocks::argumentmatchers::instanceof::new()","rspec::mocks::argumentmatchers::kindof::new()","rspec::mocks::configuration::new()","rspec::mocks::directobjectreference::new()","rspec::mocks::errorgenerator::new()","rspec::mocks::instancemethodstasher::new()","rspec::mocks::matchers::expectationcustomization::new()","rspec::mocks::matchers::havereceived::new()","rspec::mocks::matchers::receivemessages::new()","rspec::mocks::messagechain::new()","rspec::mocks::methoddouble::new()","rspec::mocks::methodreference::new()","rspec::mocks::namedobjectreference::new()","rspec::mocks::ordergroup::new()","rspec::mocks::proxy::new()","rspec::mocks::simplemessageexpectation::new()","rspec::mocks::space::new()","rspec::mocks::targetbase::new()","rspec::mocks::testdouble::new()","rspec::mocks::space#new_mutex()","rspec::mocks::methoddouble#new_rspec_prepended_module()","rspec::mocks::rootspace#new_scope()","rspec::mocks::space#new_scope()","rspec::mocks::argumentmatchers#no_args()","rspec::mocks::anyinstance::recorder#normalize_chain()","rspec::mocks::anyinstance::recorder#notify_received_message()","rspec::mocks::proxy#null_object?()","rspec::mocks::syntax#null_object?()","rspec::mocks::testdouble#null_object?()","rspec::mocks::namedobjectreference#object()","rspec::mocks::methoddouble#object_singleton_class()","rspec::mocks::anyinstance::recorder#observe!()","rspec::mocks::errorgenerator#opts()","rspec::mocks::methoddouble#original_method()","rspec::mocks::methodreference#original_method()","rspec::mocks::proxy#original_method_handle_for()","rspec::mocks::marshalextension::patch!()","rspec::mocks::configuration#patch_marshal_to_support_partial_doubles=()","rspec::mocks::anyinstance::proxy#perform_proxying()","rspec::mocks::anyinstance::chain#playback!()","rspec::mocks::anyinstance::expectchainchain#playback!()","rspec::mocks::anyinstance::messagechains#playback!()","rspec::mocks::anyinstance::recorder#playback!()","rspec::mocks::matchers::expectationcustomization#playback_onto()","rspec::mocks::proxy::prepended_modules_of()","rspec::mocks::proxy#prepended_modules_of_singleton_class()","rspec::mocks::space#proxies_of()","rspec::mocks::rootspace#proxy_for()","rspec::mocks::space#proxy_for()","rspec::mocks::methoddouble#proxy_method_invoked()","rspec::mocks::space#proxy_not_found_for()","rspec::mocks::matchers::receivemessages#proxy_on()","rspec::mocks::anyinstance::recorder#public_protected_or_private_method_defined?()","rspec::mocks::errorgenerator#raise_block_failed_error()","rspec::mocks::errorgenerator::raise_double_negation_error()","rspec::mocks::errorgenerator#raise_expectation_error()","rspec::mocks::errorgenerator#raise_expectation_on_mocked_method()","rspec::mocks::errorgenerator#raise_expectation_on_unstubbed_method()","rspec::mocks::errorgenerator#raise_expired_test_double_error()","rspec::mocks::anyinstance::messagechains#raise_if_second_instance_to_receive_message()","rspec::mocks::errorgenerator#raise_invalid_arguments_error()","rspec::mocks::rootspace#raise_lifecycle_message()","rspec::mocks::methoddouble#raise_method_not_stubbed_error()","rspec::mocks::errorgenerator#raise_missing_block_error()","rspec::mocks::errorgenerator#raise_missing_default_stub_error()","rspec::mocks::proxy#raise_missing_default_stub_error()","rspec::mocks::targetbase#raise_negation_unsupported()","rspec::mocks::errorgenerator#raise_non_public_error()","rspec::mocks::errorgenerator#raise_only_valid_on_a_partial_double()","rspec::mocks::errorgenerator#raise_out_of_order_error()","rspec::mocks::errorgenerator#raise_similar_message_args_error()","rspec::mocks::errorgenerator#raise_unexpected_message_args_error()","rspec::mocks::proxy#raise_unexpected_message_args_error()","rspec::mocks::errorgenerator#raise_unexpected_message_error()","rspec::mocks::proxy#raise_unexpected_message_error()","rspec::mocks::errorgenerator#raise_unimplemented_error()","rspec::mocks::targetbase#raise_unsupported_matcher()","rspec::mocks::errorgenerator#raise_wrong_arity_error()","rspec::mocks::ordergroup#ready_for?()","rspec::mocks::syntax#receive()","rspec::mocks::syntax#receive_message_chain()","rspec::mocks::syntax#receive_messages()","rspec::mocks::errorgenerator#received_arg_list()","rspec::mocks::anyinstance::messagechains#received_expected_message!()","rspec::mocks::anyinstance::recorder#received_expected_message!()","rspec::mocks::proxy#received_message?()","rspec::mocks::syntax#received_message?()","rspec::mocks::errorgenerator#received_part_of_expectation_error()","rspec::mocks::anyinstance::chain#record()","rspec::mocks::anyinstance::chain::customizations::record()","rspec::mocks::proxy#record_message_received()","rspec::mocks::ordergroup#register()","rspec::mocks::rootspace#register_constant_mutator()","rspec::mocks::space#register_constant_mutator()","rspec::mocks::rootspace#registered?()","rspec::mocks::space#registered?()","rspec::mocks::ordergroup#remaining_expectations()","rspec::mocks::anyinstance::recorder#remove_dummy_method!()","rspec::mocks::methoddouble#remove_stub()","rspec::mocks::proxy#remove_stub()","rspec::mocks::anyinstance::messagechains#remove_stub_chains_for!()","rspec::mocks::methoddouble#remove_stub_if_present()","rspec::mocks::proxy#remove_stub_if_present()","rspec::mocks::proxy#replay_received_message_on()","rspec::mocks::methoddouble#reset()","rspec::mocks::proxy#reset()","rspec::mocks::rootspace#reset_all()","rspec::mocks::space#reset_all()","rspec::mocks::configuration#reset_syntaxes_to_default()","rspec::mocks::anyinstance::fluentinterfaceproxy#respond_to?()","rspec::mocks::testdouble#respond_to?()","rspec::mocks::anyinstance::fluentinterfaceproxy#respond_to_missing?()","rspec::mocks::instancemethodstasher#restore()","rspec::mocks::anyinstance::recorder#restore_method!()","rspec::mocks::methoddouble#restore_original_method()","rspec::mocks::anyinstance::recorder#restore_original_method!()","rspec::mocks::methoddouble#restore_original_visibility()","rspec::mocks::methoddouble#save_original_method!()","rspec::mocks::matchers::havereceived#setup_allowance()","rspec::mocks::matchers::receivemessages#setup_allowance()","rspec::mocks::matchers::havereceived#setup_any_instance_allowance()","rspec::mocks::matchers::receivemessages#setup_any_instance_allowance()","rspec::mocks::matchers::havereceived#setup_any_instance_expectation()","rspec::mocks::matchers::receivemessages#setup_any_instance_expectation()","rspec::mocks::messagechain#setup_chain()","rspec::mocks::matchers::receivemessages#setup_expectation()","rspec::mocks::matchers::receivemessages#setup_negative_expectation()","rspec::mocks::methoddouble#setup_simple_method_double()","rspec::mocks::syntax::should_enabled?()","rspec::mocks::anyinstance::proxy#should_not_receive()","rspec::mocks::anyinstance::recorder#should_not_receive()","rspec::mocks::syntax#should_not_receive()","rspec::mocks::anyinstance::proxy#should_receive()","rspec::mocks::anyinstance::recorder#should_receive()","rspec::mocks::syntax#should_receive()","rspec::mocks::methoddouble#show_frozen_warning()","rspec::mocks::instancemethodstasher#stash()","rspec::mocks::instancemethodstasher#stashed_method_name()","rspec::mocks::anyinstance::recorder#stop_all_observation!()","rspec::mocks::anyinstance::recorder#stop_observing!()","rspec::mocks::anyinstance::proxy#stub()","rspec::mocks::anyinstance::recorder#stub()","rspec::mocks::syntax#stub()","rspec::mocks::anyinstance::proxy#stub_chain()","rspec::mocks::anyinstance::recorder#stub_chain()","rspec::mocks::syntax#stub_chain()","rspec::mocks::stubchain::stub_chain_on()","rspec::mocks::anyinstance::recorder#super_class_observers_for()","rspec::mocks::anyinstance::recorder#super_class_observing?()","rspec::mocks::space::fakemutex::synchronize()","rspec::mocks::configuration#syntax()","rspec::mocks::configuration#syntax=()","rspec::mocks::errorgenerator#times()","rspec::mocks::testdouble#to_s()","rspec::mocks::configuration#transfer_nested_constants?()","rspec::mocks::anyinstance::messagechains#unfulfilled_expectations()","rspec::mocks::methodreference#unimplemented?()","rspec::mocks::marshalextension::unpatch!()","rspec::mocks::anyinstance::proxy#unstub()","rspec::mocks::anyinstance::recorder#unstub()","rspec::mocks::syntax#unstub()","rspec::mocks::methoddouble#usable_rspec_prepended_module()","rspec::mocks::anyinstance::recorder#verify()","rspec::mocks::methoddouble#verify()","rspec::mocks::proxy#verify()","rspec::mocks::rootspace#verify_all()","rspec::mocks::space#verify_all()","rspec::mocks::configuration#verify_doubled_constant_names?()","rspec::mocks::anyinstance::expectationchain#verify_invocation_order()","rspec::mocks::anyinstance::stubchain#verify_invocation_order()","rspec::mocks::ordergroup#verify_invocation_order()","rspec::mocks::simplemessageexpectation#verify_messages_received()","rspec::mocks::configuration#verify_partial_doubles=()","rspec::mocks::configuration#verify_partial_doubles?()","rspec::mocks::methoddouble#visibility()","rspec::mocks::methodreference#visibility()","rspec::mocks::proxy#visibility_for()","rspec::mocks::instancemethodreference#visibility_from()","rspec::mocks::objectmethodreference#visibility_from()","rspec::mocks::matchers::receivemessages#warn_about_block()","rspec::mocks::syntax::warn_about_should!()","rspec::mocks::syntax::warn_unless_should_configured()","rspec::mocks::directobjectreference#when_loaded()","rspec::mocks::namedobjectreference#when_loaded()","rspec::mocks::anyinstance::chain#with()","rspec::mocks::methodreference#with_signature()","rspec::mocks::configuration#yield_receiver_to_any_instance_implementation_blocks?()"],"info":[["BasicObject","","BasicObject.html","",""],["Class","","Class.html","",""],["Object","","Object.html","",""],["RSpec","","RSpec.html","",""],["RSpec::Mocks","","RSpec/Mocks.html","",""],["RSpec::Mocks::AllowanceTarget","","RSpec/Mocks/AllowanceTarget.html","",""],["RSpec::Mocks::AndReturnImplementation","","RSpec/Mocks/AndReturnImplementation.html","",""],["RSpec::Mocks::AndWrapOriginalImplementation","","RSpec/Mocks/AndWrapOriginalImplementation.html","",""],["RSpec::Mocks::AndYieldImplementation","","RSpec/Mocks/AndYieldImplementation.html","",""],["RSpec::Mocks::AnyInstance","","RSpec/Mocks/AnyInstance.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::Chain","","RSpec/Mocks/AnyInstance/Chain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::Chain::Customizations","","RSpec/Mocks/AnyInstance/Chain/Customizations.html","","<p>@private\n<p>Provides convenience methods for recording customizations on message\nexpectations.\n"],["RSpec::Mocks::AnyInstance::ExpectChainChain","","RSpec/Mocks/AnyInstance/ExpectChainChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::ExpectationChain","","RSpec/Mocks/AnyInstance/ExpectationChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::FluentInterfaceProxy","","RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html","","<p>@private Delegates messages to each of the given targets in order to\nprovide the fluent interface that …\n"],["RSpec::Mocks::AnyInstance::MessageChains","","RSpec/Mocks/AnyInstance/MessageChains.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::PositiveExpectationChain","","RSpec/Mocks/AnyInstance/PositiveExpectationChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::Proxy","","RSpec/Mocks/AnyInstance/Proxy.html","","<p>@private The `AnyInstance::Recorder` is responsible for redefining the\nklass&#39;s instance method in …\n"],["RSpec::Mocks::AnyInstance::Recorder","","RSpec/Mocks/AnyInstance/Recorder.html","","<p>Given a class `TheClass`, `TheClass.any_instance` returns a `Recorder`,\nwhich records stubs and message …\n"],["RSpec::Mocks::AnyInstance::Recorder::Support","","RSpec/Mocks/AnyInstance/Recorder/Support.html","",""],["RSpec::Mocks::AnyInstance::StubChain","","RSpec/Mocks/AnyInstance/StubChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstance::StubChainChain","","RSpec/Mocks/AnyInstance/StubChainChain.html","","<p>@private\n"],["RSpec::Mocks::AnyInstanceAllowanceTarget","","RSpec/Mocks/AnyInstanceAllowanceTarget.html","",""],["RSpec::Mocks::AnyInstanceExpectationTarget","","RSpec/Mocks/AnyInstanceExpectationTarget.html","",""],["RSpec::Mocks::ArgumentListMatcher","","RSpec/Mocks/ArgumentListMatcher.html","","<p>Wrapper for matching arguments against a list of expected values. Used by\nthe `with` method on a `MessageExpectation`: …\n"],["RSpec::Mocks::ArgumentMatchers","","RSpec/Mocks/ArgumentMatchers.html","","<p>ArgumentMatchers are placeholders that you can include in message\nexpectations to match arguments against …\n"],["RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","","RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher","","RSpec/Mocks/ArgumentMatchers/AnyArgsMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::ArrayIncludingMatcher","","RSpec/Mocks/ArgumentMatchers/ArrayIncludingMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::BaseHashMatcher","","RSpec/Mocks/ArgumentMatchers/BaseHashMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::BooleanMatcher","","RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","","RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","","RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","","RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::InstanceOf","","RSpec/Mocks/ArgumentMatchers/InstanceOf.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::KindOf","","RSpec/Mocks/ArgumentMatchers/KindOf.html","","<p>@private\n"],["RSpec::Mocks::ArgumentMatchers::NoArgsMatcher","","RSpec/Mocks/ArgumentMatchers/NoArgsMatcher.html","","<p>@private\n"],["RSpec::Mocks::ClassVerifyingDouble","","RSpec/Mocks/ClassVerifyingDouble.html","",""],["RSpec::Mocks::Configuration","","RSpec/Mocks/Configuration.html","","<p>Provides configuration options for rspec-mocks.\n"],["RSpec::Mocks::Constant","","RSpec/Mocks/Constant.html","",""],["RSpec::Mocks::ConstantMutator","","RSpec/Mocks/ConstantMutator.html","",""],["RSpec::Mocks::ConstantMutator::BaseMutator","","RSpec/Mocks/ConstantMutator/BaseMutator.html","",""],["RSpec::Mocks::ConstantMutator::ConstantHider","","RSpec/Mocks/ConstantMutator/ConstantHider.html","",""],["RSpec::Mocks::ConstantMutator::DefinedConstantReplacer","","RSpec/Mocks/ConstantMutator/DefinedConstantReplacer.html","",""],["RSpec::Mocks::ConstantMutator::UndefinedConstantSetter","","RSpec/Mocks/ConstantMutator/UndefinedConstantSetter.html","",""],["RSpec::Mocks::DirectModuleReference","","RSpec/Mocks/DirectModuleReference.html","","<p>Used when a module is passed to `class_double` or `instance_double`.\nRepresents a reference to that module. …\n"],["RSpec::Mocks::DirectObjectReference","","RSpec/Mocks/DirectObjectReference.html","","<p>Used when an object is passed to `object_double`. Represents a reference to\nthat object.\n<p>@private\n"],["RSpec::Mocks::Double","","RSpec/Mocks/Double.html","","<p>A generic test double object. `double`, `instance_double` and friends\nreturn an instance of this.\n"],["RSpec::Mocks::ErrorGenerator","","RSpec/Mocks/ErrorGenerator.html","","<p>@private\n"],["RSpec::Mocks::ExampleMethods","","RSpec/Mocks/ExampleMethods.html","",""],["RSpec::Mocks::ExampleMethods::ExpectHost","","RSpec/Mocks/ExampleMethods/ExpectHost.html","",""],["RSpec::Mocks::ExpectChain","","RSpec/Mocks/ExpectChain.html","","<p>@private\n"],["RSpec::Mocks::ExpectationTarget","","RSpec/Mocks/ExpectationTarget.html","",""],["RSpec::Mocks::Implementation","","RSpec/Mocks/Implementation.html","",""],["RSpec::Mocks::InsertOntoBacktrace","","RSpec/Mocks/InsertOntoBacktrace.html","",""],["RSpec::Mocks::InstanceMethodReference","","RSpec/Mocks/InstanceMethodReference.html","","<p>@private\n"],["RSpec::Mocks::InstanceMethodStasher","","RSpec/Mocks/InstanceMethodStasher.html","","<p>@private\n"],["RSpec::Mocks::InstanceMethodStasher::object;","","RSpec/Mocks/InstanceMethodStasher/object;.html","",""],["RSpec::Mocks::InstanceVerifyingDouble","","RSpec/Mocks/InstanceVerifyingDouble.html","",""],["RSpec::Mocks::MarshalExtension","","RSpec/Mocks/MarshalExtension.html","","<p>Support for `patch_marshal_to_support_partial_doubles` configuration.\n<p>@private\n"],["RSpec::Mocks::Matchers","","RSpec/Mocks/Matchers.html","",""],["RSpec::Mocks::Matchers::ExpectationCustomization","","RSpec/Mocks/Matchers/ExpectationCustomization.html","","<p>@private\n"],["RSpec::Mocks::Matchers::HaveReceived","","RSpec/Mocks/Matchers/HaveReceived.html","","<p>@private\n"],["RSpec::Mocks::Matchers::Receive","","RSpec/Mocks/Matchers/Receive.html","",""],["RSpec::Mocks::Matchers::ReceiveMessageChain","","RSpec/Mocks/Matchers/ReceiveMessageChain.html","",""],["RSpec::Mocks::Matchers::ReceiveMessages","","RSpec/Mocks/Matchers/ReceiveMessages.html","","<p>@private\n"],["RSpec::Mocks::MessageChain","","RSpec/Mocks/MessageChain.html","","<p>@private\n"],["RSpec::Mocks::MessageExpectation","","RSpec/Mocks/MessageExpectation.html","",""],["RSpec::Mocks::MethodDouble","","RSpec/Mocks/MethodDouble.html","","<p>@private\n"],["RSpec::Mocks::MethodDouble::@object;","","RSpec/Mocks/MethodDouble/@object;.html","",""],["RSpec::Mocks::MethodDouble::Support","","RSpec/Mocks/MethodDouble/Support.html","",""],["RSpec::Mocks::MethodReference","","RSpec/Mocks/MethodReference.html","","<p>Represents a method on an object that may or may not be defined. The method\nmay be an instance method …\n"],["RSpec::Mocks::MethodReference::object;","","RSpec/Mocks/MethodReference/object;.html","",""],["RSpec::Mocks::NamedObjectReference","","RSpec/Mocks/NamedObjectReference.html","","<p>Used when a string is passed to `class_double`, `instance_double` or\n`object_double`. Represents a reference …\n"],["RSpec::Mocks::NestedSpace","","RSpec/Mocks/NestedSpace.html","",""],["RSpec::Mocks::ObjectMethodReference","","RSpec/Mocks/ObjectMethodReference.html","","<p>@private\n"],["RSpec::Mocks::ObjectMethodReference::object;","","RSpec/Mocks/ObjectMethodReference/object;.html","",""],["RSpec::Mocks::ObjectReference","","RSpec/Mocks/ObjectReference.html","","<p>@private\n"],["RSpec::Mocks::ObjectVerifyingDouble","","RSpec/Mocks/ObjectVerifyingDouble.html","",""],["RSpec::Mocks::ObjectVerifyingDoubleMethods","","RSpec/Mocks/ObjectVerifyingDoubleMethods.html","",""],["RSpec::Mocks::OrderGroup","","RSpec/Mocks/OrderGroup.html","","<p>@private\n"],["RSpec::Mocks::PartialClassDoubleProxy","","RSpec/Mocks/PartialClassDoubleProxy.html","",""],["RSpec::Mocks::PartialClassDoubleProxyMethods","","RSpec/Mocks/PartialClassDoubleProxyMethods.html","",""],["RSpec::Mocks::PartialDoubleProxy","","RSpec/Mocks/PartialDoubleProxy.html","",""],["RSpec::Mocks::Proxy","","RSpec/Mocks/Proxy.html","","<p>@private\n"],["RSpec::Mocks::Proxy::Support","","RSpec/Mocks/Proxy/Support.html","",""],["RSpec::Mocks::ProxyForNil","","RSpec/Mocks/ProxyForNil.html","",""],["RSpec::Mocks::RootSpace","","RSpec/Mocks/RootSpace.html","","<p>@private Provides a default space implementation for outside the scope of\nan example. Called “root” …\n"],["RSpec::Mocks::SimpleMessageExpectation","","RSpec/Mocks/SimpleMessageExpectation.html","","<p>A message expectation that only allows concrete return values to be set for\na message. While this same …\n"],["RSpec::Mocks::Space","","RSpec/Mocks/Space.html","","<p>@private\n"],["RSpec::Mocks::Space::FakeMutex","","RSpec/Mocks/Space/FakeMutex.html","","<p>@private\n"],["RSpec::Mocks::Space::object;","","RSpec/Mocks/Space/object;.html","",""],["RSpec::Mocks::StubChain","","RSpec/Mocks/StubChain.html","","<p>@private\n"],["RSpec::Mocks::Syntax","","RSpec/Mocks/Syntax.html","","<p>@api private Provides methods for enabling and disabling the available\nsyntaxes provided by rspec-mocks. …\n"],["RSpec::Mocks::TargetBase","","RSpec/Mocks/TargetBase.html","","<p>@private\n"],["RSpec::Mocks::TestDouble","","RSpec/Mocks/TestDouble.html","","<p>Implements the methods needed for a pure test double.  RSpec::Mocks::Double\nincludes this module, and …\n"],["RSpec::Mocks::TestDoubleProxy","","RSpec/Mocks/TestDoubleProxy.html","",""],["RSpec::Mocks::VerifyingDouble","","RSpec/Mocks/VerifyingDouble.html","",""],["RSpec::Mocks::VerifyingExistingMethodDouble","","RSpec/Mocks/VerifyingExistingMethodDouble.html","",""],["RSpec::Mocks::VerifyingMessageExpectation","","RSpec/Mocks/VerifyingMessageExpectation.html","",""],["RSpec::Mocks::VerifyingMethodDouble","","RSpec/Mocks/VerifyingMethodDouble.html","",""],["RSpec::Mocks::VerifyingPartialClassDoubleProxy","","RSpec/Mocks/VerifyingPartialClassDoubleProxy.html","",""],["RSpec::Mocks::VerifyingPartialDoubleProxy","","RSpec/Mocks/VerifyingPartialDoubleProxy.html","",""],["RSpec::Mocks::VerifyingProxy","","RSpec/Mocks/VerifyingProxy.html","",""],["RSpec::Mocks::VerifyingProxyMethods","","RSpec/Mocks/VerifyingProxyMethods.html","",""],["RSpec::Mocks::Version","","RSpec/Mocks/Version.html","","<p>Version information for RSpec mocks.\n"],["==","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-3D-3D","(other)","<p>This allows for comparing the mock to other objects that proxy such as\nActiveRecords belongs_to proxy …\n"],["===","RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html#method-i-3D-3D-3D","(_other)",""],["===","RSpec::Mocks::ArgumentMatchers::ArrayIncludingMatcher","RSpec/Mocks/ArgumentMatchers/ArrayIncludingMatcher.html#method-i-3D-3D-3D","(actual)",""],["===","RSpec::Mocks::ArgumentMatchers::BaseHashMatcher","RSpec/Mocks/ArgumentMatchers/BaseHashMatcher.html#method-i-3D-3D-3D","(predicate, actual)",""],["===","RSpec::Mocks::ArgumentMatchers::BooleanMatcher","RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html#method-i-3D-3D-3D","(value)",""],["===","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#method-i-3D-3D-3D","(value)",""],["===","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#method-i-3D-3D-3D","(actual)",""],["===","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#method-i-3D-3D-3D","(actual)",""],["===","RSpec::Mocks::ArgumentMatchers::InstanceOf","RSpec/Mocks/ArgumentMatchers/InstanceOf.html#method-i-3D-3D-3D","(actual)",""],["===","RSpec::Mocks::ArgumentMatchers::KindOf","RSpec/Mocks/ArgumentMatchers/KindOf.html#method-i-3D-3D-3D","(actual)",""],["[]","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-5B-5D","(method_name)","<p>@private\n"],["__build_mock_proxy","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-__build_mock_proxy","(order_group)",""],["__build_mock_proxy_unless_expired","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-__build_mock_proxy_unless_expired","(order_group)","<p>@private\n"],["__disallow_further_usage!","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-__disallow_further_usage-21","()","<p>@private\n"],["__mock_proxy","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-__mock_proxy","()",""],["__raise","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-__raise","(message)",""],["__raise_expired_error","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-__raise_expired_error","()",""],["a_kind_of","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-a_kind_of","(klass)",""],["actual_method_call_args_description","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-actual_method_call_args_description","(count, args)","<p>@private\n"],["add","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-add","(method_name, chain)","<p>@private\n"],["add_default_stub","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-add_default_stub","(*args, &implementation)","<p>@private\n"],["add_expectation","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-add_expectation","(error_generator, expectation_ordering, expected_from, opts, &implementation)","<p>@private\n"],["add_message_expectation","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-add_message_expectation","(method_name, opts={}, &block)","<p>@private\n"],["add_simple_expectation","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-add_simple_expectation","(method_name, response, error_generator, backtrace_line)","<p>@private\n"],["add_simple_expectation","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-add_simple_expectation","(method_name, response, location)","<p>@private\n"],["add_simple_stub","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-add_simple_stub","(method_name, response)","<p>A simple stub can only return a concrete value for a message, and cannot\nmatch on arguments. It is used …\n"],["add_simple_stub","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-add_simple_stub","(method_name, response)","<p>@private\n"],["add_stub","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-add_stub","(error_generator, expectation_ordering, expected_from, opts={}, &implementation)","<p>@private\n"],["add_stub","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-add_stub","(method_name, opts={}, &implementation)","<p>@private\n"],["add_stub_and_should_receive_to","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-add_stub_and_should_receive_to","(*modules)","<p>Adds `stub` and `should_receive` to the given modules or classes. This is\nusually only necessary if you …\n"],["all_expectations_fulfilled?","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-all_expectations_fulfilled-3F","()","<p>@private\n"],["allow","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-allow","(target)",""],["allow_any_instance_of","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-allow_any_instance_of","(klass)",""],["allow_no_prepended_module_definition_of","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-allow_no_prepended_module_definition_of","(method_name)",""],["already_observing?","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-already_observing-3F","(method_name)","<p>@private\n"],["an_instance_of","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-an_instance_of","(klass)",""],["ancestor_is_an_observer?","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-ancestor_is_an_observer-3F","(method_name)",""],["any_args","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-any_args","()","<p>Matches any args at all. Supports a more explicit variation of\n`expect(object).to receive(:message)` …\n"],["any_instance","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-any_instance","()",""],["any_instance_of","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-any_instance_of","(subject)",""],["any_instance_proxy_for","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-any_instance_proxy_for","(*_args)",""],["any_instance_proxy_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-any_instance_proxy_for","(klass)",""],["any_instance_recorder_for","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-any_instance_recorder_for","(*_args)",""],["any_instance_recorder_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-any_instance_recorder_for","(klass, only_return_existing=false)",""],["any_instance_recorder_not_found_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-any_instance_recorder_not_found_for","(id, klass)",""],["any_instance_recorders_from_ancestry_of","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-any_instance_recorders_from_ancestry_of","(_object)",""],["any_instance_recorders_from_ancestry_of","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-any_instance_recorders_from_ancestry_of","(object)",""],["anything","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-anything","()","<p>Matches any argument at all.\n<p>@example\n\n<pre>expect(object).to receive(:message).with(anything)</pre>\n"],["anythingize_lonely_keys","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-c-anythingize_lonely_keys","(*args)","<p>@private\n"],["apply_constraints_to","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-apply_constraints_to","(expectation)",""],["arg_has_valid_description","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-arg_has_valid_description","(arg)",""],["arg_list","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-arg_list","(*args)",""],["arg_message","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-arg_message","(*args)",""],["args_match?","RSpec::Mocks::ArgumentListMatcher","RSpec/Mocks/ArgumentListMatcher.html#method-i-args_match-3F","(*args)","<p>@api public @param [Array] args\n<p>Matches each element in the `expected_args` against the element in the …\n"],["array_including","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-array_including","(*args)","<p>Matches an array that includes the specified items at least once. Ignores\nduplicates and additional values …\n"],["as_null_object","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-as_null_object","()","<p>@private Tells the object to ignore any messages that aren&#39;t explicitly\nset as stubs or message expectations. …\n"],["as_null_object","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-as_null_object","()",""],["as_null_object","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-as_null_object","()","<p>Tells the object to respond to all messages. If specific stub values are\ndeclared, they&#39;ll work as …\n"],["assign_stubs","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-assign_stubs","(stubs)",""],["backup_method!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-backup_method-21","(method_name)",""],["boolean","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-boolean","()","<p>Matches a boolean value.\n<p>@example\n\n<pre>expect(object).to receive(:message).with(boolean())</pre>\n"],["build_alias_method_name","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-build_alias_method_name","(method_name)","<p>@private\n"],["build_expectation","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-build_expectation","(error_generator, expectation_ordering)","<p>@private\n"],["build_expectation","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-build_expectation","(method_name)","<p>@private\n"],["called_max_times?","RSpec::Mocks::SimpleMessageExpectation","RSpec/Mocks/SimpleMessageExpectation.html#method-i-called_max_times-3F","()",""],["chain_on","RSpec::Mocks::MessageChain","RSpec/Mocks/MessageChain.html#method-i-chain_on","(object, *chain, &block)",""],["check_for_unexpected_arguments","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-check_for_unexpected_arguments","(expectation)","<p>@private\n"],["clear","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-clear","()","<p>@private\n"],["clear","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-clear","()",""],["configure_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-configure_method","()","<p>@private\n"],["const_to_replace","RSpec::Mocks::DirectModuleReference","RSpec/Mocks/DirectModuleReference.html#method-i-const_to_replace","()",""],["const_to_replace","RSpec::Mocks::DirectObjectReference","RSpec/Mocks/DirectObjectReference.html#method-i-const_to_replace","()",""],["const_to_replace","RSpec::Mocks::NamedObjectReference","RSpec/Mocks/NamedObjectReference.html#method-i-const_to_replace","()",""],["constant_mutator_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-constant_mutator_for","(name)",""],["constrained_to_any_of?","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-constrained_to_any_of-3F","(*constraints)","<p>@private\n"],["consume","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-consume","()","<p>@private\n"],["count_constraint","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-count_constraint","()",""],["count_message","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-count_message","(count, expectation_count_type=nil)",""],["create_message_expectation_on","RSpec::Mocks::AnyInstance::ExpectChainChain","RSpec/Mocks/AnyInstance/ExpectChainChain.html#method-i-create_message_expectation_on","(instance)",""],["create_message_expectation_on","RSpec::Mocks::AnyInstance::PositiveExpectationChain","RSpec/Mocks/AnyInstance/PositiveExpectationChain.html#method-i-create_message_expectation_on","(instance)",""],["create_message_expectation_on","RSpec::Mocks::AnyInstance::StubChain","RSpec/Mocks/AnyInstance/StubChain.html#method-i-create_message_expectation_on","(instance)",""],["create_message_expectation_on","RSpec::Mocks::AnyInstance::StubChainChain","RSpec/Mocks/AnyInstance/StubChainChain.html#method-i-create_message_expectation_on","(instance)",""],["default_should_syntax_host","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-default_should_syntax_host","()","<p>@api private Determines where the methods like `should_receive`, and `stub`\nare added.\n"],["define_matcher","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-i-define_matcher","(matcher, name, &block)",""],["define_proxy_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-define_proxy_method","()","<p>@private\n"],["defined?","RSpec::Mocks::DirectObjectReference","RSpec/Mocks/DirectObjectReference.html#method-i-defined-3F","()",""],["defined?","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-i-defined-3F","()","<p>A method is defined if we are able to get a `Method` object for it. In that\ncase, we can assert against …\n"],["defined?","RSpec::Mocks::NamedObjectReference","RSpec/Mocks/NamedObjectReference.html#method-i-defined-3F","()",""],["definition_target","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-definition_target","()",""],["delegate_not_to","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-c-delegate_not_to","(matcher_method, options={})",""],["delegate_to","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-c-delegate_to","(matcher_method)",""],["describe_expectation","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-describe_expectation","(message, expected_received_count, _actual_received_count, *args)","<p>@private\n"],["description","RSpec::Mocks::ArgumentMatchers::AnyArgMatcher","RSpec/Mocks/ArgumentMatchers/AnyArgMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::AnyArgsMatcher","RSpec/Mocks/ArgumentMatchers/AnyArgsMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::ArrayIncludingMatcher","RSpec/Mocks/ArgumentMatchers/ArrayIncludingMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::BaseHashMatcher","RSpec/Mocks/ArgumentMatchers/BaseHashMatcher.html#method-i-description","(name)",""],["description","RSpec::Mocks::ArgumentMatchers::BooleanMatcher","RSpec/Mocks/ArgumentMatchers/BooleanMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::HashExcludingMatcher","RSpec/Mocks/ArgumentMatchers/HashExcludingMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::HashIncludingMatcher","RSpec/Mocks/ArgumentMatchers/HashIncludingMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::InstanceOf","RSpec/Mocks/ArgumentMatchers/InstanceOf.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::KindOf","RSpec/Mocks/ArgumentMatchers/KindOf.html#method-i-description","()",""],["description","RSpec::Mocks::ArgumentMatchers::NoArgsMatcher","RSpec/Mocks/ArgumentMatchers/NoArgsMatcher.html#method-i-description","()",""],["description","RSpec::Mocks::DirectModuleReference","RSpec/Mocks/DirectModuleReference.html#method-i-description","()",""],["description","RSpec::Mocks::DirectObjectReference","RSpec/Mocks/DirectObjectReference.html#method-i-description","()",""],["description","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-description","()",""],["description","RSpec::Mocks::NamedObjectReference","RSpec/Mocks/NamedObjectReference.html#method-i-description","()",""],["disable_expect","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-disable_expect","(syntax_host=::RSpec::Mocks::ExampleMethods)","<p>@api private Disables the expect syntax (`expect(dbl).to receive`,\n`allow(dbl).to receive`, etc).\n"],["disable_should","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-disable_should","(syntax_host=default_should_syntax_host)","<p>@api private Disables the should syntax (`dbl.stub`, `dbl.should_receive`,\netc).\n"],["disallow","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-disallow","(type, reason=\"\")",""],["disallow_negation","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-c-disallow_negation","(method_name)",""],["does_not_match?","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-does_not_match-3F","(subject)",""],["does_not_match?","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-does_not_match-3F","(_subject)",""],["duck_type","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-duck_type","(*args)","<p>Matches if the actual argument responds to the specified messages.\n<p>@example\n\n<pre>expect(object).to receive(:message).with(duck_type(:hello)) ...</pre>\n"],["dump_with_rspec_mocks","RSpec::Mocks::MarshalExtension","RSpec/Mocks/MarshalExtension.html#method-i-dump_with_rspec_mocks","(object, *rest)",""],["each_message_on","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-each_message_on","(host)",""],["each_unfulfilled_expectation_matching","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-each_unfulfilled_expectation_matching","(method_name, *args)","<p>@private\n"],["empty?","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-empty-3F","()",""],["enable_expect","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-enable_expect","(syntax_host=::RSpec::Mocks::ExampleMethods)","<p>@api private Enables the expect syntax (`expect(dbl).to receive`,\n`allow(dbl).to receive`, etc).\n"],["enable_should","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-enable_should","(syntax_host=default_should_syntax_host)","<p>@api private Enables the should syntax (`dbl.stub`, `dbl.should_receive`,\netc).\n"],["ensure_count_unconstrained","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-ensure_count_unconstrained","()",""],["ensure_implemented","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-ensure_implemented","(*_args)","<p>@private\n"],["ensure_registered","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-ensure_registered","(object)",""],["expect","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-expect","()",""],["expect","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-expect","(target)",""],["expect_any_instance_of","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-expect_any_instance_of","(klass)",""],["expect_chain","RSpec::Mocks::AnyInstance::Proxy","RSpec/Mocks/AnyInstance/Proxy.html#method-i-expect_chain","(*chain, &block)",""],["expect_chain","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-expect_chain","(*method_names_and_optional_return_values, &block)","<p>@private\n"],["expect_chain_on","RSpec::Mocks::ExpectChain","RSpec/Mocks/ExpectChain.html#method-c-expect_chain_on","(object, *chain, &blk)","<p>@api private\n"],["expect_enabled?","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-expect_enabled-3F","(syntax_host=::RSpec::Mocks::ExampleMethods)","<p>@api private Indicates whether or not the expect syntax is enabled.\n"],["expectation","RSpec::Mocks::ExpectChain","RSpec/Mocks/ExpectChain.html#method-i-expectation","(object, message, &return_block)",""],["expectation","RSpec::Mocks::MessageChain","RSpec/Mocks/MessageChain.html#method-i-expectation","(_object, _message, &_return_block)",""],["expectation","RSpec::Mocks::StubChain","RSpec/Mocks/StubChain.html#method-i-expectation","(object, message, &return_block)",""],["expectation_for","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-expectation_for","(message)",""],["expectation_fulfilled!","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-expectation_fulfilled-21","()","<p>@private\n"],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::ExpectChainChain","RSpec/Mocks/AnyInstance/ExpectChainChain.html#method-i-expectation_fulfilled-3F","()",""],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::ExpectationChain","RSpec/Mocks/AnyInstance/ExpectationChain.html#method-i-expectation_fulfilled-3F","()",""],["expectation_fulfilled?","RSpec::Mocks::AnyInstance::StubChain","RSpec/Mocks/AnyInstance/StubChain.html#method-i-expectation_fulfilled-3F","()","<p>@private\n"],["expectations_invoked_in_order?","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-expectations_invoked_in_order-3F","()",""],["expected_invocations","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-expected_invocations","()",""],["expected_messages_received_in_order?","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-expected_messages_received_in_order-3F","()",""],["expected_method_call_args_description","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-expected_method_call_args_description","(args)","<p>@private\n"],["expected_part_of_expectation_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-expected_part_of_expectation_error","(expected_received_count, expectation_count_type, argument_list_matcher)","<p>@private\n"],["expression","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-i-expression","()",""],["failure_message","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-failure_message","()",""],["failure_message_when_negated","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-failure_message_when_negated","()",""],["find_almost_matching_expectation","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-find_almost_matching_expectation","(method_name, *args)",""],["find_almost_matching_stub","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-find_almost_matching_stub","(method_name, *args)",""],["find_best_matching_expectation_for","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-find_best_matching_expectation_for","(method_name)",""],["find_matching_expectation","RSpec::Mocks::MessageChain","RSpec/Mocks/MessageChain.html#method-i-find_matching_expectation","()",""],["find_matching_expectation","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-find_matching_expectation","(method_name, *args)",""],["find_matching_method_stub","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-find_matching_method_stub","(method_name, *args)",""],["find_matching_stub","RSpec::Mocks::MessageChain","RSpec/Mocks/MessageChain.html#method-i-find_matching_stub","()",""],["find_method","RSpec::Mocks::InstanceMethodReference","RSpec/Mocks/InstanceMethodReference.html#method-i-find_method","(mod)",""],["find_method","RSpec::Mocks::ObjectMethodReference","RSpec/Mocks/ObjectMethodReference.html#method-i-find_method","(object)",""],["for","RSpec::Mocks::ObjectReference","RSpec/Mocks/ObjectReference.html#method-c-for","(object_module_or_name, allow_direct_object_refs=false)","<p>Returns an appropriate Object or Module reference based on the given\nargument.\n"],["format_args","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-format_args","(*args)",""],["format_chain","RSpec::Mocks::MessageChain","RSpec/Mocks/MessageChain.html#method-i-format_chain","(*chain, &blk)",""],["format_received_args","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-format_received_args","(*args)",""],["freeze","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-freeze","()","<p>Override for default freeze implementation to prevent freezing of test\ndoubles.\n"],["generate_failure_message","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-generate_failure_message","()",""],["handle_order_constraint","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-handle_order_constraint","(expectation)","<p>@private\n"],["handle_restoration_failures","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-handle_restoration_failures","()","<p>ruby 2.0.0-p247 and 2.0.0-p195 both have a bug that we can&#39;t work\naround :(. bugs.ruby-lang.org/issues/8686 …\n"],["has_expectation?","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-has_expectation-3F","(method_name)","<p>@private\n"],["has_negative_expectation?","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-has_negative_expectation-3F","(message)","<p>@private\n"],["hash_excluding","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-hash_excluding","(*args)","<p>Matches a hash that doesn&#39;t include the specified key(s) or key/value.\n<p>@example\n\n<pre>expect(object).to receive(:message).with(hash_excluding(:key ...</pre>\n"],["hash_including","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-hash_including","(*args)","<p>Matches a hash that includes the specified key(s) or key/value pairs.\nIgnores any additional keys.\n<p>@example …\n"],["hash_not_including","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-hash_not_including","(*args)",""],["id_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-id_for","(object)",""],["implemented?","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-i-implemented-3F","()","<p>A method is implemented if sending the message does not result in a\n`NoMethodError`. It might be dynamically …\n"],["initialize_copy","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-initialize_copy","(other)",""],["inspect","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-inspect","()","<p>@private\n"],["instance_method_visibility_for","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-c-instance_method_visibility_for","(klass, method_name)",""],["instance_of","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-instance_of","(klass)","<p>Matches if `arg.instance_of?(klass)`\n<p>@example\n\n<pre>expect(object).to receive(:message).with(instance_of(Thing))</pre>\n"],["instance_that_received","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-instance_that_received","(method_name)","<p>@private\n"],["intro","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-intro","()",""],["invocation_order","RSpec::Mocks::AnyInstance::ExpectChainChain","RSpec/Mocks/AnyInstance/ExpectChainChain.html#method-i-invocation_order","()",""],["invocation_order","RSpec::Mocks::AnyInstance::PositiveExpectationChain","RSpec/Mocks/AnyInstance/PositiveExpectationChain.html#method-i-invocation_order","()",""],["invocation_order","RSpec::Mocks::AnyInstance::StubChain","RSpec/Mocks/AnyInstance/StubChain.html#method-i-invocation_order","()",""],["invocation_order","RSpec::Mocks::AnyInstance::StubChainChain","RSpec/Mocks/AnyInstance/StubChainChain.html#method-i-invocation_order","()",""],["invoke","RSpec::Mocks::SimpleMessageExpectation","RSpec/Mocks/SimpleMessageExpectation.html#method-i-invoke","(*_)",""],["invoked","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-invoked","(message)",""],["invoked_expectations","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-invoked_expectations","()",""],["kind_of","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-kind_of","(klass)","<p>Matches if `arg.kind_of?(klass)` @example\n\n<pre>expect(object).to receive(:message).with(kind_of(Thing))</pre>\n"],["klass","RSpec::Mocks::AnyInstance::Proxy","RSpec/Mocks/AnyInstance/Proxy.html#method-i-klass","()",""],["last_message","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-last_message","()",""],["mark_invoked!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-mark_invoked-21","(method_name)",""],["matcher_allowed?","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-i-matcher_allowed-3F","(matcher)",""],["matches?","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-matches-3F","(subject, &block)",""],["matches?","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-matches-3F","(subject)",""],["matches?","RSpec::Mocks::SimpleMessageExpectation","RSpec/Mocks/SimpleMessageExpectation.html#method-i-matches-3F","(message, *_)",""],["matches_args?","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-matches_args-3F","(*args)","<p>@private\n"],["message_expectation_class","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-message_expectation_class","()","<p>The type of message expectation to create has been extracted to its own\nmethod so that subclasses can …\n"],["message_received","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-message_received","(message, *args, &block)","<p>@private\n"],["messages","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-messages","()",""],["method_call_args_description","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-method_call_args_description","(args)","<p>@private\n"],["method_defined?","RSpec::Mocks::InstanceMethodReference","RSpec/Mocks/InstanceMethodReference.html#method-i-method_defined-3F","(mod)","<p>Ideally, we&#39;d use `respond_to?` for `method_implemented?` but we need a\nreference to an instance …\n"],["method_defined?","RSpec::Mocks::ObjectMethodReference","RSpec/Mocks/ObjectMethodReference.html#method-i-method_defined-3F","(object)",""],["method_defined_at_any_visibility?","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-c-method_defined_at_any_visibility-3F","(klass, method_name)",""],["method_defined_directly_on_klass?","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-method_defined_directly_on_klass-3F","()","<p>@private\n"],["method_defined_on_klass?","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-method_defined_on_klass-3F","(klass=@klass)","<p>@private\n"],["method_double_for","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-method_double_for","(message)",""],["method_implemented?","RSpec::Mocks::InstanceMethodReference","RSpec/Mocks/InstanceMethodReference.html#method-i-method_implemented-3F","(mod)",""],["method_implemented?","RSpec::Mocks::ObjectMethodReference","RSpec/Mocks/ObjectMethodReference.html#method-i-method_implemented-3F","(object)",""],["method_is_stashed?","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-method_is_stashed-3F","()","<p>@private\n"],["method_missing","RSpec::Mocks::AnyInstance::FluentInterfaceProxy","RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html#method-i-method_missing","(*args, &block)",""],["method_missing","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-method_missing","(message, *args, &block)",""],["method_owned_by_klass?","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-method_owned_by_klass-3F","()",""],["method_visibility_for","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-c-method_visibility_for","(object, method_name)",""],["mock_proxy","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-mock_proxy","()",""],["name","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-name","()",""],["name","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-name","()",""],["negated?","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-negated-3F","()",""],["never","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-never","()",""],["new","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-c-new","(recorder, *args, &block)",""],["new","RSpec::Mocks::AnyInstance::ExpectChainChain","RSpec/Mocks/AnyInstance/ExpectChainChain.html#method-c-new","(*args)",""],["new","RSpec::Mocks::AnyInstance::ExpectationChain","RSpec/Mocks/AnyInstance/ExpectationChain.html#method-c-new","(*args, &block)",""],["new","RSpec::Mocks::AnyInstance::FluentInterfaceProxy","RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html#method-c-new","(targets)",""],["new","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-c-new","()",""],["new","RSpec::Mocks::AnyInstance::Proxy","RSpec/Mocks/AnyInstance/Proxy.html#method-c-new","(recorder, target_proxies)",""],["new","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-c-new","(klass)",""],["new","RSpec::Mocks::AnyInstance::StubChainChain","RSpec/Mocks/AnyInstance/StubChainChain.html#method-c-new","(*args)",""],["new","RSpec::Mocks::ArgumentListMatcher","RSpec/Mocks/ArgumentListMatcher.html#method-c-new","(*expected_args)","<p>@api public @param [Array] expected_args a list of expected literals and/or\nargument matchers\n<p>Initializes …\n"],["new","RSpec::Mocks::ArgumentMatchers::ArrayIncludingMatcher","RSpec/Mocks/ArgumentMatchers/ArrayIncludingMatcher.html#method-c-new","(expected)",""],["new","RSpec::Mocks::ArgumentMatchers::BaseHashMatcher","RSpec/Mocks/ArgumentMatchers/BaseHashMatcher.html#method-c-new","(expected)",""],["new","RSpec::Mocks::ArgumentMatchers::DuckTypeMatcher","RSpec/Mocks/ArgumentMatchers/DuckTypeMatcher.html#method-c-new","(*methods_to_respond_to)",""],["new","RSpec::Mocks::ArgumentMatchers::InstanceOf","RSpec/Mocks/ArgumentMatchers/InstanceOf.html#method-c-new","(klass)",""],["new","RSpec::Mocks::ArgumentMatchers::KindOf","RSpec/Mocks/ArgumentMatchers/KindOf.html#method-c-new","(klass)",""],["new","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-c-new","()",""],["new","RSpec::Mocks::DirectObjectReference","RSpec/Mocks/DirectObjectReference.html#method-c-new","(object)",""],["new","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-c-new","(target, name)",""],["new","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-c-new","(object, method)",""],["new","RSpec::Mocks::Matchers::ExpectationCustomization","RSpec/Mocks/Matchers/ExpectationCustomization.html#method-c-new","(method_name, args, block)",""],["new","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-c-new","(method_name, &block)",""],["new","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-c-new","(message_return_value_hash)",""],["new","RSpec::Mocks::MessageChain","RSpec/Mocks/MessageChain.html#method-c-new","(object, *chain, &blk)",""],["new","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-c-new","(object, method_name, proxy)","<p>@private\n"],["new","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-c-new","(object_reference, method_name)",""],["new","RSpec::Mocks::NamedObjectReference","RSpec/Mocks/NamedObjectReference.html#method-c-new","(const_name)",""],["new","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-c-new","()",""],["new","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-c-new","(object, order_group, name=nil, options={})","<p>@private\n"],["new","RSpec::Mocks::SimpleMessageExpectation","RSpec/Mocks/SimpleMessageExpectation.html#method-c-new","(message, response, error_generator, backtrace_line=nil)",""],["new","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-c-new","()",""],["new","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-c-new","(target)",""],["new","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-c-new","(name=nil, stubs={})","<p>Creates a new test double with a `name` (that will be used in error\nmessages only)\n"],["new_mutex","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-new_mutex","()","<p>We don&#39;t want to depend on the stdlib ourselves, but if the user is\nusing threads then a Mutex will …\n"],["new_rspec_prepended_module","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-new_rspec_prepended_module","()",""],["new_scope","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-new_scope","()",""],["new_scope","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-new_scope","()",""],["no_args","RSpec::Mocks::ArgumentMatchers","RSpec/Mocks/ArgumentMatchers.html#method-i-no_args","()","<p>Matches no arguments.\n<p>@example\n\n<pre>expect(object).to receive(:message).with(no_args)</pre>\n"],["normalize_chain","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-normalize_chain","(*args)",""],["notify_received_message","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-notify_received_message","(_object, message, args, _blk)","<p>@private\n"],["null_object?","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-null_object-3F","()","<p>@private\n"],["null_object?","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-null_object-3F","()",""],["null_object?","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-null_object-3F","()","<p>Returns true if this object has received `as_null_object`\n"],["object","RSpec::Mocks::NamedObjectReference","RSpec/Mocks/NamedObjectReference.html#method-i-object","()",""],["object_singleton_class","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-object_singleton_class","()","<p>@private\n"],["observe!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-observe-21","(method_name)",""],["opts","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-opts","()","<p>@private\n"],["original_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-original_method","()",""],["original_method","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-i-original_method","()",""],["original_method_handle_for","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-original_method_handle_for","(_message)","<p>@private\n"],["patch!","RSpec::Mocks::MarshalExtension","RSpec/Mocks/MarshalExtension.html#method-c-patch-21","()",""],["patch_marshal_to_support_partial_doubles=","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-patch_marshal_to_support_partial_doubles-3D","(val)","<p>Monkey-patch `Marshal.dump` to enable dumping of mocked or stubbed objects.\nBy default this will not …\n"],["perform_proxying","RSpec::Mocks::AnyInstance::Proxy","RSpec/Mocks/AnyInstance/Proxy.html#method-i-perform_proxying","(method_name, args, block, &target_proxy_block)",""],["playback!","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-playback-21","(instance)","<p>@private\n"],["playback!","RSpec::Mocks::AnyInstance::ExpectChainChain","RSpec/Mocks/AnyInstance/ExpectChainChain.html#method-i-playback-21","(instance)",""],["playback!","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-playback-21","(instance, method_name)","<p>@private\n"],["playback!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-playback-21","(instance, method_name)","<p>@private\n"],["playback_onto","RSpec::Mocks::Matchers::ExpectationCustomization","RSpec/Mocks/Matchers/ExpectationCustomization.html#method-i-playback_onto","(expectation)",""],["prepended_modules_of","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-c-prepended_modules_of","(klass)",""],["prepended_modules_of_singleton_class","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-prepended_modules_of_singleton_class","()",""],["proxies_of","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-proxies_of","(klass)",""],["proxy_for","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-proxy_for","(*_args)",""],["proxy_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-proxy_for","(object)",""],["proxy_method_invoked","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-proxy_method_invoked","(_obj, *args, &block)","<p>The implementation of the proxied method. Subclasses may override this\nmethod to perform additional operations. …\n"],["proxy_not_found_for","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-proxy_not_found_for","(id, object)",""],["proxy_on","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-proxy_on","(subject)",""],["public_protected_or_private_method_defined?","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-public_protected_or_private_method_defined-3F","(method_name)",""],["raise_block_failed_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_block_failed_error","(message, detail)","<p>@private\n"],["raise_double_negation_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-c-raise_double_negation_error","(wrapped_expression)",""],["raise_expectation_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_error","(message, expected_received_count, argument_list_matcher, actual_received_count, expectation_count_type, *args)","<p>rubocop:disable Style/ParameterLists @private\n"],["raise_expectation_on_mocked_method","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_on_mocked_method","(method)","<p>@private\n"],["raise_expectation_on_unstubbed_method","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_expectation_on_unstubbed_method","(method)","<p>@private\n"],["raise_expired_test_double_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_expired_test_double_error","()","<p>@private\n"],["raise_if_second_instance_to_receive_message","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-raise_if_second_instance_to_receive_message","(instance)",""],["raise_invalid_arguments_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_invalid_arguments_error","(verifier)","<p>@private\n"],["raise_lifecycle_message","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-raise_lifecycle_message","()",""],["raise_method_not_stubbed_error","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-raise_method_not_stubbed_error","()","<p>@private\n"],["raise_missing_block_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_missing_block_error","(args_to_yield)","<p>@private\n"],["raise_missing_default_stub_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_missing_default_stub_error","(expectation, *args)","<p>@private\n"],["raise_missing_default_stub_error","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-raise_missing_default_stub_error","(expectation, *args)","<p>@private\n"],["raise_negation_unsupported","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-i-raise_negation_unsupported","(method_name, matcher)",""],["raise_non_public_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_non_public_error","(method_name, visibility)","<p>@private\n"],["raise_only_valid_on_a_partial_double","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_only_valid_on_a_partial_double","(method)","<p>@private\n"],["raise_out_of_order_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_out_of_order_error","(message)","<p>@private\n"],["raise_similar_message_args_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_similar_message_args_error","(expectation, *args_for_multiple_calls)","<p>@private\n"],["raise_unexpected_message_args_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_unexpected_message_args_error","(expectation, *args)","<p>@private\n"],["raise_unexpected_message_args_error","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-raise_unexpected_message_args_error","(expectation, *args)","<p>@private\n"],["raise_unexpected_message_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_unexpected_message_error","(message, *args)","<p>@private\n"],["raise_unexpected_message_error","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-raise_unexpected_message_error","(method_name, *args)","<p>@private\n"],["raise_unimplemented_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_unimplemented_error","(doubled_module, method_name)","<p>@private\n"],["raise_unsupported_matcher","RSpec::Mocks::TargetBase","RSpec/Mocks/TargetBase.html#method-i-raise_unsupported_matcher","(method_name, matcher)",""],["raise_wrong_arity_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-raise_wrong_arity_error","(args_to_yield, signature)","<p>@private\n"],["ready_for?","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-ready_for-3F","(expectation)","<p>@private\n"],["receive","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-receive","(method_name, &block)",""],["receive_message_chain","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-receive_message_chain","(*messages, &block)",""],["receive_messages","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-receive_messages","(message_return_value_hash)",""],["received_arg_list","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-received_arg_list","(*args)",""],["received_expected_message!","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-received_expected_message-21","(method_name)","<p>@private\n"],["received_expected_message!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-received_expected_message-21","(method_name)",""],["received_message?","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-received_message-3F","(method_name, *args, &block)","<p>@private\n"],["received_message?","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-received_message-3F","(message, *args, &block)",""],["received_part_of_expectation_error","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-received_part_of_expectation_error","(actual_received_count, *args)","<p>@private\n"],["record","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-record","(rspec_method_name, *args, &block)",""],["record","RSpec::Mocks::AnyInstance::Chain::Customizations","RSpec/Mocks/AnyInstance/Chain/Customizations.html#method-c-record","(method_name)","<p>@macro [attach] record\n\n<pre>@method $1(*args, &amp;block)\nRecords the `$1` message for playback against an instance ...</pre>\n"],["record_message_received","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-record_message_received","(message, *args, &block)","<p>@private\n"],["register","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-register","(expectation)","<p>@private\n"],["register_constant_mutator","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-register_constant_mutator","(_mutator)",""],["register_constant_mutator","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-register_constant_mutator","(mutator)",""],["registered?","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-registered-3F","(_object)",""],["registered?","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-registered-3F","(object)",""],["remaining_expectations","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-remaining_expectations","()",""],["remove_dummy_method!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-remove_dummy_method-21","(method_name)",""],["remove_stub","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-remove_stub","()","<p>@private\n"],["remove_stub","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-remove_stub","(method_name)","<p>@private\n"],["remove_stub_chains_for!","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-remove_stub_chains_for-21","(method_name)","<p>@private\n"],["remove_stub_if_present","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-remove_stub_if_present","()","<p>@private\n"],["remove_stub_if_present","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-remove_stub_if_present","(method_name)","<p>@private\n"],["replay_received_message_on","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-replay_received_message_on","(expectation, &block)","<p>@private\n"],["reset","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-reset","()","<p>@private\n"],["reset","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-reset","()","<p>@private\n"],["reset_all","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-reset_all","()",""],["reset_all","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-reset_all","()",""],["reset_syntaxes_to_default","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-reset_syntaxes_to_default","()","<p>@api private Resets the configured syntax to the default.\n"],["respond_to?","RSpec::Mocks::AnyInstance::FluentInterfaceProxy","RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html#method-i-respond_to-3F","(method_name, include_private=false)",""],["respond_to?","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-respond_to-3F","(message, incl_private=false)","<p>@private\n"],["respond_to_missing?","RSpec::Mocks::AnyInstance::FluentInterfaceProxy","RSpec/Mocks/AnyInstance/FluentInterfaceProxy.html#method-i-respond_to_missing-3F","(method_name, include_private=false)",""],["restore","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-restore","()","<p>@private\n"],["restore_method!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-restore_method-21","(method_name)",""],["restore_original_method","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-restore_original_method","()","<p>@private\n"],["restore_original_method!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-restore_original_method-21","(method_name)",""],["restore_original_visibility","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-restore_original_visibility","()","<p>@private\n"],["save_original_method!","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-save_original_method-21","()",""],["setup_allowance","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-setup_allowance","(_subject, &_block)",""],["setup_allowance","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_allowance","(subject)",""],["setup_any_instance_allowance","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-setup_any_instance_allowance","(_subject, &_block)",""],["setup_any_instance_allowance","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_any_instance_allowance","(subject)",""],["setup_any_instance_expectation","RSpec::Mocks::Matchers::HaveReceived","RSpec/Mocks/Matchers/HaveReceived.html#method-i-setup_any_instance_expectation","(_subject, &_block)",""],["setup_any_instance_expectation","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_any_instance_expectation","(subject)",""],["setup_chain","RSpec::Mocks::MessageChain","RSpec/Mocks/MessageChain.html#method-i-setup_chain","()","<p>@api private\n"],["setup_expectation","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_expectation","(subject)",""],["setup_negative_expectation","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-setup_negative_expectation","(_subject)",""],["setup_simple_method_double","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-setup_simple_method_double","(method_name, response, collection, error_generator=nil, backtrace_line=nil)","<p>@private\n"],["should_enabled?","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-should_enabled-3F","(syntax_host=default_should_syntax_host)","<p>@api private Indicates whether or not the should syntax is enabled.\n"],["should_not_receive","RSpec::Mocks::AnyInstance::Proxy","RSpec/Mocks/AnyInstance/Proxy.html#method-i-should_not_receive","(method_name, &block)",""],["should_not_receive","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-should_not_receive","(method_name, &block)","<p>The opposite of `should_receive`\n<p>@see Methods#should_not_receive\n"],["should_not_receive","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-should_not_receive","(message, &block)",""],["should_receive","RSpec::Mocks::AnyInstance::Proxy","RSpec/Mocks/AnyInstance/Proxy.html#method-i-should_receive","(method_name, &block)",""],["should_receive","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-should_receive","(method_name, &block)","<p>Initializes the recording a message expectation to be played back against\nany instance of this object …\n"],["should_receive","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-should_receive","(message, opts={}, &block)",""],["show_frozen_warning","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-show_frozen_warning","()","<p>@private\n"],["stash","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-stash","()","<p>@private\n"],["stashed_method_name","RSpec::Mocks::InstanceMethodStasher","RSpec/Mocks/InstanceMethodStasher.html#method-i-stashed_method_name","()","<p>@private\n"],["stop_all_observation!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-stop_all_observation-21","()","<p>@private\n"],["stop_observing!","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-stop_observing-21","(method_name)",""],["stub","RSpec::Mocks::AnyInstance::Proxy","RSpec/Mocks/AnyInstance/Proxy.html#method-i-stub","(method_name_or_method_map, &block)",""],["stub","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-stub","(method_name, &block)","<p>Initializes the recording a stub to be played back against any instance of\nthis object that invokes the …\n"],["stub","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-stub","(message_or_hash, opts={}, &block)",""],["stub_chain","RSpec::Mocks::AnyInstance::Proxy","RSpec/Mocks/AnyInstance/Proxy.html#method-i-stub_chain","(*chain, &block)",""],["stub_chain","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-stub_chain","(*method_names_and_optional_return_values, &block)","<p>Initializes the recording a stub chain to be played back against any\ninstance of this object that invokes …\n"],["stub_chain","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-stub_chain","(*chain, &blk)",""],["stub_chain_on","RSpec::Mocks::StubChain","RSpec/Mocks/StubChain.html#method-c-stub_chain_on","(object, *chain, &blk)",""],["super_class_observers_for","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-super_class_observers_for","(method_name)",""],["super_class_observing?","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-super_class_observing-3F","(method_name)",""],["synchronize","RSpec::Mocks::Space::FakeMutex","RSpec/Mocks/Space/FakeMutex.html#method-c-synchronize","()",""],["syntax","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-syntax","()","<p>Returns an array with a list of syntaxes that are enabled.\n<p>@example\n\n<pre>unless RSpec::Mocks.configuration.syntax.include?(:expect) ...</pre>\n"],["syntax=","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-syntax-3D","(*values)","<p>Provides the ability to set either `expect`, `should` or both syntaxes.\nRSpec uses `expect` syntax by …\n"],["times","RSpec::Mocks::ErrorGenerator","RSpec/Mocks/ErrorGenerator.html#method-i-times","(count)",""],["to_s","RSpec::Mocks::TestDouble","RSpec/Mocks/TestDouble.html#method-i-to_s","()","<p>@private\n"],["transfer_nested_constants?","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-transfer_nested_constants-3F","()",""],["unfulfilled_expectations","RSpec::Mocks::AnyInstance::MessageChains","RSpec/Mocks/AnyInstance/MessageChains.html#method-i-unfulfilled_expectations","()","<p>@private\n"],["unimplemented?","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-i-unimplemented-3F","()","<p>Returns true if we definitively know that sending the method will result in\na `NoMethodError`.\n<p>This is …\n"],["unpatch!","RSpec::Mocks::MarshalExtension","RSpec/Mocks/MarshalExtension.html#method-c-unpatch-21","()",""],["unstub","RSpec::Mocks::AnyInstance::Proxy","RSpec/Mocks/AnyInstance/Proxy.html#method-i-unstub","(method_name)",""],["unstub","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-unstub","(method_name)","<p>Removes any previously recorded stubs, stub_chains or message expectations\nthat use `method_name`.\n<p>@see …\n"],["unstub","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-i-unstub","(message)",""],["usable_rspec_prepended_module","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-usable_rspec_prepended_module","()",""],["verify","RSpec::Mocks::AnyInstance::Recorder","RSpec/Mocks/AnyInstance/Recorder.html#method-i-verify","()","<p>@api private\n<p>Used internally to verify that message expectations have been fulfilled.\n"],["verify","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-verify","()","<p>@private\n"],["verify","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-verify","()","<p>@private\n"],["verify_all","RSpec::Mocks::RootSpace","RSpec/Mocks/RootSpace.html#method-i-verify_all","()",""],["verify_all","RSpec::Mocks::Space","RSpec/Mocks/Space.html#method-i-verify_all","()",""],["verify_doubled_constant_names?","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-verify_doubled_constant_names-3F","()",""],["verify_invocation_order","RSpec::Mocks::AnyInstance::ExpectationChain","RSpec/Mocks/AnyInstance/ExpectationChain.html#method-i-verify_invocation_order","(_rspec_method_name, *_args, &_block)",""],["verify_invocation_order","RSpec::Mocks::AnyInstance::StubChain","RSpec/Mocks/AnyInstance/StubChain.html#method-i-verify_invocation_order","(rspec_method_name, *_args, &_block)",""],["verify_invocation_order","RSpec::Mocks::OrderGroup","RSpec/Mocks/OrderGroup.html#method-i-verify_invocation_order","(expectation)",""],["verify_messages_received","RSpec::Mocks::SimpleMessageExpectation","RSpec/Mocks/SimpleMessageExpectation.html#method-i-verify_messages_received","()",""],["verify_partial_doubles=","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-verify_partial_doubles-3D","(val)","<p>When set to true, partial mocks will be verified the same as object\ndoubles. Any stubs will have their …\n"],["verify_partial_doubles?","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-verify_partial_doubles-3F","()",""],["visibility","RSpec::Mocks::MethodDouble","RSpec/Mocks/MethodDouble.html#method-i-visibility","()","<p>@private\n"],["visibility","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-i-visibility","()",""],["visibility_for","RSpec::Mocks::Proxy","RSpec/Mocks/Proxy.html#method-i-visibility_for","(_method_name)","<p>@private\n"],["visibility_from","RSpec::Mocks::InstanceMethodReference","RSpec/Mocks/InstanceMethodReference.html#method-i-visibility_from","(mod)",""],["visibility_from","RSpec::Mocks::ObjectMethodReference","RSpec/Mocks/ObjectMethodReference.html#method-i-visibility_from","(object)",""],["warn_about_block","RSpec::Mocks::Matchers::ReceiveMessages","RSpec/Mocks/Matchers/ReceiveMessages.html#method-i-warn_about_block","()",""],["warn_about_should!","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-warn_about_should-21","()","<p>@private\n"],["warn_unless_should_configured","RSpec::Mocks::Syntax","RSpec/Mocks/Syntax.html#method-c-warn_unless_should_configured","(method_name , replacement=\"the new `:expect` syntax or explicitly enable `:should`\")","<p>@private\n"],["when_loaded","RSpec::Mocks::DirectObjectReference","RSpec/Mocks/DirectObjectReference.html#method-i-when_loaded","()",""],["when_loaded","RSpec::Mocks::NamedObjectReference","RSpec/Mocks/NamedObjectReference.html#method-i-when_loaded","(&_block)",""],["with","RSpec::Mocks::AnyInstance::Chain","RSpec/Mocks/AnyInstance/Chain.html#method-i-with","(*args, &block)",""],["with_signature","RSpec::Mocks::MethodReference","RSpec/Mocks/MethodReference.html#method-i-with_signature","()",""],["yield_receiver_to_any_instance_implementation_blocks?","RSpec::Mocks::Configuration","RSpec/Mocks/Configuration.html#method-i-yield_receiver_to_any_instance_implementation_blocks-3F","()",""]]}}