var search_data = {"index":{"searchIndex":["zip","centraldirectory","compressionmethoderror","compressor","dostime","decompressor","deflater","destinationfileexistserror","entry","entryexistserror","entrynameerror","entryset","error","extrafield","generic","iunix","oldunix","universaltime","zip64","zip64placeholder","s","file","filesystem","zipfilenamemapper","zipfsdir","zipfsdiriterator","zipfsfile","zipfsstat","ioextras","abstractinputstream","abstractoutputstream","fakeio","inflater","inputstream","internalerror","nullcompressor","nulldecompressor","nullinputstream","outputstream","passthrucompressor","passthrudecompressor","streamabledirectory","streamablestream","zipcompressionmethoderror","zipdestinationfileexistserror","zipentryexistserror","zipentrynameerror","ziperror","zipinternalerror","<<()","<=>()","==()","==()","==()","==()","==()","==()","add()","add_buffer()","atime()","basename()","blksize()","blockdev?()","blocks()","c_dir_size()","chardev?()","chdir()","check_c_dir_entry_comment_size()","check_c_dir_entry_signature()","check_c_dir_entry_static_header_length()","check_entry_exists()","check_file()","check_name()","chmod()","chown()","chroot()","clean_up()","close()","close()","close()","close_buffer()","comment_size()","commit()","commit_required?()","copy_raw_entry()","create()","create_directory()","create_file()","create_symlink()","create_unknown_item()","ctime()","delegate_to_fs_file()","delete()","delete()","dev()","dir()","directory?()","dirname()","each()","each()","each_line()","entries()","entries()","eof()","eof?()","executable?()","executable_real?()","exist?()","exists?()","expand_path()","extra_field_type_exist()","extra_field_type_unknown()","extra_size()","extract()","extract()","extract()","file()","file?()","file_type_is?()","finalize_current_entry()","find_entry()","finish()","flush()","foreach()","foreach()","foreach()","ftype()","ftype()","get_compressor()","get_decompressor()","get_entry()","get_entry()","get_entry()","get_input_stream()","get_input_stream()","get_io()","get_next_entry()","get_output_stream()","get_partial_zip_file_name()","get_raw_input_stream()","get_segment_count_for_split()","get_segment_size_for_split()","get_tempfile()","gets()","getwd()","gid()","glob()","glob()","grpowned?()","init_next_entry()","initial_parse()","ino()","input_finished?()","is_directory()","join()","kind_of?()","kind_of?()","length()","link()","local_size()","lstat()","merge()","merge()","merge()","merge()","merge()","mkdir()","mkdir()","mode()","mtime()","mtime()","name()","name_size()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nlink()","on_success_replace()","open()","open()","open()","open()","open()","open_buffer()","open_buffer()","open_entry()","ordered_values()","owned?()","pack_c_dir_entry()","pack_for_c_dir()","pack_for_c_dir()","pack_for_c_dir()","pack_for_c_dir()","pack_for_local()","pack_for_local()","pack_for_local()","pack_for_local()","pack_for_local()","pack_local_entry()","parent_as_string()","parse()","pipe()","pipe?()","popen()","print()","printf()","produce_input()","put_next_entry()","put_split_signature()","putc()","puts()","pwd()","rdev()","rdev_major()","rdev_minor()","read()","read()","read()","read_c_dir_extra_field()","read_local_entry()","readable?()","readable_real?()","readline()","readlines()","readlines()","readlink()","register_map()","remove()","rename()","rename()","replace()","reset!()","rewind()","rmdir()","save_splited_part()","set_default_vars_values()","set_ftype_from_c_dir_entry()","set_time()","set_unix_permissions_on_path()","setgid?()","setuid?()","setup()","size()","size()","size()","size?()","socket?()","split()","split()","start_buf()","stat()","sticky?()","symlink()","symlink?()","sysread()","time()","time=()","to_c_dir_bin()","to_c_dir_bin()","to_local_bin()","to_local_bin()","to_s()","to_s()","to_s()","truncate()","uid()","umask()","ungetc()","unix_mode_cmp()","unlink()","unlink()","unpack_c_dir_entry()","unpack_local_entry()","update_local_headers()","utime()","verify_local_header_size!()","writable?()","writable_real?()","write()","write_64_eocd_locator()","write_buffer()","write_buffer()","write_central_directory()","zero?()","zip64_file?()"],"longSearchIndex":["zip","zip::centraldirectory","zip::compressionmethoderror","zip::compressor","zip::dostime","zip::decompressor","zip::deflater","zip::destinationfileexistserror","zip::entry","zip::entryexistserror","zip::entrynameerror","zip::entryset","zip::error","zip::extrafield","zip::extrafield::generic","zip::extrafield::iunix","zip::extrafield::oldunix","zip::extrafield::universaltime","zip::extrafield::zip64","zip::extrafield::zip64placeholder","zip::extrafield::s","zip::file","zip::filesystem","zip::filesystem::zipfilenamemapper","zip::filesystem::zipfsdir","zip::filesystem::zipfsdiriterator","zip::filesystem::zipfsfile","zip::filesystem::zipfsfile::zipfsstat","zip::ioextras","zip::ioextras::abstractinputstream","zip::ioextras::abstractoutputstream","zip::ioextras::fakeio","zip::inflater","zip::inputstream","zip::internalerror","zip::nullcompressor","zip::nulldecompressor","zip::nullinputstream","zip::outputstream","zip::passthrucompressor","zip::passthrudecompressor","zip::streamabledirectory","zip::streamablestream","zip::zipcompressionmethoderror","zip::zipdestinationfileexistserror","zip::zipentryexistserror","zip::zipentrynameerror","zip::ziperror","zip::zipinternalerror","zip::outputstream#<<()","zip::entry#<=>()","zip::entry#==()","zip::extrafield::generic#==()","zip::extrafield::iunix#==()","zip::extrafield::oldunix#==()","zip::extrafield::universaltime#==()","zip::extrafield::zip64#==()","zip::file#add()","zip::file#add_buffer()","zip::filesystem::zipfsfile#atime()","zip::filesystem::zipfsfile#basename()","zip::filesystem::zipfsfile::zipfsstat#blksize()","zip::filesystem::zipfsfile#blockdev?()","zip::filesystem::zipfsfile::zipfsstat#blocks()","zip::extrafield#c_dir_size()","zip::filesystem::zipfsfile#chardev?()","zip::filesystem::zipfsdir#chdir()","zip::entry#check_c_dir_entry_comment_size()","zip::entry#check_c_dir_entry_signature()","zip::entry#check_c_dir_entry_static_header_length()","zip::file#check_entry_exists()","zip::file#check_file()","zip::entry#check_name()","zip::filesystem::zipfsfile#chmod()","zip::filesystem::zipfsfile#chown()","zip::filesystem::zipfsdir#chroot()","zip::entry#clean_up()","zip::file#close()","zip::inputstream#close()","zip::outputstream#close()","zip::outputstream#close_buffer()","zip::entry#comment_size()","zip::file#commit()","zip::file#commit_required?()","zip::outputstream#copy_raw_entry()","zip::extrafield#create()","zip::entry#create_directory()","zip::entry#create_file()","zip::entry#create_symlink()","zip::extrafield#create_unknown_item()","zip::filesystem::zipfsfile#ctime()","zip::filesystem::zipfsfile::zipfsstat#delegate_to_fs_file()","zip::filesystem::zipfsdir#delete()","zip::filesystem::zipfsfile#delete()","zip::filesystem::zipfsfile::zipfsstat#dev()","zip::filesystem#dir()","zip::filesystem::zipfsfile#directory?()","zip::filesystem::zipfsfile#dirname()","zip::centraldirectory#each()","zip::ioextras::abstractinputstream#each()","zip::ioextras::abstractinputstream#each_line()","zip::centraldirectory#entries()","zip::filesystem::zipfsdir#entries()","zip::inputstream#eof()","zip::inputstream#eof?()","zip::filesystem::zipfsfile#executable?()","zip::filesystem::zipfsfile#executable_real?()","zip::filesystem::zipfsfile#exist?()","zip::filesystem::zipfsfile#exists?()","zip::filesystem::zipfsfile#expand_path()","zip::extrafield#extra_field_type_exist()","zip::extrafield#extra_field_type_unknown()","zip::entry#extra_size()","zip::entry#extract()","zip::extrafield::zip64#extract()","zip::file#extract()","zip::filesystem#file()","zip::filesystem::zipfsfile#file?()","zip::entry#file_type_is?()","zip::outputstream#finalize_current_entry()","zip::file#find_entry()","zip::outputstream#finish()","zip::ioextras::abstractinputstream#flush()","zip::file#foreach()","zip::filesystem::zipfsdir#foreach()","zip::filesystem::zipfsfile#foreach()","zip::filesystem::zipfsfile#ftype()","zip::filesystem::zipfsfile::zipfsstat#ftype()","zip::outputstream#get_compressor()","zip::inputstream#get_decompressor()","zip::file#get_entry()","zip::filesystem::zipfsfile#get_entry()","zip::filesystem::zipfsfile::zipfsstat#get_entry()","zip::entry#get_input_stream()","zip::file#get_input_stream()","zip::inputstream#get_io()","zip::inputstream#get_next_entry()","zip::file#get_output_stream()","zip::file#get_partial_zip_file_name()","zip::entry#get_raw_input_stream()","zip::file#get_segment_count_for_split()","zip::file#get_segment_size_for_split()","zip::file#get_tempfile()","zip::ioextras::abstractinputstream#gets()","zip::filesystem::zipfsdir#getwd()","zip::filesystem::zipfsfile::zipfsstat#gid()","zip::file#glob()","zip::filesystem::zipfsdir#glob()","zip::filesystem::zipfsfile#grpowned?()","zip::outputstream#init_next_entry()","zip::extrafield::generic#initial_parse()","zip::filesystem::zipfsfile::zipfsstat#ino()","zip::inputstream#input_finished?()","zip::file#is_directory()","zip::filesystem::zipfsfile#join()","zip::filesystem::zipfsfile::zipfsstat#kind_of?()","zip::ioextras::fakeio#kind_of?()","zip::extrafield#length()","zip::filesystem::zipfsfile#link()","zip::extrafield#local_size()","zip::filesystem::zipfsfile#lstat()","zip::extrafield#merge()","zip::extrafield::iunix#merge()","zip::extrafield::oldunix#merge()","zip::extrafield::universaltime#merge()","zip::extrafield::zip64#merge()","zip::file#mkdir()","zip::filesystem::zipfsdir#mkdir()","zip::filesystem::zipfsfile::zipfsstat#mode()","zip::entry#mtime()","zip::filesystem::zipfsfile#mtime()","zip::extrafield::generic::name()","zip::entry#name_size()","zip::entry::new()","zip::extrafield::new()","zip::extrafield::iunix::new()","zip::extrafield::oldunix::new()","zip::extrafield::universaltime::new()","zip::extrafield::zip64::new()","zip::extrafield::zip64placeholder::new()","zip::file::new()","zip::filesystem::zipfsdir::new()","zip::filesystem::zipfsdir#new()","zip::filesystem::zipfsfile#new()","zip::filesystem::zipfsfile::new()","zip::filesystem::zipfsfile::zipfsstat::new()","zip::ioextras::abstractinputstream::new()","zip::inputstream::new()","zip::outputstream::new()","zip::streamabledirectory::new()","zip::filesystem::zipfsfile::zipfsstat#nlink()","zip::file#on_success_replace()","zip::file#open()","zip::filesystem::zipfsdir#open()","zip::filesystem::zipfsfile#open()","zip::inputstream#open()","zip::outputstream#open()","zip::file#open_buffer()","zip::inputstream#open_buffer()","zip::inputstream#open_entry()","zip::extrafield#ordered_values()","zip::filesystem::zipfsfile#owned?()","zip::entry#pack_c_dir_entry()","zip::extrafield::iunix#pack_for_c_dir()","zip::extrafield::oldunix#pack_for_c_dir()","zip::extrafield::universaltime#pack_for_c_dir()","zip::extrafield::zip64#pack_for_c_dir()","zip::extrafield::iunix#pack_for_local()","zip::extrafield::oldunix#pack_for_local()","zip::extrafield::universaltime#pack_for_local()","zip::extrafield::zip64#pack_for_local()","zip::extrafield::zip64placeholder#pack_for_local()","zip::entry#pack_local_entry()","zip::entry#parent_as_string()","zip::extrafield::zip64#parse()","zip::filesystem::zipfsfile#pipe()","zip::filesystem::zipfsfile#pipe?()","zip::filesystem::zipfsfile#popen()","zip::ioextras::abstractoutputstream#print()","zip::ioextras::abstractoutputstream#printf()","zip::inputstream#produce_input()","zip::outputstream#put_next_entry()","zip::file#put_split_signature()","zip::ioextras::abstractoutputstream#putc()","zip::ioextras::abstractoutputstream#puts()","zip::filesystem::zipfsdir#pwd()","zip::filesystem::zipfsfile::zipfsstat#rdev()","zip::filesystem::zipfsfile::zipfsstat#rdev_major()","zip::filesystem::zipfsfile::zipfsstat#rdev_minor()","zip::file#read()","zip::filesystem::zipfsfile#read()","zip::ioextras::abstractinputstream#read()","zip::entry#read_c_dir_extra_field()","zip::entry#read_local_entry()","zip::filesystem::zipfsfile#readable?()","zip::filesystem::zipfsfile#readable_real?()","zip::ioextras::abstractinputstream#readline()","zip::filesystem::zipfsfile#readlines()","zip::ioextras::abstractinputstream#readlines()","zip::filesystem::zipfsfile#readlink()","zip::extrafield::generic::register_map()","zip::file#remove()","zip::file#rename()","zip::filesystem::zipfsfile#rename()","zip::file#replace()","zip#reset!()","zip::inputstream#rewind()","zip::filesystem::zipfsdir#rmdir()","zip::file#save_splited_part()","zip::entry#set_default_vars_values()","zip::entry#set_ftype_from_c_dir_entry()","zip::entry#set_time()","zip::entry#set_unix_permissions_on_path()","zip::filesystem::zipfsfile#setgid?()","zip::filesystem::zipfsfile#setuid?()","zip#setup()","zip::centraldirectory#size()","zip::extrafield#size()","zip::filesystem::zipfsfile#size()","zip::filesystem::zipfsfile#size?()","zip::filesystem::zipfsfile#socket?()","zip::file#split()","zip::filesystem::zipfsfile#split()","zip::centraldirectory#start_buf()","zip::filesystem::zipfsfile#stat()","zip::filesystem::zipfsfile#sticky?()","zip::filesystem::zipfsfile#symlink()","zip::filesystem::zipfsfile#symlink?()","zip::inputstream#sysread()","zip::entry#time()","zip::entry#time=()","zip::extrafield#to_c_dir_bin()","zip::extrafield::generic#to_c_dir_bin()","zip::extrafield#to_local_bin()","zip::extrafield::generic#to_local_bin()","zip::entry#to_s()","zip::extrafield#to_s()","zip::file#to_s()","zip::filesystem::zipfsfile#truncate()","zip::filesystem::zipfsfile::zipfsstat#uid()","zip::filesystem::zipfsfile#umask()","zip::ioextras::abstractinputstream#ungetc()","zip::filesystem::zipfsfile#unix_mode_cmp()","zip::filesystem::zipfsdir#unlink()","zip::filesystem::zipfsfile#unlink()","zip::entry#unpack_c_dir_entry()","zip::entry#unpack_local_entry()","zip::outputstream#update_local_headers()","zip::filesystem::zipfsfile#utime()","zip::entry#verify_local_header_size!()","zip::filesystem::zipfsfile#writable?()","zip::filesystem::zipfsfile#writable_real?()","zip::ioextras::abstractoutputstream#write()","zip::centraldirectory#write_64_eocd_locator()","zip::file#write_buffer()","zip::outputstream#write_buffer()","zip::outputstream#write_central_directory()","zip::filesystem::zipfsfile#zero?()","zip::centraldirectory#zip64_file?()"],"info":[["Zip","","Zip.html","",""],["Zip::CentralDirectory","","Zip/CentralDirectory.html","",""],["Zip::CompressionMethodError","","Zip/CompressionMethodError.html","",""],["Zip::Compressor","","Zip/Compressor.html","",""],["Zip::DOSTime","","Zip/DOSTime.html","",""],["Zip::Decompressor","","Zip/Decompressor.html","",""],["Zip::Deflater","","Zip/Deflater.html","",""],["Zip::DestinationFileExistsError","","Zip/DestinationFileExistsError.html","",""],["Zip::Entry","","Zip/Entry.html","",""],["Zip::EntryExistsError","","Zip/EntryExistsError.html","",""],["Zip::EntryNameError","","Zip/EntryNameError.html","",""],["Zip::EntrySet","","Zip/EntrySet.html","",""],["Zip::Error","","Zip/Error.html","",""],["Zip::ExtraField","","Zip/ExtraField.html","",""],["Zip::ExtraField::Generic","","Zip/ExtraField/Generic.html","",""],["Zip::ExtraField::IUnix","","Zip/ExtraField/IUnix.html","","<p>Info-ZIP Extra for UNIX uid/gid\n"],["Zip::ExtraField::OldUnix","","Zip/ExtraField/OldUnix.html","","<p>Olf Info-ZIP Extra for UNIX uid/gid and file timestampes\n"],["Zip::ExtraField::UniversalTime","","Zip/ExtraField/UniversalTime.html","","<p>Info-ZIP Additional timestamp field\n"],["Zip::ExtraField::Zip64","","Zip/ExtraField/Zip64.html","","<p>Info-ZIP Extra for Zip64 size\n"],["Zip::ExtraField::Zip64Placeholder","","Zip/ExtraField/Zip64Placeholder.html","","<p>placeholder to reserve space for a Zip64 extra information record, for the\nlocal file header only, that …\n"],["Zip::ExtraField::s","","Zip/ExtraField/s.html","",""],["Zip::File","","Zip/File.html","","<p>ZipFile is modeled after java.util.zip.ZipFile from the Java SDK. The most\nimportant methods are those …\n"],["Zip::FileSystem","","Zip/FileSystem.html","","<p>The ZipFileSystem API provides an API for accessing entries in  a zip\narchive that is similar to ruby&#39;s …\n"],["Zip::FileSystem::ZipFileNameMapper","","Zip/FileSystem/ZipFileNameMapper.html","",""],["Zip::FileSystem::ZipFsDir","","Zip/FileSystem/ZipFsDir.html","","<p>Instances of this class are normally accessed via the accessor\nZipFile::dir. An instance of ZipFsDir …\n"],["Zip::FileSystem::ZipFsDirIterator","","Zip/FileSystem/ZipFsDirIterator.html","",""],["Zip::FileSystem::ZipFsFile","","Zip/FileSystem/ZipFsFile.html","","<p>Instances of this class are normally accessed via the accessor\nZip::File::file. An instance of ZipFsFile …\n"],["Zip::FileSystem::ZipFsFile::ZipFsStat","","Zip/FileSystem/ZipFsFile/ZipFsStat.html","","<p>protected :dir\n"],["Zip::IOExtras","","Zip/IOExtras.html","",""],["Zip::IOExtras::AbstractInputStream","","Zip/IOExtras/AbstractInputStream.html","","<p>Implements many of the convenience methods of IO such as gets, getc,\nreadline and readlines depends on: …\n"],["Zip::IOExtras::AbstractOutputStream","","Zip/IOExtras/AbstractOutputStream.html","","<p>Implements many of the output convenience methods of IO. relies on &lt;&lt;\n"],["Zip::IOExtras::FakeIO","","Zip/IOExtras/FakeIO.html","","<p>Implements kind_of? in order to pretend to be an IO object\n"],["Zip::Inflater","","Zip/Inflater.html","",""],["Zip::InputStream","","Zip/InputStream.html","","<p>InputStream is the basic class for reading zip entries in a zip file. It is\npossible to create a InputStream …\n"],["Zip::InternalError","","Zip/InternalError.html","",""],["Zip::NullCompressor","","Zip/NullCompressor.html","",""],["Zip::NullDecompressor","","Zip/NullDecompressor.html","",""],["Zip::NullInputStream","","Zip/NullInputStream.html","",""],["Zip::OutputStream","","Zip/OutputStream.html","","<p>ZipOutputStream is the basic class for writing zip files. It is possible to\ncreate a ZipOutputStream …\n"],["Zip::PassThruCompressor","","Zip/PassThruCompressor.html","",""],["Zip::PassThruDecompressor","","Zip/PassThruDecompressor.html","",""],["Zip::StreamableDirectory","","Zip/StreamableDirectory.html","",""],["Zip::StreamableStream","","Zip/StreamableStream.html","",""],["Zip::ZipCompressionMethodError","","Zip/ZipCompressionMethodError.html","",""],["Zip::ZipDestinationFileExistsError","","Zip/ZipDestinationFileExistsError.html","",""],["Zip::ZipEntryExistsError","","Zip/ZipEntryExistsError.html","",""],["Zip::ZipEntryNameError","","Zip/ZipEntryNameError.html","",""],["Zip::ZipError","","Zip/ZipError.html","",""],["Zip::ZipInternalError","","Zip/ZipInternalError.html","",""],["<<","Zip::OutputStream","Zip/OutputStream.html#method-i-3C-3C","(data)","<p>Modeled after IO.<<\n"],["<=>","Zip::Entry","Zip/Entry.html#method-i-3C-3D-3E","(other)",""],["==","Zip::Entry","Zip/Entry.html#method-i-3D-3D","(other)",""],["==","Zip::ExtraField::Generic","Zip/ExtraField/Generic.html#method-i-3D-3D","(other)",""],["==","Zip::ExtraField::IUnix","Zip/ExtraField/IUnix.html#method-i-3D-3D","(other)",""],["==","Zip::ExtraField::OldUnix","Zip/ExtraField/OldUnix.html#method-i-3D-3D","(other)",""],["==","Zip::ExtraField::UniversalTime","Zip/ExtraField/UniversalTime.html#method-i-3D-3D","(other)",""],["==","Zip::ExtraField::Zip64","Zip/ExtraField/Zip64.html#method-i-3D-3D","(other)",""],["add","Zip::File","Zip/File.html#method-i-add","(entry, src_path, &continue_on_exists_proc)","<p>Convenience method for adding the contents of a file to the archive\n"],["add_buffer","Zip::File","Zip/File.html#method-i-add_buffer","()","<p>Same as #open. But outputs data to a buffer instead of a file\n"],["atime","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-atime","(fileName)",""],["basename","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-basename","(fileName)",""],["blksize","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-blksize","()",""],["blockdev?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-blockdev-3F","(filename)",""],["blocks","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-blocks","()",""],["c_dir_size","Zip::ExtraField","Zip/ExtraField.html#method-i-c_dir_size","()",""],["chardev?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-chardev-3F","(filename)",""],["chdir","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-chdir","(aDirectoryName)",""],["check_c_dir_entry_comment_size","Zip::Entry","Zip/Entry.html#method-i-check_c_dir_entry_comment_size","()",""],["check_c_dir_entry_signature","Zip::Entry","Zip/Entry.html#method-i-check_c_dir_entry_signature","()",""],["check_c_dir_entry_static_header_length","Zip::Entry","Zip/Entry.html#method-i-check_c_dir_entry_static_header_length","(buf)",""],["check_entry_exists","Zip::File","Zip/File.html#method-i-check_entry_exists","(entryName, continue_on_exists_proc, procedureName)",""],["check_file","Zip::File","Zip/File.html#method-i-check_file","(path)",""],["check_name","Zip::Entry","Zip/Entry.html#method-i-check_name","(name)",""],["chmod","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-chmod","(modeInt, *filenames)",""],["chown","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-chown","(ownerInt, groupInt, *filenames)",""],["chroot","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-chroot","(*args)",""],["clean_up","Zip::Entry","Zip/Entry.html#method-i-clean_up","()",""],["close","Zip::File","Zip/File.html#method-i-close","()","<p>Closes the zip file committing any changes that has been made.\n"],["close","Zip::InputStream","Zip/InputStream.html#method-i-close","()",""],["close","Zip::OutputStream","Zip/OutputStream.html#method-i-close","()","<p>Closes the stream and writes the central directory to the zip file\n"],["close_buffer","Zip::OutputStream","Zip/OutputStream.html#method-i-close_buffer","()","<p>Closes the stream and writes the central directory to the zip file\n"],["comment_size","Zip::Entry","Zip/Entry.html#method-i-comment_size","()",""],["commit","Zip::File","Zip/File.html#method-i-commit","()","<p>Commits changes that has been made since the previous commit to the zip\narchive.\n"],["commit_required?","Zip::File","Zip/File.html#method-i-commit_required-3F","()","<p>Returns true if any changes has been made to this archive since the\nprevious commit\n"],["copy_raw_entry","Zip::OutputStream","Zip/OutputStream.html#method-i-copy_raw_entry","(entry)",""],["create","Zip::ExtraField","Zip/ExtraField.html#method-i-create","(name)",""],["create_directory","Zip::Entry","Zip/Entry.html#method-i-create_directory","(dest_path)",""],["create_file","Zip::Entry","Zip/Entry.html#method-i-create_file","(dest_path, continue_on_exists_proc = proc { Zip.continue_on_exists_proc })",""],["create_symlink","Zip::Entry","Zip/Entry.html#method-i-create_symlink","(dest_path)","<p>BUG: create_symlink() does not use &amp;block\n"],["create_unknown_item","Zip::ExtraField","Zip/ExtraField.html#method-i-create_unknown_item","()",""],["ctime","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-ctime","(fileName)",""],["delegate_to_fs_file","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-delegate_to_fs_file","(*methods)",""],["delete","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-delete","(entryName)",""],["delete","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-delete","(*args)",""],["dev","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-dev","()",""],["dir","Zip::FileSystem","Zip/FileSystem.html#method-i-dir","()","<p>Returns a ZipFsDir which is much like ruby&#39;s builtin Dir (class)\nobject, except it works on the  …\n"],["directory?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-directory-3F","(fileName)",""],["dirname","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-dirname","(fileName)",""],["each","Zip::CentralDirectory","Zip/CentralDirectory.html#method-i-each","(&proc)","<p>For iterating over the entries.\n"],["each","Zip::IOExtras::AbstractInputStream","Zip/IOExtras/AbstractInputStream.html#method-i-each","(a_sep_string = $/)",""],["each_line","Zip::IOExtras::AbstractInputStream","Zip/IOExtras/AbstractInputStream.html#method-i-each_line","(a_sep_string = $/)",""],["entries","Zip::CentralDirectory","Zip/CentralDirectory.html#method-i-entries","()","<p>Returns an Enumerable containing the entries.\n"],["entries","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-entries","(aDirectoryName)",""],["eof","Zip::InputStream","Zip/InputStream.html#method-i-eof","()",""],["eof?","Zip::InputStream","Zip/InputStream.html#method-i-eof-3F","()",""],["executable?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-executable-3F","(fileName)",""],["executable_real?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-executable_real-3F","(fileName)",""],["exist?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-exist-3F","(fileName)",""],["exists?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-exists-3F","(fileName)",""],["expand_path","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-expand_path","(aPath)",""],["extra_field_type_exist","Zip::ExtraField","Zip/ExtraField.html#method-i-extra_field_type_exist","(binstr, id, len, i)",""],["extra_field_type_unknown","Zip::ExtraField","Zip/ExtraField.html#method-i-extra_field_type_unknown","(binstr, len, i)",""],["extra_size","Zip::Entry","Zip/Entry.html#method-i-extra_size","()",""],["extract","Zip::Entry","Zip/Entry.html#method-i-extract","(dest_path = @name, &block)","<p>Extracts entry to file dest_path (defaults to @name).\n"],["extract","Zip::ExtraField::Zip64","Zip/ExtraField/Zip64.html#method-i-extract","(size, format)",""],["extract","Zip::File","Zip/File.html#method-i-extract","(entry, dest_path, &block)","<p>Extracts entry to file dest_path.\n"],["file","Zip::FileSystem","Zip/FileSystem.html#method-i-file","()","<p>Returns a ZipFsFile which is much like ruby&#39;s builtin File (class)\nobject, except it works on the …\n"],["file?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-file-3F","(fileName)",""],["file_type_is?","Zip::Entry","Zip/Entry.html#method-i-file_type_is-3F","(type)",""],["finalize_current_entry","Zip::OutputStream","Zip/OutputStream.html#method-i-finalize_current_entry","()",""],["find_entry","Zip::File","Zip/File.html#method-i-find_entry","(entry_name)","<p>Searches for entry with the specified name. Returns nil if no entry is\nfound. See also get_entry\n"],["finish","Zip::OutputStream","Zip/OutputStream.html#method-i-finish","()",""],["flush","Zip::IOExtras::AbstractInputStream","Zip/IOExtras/AbstractInputStream.html#method-i-flush","()",""],["foreach","Zip::File","Zip/File.html#method-i-foreach","(aZipFileName, &block)","<p>Iterates over the contents of the ZipFile. This is more efficient than\nusing a ZipInputStream since this …\n"],["foreach","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-foreach","(aDirectoryName)",""],["foreach","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-foreach","(fileName, aSep = $/, &aProc)",""],["ftype","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-ftype","(fileName)",""],["ftype","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-ftype","()",""],["get_compressor","Zip::OutputStream","Zip/OutputStream.html#method-i-get_compressor","(entry, level)",""],["get_decompressor","Zip::InputStream","Zip/InputStream.html#method-i-get_decompressor","()",""],["get_entry","Zip::File","Zip/File.html#method-i-get_entry","(entry)","<p>Searches for an entry just as find_entry, but throws Errno::ENOENT if no\nentry is found.\n"],["get_entry","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-get_entry","(fileName)",""],["get_entry","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-get_entry","()",""],["get_input_stream","Zip::Entry","Zip/Entry.html#method-i-get_input_stream","(&block)","<p>Returns an IO like object for the given ZipEntry. Warning: may behave weird\nwith symlinks.\n"],["get_input_stream","Zip::File","Zip/File.html#method-i-get_input_stream","(entry, &aProc)","<p>Returns an input stream to the specified entry. If a block is passed the\nstream object is passed to the …\n"],["get_io","Zip::InputStream","Zip/InputStream.html#method-i-get_io","(io_or_file, offset = 0)",""],["get_next_entry","Zip::InputStream","Zip/InputStream.html#method-i-get_next_entry","()","<p>Returns a Entry object. It is necessary to call this method on a newly\ncreated InputStream before reading …\n"],["get_output_stream","Zip::File","Zip/File.html#method-i-get_output_stream","(entry, permission_int = nil, comment = nil, extra = nil, compressed_size = nil, crc = nil, compression_method = nil, size = nil, time = nil, &aProc)","<p>Returns an output stream to the specified entry. If entry is not an\ninstance of Zip::Entry, a new Zip::Entry …\n"],["get_partial_zip_file_name","Zip::File","Zip/File.html#method-i-get_partial_zip_file_name","(zip_file_name, partial_zip_file_name)",""],["get_raw_input_stream","Zip::Entry","Zip/Entry.html#method-i-get_raw_input_stream","(&block)",""],["get_segment_count_for_split","Zip::File","Zip/File.html#method-i-get_segment_count_for_split","(zip_file_size, segment_size)",""],["get_segment_size_for_split","Zip::File","Zip/File.html#method-i-get_segment_size_for_split","(segment_size)",""],["get_tempfile","Zip::File","Zip/File.html#method-i-get_tempfile","()",""],["gets","Zip::IOExtras::AbstractInputStream","Zip/IOExtras/AbstractInputStream.html#method-i-gets","(a_sep_string = $/, number_of_bytes = nil)",""],["getwd","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-getwd","()",""],["gid","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-gid","()",""],["glob","Zip::File","Zip/File.html#method-i-glob","(*args, &block)","<p>Searches for entries given a glob\n"],["glob","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-glob","(*args,&block)",""],["grpowned?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-grpowned-3F","(fileName)",""],["init_next_entry","Zip::OutputStream","Zip/OutputStream.html#method-i-init_next_entry","(entry, level = Zip.default_compression)",""],["initial_parse","Zip::ExtraField::Generic","Zip/ExtraField/Generic.html#method-i-initial_parse","(binstr)","<p>return field [size, content] or false\n"],["ino","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-ino","()",""],["input_finished?","Zip::InputStream","Zip/InputStream.html#method-i-input_finished-3F","()",""],["is_directory","Zip::File","Zip/File.html#method-i-is_directory","(newEntry, srcPath)",""],["join","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-join","(*fragments)",""],["kind_of?","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-kind_of-3F","(t)",""],["kind_of?","Zip::IOExtras::FakeIO","Zip/IOExtras/FakeIO.html#method-i-kind_of-3F","(object)",""],["length","Zip::ExtraField","Zip/ExtraField.html#method-i-length","()",""],["link","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-link","(fileName, symlinkName)",""],["local_size","Zip::ExtraField","Zip/ExtraField.html#method-i-local_size","()",""],["lstat","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-lstat","(fileName)",""],["merge","Zip::ExtraField","Zip/ExtraField.html#method-i-merge","(binstr)",""],["merge","Zip::ExtraField::IUnix","Zip/ExtraField/IUnix.html#method-i-merge","(binstr)",""],["merge","Zip::ExtraField::OldUnix","Zip/ExtraField/OldUnix.html#method-i-merge","(binstr)",""],["merge","Zip::ExtraField::UniversalTime","Zip/ExtraField/UniversalTime.html#method-i-merge","(binstr)",""],["merge","Zip::ExtraField::Zip64","Zip/ExtraField/Zip64.html#method-i-merge","(binstr)",""],["mkdir","Zip::File","Zip/File.html#method-i-mkdir","(entryName, permissionInt = 0755)","<p>Creates a directory\n"],["mkdir","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-mkdir","(entryName, permissionInt = 0755)",""],["mode","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-mode","()",""],["mtime","Zip::Entry","Zip/Entry.html#method-i-mtime","()",""],["mtime","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-mtime","(fileName)",""],["name","Zip::ExtraField::Generic","Zip/ExtraField/Generic.html#method-c-name","()",""],["name_size","Zip::Entry","Zip/Entry.html#method-i-name_size","()",""],["new","Zip::Entry","Zip/Entry.html#method-c-new","(*args)",""],["new","Zip::ExtraField","Zip/ExtraField.html#method-c-new","(binstr = nil)",""],["new","Zip::ExtraField::IUnix","Zip/ExtraField/IUnix.html#method-c-new","(binstr = nil)",""],["new","Zip::ExtraField::OldUnix","Zip/ExtraField/OldUnix.html#method-c-new","(binstr = nil)",""],["new","Zip::ExtraField::UniversalTime","Zip/ExtraField/UniversalTime.html#method-c-new","(binstr = nil)",""],["new","Zip::ExtraField::Zip64","Zip/ExtraField/Zip64.html#method-c-new","(binstr = nil)",""],["new","Zip::ExtraField::Zip64Placeholder","Zip/ExtraField/Zip64Placeholder.html#method-c-new","(binstr = nil)",""],["new","Zip::File","Zip/File.html#method-c-new","(file_name, create = nil, buffer = false, options = {})","<p>Opens a zip archive. Pass true as the second parameter to create a new\narchive if it doesn&#39;t exist …\n"],["new","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-c-new","(mappedZip)",""],["new","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-new","(aDirectoryName)",""],["new","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-new","(fileName, openMode = \"r\")",""],["new","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-c-new","(mappedZip)",""],["new","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-c-new","(zipFsFile, entryName)",""],["new","Zip::IOExtras::AbstractInputStream","Zip/IOExtras/AbstractInputStream.html#method-c-new","()",""],["new","Zip::InputStream","Zip/InputStream.html#method-c-new","(context, offset = 0)","<p>Opens the indicated zip file. An exception is thrown if the specified\noffset in the specified filename …\n"],["new","Zip::OutputStream","Zip/OutputStream.html#method-c-new","(file_name, stream=false)","<p>Opens the indicated zip file. If a file with that name already exists it\nwill be overwritten.\n"],["new","Zip::StreamableDirectory","Zip/StreamableDirectory.html#method-c-new","(zipfile, entry, srcPath = nil, permissionInt = nil)",""],["nlink","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-nlink","()",""],["on_success_replace","Zip::File","Zip/File.html#method-i-on_success_replace","()",""],["open","Zip::File","Zip/File.html#method-i-open","(file_name, create = nil)","<p>Same as #new. If a block is passed the ZipFile object is passed to the\nblock and is automatically closed …\n"],["open","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-open","(aDirectoryName)",""],["open","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-open","(fileName, openMode = \"r\", permissionInt = 0644, &block)",""],["open","Zip::InputStream","Zip/InputStream.html#method-i-open","(filename_or_io, offset = 0)","<p>Same as #initialize but if a block is passed the opened stream is passed to\nthe block and closed when …\n"],["open","Zip::OutputStream","Zip/OutputStream.html#method-i-open","(file_name)",""],["open_buffer","Zip::File","Zip/File.html#method-i-open_buffer","(io, options = {})","<p>Like #open, but reads zip archive contents from a String or open IO stream,\nand outputs data to a buffer. …\n"],["open_buffer","Zip::InputStream","Zip/InputStream.html#method-i-open_buffer","(filename_or_io, offset = 0)",""],["open_entry","Zip::InputStream","Zip/InputStream.html#method-i-open_entry","()",""],["ordered_values","Zip::ExtraField","Zip/ExtraField.html#method-i-ordered_values","()","<p>place Unknown last, so “extra” data that is missing the proper\nsignature/size does not prevent …\n"],["owned?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-owned-3F","(fileName)","<p>Permissions not implemented, so if the file exists it is accessible\n"],["pack_c_dir_entry","Zip::Entry","Zip/Entry.html#method-i-pack_c_dir_entry","()",""],["pack_for_c_dir","Zip::ExtraField::IUnix","Zip/ExtraField/IUnix.html#method-i-pack_for_c_dir","()",""],["pack_for_c_dir","Zip::ExtraField::OldUnix","Zip/ExtraField/OldUnix.html#method-i-pack_for_c_dir","()",""],["pack_for_c_dir","Zip::ExtraField::UniversalTime","Zip/ExtraField/UniversalTime.html#method-i-pack_for_c_dir","()",""],["pack_for_c_dir","Zip::ExtraField::Zip64","Zip/ExtraField/Zip64.html#method-i-pack_for_c_dir","()",""],["pack_for_local","Zip::ExtraField::IUnix","Zip/ExtraField/IUnix.html#method-i-pack_for_local","()",""],["pack_for_local","Zip::ExtraField::OldUnix","Zip/ExtraField/OldUnix.html#method-i-pack_for_local","()",""],["pack_for_local","Zip::ExtraField::UniversalTime","Zip/ExtraField/UniversalTime.html#method-i-pack_for_local","()",""],["pack_for_local","Zip::ExtraField::Zip64","Zip/ExtraField/Zip64.html#method-i-pack_for_local","()",""],["pack_for_local","Zip::ExtraField::Zip64Placeholder","Zip/ExtraField/Zip64Placeholder.html#method-i-pack_for_local","()",""],["pack_local_entry","Zip::Entry","Zip/Entry.html#method-i-pack_local_entry","()",""],["parent_as_string","Zip::Entry","Zip/Entry.html#method-i-parent_as_string","()",""],["parse","Zip::ExtraField::Zip64","Zip/ExtraField/Zip64.html#method-i-parse","(original_size, compressed_size, relative_header_offset = nil, disk_start_number = nil)","<p>pass the values from the base entry (if applicable) wider values are only\npresent in the extra field …\n"],["pipe","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-pipe","()",""],["pipe?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-pipe-3F","(filename)",""],["popen","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-popen","(*args, &aProc)",""],["print","Zip::IOExtras::AbstractOutputStream","Zip/IOExtras/AbstractOutputStream.html#method-i-print","(*params)",""],["printf","Zip::IOExtras::AbstractOutputStream","Zip/IOExtras/AbstractOutputStream.html#method-i-printf","(a_format_string, *params)",""],["produce_input","Zip::InputStream","Zip/InputStream.html#method-i-produce_input","()",""],["put_next_entry","Zip::OutputStream","Zip/OutputStream.html#method-i-put_next_entry","(entry_name, comment = nil, extra = nil, compression_method = Entry::DEFLATED, level = Zip.default_compression)","<p>Closes the current entry and opens a new for writing. <code>entry</code>\ncan be a ZipEntry object or a string.\n"],["put_split_signature","Zip::File","Zip/File.html#method-i-put_split_signature","(szip_file, segment_size)",""],["putc","Zip::IOExtras::AbstractOutputStream","Zip/IOExtras/AbstractOutputStream.html#method-i-putc","(an_object)",""],["puts","Zip::IOExtras::AbstractOutputStream","Zip/IOExtras/AbstractOutputStream.html#method-i-puts","(*params)",""],["pwd","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-pwd","()",""],["rdev","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-rdev","()",""],["rdev_major","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-rdev_major","()",""],["rdev_minor","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-rdev_minor","()",""],["read","Zip::File","Zip/File.html#method-i-read","(entry)","<p>Returns a string containing the contents of the specified entry\n"],["read","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-read","(fileName)",""],["read","Zip::IOExtras::AbstractInputStream","Zip/IOExtras/AbstractInputStream.html#method-i-read","(number_of_bytes = nil, buf = '')",""],["read_c_dir_extra_field","Zip::Entry","Zip/Entry.html#method-i-read_c_dir_extra_field","(io)",""],["read_local_entry","Zip::Entry","Zip/Entry.html#method-i-read_local_entry","(io)",""],["readable?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-readable-3F","(fileName)",""],["readable_real?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-readable_real-3F","(fileName)",""],["readline","Zip::IOExtras::AbstractInputStream","Zip/IOExtras/AbstractInputStream.html#method-i-readline","(a_sep_string = $/)",""],["readlines","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-readlines","(fileName)",""],["readlines","Zip::IOExtras::AbstractInputStream","Zip/IOExtras/AbstractInputStream.html#method-i-readlines","(a_sep_string = $/)",""],["readlink","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-readlink","(fileName)",""],["register_map","Zip::ExtraField::Generic","Zip/ExtraField/Generic.html#method-c-register_map","()",""],["remove","Zip::File","Zip/File.html#method-i-remove","(entry)","<p>Removes the specified entry.\n"],["rename","Zip::File","Zip/File.html#method-i-rename","(entry, new_name, &continue_on_exists_proc)","<p>Renames the specified entry.\n"],["rename","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-rename","(fileToRename, newName)",""],["replace","Zip::File","Zip/File.html#method-i-replace","(entry, srcPath)","<p>Replaces the specified entry with the contents of srcPath (from the file\nsystem).\n"],["reset!","Zip","Zip.html#method-i-reset-21","()",""],["rewind","Zip::InputStream","Zip/InputStream.html#method-i-rewind","()","<p>Rewinds the stream to the beginning of the current entry\n"],["rmdir","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-rmdir","(entryName)",""],["save_splited_part","Zip::File","Zip/File.html#method-i-save_splited_part","(zip_file, partial_zip_file_name, zip_file_size, szip_file_index, segment_size, segment_count)","<p>TODO: Make the code more understandable\n"],["set_default_vars_values","Zip::Entry","Zip/Entry.html#method-i-set_default_vars_values","()",""],["set_ftype_from_c_dir_entry","Zip::Entry","Zip/Entry.html#method-i-set_ftype_from_c_dir_entry","()",""],["set_time","Zip::Entry","Zip/Entry.html#method-i-set_time","(binary_dos_date, binary_dos_time)",""],["set_unix_permissions_on_path","Zip::Entry","Zip/Entry.html#method-i-set_unix_permissions_on_path","(dest_path)",""],["setgid?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-setgid-3F","(fileName)",""],["setuid?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-setuid-3F","(fileName)",""],["setup","Zip","Zip.html#method-i-setup","()",""],["size","Zip::CentralDirectory","Zip/CentralDirectory.html#method-i-size","()","<p>Returns the number of entries in the central directory (and consequently in\nthe zip archive).\n"],["size","Zip::ExtraField","Zip/ExtraField.html#method-i-size","()",""],["size","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-size","(fileName)",""],["size?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-size-3F","(fileName)","<p>Returns nil for not found and nil for directories\n"],["socket?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-socket-3F","(fileName)",""],["split","Zip::File","Zip/File.html#method-i-split","(zip_file_name, segment_size = MAX_SEGMENT_SIZE, delete_zip_file = true, partial_zip_file_name = nil)","<p>Splits an archive into parts with segment size\n"],["split","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-split","(fileName)",""],["start_buf","Zip::CentralDirectory","Zip/CentralDirectory.html#method-i-start_buf","(io)",""],["stat","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-stat","(fileName)",""],["sticky?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-sticky-3F","(fileName)",""],["symlink","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-symlink","(fileName, symlinkName)",""],["symlink?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-symlink-3F","(fileName)",""],["sysread","Zip::InputStream","Zip/InputStream.html#method-i-sysread","(number_of_bytes = nil, buf = nil)","<p>Modeled after IO.sysread\n"],["time","Zip::Entry","Zip/Entry.html#method-i-time","()",""],["time=","Zip::Entry","Zip/Entry.html#method-i-time-3D","(value)",""],["to_c_dir_bin","Zip::ExtraField","Zip/ExtraField.html#method-i-to_c_dir_bin","()",""],["to_c_dir_bin","Zip::ExtraField::Generic","Zip/ExtraField/Generic.html#method-i-to_c_dir_bin","()",""],["to_local_bin","Zip::ExtraField","Zip/ExtraField.html#method-i-to_local_bin","()",""],["to_local_bin","Zip::ExtraField::Generic","Zip/ExtraField/Generic.html#method-i-to_local_bin","()",""],["to_s","Zip::Entry","Zip/Entry.html#method-i-to_s","()",""],["to_s","Zip::ExtraField","Zip/ExtraField.html#method-i-to_s","()",""],["to_s","Zip::File","Zip/File.html#method-i-to_s","()","<p>Returns the name of the zip archive\n"],["truncate","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-truncate","(fileName, len)",""],["uid","Zip::FileSystem::ZipFsFile::ZipFsStat","Zip/FileSystem/ZipFsFile/ZipFsStat.html#method-i-uid","()",""],["umask","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-umask","(*args)",""],["ungetc","Zip::IOExtras::AbstractInputStream","Zip/IOExtras/AbstractInputStream.html#method-i-ungetc","(byte)",""],["unix_mode_cmp","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-unix_mode_cmp","(fileName, mode)",""],["unlink","Zip::FileSystem::ZipFsDir","Zip/FileSystem/ZipFsDir.html#method-i-unlink","(entryName)",""],["unlink","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-unlink","(*args)",""],["unpack_c_dir_entry","Zip::Entry","Zip/Entry.html#method-i-unpack_c_dir_entry","(buf)",""],["unpack_local_entry","Zip::Entry","Zip/Entry.html#method-i-unpack_local_entry","(buf)",""],["update_local_headers","Zip::OutputStream","Zip/OutputStream.html#method-i-update_local_headers","()",""],["utime","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-utime","(modifiedTime, *fileNames)",""],["verify_local_header_size!","Zip::Entry","Zip/Entry.html#method-i-verify_local_header_size-21","()","<p>check before rewriting an entry (after file sizes are known) that we\ndidn&#39;t change the header size …\n"],["writable?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-writable-3F","(fileName)",""],["writable_real?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-writable_real-3F","(fileName)",""],["write","Zip::IOExtras::AbstractOutputStream","Zip/IOExtras/AbstractOutputStream.html#method-i-write","(data)",""],["write_64_eocd_locator","Zip::CentralDirectory","Zip/CentralDirectory.html#method-i-write_64_eocd_locator","(io, zip64_eocd_offset)",""],["write_buffer","Zip::File","Zip/File.html#method-i-write_buffer","(io = ::StringIO.new(''))","<p>Write buffer write changes to buffer and return\n"],["write_buffer","Zip::OutputStream","Zip/OutputStream.html#method-i-write_buffer","(io = ::StringIO.new(''))","<p>Same as #open but writes to a filestream instead\n"],["write_central_directory","Zip::OutputStream","Zip/OutputStream.html#method-i-write_central_directory","()",""],["zero?","Zip::FileSystem::ZipFsFile","Zip/FileSystem/ZipFsFile.html#method-i-zero-3F","(fileName)",""],["zip64_file?","Zip::CentralDirectory","Zip/CentralDirectory.html#method-i-zip64_file-3F","(buf)",""]]}}