var search_data = {"index":{"searchIndex":["tzinfo","ambiguoustime","country","countryindexdefinition","classmethods","countryinfo","countrytimezone","datasource","datasourcenotfound","datatimezone","datatimezoneinfo","infotimezone","invalidcountrycode","invaliddatasource","invalidtimezoneidentifier","invalidzoneinfodirectory","invalidzoneinfofile","linkedtimezone","linkedtimezoneinfo","nooffsetsdefined","offsetrationals","periodnotfound","rubycoresupport","rubycountryinfo","zones","rubydatasource","timeordatetime","timezone","timezonedefinition","classmethods","timezoneindexdefinition","classmethods","timezoneinfo","timezoneoffset","timezoneperiod","timezoneproxy","timezonetransition","timezonetransitiondefinition","transitiondatatimezoneinfo","unknowntimezone","zoneinfocountryinfo","zoneinfodatasource","zoneinfodirectorynotfound","zoneinfotimezoneinfo","+()","-()","<=>()","<=>()","<=>()","==()","==()","==()","==()","_dump()","_dump()","_dump()","_load()","_load()","_load()","abbreviation()","add_with_convert()","all()","all()","all_codes()","all_country_zone_identifiers()","all_country_zones()","all_data_zone_identifiers()","all_data_zones()","all_identifiers()","all_linked_zone_identifiers()","all_linked_zones()","alternate_iso3166_tab_search_path()","alternate_iso3166_tab_search_path=()","at()","canonical_identifier()","canonical_zone()","canonical_zone()","code()","country_codes()","country_codes()","country_codes()","create_default_data_source()","create_timezone()","create_timezone()","create_timezone()","current_period()","current_period_and_time()","current_time_and_period()","data_source()","data_source()","data_timezone_identifiers()","data_timezone_identifiers()","data_timezone_identifiers()","datetime()","day()","default_dst()","default_dst=()","description_or_friendly_identifier()","dms_to_rational()","dst?()","dst?()","enum_timezones()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","find_zoneinfo_dir()","friendly_identifier()","get()","get()","get()","get_proxies()","get_proxy()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hour()","identifier()","identifier()","init_countries()","init_loaded_zones()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","latitude()","linked_timezone_identifiers()","linked_timezone_identifiers()","linked_timezone_identifiers()","load_country_index()","load_country_index()","load_country_index()","load_country_info()","load_country_info()","load_country_info()","load_timezone_index()","load_timezone_index()","load_timezone_index()","load_timezone_info()","load_timezone_info()","load_timezone_info()","local_after_start?()","local_before_end?()","local_end()","local_end()","local_end_at()","local_end_time()","local_end_time()","local_start()","local_start()","local_start_at()","local_start_time()","local_start_time()","local_to_utc()","longitude()","mday()","min()","mon()","month()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","now()","offsets_up_to()","period_for_local()","period_for_utc()","period_for_utc()","period_for_utc()","periods_for_local()","periods_for_local()","periods_for_local()","process_search_path()","raise_invalid_data_source()","raise_not_implemented()","raise_not_implemented()","raise_not_implemented()","raise_not_implemented()","raise_unknown_timezone()","real_timezone()","require_data()","require_data()","require_definition()","require_index()","resolve_tab_path()","search_path()","search_path=()","sec()","set()","setup()","setup()","std_offset()","strftime()","time()","timezone()","timezone_identifiers()","timezone_identifiers()","timezone_identifiers()","to_datetime()","to_i()","to_local()","to_local()","to_orig()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_time()","to_utc()","to_utc()","transitions_up_to()","transitions_up_to()","us_zone_identifiers()","us_zones()","usec()","utc_after_start?()","utc_before_end?()","utc_end()","utc_end_time()","utc_offset()","utc_start()","utc_start_time()","utc_to_local()","utc_total_offset()","utc_total_offset_rational()","valid_for_local?()","valid_for_utc?()","validate_zoneinfo_dir()","wrap()","year()","zone_identifier()","zone_identifiers()","zone_identifiers()","zone_info()","zone_names()","zones()","zones()","changes","license","readme"],"longSearchIndex":["tzinfo","tzinfo::ambiguoustime","tzinfo::country","tzinfo::countryindexdefinition","tzinfo::countryindexdefinition::classmethods","tzinfo::countryinfo","tzinfo::countrytimezone","tzinfo::datasource","tzinfo::datasourcenotfound","tzinfo::datatimezone","tzinfo::datatimezoneinfo","tzinfo::infotimezone","tzinfo::invalidcountrycode","tzinfo::invaliddatasource","tzinfo::invalidtimezoneidentifier","tzinfo::invalidzoneinfodirectory","tzinfo::invalidzoneinfofile","tzinfo::linkedtimezone","tzinfo::linkedtimezoneinfo","tzinfo::nooffsetsdefined","tzinfo::offsetrationals","tzinfo::periodnotfound","tzinfo::rubycoresupport","tzinfo::rubycountryinfo","tzinfo::rubycountryinfo::zones","tzinfo::rubydatasource","tzinfo::timeordatetime","tzinfo::timezone","tzinfo::timezonedefinition","tzinfo::timezonedefinition::classmethods","tzinfo::timezoneindexdefinition","tzinfo::timezoneindexdefinition::classmethods","tzinfo::timezoneinfo","tzinfo::timezoneoffset","tzinfo::timezoneperiod","tzinfo::timezoneproxy","tzinfo::timezonetransition","tzinfo::timezonetransitiondefinition","tzinfo::transitiondatatimezoneinfo","tzinfo::unknowntimezone","tzinfo::zoneinfocountryinfo","tzinfo::zoneinfodatasource","tzinfo::zoneinfodirectorynotfound","tzinfo::zoneinfotimezoneinfo","tzinfo::timeordatetime#+()","tzinfo::timeordatetime#-()","tzinfo::country#<=>()","tzinfo::timeordatetime#<=>()","tzinfo::timezone#<=>()","tzinfo::countrytimezone#==()","tzinfo::timezoneoffset#==()","tzinfo::timezoneperiod#==()","tzinfo::timezonetransition#==()","tzinfo::country#_dump()","tzinfo::timezone#_dump()","tzinfo::timezoneproxy#_dump()","tzinfo::country::_load()","tzinfo::timezone::_load()","tzinfo::timezoneproxy::_load()","tzinfo::timezoneperiod#abbreviation()","tzinfo::timeordatetime#add_with_convert()","tzinfo::country::all()","tzinfo::timezone::all()","tzinfo::country::all_codes()","tzinfo::timezone::all_country_zone_identifiers()","tzinfo::timezone::all_country_zones()","tzinfo::timezone::all_data_zone_identifiers()","tzinfo::timezone::all_data_zones()","tzinfo::timezone::all_identifiers()","tzinfo::timezone::all_linked_zone_identifiers()","tzinfo::timezone::all_linked_zones()","tzinfo::zoneinfodatasource::alternate_iso3166_tab_search_path()","tzinfo::zoneinfodatasource::alternate_iso3166_tab_search_path=()","tzinfo::timezonetransition#at()","tzinfo::timezone#canonical_identifier()","tzinfo::timezone#canonical_zone()","tzinfo::timezoneproxy#canonical_zone()","tzinfo::country#code()","tzinfo::datasource#country_codes()","tzinfo::rubydatasource#country_codes()","tzinfo::zoneinfodatasource#country_codes()","tzinfo::datasource::create_default_data_source()","tzinfo::datatimezoneinfo#create_timezone()","tzinfo::linkedtimezoneinfo#create_timezone()","tzinfo::timezoneinfo#create_timezone()","tzinfo::timezone#current_period()","tzinfo::timezone#current_period_and_time()","tzinfo::timezone#current_time_and_period()","tzinfo::country::data_source()","tzinfo::timezone::data_source()","tzinfo::datasource#data_timezone_identifiers()","tzinfo::rubydatasource#data_timezone_identifiers()","tzinfo::zoneinfodatasource#data_timezone_identifiers()","tzinfo::timezonetransition#datetime()","tzinfo::timeordatetime#day()","tzinfo::timezone::default_dst()","tzinfo::timezone::default_dst=()","tzinfo::countrytimezone#description_or_friendly_identifier()","tzinfo::zoneinfodatasource#dms_to_rational()","tzinfo::timezoneoffset#dst?()","tzinfo::timezoneperiod#dst?()","tzinfo::zoneinfodatasource#enum_timezones()","tzinfo::country#eql?()","tzinfo::countrytimezone#eql?()","tzinfo::timeordatetime#eql?()","tzinfo::timezone#eql?()","tzinfo::timezoneoffset#eql?()","tzinfo::timezoneperiod#eql?()","tzinfo::timezonetransition#eql?()","tzinfo::zoneinfodatasource#find_zoneinfo_dir()","tzinfo::timezone#friendly_identifier()","tzinfo::country::get()","tzinfo::datasource::get()","tzinfo::timezone::get()","tzinfo::timezone::get_proxies()","tzinfo::timezone::get_proxy()","tzinfo::country#hash()","tzinfo::countrytimezone#hash()","tzinfo::timeordatetime#hash()","tzinfo::timezone#hash()","tzinfo::timezoneoffset#hash()","tzinfo::timezoneperiod#hash()","tzinfo::timezonetransition#hash()","tzinfo::timeordatetime#hour()","tzinfo::timezone#identifier()","tzinfo::timezoneproxy#identifier()","tzinfo::country::init_countries()","tzinfo::timezone::init_loaded_zones()","tzinfo::country#inspect()","tzinfo::countryinfo#inspect()","tzinfo::countrytimezone#inspect()","tzinfo::datasource#inspect()","tzinfo::linkedtimezoneinfo#inspect()","tzinfo::timeordatetime#inspect()","tzinfo::timezone#inspect()","tzinfo::timezoneinfo#inspect()","tzinfo::timezoneoffset#inspect()","tzinfo::timezoneperiod#inspect()","tzinfo::timezonetransition#inspect()","tzinfo::zoneinfodatasource#inspect()","tzinfo::countrytimezone#latitude()","tzinfo::datasource#linked_timezone_identifiers()","tzinfo::rubydatasource#linked_timezone_identifiers()","tzinfo::zoneinfodatasource#linked_timezone_identifiers()","tzinfo::rubydatasource#load_country_index()","tzinfo::rubydatasource::load_country_index()","tzinfo::zoneinfodatasource#load_country_index()","tzinfo::datasource#load_country_info()","tzinfo::rubydatasource#load_country_info()","tzinfo::zoneinfodatasource#load_country_info()","tzinfo::rubydatasource#load_timezone_index()","tzinfo::rubydatasource::load_timezone_index()","tzinfo::zoneinfodatasource#load_timezone_index()","tzinfo::datasource#load_timezone_info()","tzinfo::rubydatasource#load_timezone_info()","tzinfo::zoneinfodatasource#load_timezone_info()","tzinfo::timezoneperiod#local_after_start?()","tzinfo::timezoneperiod#local_before_end?()","tzinfo::timezoneperiod#local_end()","tzinfo::timezonetransition#local_end()","tzinfo::timezonetransition#local_end_at()","tzinfo::timezoneperiod#local_end_time()","tzinfo::timezonetransition#local_end_time()","tzinfo::timezoneperiod#local_start()","tzinfo::timezonetransition#local_start()","tzinfo::timezonetransition#local_start_at()","tzinfo::timezoneperiod#local_start_time()","tzinfo::timezonetransition#local_start_time()","tzinfo::timezone#local_to_utc()","tzinfo::countrytimezone#longitude()","tzinfo::timeordatetime#mday()","tzinfo::timeordatetime#min()","tzinfo::timeordatetime#mon()","tzinfo::timeordatetime#month()","tzinfo::country#name()","tzinfo::timezone#name()","tzinfo::country::new()","tzinfo::countryinfo::new()","tzinfo::countrytimezone#new()","tzinfo::linkedtimezoneinfo::new()","tzinfo::timeordatetime::new()","tzinfo::timezone::new()","tzinfo::timezoneinfo::new()","tzinfo::timezoneoffset::new()","tzinfo::timezoneperiod::new()","tzinfo::timezoneproxy::new()","tzinfo::timezonetransition::new()","tzinfo::zoneinfodatasource::new()","tzinfo::timezone#now()","tzinfo::timezone#offsets_up_to()","tzinfo::timezone#period_for_local()","tzinfo::datatimezoneinfo#period_for_utc()","tzinfo::timezone#period_for_utc()","tzinfo::timezoneproxy#period_for_utc()","tzinfo::datatimezoneinfo#periods_for_local()","tzinfo::timezone#periods_for_local()","tzinfo::timezoneproxy#periods_for_local()","tzinfo::zoneinfodatasource::process_search_path()","tzinfo::datasource#raise_invalid_data_source()","tzinfo::countryinfo#raise_not_implemented()","tzinfo::datatimezoneinfo#raise_not_implemented()","tzinfo::timezoneinfo#raise_not_implemented()","tzinfo::timezonetransition#raise_not_implemented()","tzinfo::timezone#raise_unknown_timezone()","tzinfo::timezoneproxy#real_timezone()","tzinfo::rubydatasource::require_data()","tzinfo::rubydatasource#require_data()","tzinfo::rubydatasource#require_definition()","tzinfo::rubydatasource::require_index()","tzinfo::zoneinfodatasource#resolve_tab_path()","tzinfo::zoneinfodatasource::search_path()","tzinfo::zoneinfodatasource::search_path=()","tzinfo::timeordatetime#sec()","tzinfo::datasource::set()","tzinfo::country#setup()","tzinfo::timezoneproxy#setup()","tzinfo::timezoneperiod#std_offset()","tzinfo::timezone#strftime()","tzinfo::timezonetransition#time()","tzinfo::countrytimezone#timezone()","tzinfo::datasource#timezone_identifiers()","tzinfo::rubydatasource#timezone_identifiers()","tzinfo::zoneinfodatasource#timezone_identifiers()","tzinfo::timeordatetime#to_datetime()","tzinfo::timeordatetime#to_i()","tzinfo::timezoneoffset#to_local()","tzinfo::timezoneperiod#to_local()","tzinfo::timeordatetime#to_orig()","tzinfo::country#to_s()","tzinfo::datasource#to_s()","tzinfo::rubydatasource#to_s()","tzinfo::timeordatetime#to_s()","tzinfo::timezone#to_s()","tzinfo::zoneinfodatasource#to_s()","tzinfo::timeordatetime#to_time()","tzinfo::timezoneoffset#to_utc()","tzinfo::timezoneperiod#to_utc()","tzinfo::datatimezoneinfo#transitions_up_to()","tzinfo::timezone#transitions_up_to()","tzinfo::timezone::us_zone_identifiers()","tzinfo::timezone::us_zones()","tzinfo::timeordatetime#usec()","tzinfo::timezoneperiod#utc_after_start?()","tzinfo::timezoneperiod#utc_before_end?()","tzinfo::timezoneperiod#utc_end()","tzinfo::timezoneperiod#utc_end_time()","tzinfo::timezoneperiod#utc_offset()","tzinfo::timezoneperiod#utc_start()","tzinfo::timezoneperiod#utc_start_time()","tzinfo::timezone#utc_to_local()","tzinfo::timezoneperiod#utc_total_offset()","tzinfo::timezoneperiod#utc_total_offset_rational()","tzinfo::timezoneperiod#valid_for_local?()","tzinfo::timezoneperiod#valid_for_utc?()","tzinfo::zoneinfodatasource#validate_zoneinfo_dir()","tzinfo::timeordatetime::wrap()","tzinfo::timeordatetime#year()","tzinfo::timezoneperiod#zone_identifier()","tzinfo::country#zone_identifiers()","tzinfo::countryinfo#zone_identifiers()","tzinfo::country#zone_info()","tzinfo::country#zone_names()","tzinfo::country#zones()","tzinfo::countryinfo#zones()","","",""],"info":[["TZInfo","","TZInfo.html","","<p>Top level module for TZInfo.\n"],["TZInfo::AmbiguousTime","","TZInfo/AmbiguousTime.html","","<p>AmbiguousTime is raised to indicates that a specified time in a local \ntimezone has more than one possible …\n"],["TZInfo::Country","","TZInfo/Country.html","","<p>The Country class represents an ISO 3166-1 country. It can be used to \nobtain a list of Timezones for …\n"],["TZInfo::CountryIndexDefinition","","TZInfo/CountryIndexDefinition.html","",""],["TZInfo::CountryIndexDefinition::ClassMethods","","TZInfo/CountryIndexDefinition/ClassMethods.html","",""],["TZInfo::CountryInfo","","TZInfo/CountryInfo.html","","<p>Represents a country and references to its timezones as returned by a\nDataSource.\n"],["TZInfo::CountryTimezone","","TZInfo/CountryTimezone.html","","<p>A Timezone within a Country. This contains extra information about the\nTimezone that is specific to the …\n"],["TZInfo::DataSource","","TZInfo/DataSource.html","","<p>The base class for data sources of timezone and country data.\n<p>Use DataSource.set to change the data source …\n"],["TZInfo::DataSourceNotFound","","TZInfo/DataSourceNotFound.html","","<p>DataSourceNotFound is raised if no data source could be found (i.e.  if\n&#39;tzinfo/data&#39; cannot …\n"],["TZInfo::DataTimezone","","TZInfo/DataTimezone.html","",""],["TZInfo::DataTimezoneInfo","","TZInfo/DataTimezoneInfo.html","","<p>Represents a defined timezone containing transition data.\n"],["TZInfo::InfoTimezone","","TZInfo/InfoTimezone.html","",""],["TZInfo::InvalidCountryCode","","TZInfo/InvalidCountryCode.html","","<p>Raised by Country#get if the code given is not valid.\n"],["TZInfo::InvalidDataSource","","TZInfo/InvalidDataSource.html","","<p>InvalidDataSource is raised if the DataSource is used doesn&#39;t implement\none  of the required methods. …\n"],["TZInfo::InvalidTimezoneIdentifier","","TZInfo/InvalidTimezoneIdentifier.html","","<p>Raised by Timezone#get if the identifier given is not valid.\n"],["TZInfo::InvalidZoneinfoDirectory","","TZInfo/InvalidZoneinfoDirectory.html","","<p>An InvalidZoneinfoDirectory exception is raised if the DataSource is set to\na specific zoneinfo path, …\n"],["TZInfo::InvalidZoneinfoFile","","TZInfo/InvalidZoneinfoFile.html","","<p>An InvalidZoneinfoFile exception is raised if an attempt is made to load an\ninvalid zoneinfo file.\n"],["TZInfo::LinkedTimezone","","TZInfo/LinkedTimezone.html","",""],["TZInfo::LinkedTimezoneInfo","","TZInfo/LinkedTimezoneInfo.html","","<p>Represents a timezone that is defined as a link or alias to another zone.\n"],["TZInfo::NoOffsetsDefined","","TZInfo/NoOffsetsDefined.html","","<p>Raised if no offsets have been defined when calling period_for_utc or\nperiods_for_local. Indicates an …\n"],["TZInfo::OffsetRationals","","TZInfo/OffsetRationals.html","",""],["TZInfo::PeriodNotFound","","TZInfo/PeriodNotFound.html","","<p>PeriodNotFound is raised to indicate that no TimezonePeriod matching a\ngiven time could be found.\n"],["TZInfo::RubyCoreSupport","","TZInfo/RubyCoreSupport.html","",""],["TZInfo::RubyCountryInfo","","TZInfo/RubyCountryInfo.html","",""],["TZInfo::RubyCountryInfo::Zones","","TZInfo/RubyCountryInfo/Zones.html","",""],["TZInfo::RubyDataSource","","TZInfo/RubyDataSource.html","","<p>A DataSource that loads data from the set of Ruby modules included in the\nTZInfo::Data library (tzinfo-data …\n"],["TZInfo::TimeOrDateTime","","TZInfo/TimeOrDateTime.html","","<p>Used by TZInfo internally to represent either a Time, DateTime or an\nInteger timestamp (seconds since …\n"],["TZInfo::Timezone","","TZInfo/Timezone.html","","<p>Timezone is the base class of all timezones. It provides a factory method,\n&#39;get&#39;, to access timezones …\n"],["TZInfo::TimezoneDefinition","","TZInfo/TimezoneDefinition.html","",""],["TZInfo::TimezoneDefinition::ClassMethods","","TZInfo/TimezoneDefinition/ClassMethods.html","",""],["TZInfo::TimezoneIndexDefinition","","TZInfo/TimezoneIndexDefinition.html","",""],["TZInfo::TimezoneIndexDefinition::ClassMethods","","TZInfo/TimezoneIndexDefinition/ClassMethods.html","",""],["TZInfo::TimezoneInfo","","TZInfo/TimezoneInfo.html","","<p>Represents a timezone defined by a data source.\n"],["TZInfo::TimezoneOffset","","TZInfo/TimezoneOffset.html","","<p>Represents an offset defined in a Timezone data file.\n"],["TZInfo::TimezonePeriod","","TZInfo/TimezonePeriod.html","","<p>A period of time in a timezone where the same offset from UTC applies.\n<p>All the methods that take times …\n"],["TZInfo::TimezoneProxy","","TZInfo/TimezoneProxy.html","","<p>A proxy class representing a timezone with a given identifier.\nTimezoneProxy inherits from Timezone and …\n"],["TZInfo::TimezoneTransition","","TZInfo/TimezoneTransition.html","","<p>Represents a transition from one timezone offset to another at a particular\ndate and time.\n"],["TZInfo::TimezoneTransitionDefinition","","TZInfo/TimezoneTransitionDefinition.html","",""],["TZInfo::TransitionDataTimezoneInfo","","TZInfo/TransitionDataTimezoneInfo.html","",""],["TZInfo::UnknownTimezone","","TZInfo/UnknownTimezone.html","","<p>Raised if an attempt is made to use a timezone created with\nTimezone.new(nil).\n"],["TZInfo::ZoneinfoCountryInfo","","TZInfo/ZoneinfoCountryInfo.html","",""],["TZInfo::ZoneinfoDataSource","","TZInfo/ZoneinfoDataSource.html","","<p>A DataSource that loads data from a &#39;zoneinfo&#39; directory containing\ncompiled “TZif” …\n"],["TZInfo::ZoneinfoDirectoryNotFound","","TZInfo/ZoneinfoDirectoryNotFound.html","","<p>A ZoneinfoDirectoryNotFound exception is raised if no valid zoneinfo \ndirectory could be found when checking …\n"],["TZInfo::ZoneinfoTimezoneInfo","","TZInfo/ZoneinfoTimezoneInfo.html","",""],["+","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-2B","(seconds)","<p>Adds a number of seconds to the TimeOrDateTime. Returns a new \nTimeOrDateTime, preserving what the original …\n"],["-","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-2D","(seconds)","<p>Subtracts a number of seconds from the TimeOrDateTime. Returns a new \nTimeOrDateTime, preserving what …\n"],["<=>","TZInfo::Country","TZInfo/Country.html#method-i-3C-3D-3E","(c)","<p>Compare two Countries based on their code. Returns -1 if c is less than\nself, 0 if c is equal to self …\n"],["<=>","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-3C-3D-3E","(timeOrDateTime)","<p>Compares this TimeOrDateTime with another Time, DateTime, timestamp \n(Integer) or TimeOrDateTime. Returns …\n"],["<=>","TZInfo::Timezone","TZInfo/Timezone.html#method-i-3C-3D-3E","(tz)","<p>Compares two Timezones based on their identifier. Returns -1 if tz is less\nthan self, 0 if tz is equal …\n"],["==","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-3D-3D","(ct)","<p>Returns true if and only if the given CountryTimezone is equal to the\ncurrent CountryTimezone (has the …\n"],["==","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-3D-3D","(toi)","<p>Returns true if and only if toi has the same utc_offset, std_offset and\nabbreviation as this TimezoneOffset …\n"],["==","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-3D-3D","(p)","<p>Returns true if this TimezonePeriod is equal to p. This compares the \nstart_transition, end_transition …\n"],["==","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-3D-3D","(tti)","<p>Returns true if this TimezoneTransition is equal to the given\nTimezoneTransition. Two TimezoneTransition …\n"],["_dump","TZInfo::Country","TZInfo/Country.html#method-i-_dump","(limit)","<p>Dumps this Country for marshalling.\n"],["_dump","TZInfo::Timezone","TZInfo/Timezone.html#method-i-_dump","(limit)","<p>Dumps this Timezone for marshalling.\n"],["_dump","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-_dump","(limit)","<p>Dumps this TimezoneProxy for marshalling.\n"],["_load","TZInfo::Country","TZInfo/Country.html#method-c-_load","(data)","<p>Loads a marshalled Country.\n"],["_load","TZInfo::Timezone","TZInfo/Timezone.html#method-c-_load","(data)","<p>Loads a marshalled Timezone.\n"],["_load","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-c-_load","(data)","<p>Loads a marshalled TimezoneProxy.\n"],["abbreviation","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-abbreviation","()","<p>The identifier of this period, e.g. “GMT” (Greenwich Mean Time) or “BST”\n(British …\n"],["add_with_convert","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-add_with_convert","(seconds)","<p>Similar to the + operator, but converts to a DateTime based TimeOrDateTime\nwhere the  Time or Integer …\n"],["all","TZInfo::Country","TZInfo/Country.html#method-c-all","()","<p>Returns an Array of all the defined Countries.\n"],["all","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all","()","<p>Returns an array containing all the available Timezones.\n<p>Returns TimezoneProxy objects to avoid the overhead …\n"],["all_codes","TZInfo::Country","TZInfo/Country.html#method-c-all_codes","()","<p>Returns an Array of all the valid country codes.\n"],["all_country_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_country_zone_identifiers","()","<p>Returns all the zone identifiers defined for all Countries. This is not the\ncomplete set of zone identifiers …\n"],["all_country_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_country_zones","()","<p>Returns all the Timezones defined for all Countries. This is not the\ncomplete set of Timezones as some …\n"],["all_data_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_data_zone_identifiers","()","<p>Returns an array containing the identifiers of all the available  Timezones\nthat are based on data (are …\n"],["all_data_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_data_zones","()","<p>Returns an array containing all the available Timezones that are based on\ndata (are not links to other …\n"],["all_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_identifiers","()","<p>Returns an array containing the identifiers of all the available \nTimezones.\n"],["all_linked_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_linked_zone_identifiers","()","<p>Returns an array containing the identifiers of all the available  Timezones\nthat are links to other  …\n"],["all_linked_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_linked_zones","()","<p>Returns an array containing all the available Timezones that are links to\nother Timezones.\n<p>Returns TimezoneProxy …\n"],["alternate_iso3166_tab_search_path","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-c-alternate_iso3166_tab_search_path","()","<p>An Array of paths that will be checked to find an alternate iso3166.tab \nfile if one was not included …\n"],["alternate_iso3166_tab_search_path=","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-c-alternate_iso3166_tab_search_path-3D","(alternate_iso3166_tab_search_path)","<p>Sets the paths to check to locate an alternate iso3166.tab file if one was\nnot included in the zoneinfo …\n"],["at","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-at","()","<p>A TimeOrDateTime instance representing the UTC time when this transition\noccurs.\n"],["canonical_identifier","TZInfo::Timezone","TZInfo/Timezone.html#method-i-canonical_identifier","()","<p>Returns the canonical identifier for this Timezone.\n<p>This is a shortcut for calling canonical_zone.identifier. …\n"],["canonical_zone","TZInfo::Timezone","TZInfo/Timezone.html#method-i-canonical_zone","()","<p>Returns the canonical Timezone instance for this Timezone.\n<p>The IANA Time Zone database contains two types …\n"],["canonical_zone","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-canonical_zone","()","<p>Returns the canonical zone for this Timezone.\n"],["code","TZInfo::Country","TZInfo/Country.html#method-i-code","()","<p>The ISO 3166-1 alpha-2 country code.\n"],["country_codes","TZInfo::DataSource","TZInfo/DataSource.html#method-i-country_codes","()","<p>Returns an array of all the available ISO 3166-1 alpha-2 country codes.\n"],["country_codes","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-country_codes","()","<p>Returns an array of all the available ISO 3166-1 alpha-2 country codes.\n"],["country_codes","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-country_codes","()","<p>Returns an array of all the available ISO 3166-1 alpha-2 country codes.\n"],["create_default_data_source","TZInfo::DataSource","TZInfo/DataSource.html#method-c-create_default_data_source","()","<p>Creates a DataSource instance for use as the default. Used if no preference\nhas been specified manually. …\n"],["create_timezone","TZInfo::DataTimezoneInfo","TZInfo/DataTimezoneInfo.html#method-i-create_timezone","()","<p>Constructs a Timezone instance for the timezone represented by this\nDataTimezoneInfo.\n"],["create_timezone","TZInfo::LinkedTimezoneInfo","TZInfo/LinkedTimezoneInfo.html#method-i-create_timezone","()","<p>Constructs a Timezone instance for the timezone represented by this\nDataTimezoneInfo.\n"],["create_timezone","TZInfo::TimezoneInfo","TZInfo/TimezoneInfo.html#method-i-create_timezone","()","<p>Constructs a Timezone instance for the timezone represented by this\nTimezoneInfo.\n"],["current_period","TZInfo::Timezone","TZInfo/Timezone.html#method-i-current_period","()","<p>Returns the TimezonePeriod for the current time.\n"],["current_period_and_time","TZInfo::Timezone","TZInfo/Timezone.html#method-i-current_period_and_time","()","<p>Returns the current Time and TimezonePeriod as an array. The first element\nis the time, the second element …\n"],["current_time_and_period","TZInfo::Timezone","TZInfo/Timezone.html#method-i-current_time_and_period","()",""],["data_source","TZInfo::Country","TZInfo/Country.html#method-c-data_source","()","<p>Returns the current DataSource\n"],["data_source","TZInfo::Timezone","TZInfo/Timezone.html#method-c-data_source","()","<p>Returns the current DataSource.\n"],["data_timezone_identifiers","TZInfo::DataSource","TZInfo/DataSource.html#method-i-data_timezone_identifiers","()","<p>Returns an array of all the available timezone identifiers for data\ntimezones (i.e. those that actually …\n"],["data_timezone_identifiers","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-data_timezone_identifiers","()","<p>Returns an array of all the available timezone identifiers for data\ntimezones (i.e. those that actually …\n"],["data_timezone_identifiers","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-data_timezone_identifiers","()","<p>Returns an array of all the available timezone identifiers for data\ntimezones (i.e. those that actually …\n"],["datetime","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-datetime","()","<p>The UTC time when this transition occurs, returned as a DateTime instance.\n"],["day","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-day","()",""],["default_dst","TZInfo::Timezone","TZInfo/Timezone.html#method-c-default_dst","()","<p>Gets the default value of the optional dst parameter of the  local_to_utc\nand period_for_local methods. …\n"],["default_dst=","TZInfo::Timezone","TZInfo/Timezone.html#method-c-default_dst-3D","(value)","<p>Sets the default value of the optional dst parameter of the  local_to_utc\nand period_for_local methods. …\n"],["description_or_friendly_identifier","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-description_or_friendly_identifier","()","<p>if description is not nil, this method returns description; otherwise it\nreturns timezone.friendly_identifier …\n"],["dms_to_rational","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-dms_to_rational","(sign, degrees, minutes, seconds = nil)","<p>Converts degrees, minutes and seconds to a Rational.\n"],["dst?","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-dst-3F","()","<p>True if std_offset is non-zero.\n"],["dst?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-dst-3F","()","<p>true if daylight savings is in effect for this period; otherwise false.\n"],["enum_timezones","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-enum_timezones","(dir, exclude = [], &block)","<p>Recursively scans a directory of timezones, calling the passed in block for\neach identifier found.\n"],["eql?","TZInfo::Country","TZInfo/Country.html#method-i-eql-3F","(c)","<p>Returns true if and only if the code of c is equal to the code of this\nCountry.\n"],["eql?","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-eql-3F","(ct)","<p>Returns true if and only if the given CountryTimezone is equal to the\ncurrent CountryTimezone (has the …\n"],["eql?","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-eql-3F","(todt)","<p>Returns true if todt represents the same time and was originally \nconstructed with the same type (DateTime, …\n"],["eql?","TZInfo::Timezone","TZInfo/Timezone.html#method-i-eql-3F","(tz)","<p>Returns true if and only if the identifier of tz is equal to the \nidentifier of this Timezone.\n"],["eql?","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-eql-3F","(toi)","<p>Returns true if and only if toi has the same utc_offset, std_offset and\nabbreviation as this TimezoneOffset …\n"],["eql?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-eql-3F","(p)","<p>Returns true if this TimezonePeriods is equal to p. This compares the\nstart_transition, end_transition …\n"],["eql?","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-eql-3F","(tti)","<p>Returns true if this TimezoneTransition is equal to the given\nTimezoneTransition. Two TimezoneTransition …\n"],["find_zoneinfo_dir","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-find_zoneinfo_dir","()","<p>Finds a zoneinfo directory using search_path and \nalternate_iso3166_tab_search_path. Returns the paths …\n"],["friendly_identifier","TZInfo::Timezone","TZInfo/Timezone.html#method-i-friendly_identifier","(skip_first_part = false)","<p>Returns a friendlier version of the identifier. Set skip_first_part to \nomit the first part of the identifier …\n"],["get","TZInfo::Country","TZInfo/Country.html#method-c-get","(identifier)","<p>Gets a Country by its ISO 3166-1 alpha-2 code. Raises an \nInvalidCountryCode exception if it couldn&#39;t …\n"],["get","TZInfo::DataSource","TZInfo/DataSource.html#method-c-get","()","<p>Returns the currently selected DataSource instance.\n"],["get","TZInfo::Timezone","TZInfo/Timezone.html#method-c-get","(identifier)","<p>Returns a timezone by its identifier (e.g. “Europe/London”, \n“America/Chicago” or …\n"],["get_proxies","TZInfo::Timezone","TZInfo/Timezone.html#method-c-get_proxies","(identifiers)","<p>Returns an array of proxies corresponding to the given array of \nidentifiers.\n"],["get_proxy","TZInfo::Timezone","TZInfo/Timezone.html#method-c-get_proxy","(identifier)","<p>Returns a proxy for the Timezone with the given identifier. The proxy will\ncause the real timezone to …\n"],["hash","TZInfo::Country","TZInfo/Country.html#method-i-hash","()","<p>Returns a hash value for this Country.\n"],["hash","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-hash","()","<p>Returns a hash of this CountryTimezone.\n"],["hash","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-hash","()","<p>Returns a hash of this TimeOrDateTime.\n"],["hash","TZInfo::Timezone","TZInfo/Timezone.html#method-i-hash","()","<p>Returns a hash of this Timezone.\n"],["hash","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-hash","()","<p>Returns a hash of this TimezoneOffset.\n"],["hash","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-hash","()","<p>Returns a hash of this TimezonePeriod.\n"],["hash","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-hash","()","<p>Returns a hash of this TimezoneTransition instance.\n"],["hour","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-hour","()","<p>Returns the hour of the day (0..23).\n"],["identifier","TZInfo::Timezone","TZInfo/Timezone.html#method-i-identifier","()","<p>The identifier of the timezone, e.g. “Europe/Paris”.\n"],["identifier","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-identifier","()","<p>The identifier of the timezone, e.g. “Europe/Paris”.\n"],["init_countries","TZInfo::Country","TZInfo/Country.html#method-c-init_countries","()","<p>Initializes @@countries.\n"],["init_loaded_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-init_loaded_zones","()","<p>Initializes @@loaded_zones.\n"],["inspect","TZInfo::Country","TZInfo/Country.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::CountryInfo","TZInfo/CountryInfo.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::DataSource","TZInfo/DataSource.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::LinkedTimezoneInfo","TZInfo/LinkedTimezoneInfo.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::Timezone","TZInfo/Timezone.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::TimezoneInfo","TZInfo/TimezoneInfo.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["inspect","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-inspect","()","<p>Returns internal object state as a programmer-readable string.\n"],["latitude","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-latitude","()","<p>The latitude of this timezone in degrees as a Rational.\n"],["linked_timezone_identifiers","TZInfo::DataSource","TZInfo/DataSource.html#method-i-linked_timezone_identifiers","()","<p>Returns an array of all the available timezone identifiers that are links\nto other timezones.\n"],["linked_timezone_identifiers","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-linked_timezone_identifiers","()","<p>Returns an array of all the available timezone identifiers that are links\nto other timezones.\n"],["linked_timezone_identifiers","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-linked_timezone_identifiers","()","<p>Returns an array of all the available timezone identifiers that are links\nto other timezones.\n<p>For ZoneinfoDataSource …\n"],["load_country_index","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-load_country_index","()","<p>Loads in the index of countries if it hasn&#39;t already been loaded.\n"],["load_country_index","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-c-load_country_index","()","<p>Loads in the index of countries if it hasn&#39;t already been loaded.\n"],["load_country_index","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-load_country_index","(iso3166_tab_path, zone_tab_path)","<p>Uses the iso3166.tab and zone1970.tab or zone.tab files to build an index\nof the available countries …\n"],["load_country_info","TZInfo::DataSource","TZInfo/DataSource.html#method-i-load_country_info","(code)","<p>Returns a CountryInfo instance for the given ISO 3166-1 alpha-2 country\ncode. Raises InvalidCountryCode …\n"],["load_country_info","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-load_country_info","(code)","<p>Returns a CountryInfo instance for the given ISO 3166-1 alpha-2 country\ncode. Raises InvalidCountryCode …\n"],["load_country_info","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-load_country_info","(code)","<p>Returns a CountryInfo instance for the given ISO 3166-1 alpha-2 country\ncode. Raises InvalidCountryCode …\n"],["load_timezone_index","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-load_timezone_index","()","<p>Loads in the index of timezones if it hasn&#39;t already been loaded.\n"],["load_timezone_index","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-c-load_timezone_index","()","<p>Loads in the index of timezones if it hasn&#39;t already been loaded.\n"],["load_timezone_index","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-load_timezone_index","()","<p>Scans @zoneinfo_dir and returns an Array of available timezone \nidentifiers.\n"],["load_timezone_info","TZInfo::DataSource","TZInfo/DataSource.html#method-i-load_timezone_info","(identifier)","<p>Returns a TimezoneInfo instance for a given identifier. The TimezoneInfo\ninstance should derive from …\n"],["load_timezone_info","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-load_timezone_info","(identifier)","<p>Returns a TimezoneInfo instance for a given identifier.  Raises\nInvalidTimezoneIdentifier if the timezone …\n"],["load_timezone_info","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-load_timezone_info","(identifier)","<p>Returns a TimezoneInfo instance for a given identifier.  Raises\nInvalidTimezoneIdentifier if the timezone …\n"],["local_after_start?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_after_start-3F","(local)","<p>true if the given local DateTime is after the start of the period \n(inclusive); otherwise false.\n"],["local_before_end?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_before_end-3F","(local)","<p>true if the given local DateTime is before the end of the period \n(exclusive); otherwise false.\n"],["local_end","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_end","()","<p>The end time of the period in local time as a DateTime. May be nil if \nunbounded.\n"],["local_end","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-local_end","()","<p>The local time when this transition causes the previous observance to end,\nreturned as a DateTime instance. …\n"],["local_end_at","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-local_end_at","()","<p>A TimeOrDateTime instance representing the local time when this transition\ncauses the previous observance …\n"],["local_end_time","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_end_time","()","<p>The end time of the period in local time as a Time. May be nil if \nunbounded.\n"],["local_end_time","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-local_end_time","()","<p>The local time when this transition causes the previous observance to end,\nreturned as a Time instance. …\n"],["local_start","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_start","()","<p>The start time of the period in local time as a DateTime. May be nil if \nunbounded.\n"],["local_start","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-local_start","()","<p>The local time when this transition causes the next observance to start,\nreturned as a DateTime instance. …\n"],["local_start_at","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-local_start_at","()","<p>A TimeOrDateTime instance representing the local time when this transition\ncauses the next observance …\n"],["local_start_time","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_start_time","()","<p>The start time of the period in local time as a Time. May be nil if \nunbounded.\n"],["local_start_time","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-local_start_time","()","<p>The local time when this transition causes the next observance to start,\nreturned as a Time instance. …\n"],["local_to_utc","TZInfo::Timezone","TZInfo/Timezone.html#method-i-local_to_utc","(local, dst = Timezone.default_dst)","<p>Converts a time in the local timezone to UTC. local can either be a\nDateTime, Time or timestamp (Time.to_i). …\n"],["longitude","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-longitude","()","<p>The longitude of this timezone in degrees as a Rational.\n"],["mday","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-mday","()","<p>Returns the day of the month (1..n).\n"],["min","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-min","()","<p>Returns the minute of the hour (0..59).\n"],["mon","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-mon","()","<p>Returns the month of the year (1..12).\n"],["month","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-month","()",""],["name","TZInfo::Country","TZInfo/Country.html#method-i-name","()","<p>The name of the country.\n"],["name","TZInfo::Timezone","TZInfo/Timezone.html#method-i-name","()","<p>An alias for identifier.\n"],["new","TZInfo::Country","TZInfo/Country.html#method-c-new","(identifier)","<p>If identifier is a CountryInfo object, initializes the Country instance, \notherwise calls get(identifier). …\n"],["new","TZInfo::CountryInfo","TZInfo/CountryInfo.html#method-c-new","(code, name)","<p>Constructs a new CountryInfo with an ISO 3166 country code and name\n"],["new","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-new","(identifier, latitude, longitude, description = nil)","<p>Creates a new CountryTimezone with a timezone identifier, latitude,\nlongitude and description. The latitude …\n"],["new","TZInfo::LinkedTimezoneInfo","TZInfo/LinkedTimezoneInfo.html#method-c-new","(identifier, link_to_identifier)","<p>Constructs a new LinkedTimezoneInfo with an identifier and the identifier\nof the zone linked to.\n"],["new","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-c-new","(timeOrDateTime)","<p>Constructs a new TimeOrDateTime. timeOrDateTime can be a Time, DateTime or\nInteger. If using a Time or …\n"],["new","TZInfo::Timezone","TZInfo/Timezone.html#method-c-new","(identifier = nil)","<p>If identifier is nil calls super(), otherwise calls get. An identfier \nshould always be passed in when …\n"],["new","TZInfo::TimezoneInfo","TZInfo/TimezoneInfo.html#method-c-new","(identifier)","<p>Constructs a new TimezoneInfo with an identifier.\n"],["new","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-c-new","(utc_offset, std_offset, abbreviation)","<p>Constructs a new TimezoneOffset. utc_offset and std_offset are specified \nin seconds.\n"],["new","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-c-new","(start_transition, end_transition, offset = nil)","<p>Initializes a new TimezonePeriod.\n<p>TimezonePeriod instances should not normally be constructed manually. …\n"],["new","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-c-new","(identifier)","<p>Construct a new TimezoneProxy for the given identifier. The identifier is\nnot checked when constructing …\n"],["new","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-c-new","(offset, previous_offset)","<p>Initializes a new TimezoneTransition.\n<p>TimezoneTransition instances should not normally be constructed …\n"],["new","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-c-new","(zoneinfo_dir = nil, alternate_iso3166_tab_path = nil)","<p>Creates a new ZoneinfoDataSource.\n<p>If zoneinfo_dir is specified, it will be checked and used as the source …\n"],["now","TZInfo::Timezone","TZInfo/Timezone.html#method-i-now","()","<p>Returns the current time in the timezone as a Time.\n"],["offsets_up_to","TZInfo::Timezone","TZInfo/Timezone.html#method-i-offsets_up_to","(utc_to, utc_from = nil)","<p>Returns information about offsets used by the Timezone up to a given date\nand time, specified using  …\n"],["period_for_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-period_for_local","(local, dst = Timezone.default_dst)","<p>Returns the TimezonePeriod for the given local time. local can either be a\nDateTime, Time or integer …\n"],["period_for_utc","TZInfo::DataTimezoneInfo","TZInfo/DataTimezoneInfo.html#method-i-period_for_utc","(utc)","<p>Returns the TimezonePeriod for the given UTC time.\n"],["period_for_utc","TZInfo::Timezone","TZInfo/Timezone.html#method-i-period_for_utc","(utc)","<p>Returns the TimezonePeriod for the given UTC time. utc can either be a\nDateTime, Time or integer timestamp …\n"],["period_for_utc","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-period_for_utc","(utc)","<p>Returns the TimezonePeriod for the given UTC time. utc can either be a\nDateTime, Time or integer timestamp …\n"],["periods_for_local","TZInfo::DataTimezoneInfo","TZInfo/DataTimezoneInfo.html#method-i-periods_for_local","(local)","<p>Returns the set of TimezonePeriods for the given local time as an array.\n<p>Results returned are ordered …\n"],["periods_for_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-periods_for_local","(local)","<p>Returns the set of TimezonePeriod instances that are valid for the given\nlocal time as an array. If you …\n"],["periods_for_local","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-periods_for_local","(local)","<p>Returns the set of TimezonePeriod instances that are valid for the given\nlocal time as an array. If you …\n"],["process_search_path","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-c-process_search_path","(path, default)","<p>Processes a path for use as the search_path or\nalternate_iso3166_tab_search_path.\n"],["raise_invalid_data_source","TZInfo::DataSource","TZInfo/DataSource.html#method-i-raise_invalid_data_source","(method_name)",""],["raise_not_implemented","TZInfo::CountryInfo","TZInfo/CountryInfo.html#method-i-raise_not_implemented","(method_name)",""],["raise_not_implemented","TZInfo::DataTimezoneInfo","TZInfo/DataTimezoneInfo.html#method-i-raise_not_implemented","(method_name)",""],["raise_not_implemented","TZInfo::TimezoneInfo","TZInfo/TimezoneInfo.html#method-i-raise_not_implemented","(method_name)",""],["raise_not_implemented","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-raise_not_implemented","(method_name)",""],["raise_unknown_timezone","TZInfo::Timezone","TZInfo/Timezone.html#method-i-raise_unknown_timezone","()","<p>Raises an UnknownTimezone exception.\n"],["real_timezone","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-real_timezone","()",""],["require_data","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-c-require_data","(*file)","<p>Requires a file from tzinfo/data.\n"],["require_data","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-require_data","(*file)","<p>Requires a file from tzinfo/data.\n"],["require_definition","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-require_definition","(identifier)","<p>Requires a zone definition by its identifier (split on /).\n"],["require_index","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-c-require_index","(name)","<p>Requires an index by its name.\n"],["resolve_tab_path","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-resolve_tab_path","(zoneinfo_path, standard_names, tab_name)","<p>Attempts to resolve the path to a tab file given its standard names and tab\nsub-directory name (as used …\n"],["search_path","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-c-search_path","()","<p>An Array of directories that will be checked to find the system zoneinfo\ndirectory.\n<p>Directories are checked …\n"],["search_path=","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-c-search_path-3D","(search_path)","<p>Sets the directories to be checked when locating the system zoneinfo \ndirectory.\n<p>Can be set to an Array …\n"],["sec","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-sec","()","<p>Returns the second of the minute (0..60). (60 for a leap second).\n"],["set","TZInfo::DataSource","TZInfo/DataSource.html#method-c-set","(data_source_or_type, *args)","<p>Sets the currently selected data source for Timezone and Country data.\n<p>This should usually be set to one …\n"],["setup","TZInfo::Country","TZInfo/Country.html#method-i-setup","(info)","<p>Called by Country.new to initialize a new Country instance. The info\nparameter is a CountryInfo that …\n"],["setup","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-setup","(identifier)",""],["std_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-std_offset","()","<p>Offset from the local time where daylight savings is in effect (seconds).\nE.g.: utc_offset could be -5 …\n"],["strftime","TZInfo::Timezone","TZInfo/Timezone.html#method-i-strftime","(format, utc = Time.now.utc)","<p>Converts a time in UTC to local time and returns it as a string  according\nto the given format. The formatting …\n"],["time","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-time","()","<p>The UTC time when this transition occurs, returned as a Time instance.\n"],["timezone","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-timezone","()","<p>The Timezone (actually a TimezoneProxy for performance reasons).\n"],["timezone_identifiers","TZInfo::DataSource","TZInfo/DataSource.html#method-i-timezone_identifiers","()","<p>Returns an array of all the available timezone identifiers.\n"],["timezone_identifiers","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-timezone_identifiers","()","<p>Returns an array of all the available timezone identifiers.\n"],["timezone_identifiers","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-timezone_identifiers","()","<p>Returns an array of all the available timezone identifiers.\n"],["to_datetime","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-to_datetime","()","<p>Returns the time as a DateTime.\n<p>When converting from a Time, the result is truncated to microsecond\nprecision. …\n"],["to_i","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-to_i","()","<p>Returns the time as an integer timestamp.\n"],["to_local","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-to_local","(utc)","<p>Converts a UTC Time, DateTime or integer timestamp to local time, based on \nthe offset of this period. …\n"],["to_local","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-to_local","(utc)","<p>Converts a UTC DateTime to local time based on the offset of this period.\n"],["to_orig","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-to_orig","()","<p>Returns the time as the original time passed to new.\n"],["to_s","TZInfo::Country","TZInfo/Country.html#method-i-to_s","()","<p>Alias for name.\n"],["to_s","TZInfo::DataSource","TZInfo/DataSource.html#method-i-to_s","()","<p>Returns the name of this DataSource.\n"],["to_s","TZInfo::RubyDataSource","TZInfo/RubyDataSource.html#method-i-to_s","()","<p>Returns the name of this DataSource.\n"],["to_s","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-to_s","()","<p>Returns a string representation of the TimeOrDateTime.\n"],["to_s","TZInfo::Timezone","TZInfo/Timezone.html#method-i-to_s","()","<p>Returns a friendlier version of the identifier.\n"],["to_s","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-to_s","()","<p>Returns the name and information about this DataSource.\n"],["to_time","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-to_time","()","<p>Returns the time as a Time.\n<p>When converting from a DateTime, the result is truncated to microsecond\nprecision. …\n"],["to_utc","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-to_utc","(local)","<p>Converts a local Time, DateTime or integer timestamp to UTC, based on the\noffset of this period.\n"],["to_utc","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-to_utc","(local)","<p>Converts a local DateTime to UTC based on the offset of this period.\n"],["transitions_up_to","TZInfo::DataTimezoneInfo","TZInfo/DataTimezoneInfo.html#method-i-transitions_up_to","(utc_to, utc_from = nil)","<p>Returns an Array of TimezoneTransition instances representing the times\nwhere the UTC offset of the timezone …\n"],["transitions_up_to","TZInfo::Timezone","TZInfo/Timezone.html#method-i-transitions_up_to","(utc_to, utc_from = nil)","<p>Returns an Array of TimezoneTransition instances representing the times\nwhere the UTC offset of the timezone …\n"],["us_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-us_zone_identifiers","()","<p>Returns all US zone identifiers. A shortcut for \nTZInfo::Country.get(&#39;US&#39;).zone_identifiers. …\n"],["us_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-us_zones","()","<p>Returns all US Timezone instances. A shortcut for \nTZInfo::Country.get(&#39;US&#39;).zones.\n<p>Returns TimezoneProxy …\n"],["usec","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-usec","()","<p>Returns the number of microseconds for the time.\n"],["utc_after_start?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_after_start-3F","(utc)","<p>true if the given UTC DateTime is after the start of the period \n(inclusive); otherwise false.\n"],["utc_before_end?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_before_end-3F","(utc)","<p>true if the given UTC DateTime is before the end of the period \n(exclusive); otherwise false.\n"],["utc_end","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_end","()","<p>The end time of the period in UTC as a DateTime. May be nil if unbounded.\n"],["utc_end_time","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_end_time","()","<p>The end time of the period in UTC as a Time. May be nil if unbounded.\n"],["utc_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_offset","()","<p>Base offset of the timezone from UTC (seconds).\n"],["utc_start","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_start","()","<p>The start time of the period in UTC as a DateTime. May be nil if unbounded.\n"],["utc_start_time","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_start_time","()","<p>The start time of the period in UTC as a Time. May be nil if unbounded.\n"],["utc_to_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-utc_to_local","(utc)","<p>Converts a time in UTC to the local timezone. utc can either be a DateTime,\nTime or timestamp (Time.to_i). …\n"],["utc_total_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_total_offset","()","<p>Total offset from UTC (seconds). Equal to utc_offset + std_offset.\n"],["utc_total_offset_rational","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_total_offset_rational","()","<p>Total offset from UTC (days). Result is a Rational.\n"],["valid_for_local?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-valid_for_local-3F","(local)","<p>true if this period is valid for the given local DateTime; otherwise false.\n"],["valid_for_utc?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-valid_for_utc-3F","(utc)","<p>true if this period is valid for the given UTC DateTime; otherwise false.\n"],["validate_zoneinfo_dir","TZInfo::ZoneinfoDataSource","TZInfo/ZoneinfoDataSource.html#method-i-validate_zoneinfo_dir","(path, iso3166_tab_path = nil)","<p>Validates a zoneinfo directory and returns the paths to the iso3166.tab \nand zone1970.tab or zone.tab …\n"],["wrap","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-c-wrap","(timeOrDateTime)","<p>If no block is given, returns a TimeOrDateTime wrapping the given \ntimeOrDateTime. If a block is specified, …\n"],["year","TZInfo::TimeOrDateTime","TZInfo/TimeOrDateTime.html#method-i-year","()","<p>Returns the year.\n"],["zone_identifier","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-zone_identifier","()",""],["zone_identifiers","TZInfo::Country","TZInfo/Country.html#method-i-zone_identifiers","()","<p>Returns a frozen array of all the zone identifiers for the country. These\nare in an order that\n<p>makes some …\n"],["zone_identifiers","TZInfo::CountryInfo","TZInfo/CountryInfo.html#method-i-zone_identifiers","()","<p>Returns a frozen array of all the zone identifiers for the country. The\nidentifiers are ordered by importance …\n"],["zone_info","TZInfo::Country","TZInfo/Country.html#method-i-zone_info","()","<p>Returns a frozen array of all the timezones for the for the country as\nCountryTimezone instances (containing …\n"],["zone_names","TZInfo::Country","TZInfo/Country.html#method-i-zone_names","()",""],["zones","TZInfo::Country","TZInfo/Country.html#method-i-zones","()","<p>An array of all the Timezones for this country. Returns TimezoneProxy\nobjects to avoid the overhead of …\n"],["zones","TZInfo::CountryInfo","TZInfo/CountryInfo.html#method-i-zones","()","<p>Returns a frozen array of all the timezones for the for the country as\nCountryTimezone instances.\n<p>The …\n"],["CHANGES","","CHANGES_md.html","","<p>Version 1.2.2 - 8-Aug-2014\n<p>Fix an error with duplicates being returned by Timezone#all_country_zones\n\n...\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2005-2014 Philip Ross\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>TZInfo - Ruby Timezone Library\n<p><img src=\"https://badge.fury.io/rb/tzinfo.svg\"> <img\nsrc=\"https://travis-ci.org/tzinfo/tzinfo.svg?branch=master\"> …\n"]]}}