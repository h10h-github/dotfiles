var search_data = {"index":{"searchIndex":["activejob","arguments","base","callbacks","classmethods","configuredjob","core","classmethods","deserializationerror","enqueuing","classmethods","execution","classmethods","logging","activesupport","logsubscriber","queueadapter","classmethods","queueadapters","backburneradapter","jobwrapper","delayedjobadapter","jobwrapper","inlineadapter","quadapter","jobwrapper","queadapter","jobwrapper","queueclassicadapter","jobwrapper","resqueadapter","jobwrapper","sidekiqadapter","jobwrapper","sneakersadapter","jobwrapper","suckerpunchadapter","jobwrapper","testadapter","queuename","classmethods","railtie","activesupport","serializationerror","testcase","testhelper","version","rails","generators","jobgenerator","after_enqueue()","after_perform()","after_teardown()","around_enqueue()","around_perform()","assert_enqueued_jobs()","assert_enqueued_with()","assert_no_enqueued_jobs()","assert_no_performed_jobs()","assert_performed_jobs()","assert_performed_with()","before_enqueue()","before_perform()","before_setup()","build_queue()","clear_enqueued_jobs()","clear_performed_jobs()","deserialize()","deserialize()","deserialize_argument()","deserialize_arguments()","deserialize_arguments_if_needed()","deserialize_global_id()","deserialize_hash()","enqueue()","enqueued_jobs()","gem_version()","job_or_instantiate()","load_adapter()","new()","new()","perform()","perform_enqueued_jobs()","perform_later()","perform_now()","perform_now()","performed_jobs()","queue_adapter()","queue_adapter=()","queue_as()","queue_name()","retry_job()","serialize()","serialize()","serialize_args_for_assertion()","serialize_argument()","serialize_arguments()","serialize_hash()","serialize_hash_key()","serialized_global_id?()","set()","transform_symbol_keys()","version()"],"longSearchIndex":["activejob","activejob::arguments","activejob::base","activejob::callbacks","activejob::callbacks::classmethods","activejob::configuredjob","activejob::core","activejob::core::classmethods","activejob::deserializationerror","activejob::enqueuing","activejob::enqueuing::classmethods","activejob::execution","activejob::execution::classmethods","activejob::logging","activejob::logging::activesupport","activejob::logging::logsubscriber","activejob::queueadapter","activejob::queueadapter::classmethods","activejob::queueadapters","activejob::queueadapters::backburneradapter","activejob::queueadapters::backburneradapter::jobwrapper","activejob::queueadapters::delayedjobadapter","activejob::queueadapters::delayedjobadapter::jobwrapper","activejob::queueadapters::inlineadapter","activejob::queueadapters::quadapter","activejob::queueadapters::quadapter::jobwrapper","activejob::queueadapters::queadapter","activejob::queueadapters::queadapter::jobwrapper","activejob::queueadapters::queueclassicadapter","activejob::queueadapters::queueclassicadapter::jobwrapper","activejob::queueadapters::resqueadapter","activejob::queueadapters::resqueadapter::jobwrapper","activejob::queueadapters::sidekiqadapter","activejob::queueadapters::sidekiqadapter::jobwrapper","activejob::queueadapters::sneakersadapter","activejob::queueadapters::sneakersadapter::jobwrapper","activejob::queueadapters::suckerpunchadapter","activejob::queueadapters::suckerpunchadapter::jobwrapper","activejob::queueadapters::testadapter","activejob::queuename","activejob::queuename::classmethods","activejob::railtie","activejob::railtie::activesupport","activejob::serializationerror","activejob::testcase","activejob::testhelper","activejob::version","rails","rails::generators","rails::generators::jobgenerator","activejob::callbacks::classmethods#after_enqueue()","activejob::callbacks::classmethods#after_perform()","activejob::testhelper#after_teardown()","activejob::callbacks::classmethods#around_enqueue()","activejob::callbacks::classmethods#around_perform()","activejob::testhelper#assert_enqueued_jobs()","activejob::testhelper#assert_enqueued_with()","activejob::testhelper#assert_no_enqueued_jobs()","activejob::testhelper#assert_no_performed_jobs()","activejob::testhelper#assert_performed_jobs()","activejob::testhelper#assert_performed_with()","activejob::callbacks::classmethods#before_enqueue()","activejob::callbacks::classmethods#before_perform()","activejob::testhelper#before_setup()","activejob::queueadapters::queueclassicadapter::build_queue()","activejob::testhelper#clear_enqueued_jobs()","activejob::testhelper#clear_performed_jobs()","activejob::arguments#deserialize()","activejob::core::classmethods#deserialize()","activejob::arguments#deserialize_argument()","activejob::core#deserialize_arguments()","activejob::core#deserialize_arguments_if_needed()","activejob::arguments#deserialize_global_id()","activejob::arguments#deserialize_hash()","activejob::enqueuing#enqueue()","activejob::queueadapters::testadapter#enqueued_jobs()","activejob::gem_version()","activejob::enqueuing::classmethods#job_or_instantiate()","activejob::queueadapter::classmethods#load_adapter()","activejob::core::new()","activejob::queueadapters::testadapter::new()","activejob::execution#perform()","activejob::testhelper#perform_enqueued_jobs()","activejob::enqueuing::classmethods#perform_later()","activejob::execution#perform_now()","activejob::execution::classmethods#perform_now()","activejob::queueadapters::testadapter#performed_jobs()","activejob::testhelper#queue_adapter()","activejob::queueadapter::classmethods#queue_adapter=()","activejob::queuename::classmethods#queue_as()","activejob::queuename#queue_name()","activejob::enqueuing#retry_job()","activejob::arguments#serialize()","activejob::core#serialize()","activejob::testhelper#serialize_args_for_assertion()","activejob::arguments#serialize_argument()","activejob::core#serialize_arguments()","activejob::arguments#serialize_hash()","activejob::arguments#serialize_hash_key()","activejob::arguments#serialized_global_id?()","activejob::core::classmethods#set()","activejob::arguments#transform_symbol_keys()","activejob::version()"],"info":[["ActiveJob","","ActiveJob.html","",""],["ActiveJob::Arguments","","ActiveJob/Arguments.html","",""],["ActiveJob::Base","","ActiveJob/Base.html","","<p>Active Job\n<p>Active Job objects can be configured to work with different backend queuing\nframeworks. To …\n"],["ActiveJob::Callbacks","","ActiveJob/Callbacks.html","","<p>Active Job Callbacks\n<p>Active Job provides hooks during the lifecycle of a job. Callbacks allow\nyou to trigger …\n"],["ActiveJob::Callbacks::ClassMethods","","ActiveJob/Callbacks/ClassMethods.html","","<p>These methods will be included into any Active Job object, adding callbacks\nfor <code>perform</code> and <code>enqueue</code> methods. …\n"],["ActiveJob::ConfiguredJob","","ActiveJob/ConfiguredJob.html","",""],["ActiveJob::Core","","ActiveJob/Core.html","",""],["ActiveJob::Core::ClassMethods","","ActiveJob/Core/ClassMethods.html","","<p>These methods will be included into any Active Job object, adding helpers\nfor de/serialization and creation …\n"],["ActiveJob::DeserializationError","","ActiveJob/DeserializationError.html","","<p>Raised when an exception is raised during job arguments deserialization.\n<p>Wraps the original exception …\n"],["ActiveJob::Enqueuing","","ActiveJob/Enqueuing.html","",""],["ActiveJob::Enqueuing::ClassMethods","","ActiveJob/Enqueuing/ClassMethods.html","","<p>Includes the <code>perform_later</code> method for job initialization.\n"],["ActiveJob::Execution","","ActiveJob/Execution.html","",""],["ActiveJob::Execution::ClassMethods","","ActiveJob/Execution/ClassMethods.html","","<p>Includes methods for executing and performing jobs instantly.\n"],["ActiveJob::Logging","","ActiveJob/Logging.html","",""],["ActiveJob::Logging::ActiveSupport","","ActiveJob/Logging/ActiveSupport.html","",""],["ActiveJob::Logging::LogSubscriber","","ActiveJob/Logging/LogSubscriber.html","",""],["ActiveJob::QueueAdapter","","ActiveJob/QueueAdapter.html","",""],["ActiveJob::QueueAdapter::ClassMethods","","ActiveJob/QueueAdapter/ClassMethods.html","","<p>Includes the setter method for changing the active queue adapter.\n"],["ActiveJob::QueueAdapters","","ActiveJob/QueueAdapters.html","","<p>Active Job adapters\n<p>Active Job has adapters for the following queueing backends:\n<p>Backburner\n"],["ActiveJob::QueueAdapters::BackburnerAdapter","","ActiveJob/QueueAdapters/BackburnerAdapter.html","","<p>Backburner adapter for Active Job\n<p>Backburner is a beanstalkd-powered job queue that can handle a very …\n"],["ActiveJob::QueueAdapters::BackburnerAdapter::JobWrapper","","ActiveJob/QueueAdapters/BackburnerAdapter/JobWrapper.html","",""],["ActiveJob::QueueAdapters::DelayedJobAdapter","","ActiveJob/QueueAdapters/DelayedJobAdapter.html","","<p>Delayed Job adapter for Active Job\n<p>Delayed::Job (or DJ) encapsulates the common pattern of asynchronously …\n"],["ActiveJob::QueueAdapters::DelayedJobAdapter::JobWrapper","","ActiveJob/QueueAdapters/DelayedJobAdapter/JobWrapper.html","",""],["ActiveJob::QueueAdapters::InlineAdapter","","ActiveJob/QueueAdapters/InlineAdapter.html","","<p>Active Job Inline adapter\n<p>When enqueueing jobs with the Inline adapter the job will be executed\nimmediately. …\n"],["ActiveJob::QueueAdapters::QuAdapter","","ActiveJob/QueueAdapters/QuAdapter.html","","<p>Qu adapter for Active Job\n<p>Qu is a Ruby library for queuing and processing background jobs. It is\nheavily …\n"],["ActiveJob::QueueAdapters::QuAdapter::JobWrapper","","ActiveJob/QueueAdapters/QuAdapter/JobWrapper.html","",""],["ActiveJob::QueueAdapters::QueAdapter","","ActiveJob/QueueAdapters/QueAdapter.html","","<p>Que adapter for Active Job\n<p>Que is a high-performance alternative to DelayedJob or QueueClassic that\nimproves …\n"],["ActiveJob::QueueAdapters::QueAdapter::JobWrapper","","ActiveJob/QueueAdapters/QueAdapter/JobWrapper.html","",""],["ActiveJob::QueueAdapters::QueueClassicAdapter","","ActiveJob/QueueAdapters/QueueClassicAdapter.html","","<p>queue_classic adapter for Active Job\n<p>queue_classic provides a simple interface to a PostgreSQL-backed …\n"],["ActiveJob::QueueAdapters::QueueClassicAdapter::JobWrapper","","ActiveJob/QueueAdapters/QueueClassicAdapter/JobWrapper.html","",""],["ActiveJob::QueueAdapters::ResqueAdapter","","ActiveJob/QueueAdapters/ResqueAdapter.html","","<p>Resque adapter for Active Job\n<p>Resque (pronounced like “rescue”) is a Redis-backed library for …\n"],["ActiveJob::QueueAdapters::ResqueAdapter::JobWrapper","","ActiveJob/QueueAdapters/ResqueAdapter/JobWrapper.html","",""],["ActiveJob::QueueAdapters::SidekiqAdapter","","ActiveJob/QueueAdapters/SidekiqAdapter.html","","<p>Sidekiq adapter for Active Job\n<p>Simple, efficient background processing for Ruby. Sidekiq uses threads …\n"],["ActiveJob::QueueAdapters::SidekiqAdapter::JobWrapper","","ActiveJob/QueueAdapters/SidekiqAdapter/JobWrapper.html","",""],["ActiveJob::QueueAdapters::SneakersAdapter","","ActiveJob/QueueAdapters/SneakersAdapter.html","","<p>Sneakers adapter for Active Job\n<p>A high-performance RabbitMQ background processing framework for Ruby. …\n"],["ActiveJob::QueueAdapters::SneakersAdapter::JobWrapper","","ActiveJob/QueueAdapters/SneakersAdapter/JobWrapper.html","",""],["ActiveJob::QueueAdapters::SuckerPunchAdapter","","ActiveJob/QueueAdapters/SuckerPunchAdapter.html","","<p>Sucker Punch adapter for Active Job\n<p>Sucker Punch is a single-process Ruby asynchronous processing library. …\n"],["ActiveJob::QueueAdapters::SuckerPunchAdapter::JobWrapper","","ActiveJob/QueueAdapters/SuckerPunchAdapter/JobWrapper.html","",""],["ActiveJob::QueueAdapters::TestAdapter","","ActiveJob/QueueAdapters/TestAdapter.html","","<p>Test adapter for Active Job\n<p>The test adapter should be used only in testing. Along with\n<code>ActiveJob::TestCase</code> …\n"],["ActiveJob::QueueName","","ActiveJob/QueueName.html","",""],["ActiveJob::QueueName::ClassMethods","","ActiveJob/QueueName/ClassMethods.html","","<p>Includes the ability to override the default queue name and prefix.\n"],["ActiveJob::Railtie","","ActiveJob/Railtie.html","",""],["ActiveJob::Railtie::ActiveSupport","","ActiveJob/Railtie/ActiveSupport.html","",""],["ActiveJob::SerializationError","","ActiveJob/SerializationError.html","","<p>Raised when an unsupported argument type is being set as job argument. We\ncurrently support NilClass …\n"],["ActiveJob::TestCase","","ActiveJob/TestCase.html","",""],["ActiveJob::TestHelper","","ActiveJob/TestHelper.html","","<p>Provides helper methods for testing Active Job\n"],["ActiveJob::VERSION","","ActiveJob/VERSION.html","",""],["Rails","","Rails.html","",""],["Rails::Generators","","Rails/Generators.html","",""],["Rails::Generators::JobGenerator","","Rails/Generators/JobGenerator.html","",""],["after_enqueue","ActiveJob::Callbacks::ClassMethods","ActiveJob/Callbacks/ClassMethods.html#method-i-after_enqueue","(*filters, &blk)","<p>Defines a callback that will get called right after the job is enqueued.\n\n<pre>class VideoProcessJob &lt; ActiveJob::Base ...</pre>\n"],["after_perform","ActiveJob::Callbacks::ClassMethods","ActiveJob/Callbacks/ClassMethods.html#method-i-after_perform","(*filters, &blk)","<p>Defines a callback that will get called right after the job&#39;s perform\nmethod has finished.\n\n<pre>class VideoProcessJob ...</pre>\n"],["after_teardown","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-after_teardown","()",""],["around_enqueue","ActiveJob::Callbacks::ClassMethods","ActiveJob/Callbacks/ClassMethods.html#method-i-around_enqueue","(*filters, &blk)","<p>Defines a callback that will get called before and after the job is\nenqueued.\n\n<pre>class VideoProcessJob &lt; ...</pre>\n"],["around_perform","ActiveJob::Callbacks::ClassMethods","ActiveJob/Callbacks/ClassMethods.html#method-i-around_perform","(*filters, &blk)","<p>Defines a callback that will get called around the job&#39;s perform\nmethod.\n\n<pre>class VideoProcessJob &lt; ActiveJob::Base ...</pre>\n"],["assert_enqueued_jobs","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-assert_enqueued_jobs","(number)","<p>Asserts that the number of enqueued jobs matches the given number.\n\n<pre>def test_jobs\n  assert_enqueued_jobs ...</pre>\n"],["assert_enqueued_with","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-assert_enqueued_with","(args = {}, &_block)","<p>Asserts that the job passed in the block has been enqueued with the given\narguments.\n\n<pre>def test_assert_enqueued_with ...</pre>\n"],["assert_no_enqueued_jobs","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-assert_no_enqueued_jobs","(&block)","<p>Asserts that no jobs have been enqueued.\n\n<pre>def test_jobs\n  assert_no_enqueued_jobs\n  HelloJob.perform_later(&#39;jeremy&#39;) ...</pre>\n"],["assert_no_performed_jobs","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-assert_no_performed_jobs","(&block)","<p>Asserts that no jobs have been performed.\n\n<pre>def test_jobs\n  assert_no_performed_jobs\n\n  perform_enqueued_jobs ...</pre>\n"],["assert_performed_jobs","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-assert_performed_jobs","(number)","<p>Asserts that the number of performed jobs matches the given number. If no\nblock is passed, <code>perform_enqueued_jobs</code> …\n"],["assert_performed_with","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-assert_performed_with","(args = {}, &_block)","<p>Asserts that the job passed in the block has been performed with the given\narguments.\n\n<pre>def test_assert_performed_with ...</pre>\n"],["before_enqueue","ActiveJob::Callbacks::ClassMethods","ActiveJob/Callbacks/ClassMethods.html#method-i-before_enqueue","(*filters, &blk)","<p>Defines a callback that will get called right before the job is enqueued.\n\n<pre>class VideoProcessJob &lt; ActiveJob::Base ...</pre>\n"],["before_perform","ActiveJob::Callbacks::ClassMethods","ActiveJob/Callbacks/ClassMethods.html#method-i-before_perform","(*filters, &blk)","<p>Defines a callback that will get called right before the job&#39;s perform\nmethod is executed.\n\n<pre>class VideoProcessJob ...</pre>\n"],["before_setup","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-before_setup","()",""],["build_queue","ActiveJob::QueueAdapters::QueueClassicAdapter","ActiveJob/QueueAdapters/QueueClassicAdapter.html#method-c-build_queue","(queue_name)","<p>Builds a <code>QC::Queue</code> object to schedule jobs on.\n<p>If you have a custom <code>QC::Queue</code> subclass you&#39;ll need …\n"],["clear_enqueued_jobs","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-clear_enqueued_jobs","()",""],["clear_performed_jobs","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-clear_performed_jobs","()",""],["deserialize","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-deserialize","(arguments)","<p>Deserializes a set of arguments. Whitelisted types are returned as-is.\nArrays/Hashes are deserialized …\n"],["deserialize","ActiveJob::Core::ClassMethods","ActiveJob/Core/ClassMethods.html#method-i-deserialize","(job_data)","<p>Creates a new job instance from a hash created with <code>serialize</code>\n"],["deserialize_argument","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-deserialize_argument","(argument)",""],["deserialize_arguments","ActiveJob::Core","ActiveJob/Core.html#method-i-deserialize_arguments","(serialized_args)",""],["deserialize_arguments_if_needed","ActiveJob::Core","ActiveJob/Core.html#method-i-deserialize_arguments_if_needed","()",""],["deserialize_global_id","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-deserialize_global_id","(hash)",""],["deserialize_hash","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-deserialize_hash","(serialized_hash)",""],["enqueue","ActiveJob::Enqueuing","ActiveJob/Enqueuing.html#method-i-enqueue","(options={})","<p>Enqueues the job to be performed by the queue adapter.\n<p>Options\n<p><code>:wait</code> - Enqueues the job with the specified …\n"],["enqueued_jobs","ActiveJob::QueueAdapters::TestAdapter","ActiveJob/QueueAdapters/TestAdapter.html#method-i-enqueued_jobs","()","<p>Provides a store of all the enqueued jobs with the TestAdapter so you can\ncheck them.\n"],["gem_version","ActiveJob","ActiveJob.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Active Job as a\n<code>Gem::Version</code>\n"],["job_or_instantiate","ActiveJob::Enqueuing::ClassMethods","ActiveJob/Enqueuing/ClassMethods.html#method-i-job_or_instantiate","(*args)",""],["load_adapter","ActiveJob::QueueAdapter::ClassMethods","ActiveJob/QueueAdapter/ClassMethods.html#method-i-load_adapter","(name)",""],["new","ActiveJob::Core","ActiveJob/Core.html#method-c-new","(*arguments)","<p>Creates a new job instance. Takes the arguments that will be passed to the\nperform method.\n"],["new","ActiveJob::QueueAdapters::TestAdapter","ActiveJob/QueueAdapters/TestAdapter.html#method-c-new","()",""],["perform","ActiveJob::Execution","ActiveJob/Execution.html#method-i-perform","(*)",""],["perform_enqueued_jobs","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-perform_enqueued_jobs","()",""],["perform_later","ActiveJob::Enqueuing::ClassMethods","ActiveJob/Enqueuing/ClassMethods.html#method-i-perform_later","(*args)","<p>Push a job onto the queue. The arguments must be legal JSON types (string,\nint, float, nil, true, false, …\n"],["perform_now","ActiveJob::Execution","ActiveJob/Execution.html#method-i-perform_now","()","<p>Performs the job immediately. The job is not sent to the queueing adapter\nbut directly executed by blocking …\n"],["perform_now","ActiveJob::Execution::ClassMethods","ActiveJob/Execution/ClassMethods.html#method-i-perform_now","(*args)","<p>Performs the job immediately.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">MyJob</span>.<span class=\"ruby-identifier\">perform_now</span>(<span class=\"ruby-string\">&quot;mike&quot;</span>)\n</pre>\n"],["performed_jobs","ActiveJob::QueueAdapters::TestAdapter","ActiveJob/QueueAdapters/TestAdapter.html#method-i-performed_jobs","()","<p>Provides a store of all the performed jobs with the TestAdapter so you can\ncheck them.\n"],["queue_adapter","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-queue_adapter","()",""],["queue_adapter=","ActiveJob::QueueAdapter::ClassMethods","ActiveJob/QueueAdapter/ClassMethods.html#method-i-queue_adapter-3D","(name_or_adapter)","<p>Specify the backend queue provider. The default queue adapter is the\n:inline queue. See QueueAdapters …\n"],["queue_as","ActiveJob::QueueName::ClassMethods","ActiveJob/QueueName/ClassMethods.html#method-i-queue_as","(part_name=nil, &block)","<p>Specifies the name of the queue to process the job on.\n\n<pre>class PublishToFeedJob &lt; ActiveJob::Base\n  queue_as ...</pre>\n"],["queue_name","ActiveJob::QueueName","ActiveJob/QueueName.html#method-i-queue_name","()","<p>Returns the name of the queue the job will be run on\n"],["retry_job","ActiveJob::Enqueuing","ActiveJob/Enqueuing.html#method-i-retry_job","(options={})","<p>Reschedules the job to be re-executed. This is useful in combination with\nthe <code>rescue_from</code> option. When …\n"],["serialize","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-serialize","(arguments)","<p>Serializes a set of arguments. Whitelisted types are returned as-is.\nArrays/Hashes are serialized element …\n"],["serialize","ActiveJob::Core","ActiveJob/Core.html#method-i-serialize","()","<p>Returns a hash with the job data that can safely be passed to the queueing\nadapter.\n"],["serialize_args_for_assertion","ActiveJob::TestHelper","ActiveJob/TestHelper.html#method-i-serialize_args_for_assertion","(args)",""],["serialize_argument","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-serialize_argument","(argument)",""],["serialize_arguments","ActiveJob::Core","ActiveJob/Core.html#method-i-serialize_arguments","(serialized_args)",""],["serialize_hash","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-serialize_hash","(argument)",""],["serialize_hash_key","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-serialize_hash_key","(key)",""],["serialized_global_id?","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-serialized_global_id-3F","(hash)",""],["set","ActiveJob::Core::ClassMethods","ActiveJob/Core/ClassMethods.html#method-i-set","(options={})","<p>Creates a job preconfigured with the given options. You can call\nperform_later with the job arguments …\n"],["transform_symbol_keys","ActiveJob::Arguments","ActiveJob/Arguments.html#method-i-transform_symbol_keys","(hash, symbol_keys)",""],["version","ActiveJob","ActiveJob.html#method-c-version","()","<p>Returns the version of the currently loaded Active Job as a\n<code>Gem::Version</code>\n"]]}}