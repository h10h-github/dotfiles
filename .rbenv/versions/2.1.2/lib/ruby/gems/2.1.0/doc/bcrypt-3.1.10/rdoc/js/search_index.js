var search_data = {"index":{"searchIndex":["bcrypt","engine","error","errors","invalidcost","invalidhash","invalidsalt","invalidsecret","password","crypt","==()","__bc_crypt()","__bc_salt()","autodetect_cost()","calibrate()","cost()","cost=()","create()","crypt()","generate_salt()","hash_secret()","is_password?()","new()","salt()","split_hash()","valid_hash?()","valid_hash?()","valid_salt?()","valid_secret?()","changelog","copying","readme","bcrypt.java","makefile"],"longSearchIndex":["bcrypt","bcrypt::engine","bcrypt::error","bcrypt::errors","bcrypt::errors::invalidcost","bcrypt::errors::invalidhash","bcrypt::errors::invalidsalt","bcrypt::errors::invalidsecret","bcrypt::password","crypt","bcrypt::password#==()","bcrypt::engine::__bc_crypt()","bcrypt::engine::__bc_salt()","bcrypt::engine::autodetect_cost()","bcrypt::engine::calibrate()","bcrypt::engine::cost()","bcrypt::engine::cost=()","bcrypt::password::create()","crypt::crypt()","bcrypt::engine::generate_salt()","bcrypt::engine::hash_secret()","bcrypt::password#is_password?()","bcrypt::password::new()","crypt::salt()","bcrypt::password#split_hash()","bcrypt::password::valid_hash?()","bcrypt::password#valid_hash?()","bcrypt::engine::valid_salt?()","bcrypt::engine::valid_secret?()","","","","",""],"info":[["BCrypt","","BCrypt.html","","<p>A Ruby library implementing OpenBSD&#39;s bcrypt()/crypt_blowfish algorithm\nfor hashing passwords.\n"],["BCrypt::Engine","","BCrypt/Engine.html","","<p>A Ruby wrapper for the bcrypt() C extension calls and the Java calls.\n"],["BCrypt::Error","","BCrypt/Error.html","",""],["BCrypt::Errors","","BCrypt/Errors.html","",""],["BCrypt::Errors::InvalidCost","","BCrypt/Errors/InvalidCost.html","","<p>The cost parameter provided to bcrypt() is invalid.\n"],["BCrypt::Errors::InvalidHash","","BCrypt/Errors/InvalidHash.html","","<p>The hash parameter provided to bcrypt() is invalid.\n"],["BCrypt::Errors::InvalidSalt","","BCrypt/Errors/InvalidSalt.html","","<p>The salt parameter provided to bcrypt() is invalid.\n"],["BCrypt::Errors::InvalidSecret","","BCrypt/Errors/InvalidSecret.html","","<p>The secret parameter provided to bcrypt() is invalid.\n"],["BCrypt::Password","","BCrypt/Password.html","","<p>A password management class which allows you to safely store users&#39;\npasswords and compare them.\n<p>Example …\n"],["Crypt","","Crypt.html","",""],["==","BCrypt::Password","BCrypt/Password.html#method-i-3D-3D","(secret)","<p>Compares a potential secret against the hash. Returns true if the secret is\nthe original secret, false …\n"],["__bc_crypt","BCrypt::Engine","BCrypt/Engine.html#method-c-__bc_crypt","(p1, p2)","<p>Given a secret and a salt, generates a salted hash (which you can then\nstore safely).\n"],["__bc_salt","BCrypt::Engine","BCrypt/Engine.html#method-c-__bc_salt","(p1, p2, p3)","<p>Given a logarithmic cost parameter, generates a salt for use with\n<code>bc_crypt</code>.\n"],["autodetect_cost","BCrypt::Engine","BCrypt/Engine.html#method-c-autodetect_cost","(salt)","<p>Autodetects the cost from the salt string.\n"],["calibrate","BCrypt::Engine","BCrypt/Engine.html#method-c-calibrate","(upper_time_limit_in_ms)","<p>Returns the cost factor which will result in computation times less than\n<code>upper_time_limit_in_ms</code>.\n<p>Example: …\n"],["cost","BCrypt::Engine","BCrypt/Engine.html#method-c-cost","()","<p>Returns the cost factor that will be used if one is not specified when\ncreating a password hash.  Defaults …\n"],["cost=","BCrypt::Engine","BCrypt/Engine.html#method-c-cost-3D","(cost)","<p>Set a default cost factor that will be used if one is not specified when\ncreating a password hash.\n<p>Example: …\n"],["create","BCrypt::Password","BCrypt/Password.html#method-c-create","(secret, options = {})","<p>Hashes a secret, returning a BCrypt::Password instance. Takes an optional\n<code>:cost</code> option, which is a logarithmic …\n"],["crypt","Crypt","Crypt.html#method-c-crypt","(p1, p2)",""],["generate_salt","BCrypt::Engine","BCrypt/Engine.html#method-c-generate_salt","(cost = self.cost)","<p>Generates a random salt with a given computational cost.\n"],["hash_secret","BCrypt::Engine","BCrypt/Engine.html#method-c-hash_secret","(secret, salt, _ = nil)","<p>Given a secret and a valid salt (see BCrypt::Engine.generate_salt)\ncalculates a bcrypt() password hash. …\n"],["is_password?","BCrypt::Password","BCrypt/Password.html#method-i-is_password-3F","(secret)",""],["new","BCrypt::Password","BCrypt/Password.html#method-c-new","(raw_hash)","<p>Initializes a BCrypt::Password instance with the data from a stored hash.\n"],["salt","Crypt","Crypt.html#method-c-salt","(p1, p2, p3)",""],["split_hash","BCrypt::Password","BCrypt/Password.html#method-i-split_hash","(h)","<p>Splits <code>h</code> into version, cost, salt, and hash and returns them\nin that order.\n"],["valid_hash?","BCrypt::Password","BCrypt/Password.html#method-c-valid_hash-3F","(h)",""],["valid_hash?","BCrypt::Password","BCrypt/Password.html#method-i-valid_hash-3F","(h)","<p>Returns true if <code>h</code> is a valid hash.\n"],["valid_salt?","BCrypt::Engine","BCrypt/Engine.html#method-c-valid_salt-3F","(salt)","<p>Returns true if <code>salt</code> is a valid bcrypt() salt, false if not.\n"],["valid_secret?","BCrypt::Engine","BCrypt/Engine.html#method-c-valid_secret-3F","(secret)","<p>Returns true if <code>secret</code> is a valid bcrypt() secret, false if\nnot.\n"],["CHANGELOG","","CHANGELOG.html","","<p>1.0.0  Feb 27 2007\n\n<pre>- Initial release.</pre>\n<p>2.0.0  Mar 07 2007\n"],["COPYING","","COPYING.html","","<p>(The MIT License)\n<p>Copyright 2007-2011:\n<p>Coda Hale &lt;coda.hale@gmail.com&gt;\n"],["README","","README_md.html","","<p>bcrypt-ruby\n<p>An easy way to keep your users&#39; passwords secure.\n<p>github.com/codahale/bcrypt-ruby/tree/master …\n"],["BCrypt.java","","ext/jruby/bcrypt_jruby/BCrypt_java.html","","<p>// Copyright © 2006 Damien Miller &lt;djm@mindrot.org&gt; // // Permission\nto use, copy, modify, and …\n"],["Makefile","","ext/mri/Makefile.html","","<p>SHELL = /bin/sh\n<p># V=0 quiet, V=1 verbose.  other values don&#39;t work. V = 0 Q1 = $(V:1=)\nQ = $(Q1:0=@) …\n"]]}}