var search_data = {"index":{"searchIndex":["bundler","anonymizableuri","bundlererror","cli","binstubs","cache","check","clean","common","config","console","exec","gem","init","inject","install","open","outdated","package","platform","show","update","viz","currentruby","cyclicdependencyerror","definition","depproxy","dependency","deployment","deprecate","deprecatederror","dsl","endpointspecification","env","environment","fetcher","authenticationrequirederror","badauthenticationerror","certificatefailureerror","fallbackerror","networkdownerror","sslerror","gemhelper","rake","gemhelpers","geminstaller","gemnotfound","gemfileerror","gemfilelocknotfound","gemfilenotfound","gemspecerror","giterror","graph","graphvizclient","httperror","index","injector","installerror","installhookerror","installer","invalidoption","lazyspecification","lockfileerror","lockfileparser","marshalerror","matchplatform","molinillo","circulardependencyerror","dependencygraph","vertex","dependencystate","nosuchdependencyerror","possibilitystate","resolver","resolution","resolvererror","specificationprovider","ui","versionconflict","patherror","productionerror","psych","remotespecification","resolver","molinillo","versionconflict","specgroup","retry","rubydsl","rubyversion","rubyversionmismatch","rubygemsintegration","almostmodern","ancient","future","gem","legacy","gem::sourceindex","modern","morefuture","moremodern","transitional","runtime","securityerror","settings","sharedhelpers","similaritydetector","source","git","gitcommanderror","gitnotallowederror","gitnotinstallederror","gitproxy","path","installer","rubygems","sourcelist","specset","systemrubyversion","thor","actions","classmethods","createfile","createlink","directory","emptydirectory","injectintofile","ambiguouscommanderror","argument","arguments","base","classmethods","command","coreext","hashwithindifferentaccess","orderedhash","dynamiccommand","error","group","hiddencommand","invocation","classmethods","invocationerror","lineeditor","basic","readline","pathcompletion","malformattedargumenterror","option","options","rakecompat","rake","requiredargumentmissingerror","runner","sandbox","shell","basic","color","html","undefinedcommanderror","unknownargumenterror","util","ui","rgproxy","shell","silent","versionconflict","worker","wrappedexception","capistrano","gem","dependency","platform","requirement","specification","io","net","bufferedio","http","persistent","error","sslreuse","object","rake","<<()","==()","==()","==()","==()","==()","==()","==()","==()","==()","[]()","[]()","[]()","[]=()","[]=()","__dependencies()","__materialize__()","__swap__()","__swap__()","_groups()","_local_specification()","_make_label()","_patching_gem_dependency_class()","_populate_relations()","_remote_specification()","abort_threads()","absolute_matches()","activate_platform()","activate_spec()","add_child_vertex()","add_edge()","add_file()","add_git_source()","add_git_sources()","add_link()","add_path_source()","add_remote()","add_root_vertex()","add_rubygems_remote()","add_rubygems_source()","add_runtime_options!()","add_source()","add_source_to_list()","add_to_history?()","add_vertex()","after_resolution()","after_resolution()","all()","all_commands()","all_sources()","all_specs()","all_specs()","all_specs()","all_tasks()","allow?()","allow_git_ops?()","allow_sudo?()","allowed_in_path()","already_tagged?()","ancestor?()","api_fetchers()","app_cache()","app_cache_dirname()","app_cache_dirname()","app_cache_path()","app_cache_path()","app_config_path()","append_file()","append_to()","append_to_file()","apply()","apply_auth()","apply_func()","argument()","arguments()","as_unicode()","ask()","ask()","ask()","ask()","ask_and_set()","ask_and_set_test_framework()","ask_filtered()","ask_for_spec_from()","ask_simply()","attempt()","attempt_to_activate()","attempt_to_activate_existing_spec()","attempt_to_activate_new_spec()","attempt_to_swap_possibility()","attempts()","auto_install()","available?()","available?()","backport_base_dir()","backport_cache_file()","backport_ext_builder_monitor()","backport_segment_generation()","backport_spec_file()","backport_yaml_initialize()","banner()","banner()","base_name()","base_path()","basename()","before_resolution()","before_resolution()","best_available()","bin_path()","bin_path()","bindir()","binstubs()","branch()","build()","build()","build()","build()","build()","build_args()","build_args=()","build_gem()","build_gem()","built_gem_path()","builtin_gem?()","bundle_path()","bundler_cert_store()","bundler_dependency_version()","ca_file=()","cache()","cache()","cache()","cache()","cache()","cache()","cache_path()","cached!()","cached!()","cached!()","cached?()","cached_built_in_gem()","cached_gem()","cached_path()","cached_revision()","cached_specs()","camel_case()","can_display_colors?()","can_display_colors?()","can_display_colors?()","can_install_in_parallel?()","can_lock?()","can_lock?()","can_retry?()","capture()","cert=()","cert_store=()","certificate=()","chdir()","chdir_monitor()","check()","check_executable_overwrite()","check_primary_source_safety()","check_unknown_options!()","check_unknown_options!()","checkout()","chmod()","class_option()","class_options()","clean()","clean()","clean?()","clean_exec()","clean_load_path()","clean_req()","clean_system()","cleanup()","clear_gemspec_cache()","clear_paths()","combine_rubygems_sources()","command_help()","commands()","comment_lines()","committed?()","completion_options()","completion_proc()","concat()","config()","config_map()","configuration()","configure()","configure_gem_home()","configure_gem_home_and_path()","configured_uri_for()","confirm()","confirm()","confirm_without_groups()","connection()","connection_close?()","connection_for()","connection_keep_alive?()","console()","contains?()","converge_dependencies()","converge_locals()","converge_locked_specs()","converge_paths()","converge_sources()","copy_file()","copy_to()","create_bundle_path()","create_conflict()","create_file()","create_link()","current_command_chain()","current_dependencies()","current_dependencies()","current_env?()","current_platform?()","current_ruby()","debug()","debug()","debug()","debug()","debug()","debug?()","debug?()","debug?()","debug?()","default_attempts()","default_bundle_dir()","default_bundle_dir()","default_command()","default_gemfile()","default_gemfile()","default_lockfile()","default_lockfile()","default_task()","define_task()","definition()","delete()","dependencies()","dependencies_count_for()","dependencies_for()","dependencies_for()","dependencies_for()","dependencies_for_activated_platforms()","dependencies_for_source_changed?()","dependencies_to_gemfile()","dependency_api_uri()","dependency_names()","deq()","desc()","desc()","descendent?()","destination_root()","destination_root=()","detach_vertex_named()","detect_idle_timeout()","diff()","directory()","download_gem()","download_gem()","download_gem_from_uri()","dynamic_width()","dynamic_width_stty()","dynamic_width_tput()","each()","each()","echo?()","empty?()","empty_directory()","encode_with()","end_resolution()","engine()","engine_version()","enq()","ensure_equivalent_gemfile_and_lockfile()","ensure_safe_gem_name()","env()","env()","environment()","eql?()","eql?()","eql?()","eql?()","eql?()","error()","error()","error()","error_message()","escape()","escape_globs()","eval_gemfile()","eval_gemspec()","eval_yaml_gemspec()","evaluate()","exec()","executables()","exit_on_failure?()","expand()","expand_dependencies()","expanded_dependencies()","expanded_path()","expired?()","ext_lock()","ext_lock()","extension_dir()","extension_dir_name()","extract_circular_gems()","fail()","fetch()","fetch_all_remote_specs()","fetch_all_remote_specs()","fetch_all_remote_specs()","fetch_dependency_remote_specs()","fetch_gem()","fetch_latest_specs()","fetch_platform()","fetch_platform()","fetch_prerelease_specs()","fetch_remote_specs()","fetch_spec()","fetch_specs()","fetch_specs()","fetch_uri()","fetchers()","file_collision()","find_by_namespace()","find_class_and_command_by_namespace()","find_class_and_task_by_namespace()","find_command_possibilities()","find_directory()","find_file()","find_gemfile()","find_in_source_paths()","find_name()","find_name()","find_name()","find_state_for()","find_task_possibilities()","finish()","fixup_dependency_types!()","for()","for?()","formatted_usage()","from_lock()","from_lock()","from_lock()","from_superclass()","full_gem_path()","full_name()","full_name()","g()","gem()","gem()","gem_bindir()","gem_cache()","gem_dir()","gem_dir()","gem_from_path()","gem_from_path()","gem_mirrors()","gem_not_found_message()","gem_path()","gem_platforms()","gem_push?()","gem_version()","gems_installed_for()","gemspec()","gemspec()","gemspec_cached_path()","generate_bin()","generate_bin()","generate_bundler_executable_stubs()","generate_standalone()","generate_standalone_bundler_executable_stubs()","generic()","get()","get()","get_console()","get_constant()","get_input()","git()","git()","git_null()","git_present?()","git_proxy()","git_push()","git_retry()","git_source()","git_version()","git_version()","github()","glob_pattern()","global_config_file()","globs_for()","group()","group()","groups()","groups()","gsub_file()","guard_clean()","handle_argument_error?()","handle_no_command_error()","handle_no_method_error?()","has_app_cache?()","has_app_cache?()","has_local_dependencies?()","has_revision_cached?()","has_rubygems_remotes?()","hash()","hash()","hash()","hash()","hash()","hash()","help()","help()","help()","help()","hidden?()","hidden?()","home()","host()","http_version()","idempotent?()","identifier()","ignore_config?()","in_bundle?()","in_locked_deps?()","in_path()","in_root()","included()","incoming_edges()","index()","indicate_progress()","indicate_progress()","indicate_progress()","inflate()","info()","info()","inherited()","init()","initial_state()","initialize_copy()","initialize_copy()","initialize_copy()","inject()","inject()","inject()","inject_into_class()","inject_into_file()","insert_into_file()","inside()","inspect()","inspect()","inspect()","inspect()","inspect()","install()","install()","install()","install()","install()","install()","install()","install_gem()","install_gem_from_spec()","install_in_parallel()","install_path()","install_path()","install_sequentially()","install_tasks()","installed_specs()","invoke()","invoke()","invoke_from_option()","invoke_with_padding()","is_bool()","is_reachable_from?()","issues_url()","jruby?()","jruby_18?()","jruby_19?()","keep_trying?()","key=()","key_for()","last_attempt?()","level()","level()","level=()","level=()","levenshtein_distance()","licenses()","link_file()","load()","load_config()","load_gemspec()","load_gemspec_uncached()","load_marshal()","load_paths()","load_spec_files()","load_spec_files()","load_thorfile()","loaded_from()","loaded_from()","loaded_specs()","local?()","local_config_file()","local_method?()","local_override!()","local_overrides()","local_search()","local_specification_path()","local_specs()","locations()","lock()","lock()","lock_sources()","locked_gems()","locked_requirement_named()","long_desc()","lookup()","lookup_color()","maglev?()","map()","mark_loaded()","marshal_spec_dir()","match_platform()","matches()","matches_spec?()","matching_specs()","materialize()","merge()","message()","message()","method_added()","method_missing()","method_missing()","method_missing()","method_missing()","method_option()","method_options()","mingw?()","mingw_18?()","mingw_19?()","mingw_20?()","mingw_21?()","mingw_22?()","mirror_for()","missing_specs()","mkdir_p()","mri?()","mri_18?()","mri_19?()","mri_20?()","mri_21?()","mri_22?()","mswin64?()","mswin64_19?()","mswin64_20?()","mswin64_21?()","mswin64_22?()","mswin?()","mswin_18?()","mswin_19?()","mswin_20?()","mswin_21?()","mswin_22?()","mute()","mute?()","name()","name()","name()","name()","name()","name()","name_for()","name_for()","name_for_explicit_dependency_source()","name_for_explicit_dependency_source()","name_for_locking_dependency_source()","name_for_locking_dependency_source()","namespace()","namespace()","namespace_from_thor_class()","namespaces_in_content()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_gem_lines()","new_platform?()","new_specs()","no?()","no_commands()","no_tasks()","nondevelopment_dependencies()","none?()","normalize_hash()","normalize_options()","normalize_source()","normalize_uri()","normalize_uri()","normalize_uri()","not_debugging?()","nothing_changed?()","on_18?()","on_19?()","on_20?()","on_21?()","on_22?()","open()","option()","options()","options()","outdated()","outdated?()","outgoing_edges()","output()","package()","package_name()","padding=()","parent_of()","parse_dependency()","parse_platform()","parse_source()","parse_spec()","patchlevel()","path()","path()","path()","path()","path_to?()","perform_git_push()","pinned_spec_names()","pipeline()","platform()","platform()","platforms()","platforms()","platforms_for_dependency_named()","pop_possibility_state()","possibility()","post_install_message()","predecessors()","prepare_message()","prepend_file()","prepend_to_file()","preserve_gem_path()","preserve_paths()","preserve_paths()","pretty_dep()","pretty_values_for()","print_in_columns()","print_options()","print_table()","print_wrapped()","printable_commands()","printable_commands()","printable_tasks()","printable_tasks()","private_key=()","private_method?()","process_queue()","process_topmost_state()","progress_rate()","provides?()","provides?()","proxy=()","proxy_bypass?()","proxy_from_env()","prune_cache()","prune_gem_cache()","prune_git_and_path_cache()","public_command()","public_task()","push_state_for_requirements()","pwd()","quiet?()","quiet?()","rake_classes()","rake_namespace()","rbx?()","read_binary()","read_file()","read_file()","readline()","readline()","readline()","ready_to_install?()","reconnect()","reconnect_ssl()","recursive_successors()","redefine_method()","register()","relative_matches()","relative_path()","relative_to_original_destination_root()","remote!()","remote!()","remote!()","remote_specs()","remote_uri()","remotes_equal?()","remove_argument()","remove_auth()","remove_class_option()","remove_command()","remove_dir()","remove_file()","remove_invocation()","remove_task()","removed_specs()","replace_bin_path()","replace_entrypoints()","replace_gem()","replace_refresh()","replace_remotes()","replace_sources!()","report()","repository_subdirectories()","repository_subdirectories()","request()","request()","request_issue_report_for()","requested_dependencies()","requested_specs()","requested_specs()","require()","require()","require_nested_dependencies_for()","require_path_or_force()","require_paths()","required_options()","requirement()","requirement()","requirement_for_existing_name()","requirement_satisfied_by?()","requirement_satisfied_by?()","requirement_tree_for()","requirement_trees()","requirements()","requires_checkout?()","requires_sudo?()","reset()","reset!()","resolve()","resolve()","resolve()","resolve()","resolve_name()","resolve_remotely!()","resolve_with_cache!()","respond_to?()","reverse_rubygems_kernel_mixin()","revision()","revision()","rg_full_gem_path()","rg_loaded_from()","root()","root_vertex_named()","ruby()","ruby?()","ruby_18?()","ruby_19?()","ruby_20?()","ruby_21?()","ruby_22?()","ruby_command()","ruby_engine()","ruby_scope()","ruby_version()","ruby_version()","rubygem_push()","rubygems_index()","rubygems_primary_remotes()","rubygems_remotes()","rubygems_sources()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_hooks()","run_ruby_script()","same_version?()","satisfies?()","satisfies_locked_spec?()","say()","say()","say_status()","search()","search_all()","search_by_dependency()","search_by_spec()","search_for()","search_for()","search_up()","security_policies()","security_policy_keys()","select_spec()","serialize_gemspecs_in()","set_bundle_environment()","set_color()","set_color()","set_global()","set_key()","set_local()","set_local!()","settings()","setup()","setup()","setup_cache_all()","setup_cache_all()","setup_environment()","setup_manpath()","sh()","sh_with_code()","shallow_eql?()","shell()","shell()","shortref_for_display()","shortref_for_path()","should_include?()","show()","shutdown()","shutdown_in_all_threads()","silence()","silence()","similar_word_list()","similar_words()","size()","skip_during()","snake_case()","sort!()","sort_dependencies()","sort_dependencies()","sorted()","source()","source()","source_list_for()","source_paths()","source_paths()","source_paths_for_search()","source_requirements()","source_root()","source_root()","source_types()","source_uris_for_spec()","sources()","sources=()","spec_cache_dirs()","spec_from_gem()","spec_git_paths()","spec_satisfies_dependency?()","specific?()","specs()","specs()","specs()","specs()","specs()","specs()","specs_by_name()","specs_changed?()","specs_for()","specs_path()","ssl()","ssl_version=()","start()","start()","start()","start()","start_resolution()","state()","state_any?()","state_index_for_unwind()","status_code()","stderr()","stdout()","stop()","stop_on_unknown_option!()","stop_threads()","strict_args_position!()","strip_leading_spaces()","stub_rubygems()","stub_rubygems()","stub_rubygems()","stub_rubygems()","stub_source_index()","subclass_files()","subclasses()","subcommand()","subcommand_classes()","subcommand_help()","subcommands()","subtask()","subtask_help()","subtasks()","successors()","sudo()","suppress_configured_credentials()","system_bindir()","tag_version()","task()","task_help()","tasks()","tell_me()","template()","terminal_width()","thor()","thor_classes_in()","thor_root()","thor_root_glob()","tmp()","to_a()","to_ary()","to_bool()","to_definition()","to_gemfile()","to_hash()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_specs()","to_yaml_properties()","trace()","trace()","truncate()","tsort()","tsort_each_child()","tsort_each_child()","tsort_each_node()","tsort_each_node()","type()","ui()","ui=()","uncomment_lines()","unescape()","unix?()","unlock!()","unmet_dependency_names()","unmet_deps()","unmet_deps()","unwind_for_conflict()","update()","update()","upgrade_lockfile()","uri()","uri_escaped()","uri_hash()","use()","use_api()","use_path_completion?()","user_agent()","user_bundle_path()","user_home()","user_home()","valid_for?()","valid_keys()","validate_ext_name()","validate_ruby!()","verify_callback=()","verify_gemfile_dependencies_are_found!()","verify_mode=()","version()","version()","version()","version()","version()","version()","version()","version_message()","version_tag()","vertex_named()","viz()","viz()","warn()","warn()","warn_if_root()","well_formed_dependency()","which()","with_build_args()","with_clean_env()","with_clean_git_env()","with_friendly_errors()","with_original_env()","with_padding()","with_source()","without()","without=()","without_groups_message()","without_groups_messages()","word_wrap()","write()","x64_mingw?()","x64_mingw_20?()","x64_mingw_21?()","x64_mingw_22?()","yes?()","bundle","bundle-config","bundle-config","bundle-exec","bundle-exec","bundle-install","bundle-install","bundle-package","bundle-package","bundle-platform","bundle-platform","bundle-update","bundle-update","bundle","gemfile.5","gemfile.5","executable","executable.standalone","gemfile","code_of_conduct.md.tt","gemfile.tt","license.txt.tt","readme.md.tt","rakefile.tt","console.tt","setup.tt","newgem.tt","extconf.rb.tt","newgem.c.tt","newgem.h.tt","gitignore.tt","newgem.rb.tt","version.rb.tt","newgem.gemspec.tt","rspec.tt","newgem_spec.rb.tt","spec_helper.rb.tt","minitest_helper.rb.tt","test_newgem.rb.tt"],"longSearchIndex":["bundler","bundler::anonymizableuri","bundler::bundlererror","bundler::cli","bundler::cli::binstubs","bundler::cli::cache","bundler::cli::check","bundler::cli::clean","bundler::cli::common","bundler::cli::config","bundler::cli::console","bundler::cli::exec","bundler::cli::gem","bundler::cli::init","bundler::cli::inject","bundler::cli::install","bundler::cli::open","bundler::cli::outdated","bundler::cli::package","bundler::cli::platform","bundler::cli::show","bundler::cli::update","bundler::cli::viz","bundler::currentruby","bundler::cyclicdependencyerror","bundler::definition","bundler::depproxy","bundler::dependency","bundler::deployment","bundler::deprecate","bundler::deprecatederror","bundler::dsl","bundler::endpointspecification","bundler::env","bundler::environment","bundler::fetcher","bundler::fetcher::authenticationrequirederror","bundler::fetcher::badauthenticationerror","bundler::fetcher::certificatefailureerror","bundler::fetcher::fallbackerror","bundler::fetcher::networkdownerror","bundler::fetcher::sslerror","bundler::gemhelper","bundler::gemhelper::rake","bundler::gemhelpers","bundler::geminstaller","bundler::gemnotfound","bundler::gemfileerror","bundler::gemfilelocknotfound","bundler::gemfilenotfound","bundler::gemspecerror","bundler::giterror","bundler::graph","bundler::graph::graphvizclient","bundler::httperror","bundler::index","bundler::injector","bundler::installerror","bundler::installhookerror","bundler::installer","bundler::invalidoption","bundler::lazyspecification","bundler::lockfileerror","bundler::lockfileparser","bundler::marshalerror","bundler::matchplatform","bundler::molinillo","bundler::molinillo::circulardependencyerror","bundler::molinillo::dependencygraph","bundler::molinillo::dependencygraph::vertex","bundler::molinillo::dependencystate","bundler::molinillo::nosuchdependencyerror","bundler::molinillo::possibilitystate","bundler::molinillo::resolver","bundler::molinillo::resolver::resolution","bundler::molinillo::resolvererror","bundler::molinillo::specificationprovider","bundler::molinillo::ui","bundler::molinillo::versionconflict","bundler::patherror","bundler::productionerror","bundler::psych","bundler::remotespecification","bundler::resolver","bundler::resolver::molinillo","bundler::resolver::molinillo::versionconflict","bundler::resolver::specgroup","bundler::retry","bundler::rubydsl","bundler::rubyversion","bundler::rubyversionmismatch","bundler::rubygemsintegration","bundler::rubygemsintegration::almostmodern","bundler::rubygemsintegration::ancient","bundler::rubygemsintegration::future","bundler::rubygemsintegration::gem","bundler::rubygemsintegration::legacy","bundler::rubygemsintegration::legacy::gem::sourceindex","bundler::rubygemsintegration::modern","bundler::rubygemsintegration::morefuture","bundler::rubygemsintegration::moremodern","bundler::rubygemsintegration::transitional","bundler::runtime","bundler::securityerror","bundler::settings","bundler::sharedhelpers","bundler::similaritydetector","bundler::source","bundler::source::git","bundler::source::git::gitcommanderror","bundler::source::git::gitnotallowederror","bundler::source::git::gitnotinstallederror","bundler::source::git::gitproxy","bundler::source::path","bundler::source::path::installer","bundler::source::rubygems","bundler::sourcelist","bundler::specset","bundler::systemrubyversion","bundler::thor","bundler::thor::actions","bundler::thor::actions::classmethods","bundler::thor::actions::createfile","bundler::thor::actions::createlink","bundler::thor::actions::directory","bundler::thor::actions::emptydirectory","bundler::thor::actions::injectintofile","bundler::thor::ambiguouscommanderror","bundler::thor::argument","bundler::thor::arguments","bundler::thor::base","bundler::thor::base::classmethods","bundler::thor::command","bundler::thor::coreext","bundler::thor::coreext::hashwithindifferentaccess","bundler::thor::coreext::orderedhash","bundler::thor::dynamiccommand","bundler::thor::error","bundler::thor::group","bundler::thor::hiddencommand","bundler::thor::invocation","bundler::thor::invocation::classmethods","bundler::thor::invocationerror","bundler::thor::lineeditor","bundler::thor::lineeditor::basic","bundler::thor::lineeditor::readline","bundler::thor::lineeditor::readline::pathcompletion","bundler::thor::malformattedargumenterror","bundler::thor::option","bundler::thor::options","bundler::thor::rakecompat","bundler::thor::rakecompat::rake","bundler::thor::requiredargumentmissingerror","bundler::thor::runner","bundler::thor::sandbox","bundler::thor::shell","bundler::thor::shell::basic","bundler::thor::shell::color","bundler::thor::shell::html","bundler::thor::undefinedcommanderror","bundler::thor::unknownargumenterror","bundler::thor::util","bundler::ui","bundler::ui::rgproxy","bundler::ui::shell","bundler::ui::silent","bundler::versionconflict","bundler::worker","bundler::worker::wrappedexception","capistrano","gem","gem::dependency","gem::platform","gem::requirement","gem::specification","io","net","net::bufferedio","net::http","net::http::persistent","net::http::persistent::error","net::http::persistent::sslreuse","object","rake","bundler::index#<<()","bundler::depproxy#==()","bundler::index#==()","bundler::lazyspecification#==()","bundler::molinillo::dependencygraph#==()","bundler::molinillo::dependencygraph::vertex#==()","bundler::rubyversion#==()","bundler::source::git#==()","bundler::source::path#==()","bundler::source::rubygems#==()","bundler::index#[]()","bundler::settings#[]()","bundler::specset#[]()","bundler::settings#[]=()","bundler::specset#[]=()","bundler::resolver::specgroup#__dependencies()","bundler::lazyspecification#__materialize__()","bundler::endpointspecification#__swap__()","bundler::remotespecification#__swap__()","bundler::graph#_groups()","bundler::endpointspecification#_local_specification()","bundler::graph#_make_label()","bundler::graph#_patching_gem_dependency_class()","bundler::graph#_populate_relations()","bundler::remotespecification#_remote_specification()","bundler::worker#abort_threads()","bundler::thor::lineeditor::readline::pathcompletion#absolute_matches()","bundler::resolver::specgroup#activate_platform()","bundler::molinillo::resolver::resolution#activate_spec()","bundler::molinillo::dependencygraph#add_child_vertex()","bundler::molinillo::dependencygraph#add_edge()","bundler::thor::actions#add_file()","bundler::sourcelist#add_git_source()","bundler::dsl#add_git_sources()","bundler::thor::actions#add_link()","bundler::sourcelist#add_path_source()","bundler::source::rubygems#add_remote()","bundler::molinillo::dependencygraph#add_root_vertex()","bundler::sourcelist#add_rubygems_remote()","bundler::sourcelist#add_rubygems_source()","bundler::thor::actions::classmethods#add_runtime_options!()","bundler::index#add_source()","bundler::sourcelist#add_source_to_list()","bundler::thor::lineeditor::readline#add_to_history?()","bundler::molinillo::dependencygraph#add_vertex()","bundler::molinillo::ui#after_resolution()","bundler::resolver#after_resolution()","bundler::settings#all()","bundler::thor::base::classmethods#all_commands()","bundler::sourcelist#all_sources()","bundler::rubygemsintegration::future#all_specs()","bundler::rubygemsintegration::legacy#all_specs()","bundler::rubygemsintegration::modern#all_specs()","bundler::thor::base::classmethods#all_tasks()","bundler::source::git::gitproxy#allow?()","bundler::source::git#allow_git_ops?()","bundler::settings#allow_sudo?()","bundler::source::git::gitproxy#allowed_in_path()","bundler::gemhelper#already_tagged?()","bundler::molinillo::dependencygraph::vertex#ancestor?()","bundler::source::rubygems#api_fetchers()","bundler::app_cache()","bundler::source::git#app_cache_dirname()","bundler::source::path#app_cache_dirname()","bundler::settings#app_cache_path()","bundler::source::path#app_cache_path()","bundler::app_config_path()","bundler::thor::actions#append_file()","bundler::injector#append_to()","bundler::thor::actions#append_to_file()","bundler::thor::actions#apply()","bundler::anonymizableuri#apply_auth()","bundler::worker#apply_func()","bundler::thor::base::classmethods#argument()","bundler::thor::base::classmethods#arguments()","bundler::thor::shell::basic#as_unicode()","bundler::thor::shell::basic#ask()","bundler::thor::shell::html#ask()","bundler::ui::shell#ask()","bundler::ui::silent#ask()","bundler::cli::gem#ask_and_set()","bundler::cli::gem#ask_and_set_test_framework()","bundler::thor::shell::basic#ask_filtered()","bundler::cli::common::ask_for_spec_from()","bundler::thor::shell::basic#ask_simply()","bundler::retry#attempt()","bundler::molinillo::resolver::resolution#attempt_to_activate()","bundler::molinillo::resolver::resolution#attempt_to_activate_existing_spec()","bundler::molinillo::resolver::resolution#attempt_to_activate_new_spec()","bundler::molinillo::resolver::resolution#attempt_to_swap_possibility()","bundler::retry#attempts()","bundler::cli#auto_install()","bundler::thor::lineeditor::basic::available?()","bundler::thor::lineeditor::readline::available?()","bundler::rubygemsintegration#backport_base_dir()","bundler::rubygemsintegration#backport_cache_file()","bundler::rubygemsintegration::morefuture#backport_ext_builder_monitor()","bundler::rubygemsintegration#backport_segment_generation()","bundler::rubygemsintegration#backport_spec_file()","bundler::rubygemsintegration#backport_yaml_initialize()","bundler::thor::banner()","bundler::thor::group::banner()","bundler::source::git#base_name()","bundler::thor::lineeditor::readline::pathcompletion#base_path()","bundler::thor::base::classmethods#basename()","bundler::molinillo::ui#before_resolution()","bundler::resolver#before_resolution()","bundler::thor::lineeditor::best_available()","bundler::bin_path()","bundler::rubygemsintegration#bin_path()","bundler::endpointspecification#bindir()","bundler::cli#binstubs()","bundler::source::git::gitproxy#branch()","bundler::definition::build()","bundler::index::build()","bundler::rubygemsintegration#build()","bundler::rubygemsintegration::future#build()","bundler::rubygemsintegration::moremodern#build()","bundler::rubygemsintegration#build_args()","bundler::rubygemsintegration#build_args=()","bundler::gemhelper#build_gem()","bundler::rubygemsintegration#build_gem()","bundler::gemhelper#built_gem_path()","bundler::source::rubygems#builtin_gem?()","bundler::bundle_path()","bundler::fetcher#bundler_cert_store()","bundler::cli::gem#bundler_dependency_version()","net::http::persistent#ca_file=()","bundler::cache()","bundler::cli#cache()","bundler::runtime#cache()","bundler::source::git#cache()","bundler::source::path#cache()","bundler::source::rubygems#cache()","bundler::source::git#cache_path()","bundler::source::path#cached!()","bundler::source::rubygems#cached!()","bundler::sourcelist#cached!()","bundler::source::git#cached?()","bundler::source::rubygems#cached_built_in_gem()","bundler::source::rubygems#cached_gem()","bundler::source::rubygems#cached_path()","bundler::source::git#cached_revision()","bundler::source::rubygems#cached_specs()","bundler::thor::util::camel_case()","bundler::thor::shell::basic#can_display_colors?()","bundler::thor::shell::color#can_display_colors?()","bundler::thor::shell::html#can_display_colors?()","bundler::installer#can_install_in_parallel?()","bundler::source#can_lock?()","bundler::source::rubygems#can_lock?()","net::http::persistent#can_retry?()","bundler::thor::actions#capture()","net::http::persistent#cert=()","net::http::persistent#cert_store=()","net::http::persistent#certificate=()","bundler::sharedhelpers#chdir()","bundler::sharedhelpers#chdir_monitor()","bundler::cli#check()","bundler::geminstaller#check_executable_overwrite()","bundler::dsl#check_primary_source_safety()","bundler::thor::check_unknown_options!()","bundler::thor::base::classmethods#check_unknown_options!()","bundler::source::git::gitproxy#checkout()","bundler::thor::actions#chmod()","bundler::thor::base::classmethods#class_option()","bundler::thor::base::classmethods#class_options()","bundler::cli#clean()","bundler::runtime#clean()","bundler::gemhelper#clean?()","bundler::clean_exec()","bundler::sharedhelpers#clean_load_path()","bundler::resolver::molinillo::versionconflict#clean_req()","bundler::clean_system()","bundler::cleanup()","bundler::clear_gemspec_cache()","bundler::rubygemsintegration#clear_paths()","bundler::sourcelist#combine_rubygems_sources()","bundler::thor::command_help()","bundler::thor::base::classmethods#commands()","bundler::thor::actions#comment_lines()","bundler::gemhelper#committed?()","bundler::thor::lineeditor::readline#completion_options()","bundler::thor::lineeditor::readline#completion_proc()","bundler::thor::actions#concat()","bundler::cli#config()","bundler::rubygemsintegration#config_map()","bundler::rubygemsintegration#configuration()","bundler::configure()","bundler::configure_gem_home()","bundler::configure_gem_home_and_path()","bundler::fetcher#configured_uri_for()","bundler::ui::shell#confirm()","bundler::ui::silent#confirm()","bundler::cli::install#confirm_without_groups()","bundler::fetcher#connection()","net::http::persistent#connection_close?()","net::http::persistent#connection_for()","net::http::persistent#connection_keep_alive?()","bundler::cli#console()","bundler::source::git::gitproxy#contains?()","bundler::definition#converge_dependencies()","bundler::definition#converge_locals()","bundler::definition#converge_locked_specs()","bundler::definition#converge_paths()","bundler::definition#converge_sources()","bundler::thor::actions#copy_file()","bundler::source::git::gitproxy#copy_to()","bundler::installer#create_bundle_path()","bundler::molinillo::resolver::resolution#create_conflict()","bundler::thor::actions#create_file()","bundler::thor::actions#create_link()","bundler::thor::invocation#current_command_chain()","bundler::definition#current_dependencies()","bundler::environment#current_dependencies()","bundler::dependency#current_env?()","bundler::dependency#current_platform?()","bundler::current_ruby()","bundler::molinillo::resolver::resolution#debug()","bundler::molinillo::ui#debug()","bundler::resolver#debug()","bundler::ui::shell#debug()","bundler::ui::silent#debug()","bundler::molinillo::ui#debug?()","bundler::resolver#debug?()","bundler::ui::shell#debug?()","bundler::ui::silent#debug?()","bundler::retry#default_attempts()","bundler::default_bundle_dir()","bundler::sharedhelpers#default_bundle_dir()","bundler::thor::default_command()","bundler::default_gemfile()","bundler::sharedhelpers#default_gemfile()","bundler::default_lockfile()","bundler::sharedhelpers#default_lockfile()","bundler::thor::default_task()","bundler::deployment::define_task()","bundler::definition()","bundler::settings#delete()","bundler::environment#dependencies()","bundler::cli::install#dependencies_count_for()","bundler::molinillo::specificationprovider#dependencies_for()","bundler::resolver#dependencies_for()","bundler::runtime#dependencies_for()","bundler::resolver::specgroup#dependencies_for_activated_platforms()","bundler::definition#dependencies_for_source_changed?()","gem::specification#dependencies_to_gemfile()","bundler::fetcher#dependency_api_uri()","bundler::index#dependency_names()","bundler::worker#deq()","bundler::thor::desc()","bundler::thor::group::desc()","bundler::molinillo::dependencygraph::vertex#descendent?()","bundler::thor::actions#destination_root()","bundler::thor::actions#destination_root=()","bundler::molinillo::dependencygraph#detach_vertex_named()","net::http::persistent::detect_idle_timeout()","bundler::rubyversion#diff()","bundler::thor::actions#directory()","bundler::rubygemsintegration#download_gem()","bundler::rubygemsintegration::future#download_gem()","bundler::fetcher::download_gem_from_uri()","bundler::thor::shell::basic#dynamic_width()","bundler::thor::shell::basic#dynamic_width_stty()","bundler::thor::shell::basic#dynamic_width_tput()","bundler::index#each()","bundler::molinillo::dependencygraph#each()","bundler::thor::lineeditor::basic#echo?()","bundler::index#empty?()","bundler::thor::actions#empty_directory()","gem::dependency#encode_with()","bundler::molinillo::resolver::resolution#end_resolution()","bundler::systemrubyversion#engine()","bundler::systemrubyversion#engine_version()","bundler::worker#enq()","bundler::definition#ensure_equivalent_gemfile_and_lockfile()","bundler::cli::gem#ensure_safe_gem_name()","bundler::cli#env()","bundler::dsl#env()","bundler::environment()","bundler::depproxy#eql?()","bundler::molinillo::dependencygraph::vertex#eql?()","bundler::source::git#eql?()","bundler::source::path#eql?()","bundler::source::rubygems#eql?()","bundler::thor::shell::basic#error()","bundler::ui::shell#error()","bundler::ui::silent#error()","net::http::persistent#error_message()","net::http::persistent#escape()","bundler::thor::util::escape_globs()","bundler::dsl#eval_gemfile()","bundler::eval_gemspec()","bundler::eval_yaml_gemspec()","bundler::dsl::evaluate()","bundler::cli#exec()","bundler::endpointspecification#executables()","bundler::thor::base::classmethods#exit_on_failure?()","bundler::source::path#expand()","bundler::definition#expand_dependencies()","bundler::definition#expanded_dependencies()","bundler::source::path#expanded_path()","net::http::persistent#expired?()","bundler::rubygemsintegration#ext_lock()","bundler::rubygemsintegration::morefuture#ext_lock()","gem::specification#extension_dir()","bundler::source::git#extension_dir_name()","bundler::specset#extract_circular_gems()","bundler::retry#fail()","bundler::fetcher#fetch()","bundler::fetcher#fetch_all_remote_specs()","bundler::rubygemsintegration#fetch_all_remote_specs()","bundler::rubygemsintegration::future#fetch_all_remote_specs()","bundler::fetcher#fetch_dependency_remote_specs()","bundler::source::rubygems#fetch_gem()","bundler::cli::show#fetch_latest_specs()","bundler::endpointspecification#fetch_platform()","bundler::remotespecification#fetch_platform()","bundler::rubygemsintegration#fetch_prerelease_specs()","bundler::fetcher#fetch_remote_specs()","bundler::fetcher#fetch_spec()","bundler::rubygemsintegration#fetch_specs()","bundler::rubygemsintegration::future#fetch_specs()","bundler::fetcher#fetch_uri()","bundler::source::rubygems#fetchers()","bundler::thor::shell::basic#file_collision()","bundler::thor::util::find_by_namespace()","bundler::thor::util::find_class_and_command_by_namespace()","bundler::thor::util::find_class_and_task_by_namespace()","bundler::thor::find_command_possibilities()","bundler::sharedhelpers#find_directory()","bundler::sharedhelpers#find_file()","bundler::sharedhelpers#find_gemfile()","bundler::thor::actions#find_in_source_paths()","bundler::rubygemsintegration::future#find_name()","bundler::rubygemsintegration::legacy#find_name()","bundler::rubygemsintegration::modern#find_name()","bundler::molinillo::resolver::resolution#find_state_for()","bundler::thor::find_task_possibilities()","net::http::persistent#finish()","bundler::definition#fixup_dependency_types!()","bundler::specset#for()","bundler::resolver::specgroup#for?()","bundler::thor::command#formatted_usage()","bundler::source::git::from_lock()","bundler::source::path::from_lock()","bundler::source::rubygems::from_lock()","bundler::thor::base::classmethods#from_superclass()","gem::specification#full_gem_path()","bundler::lazyspecification#full_name()","bundler::remotespecification#full_name()","bundler::graph::graphvizclient#g()","bundler::cli#gem()","bundler::dsl#gem()","bundler::rubygemsintegration#gem_bindir()","bundler::rubygemsintegration#gem_cache()","bundler::rubygemsintegration#gem_dir()","gem::specification#gem_dir()","bundler::rubygemsintegration#gem_from_path()","bundler::rubygemsintegration::future#gem_from_path()","bundler::settings#gem_mirrors()","bundler::cli::common::gem_not_found_message()","bundler::rubygemsintegration#gem_path()","bundler::dependency#gem_platforms()","bundler::gemhelper#gem_push?()","bundler::systemrubyversion#gem_version()","bundler::cli::install#gems_installed_for()","bundler::dsl#gemspec()","bundler::gemhelper::gemspec()","bundler::fetcher#gemspec_cached_path()","bundler::source::path#generate_bin()","bundler::source::path::installer#generate_bin()","bundler::installer#generate_bundler_executable_stubs()","bundler::installer#generate_standalone()","bundler::installer#generate_standalone_bundler_executable_stubs()","bundler::gemhelpers#generic()","bundler::sourcelist#get()","bundler::thor::actions#get()","bundler::cli::console#get_console()","bundler::cli::console#get_constant()","bundler::thor::lineeditor::basic#get_input()","bundler::dsl#git()","bundler::source::git::gitproxy#git()","bundler::source::git::gitproxy#git_null()","bundler::git_present?()","bundler::source::git#git_proxy()","bundler::gemhelper#git_push()","bundler::source::git::gitproxy#git_retry()","bundler::dsl#git_source()","bundler::env#git_version()","gem::specification#git_version()","bundler::dsl#github()","bundler::thor::lineeditor::readline::pathcompletion#glob_pattern()","bundler::settings#global_config_file()","bundler::thor::util::globs_for()","bundler::dsl#group()","bundler::thor::base::classmethods#group()","bundler::definition#groups()","gem::specification#groups()","bundler::thor::actions#gsub_file()","bundler::gemhelper#guard_clean()","bundler::thor::command#handle_argument_error?()","bundler::cli::handle_no_command_error()","bundler::thor::command#handle_no_method_error?()","bundler::source::git#has_app_cache?()","bundler::source::path#has_app_cache?()","bundler::definition#has_local_dependencies?()","bundler::source::git::gitproxy#has_revision_cached?()","bundler::definition#has_rubygems_remotes?()","bundler::depproxy#hash()","bundler::molinillo::dependencygraph::vertex#hash()","bundler::source::git#hash()","bundler::source::path#hash()","bundler::source::rubygems#hash()","gem::platform#hash()","bundler::cli#help()","bundler::thor#help()","bundler::thor::help()","bundler::thor::group::help()","bundler::thor::command#hidden?()","bundler::thor::hiddencommand#hidden?()","bundler::home()","bundler::rubyversion#host()","net::http::persistent#http_version()","net::http::persistent#idempotent?()","bundler::lazyspecification#identifier()","bundler::settings#ignore_config?()","bundler::sharedhelpers#in_bundle?()","bundler::definition#in_locked_deps?()","bundler::source::git::gitproxy#in_path()","bundler::thor::actions#in_root()","bundler::thor::rakecompat::included()","bundler::molinillo::dependencygraph::vertex#incoming_edges()","bundler::definition#index()","bundler::molinillo::resolver::resolution#indicate_progress()","bundler::molinillo::ui#indicate_progress()","bundler::resolver#indicate_progress()","bundler::rubygemsintegration#inflate()","bundler::ui::shell#info()","bundler::ui::silent#info()","bundler::thor::base::classmethods#inherited()","bundler::cli#init()","bundler::molinillo::resolver::resolution#initial_state()","bundler::index#initialize_copy()","bundler::molinillo::dependencygraph#initialize_copy()","bundler::resolver::specgroup#initialize_copy()","bundler::cli#inject()","bundler::injector#inject()","bundler::injector::inject()","bundler::thor::actions#inject_into_class()","bundler::thor::actions#inject_into_file()","bundler::thor::actions#insert_into_file()","bundler::thor::actions#inside()","bundler::environment#inspect()","bundler::fetcher#inspect()","bundler::index#inspect()","bundler::molinillo::dependencygraph#inspect()","bundler::molinillo::dependencygraph::vertex#inspect()","bundler::cli#install()","bundler::cli::package#install()","bundler::gemhelper#install()","bundler::installer::install()","bundler::source::git#install()","bundler::source::path#install()","bundler::source::rubygems#install()","bundler::gemhelper#install_gem()","bundler::installer#install_gem_from_spec()","bundler::installer#install_in_parallel()","bundler::install_path()","bundler::source::git#install_path()","bundler::installer#install_sequentially()","bundler::gemhelper::install_tasks()","bundler::source::rubygems#installed_specs()","bundler::thor::group::invoke()","bundler::thor::invocation#invoke()","bundler::thor::group::invoke_from_option()","bundler::thor::invocation#invoke_with_padding()","bundler::settings#is_bool()","bundler::molinillo::dependencygraph::vertex#is_reachable_from?()","bundler::issues_url()","bundler::currentruby#jruby?()","bundler::currentruby#jruby_18?()","bundler::currentruby#jruby_19?()","bundler::retry#keep_trying?()","net::http::persistent#key=()","bundler::settings#key_for()","bundler::retry#last_attempt?()","bundler::ui::shell#level()","bundler::ui::silent#level()","bundler::ui::shell#level=()","bundler::ui::silent#level=()","bundler::similaritydetector#levenshtein_distance()","bundler::cli#licenses()","bundler::thor::actions#link_file()","bundler::load()","bundler::settings#load_config()","bundler::load_gemspec()","bundler::load_gemspec_uncached()","bundler::load_marshal()","gem::specification#load_paths()","bundler::source::git#load_spec_files()","bundler::source::path#load_spec_files()","bundler::thor::util::load_thorfile()","bundler::source::rubygems#loaded_from()","gem::specification#loaded_from()","bundler::rubygemsintegration#loaded_specs()","bundler::source::git#local?()","bundler::settings#local_config_file()","bundler::thor::command#local_method?()","bundler::source::git#local_override!()","bundler::settings#local_overrides()","bundler::index#local_search()","bundler::endpointspecification#local_specification_path()","bundler::source::path#local_specs()","bundler::settings#locations()","bundler::definition#lock()","bundler::environment#lock()","bundler::sourcelist#lock_sources()","bundler::locked_gems()","bundler::molinillo::resolver::resolution#locked_requirement_named()","bundler::thor::long_desc()","bundler::specset#lookup()","bundler::thor::shell::basic#lookup_color()","bundler::currentruby#maglev?()","bundler::thor::map()","bundler::rubygemsintegration#mark_loaded()","bundler::rubygemsintegration#marshal_spec_dir()","bundler::matchplatform#match_platform()","bundler::thor::lineeditor::readline::pathcompletion#matches()","gem::dependency#matches_spec?()","bundler::graph#matching_specs()","bundler::specset#materialize()","bundler::specset#merge()","bundler::molinillo::nosuchdependencyerror#message()","bundler::resolver::molinillo::versionconflict#message()","bundler::thor::base::classmethods#method_added()","bundler::depproxy#method_missing()","bundler::dsl#method_missing()","bundler::lazyspecification#method_missing()","bundler::remotespecification#method_missing()","bundler::thor::method_option()","bundler::thor::method_options()","bundler::currentruby#mingw?()","bundler::currentruby#mingw_18?()","bundler::currentruby#mingw_19?()","bundler::currentruby#mingw_20?()","bundler::currentruby#mingw_21?()","bundler::currentruby#mingw_22?()","bundler::source::mirror_for()","bundler::definition#missing_specs()","bundler::mkdir_p()","bundler::currentruby#mri?()","bundler::currentruby#mri_18?()","bundler::currentruby#mri_19?()","bundler::currentruby#mri_20?()","bundler::currentruby#mri_21?()","bundler::currentruby#mri_22?()","bundler::currentruby#mswin64?()","bundler::currentruby#mswin64_19?()","bundler::currentruby#mswin64_20?()","bundler::currentruby#mswin64_21?()","bundler::currentruby#mswin64_22?()","bundler::currentruby#mswin?()","bundler::currentruby#mswin_18?()","bundler::currentruby#mswin_19?()","bundler::currentruby#mswin_20?()","bundler::currentruby#mswin_21?()","bundler::currentruby#mswin_22?()","bundler::thor::shell::basic#mute()","bundler::thor::shell::basic#mute?()","bundler::depproxy#name()","bundler::gemhelper#name()","bundler::resolver::specgroup#name()","bundler::source::git#name()","bundler::source::path#name()","bundler::source::rubygems#name()","bundler::molinillo::specificationprovider#name_for()","bundler::resolver#name_for()","bundler::molinillo::specificationprovider#name_for_explicit_dependency_source()","bundler::resolver#name_for_explicit_dependency_source()","bundler::molinillo::specificationprovider#name_for_locking_dependency_source()","bundler::resolver#name_for_locking_dependency_source()","bundler::thor::base::classmethods#namespace()","object#namespace()","bundler::thor::util::namespace_from_thor_class()","bundler::thor::util::namespaces_in_content()","bundler::anonymizableuri::new()","bundler::cli::new()","bundler::cli::binstubs::new()","bundler::cli::cache::new()","bundler::cli::check::new()","bundler::cli::clean::new()","bundler::cli::config::new()","bundler::cli::console::new()","bundler::cli::exec::new()","bundler::cli::gem::new()","bundler::cli::init::new()","bundler::cli::inject::new()","bundler::cli::install::new()","bundler::cli::open::new()","bundler::cli::outdated::new()","bundler::cli::package::new()","bundler::cli::platform::new()","bundler::cli::show::new()","bundler::cli::update::new()","bundler::cli::viz::new()","bundler::definition::new()","bundler::depproxy::new()","bundler::dependency::new()","bundler::dsl::new()","bundler::endpointspecification::new()","bundler::environment::new()","bundler::fetcher::new()","bundler::fetcher::authenticationrequirederror::new()","bundler::fetcher::badauthenticationerror::new()","bundler::fetcher::certificatefailureerror::new()","bundler::fetcher::sslerror::new()","bundler::gemhelper::new()","bundler::graph::new()","bundler::graph::graphvizclient::new()","bundler::index::new()","bundler::injector::new()","bundler::lazyspecification::new()","bundler::lockfileparser::new()","bundler::molinillo::circulardependencyerror::new()","bundler::molinillo::dependencygraph::new()","bundler::molinillo::dependencygraph::vertex::new()","bundler::molinillo::nosuchdependencyerror::new()","bundler::molinillo::resolver::new()","bundler::molinillo::resolver::resolution::new()","bundler::molinillo::versionconflict::new()","bundler::remotespecification::new()","bundler::resolver::new()","bundler::resolver::specgroup::new()","bundler::retry::new()","bundler::rubyversion::new()","bundler::rubygemsintegration::ancient::new()","bundler::rubygemsintegration::legacy::new()","bundler::rubygemsintegration::morefuture::new()","bundler::settings::new()","bundler::similaritydetector::new()","bundler::source::git::new()","bundler::source::git::gitcommanderror::new()","bundler::source::git::gitnotallowederror::new()","bundler::source::git::gitnotinstallederror::new()","bundler::source::git::gitproxy::new()","bundler::source::path::new()","bundler::source::path::installer::new()","bundler::source::rubygems::new()","bundler::sourcelist::new()","bundler::specset::new()","bundler::systemrubyversion::new()","bundler::thor::actions::new()","bundler::thor::base::new()","bundler::thor::command::new()","bundler::thor::dynamiccommand::new()","bundler::thor::lineeditor::basic::new()","bundler::thor::lineeditor::readline::pathcompletion::new()","bundler::thor::shell::new()","bundler::ui::rgproxy::new()","bundler::ui::shell::new()","bundler::versionconflict::new()","bundler::worker::new()","bundler::worker::wrappedexception::new()","net::http::persistent::new()","bundler::injector#new_gem_lines()","bundler::definition#new_platform?()","bundler::definition#new_specs()","bundler::thor::shell::basic#no?()","bundler::thor::base::classmethods#no_commands()","bundler::thor::base::classmethods#no_tasks()","gem::specification#nondevelopment_dependencies()","gem::requirement#none?()","bundler::dsl#normalize_hash()","bundler::dsl#normalize_options()","bundler::dsl#normalize_source()","bundler::settings#normalize_uri()","bundler::source::rubygems#normalize_uri()","net::http::persistent#normalize_uri()","bundler::thor::command#not_debugging?()","bundler::definition#nothing_changed?()","bundler::currentruby#on_18?()","bundler::currentruby#on_19?()","bundler::currentruby#on_20?()","bundler::currentruby#on_21?()","bundler::currentruby#on_22?()","bundler::cli#open()","bundler::thor::option()","bundler::source::rubygems#options()","bundler::thor::options()","bundler::cli#outdated()","bundler::cli::show#outdated?()","bundler::molinillo::dependencygraph::vertex#outgoing_edges()","bundler::molinillo::ui#output()","bundler::cli#package()","bundler::thor::package_name()","bundler::thor::shell::basic#padding=()","bundler::molinillo::resolver::resolution#parent_of()","bundler::lockfileparser#parse_dependency()","bundler::lockfileparser#parse_platform()","bundler::lockfileparser#parse_source()","bundler::lockfileparser#parse_spec()","bundler::systemrubyversion#patchlevel()","bundler::dsl#path()","bundler::rubygemsintegration#path()","bundler::settings#path()","bundler::source::git#path()","bundler::molinillo::dependencygraph::vertex#path_to?()","bundler::gemhelper#perform_git_push()","bundler::definition#pinned_spec_names()","net::http::persistent#pipeline()","bundler::cli#platform()","bundler::dsl#platform()","bundler::dsl#platforms()","bundler::rubygemsintegration#platforms()","bundler::resolver::specgroup#platforms_for_dependency_named()","bundler::molinillo::dependencystate#pop_possibility_state()","bundler::molinillo::resolver::resolution#possibility()","bundler::endpointspecification#post_install_message()","bundler::molinillo::dependencygraph::vertex#predecessors()","bundler::thor::shell::basic#prepare_message()","bundler::thor::actions#prepend_file()","bundler::thor::actions#prepend_to_file()","bundler::preserve_gem_path()","bundler::rubygemsintegration#preserve_paths()","bundler::rubygemsintegration::almostmodern#preserve_paths()","bundler::definition#pretty_dep()","bundler::settings#pretty_values_for()","bundler::thor::shell::basic#print_in_columns()","bundler::thor::base::classmethods#print_options()","bundler::thor::shell::basic#print_table()","bundler::thor::shell::basic#print_wrapped()","bundler::thor::printable_commands()","bundler::thor::group::printable_commands()","bundler::thor::printable_tasks()","bundler::thor::group::printable_tasks()","net::http::persistent#private_key=()","bundler::thor::command#private_method?()","bundler::worker#process_queue()","bundler::molinillo::resolver::resolution#process_topmost_state()","bundler::molinillo::ui#progress_rate()","bundler::rubygemsintegration#provides?()","bundler::rubygemsintegration::provides?()","net::http::persistent#proxy=()","net::http::persistent#proxy_bypass?()","net::http::persistent#proxy_from_env()","bundler::runtime#prune_cache()","bundler::runtime#prune_gem_cache()","bundler::runtime#prune_git_and_path_cache()","bundler::thor::base::classmethods#public_command()","bundler::thor::base::classmethods#public_task()","bundler::molinillo::resolver::resolution#push_state_for_requirements()","bundler::sharedhelpers#pwd()","bundler::ui::shell#quiet?()","bundler::ui::silent#quiet?()","bundler::thor::rakecompat::rake_classes()","object#rake_namespace()","bundler::currentruby#rbx?()","bundler::rubygemsintegration#read_binary()","bundler::read_file()","bundler::env#read_file()","bundler::thor::lineeditor::readline()","bundler::thor::lineeditor::basic#readline()","bundler::thor::lineeditor::readline#readline()","bundler::installer#ready_to_install?()","net::http::persistent#reconnect()","net::http::persistent#reconnect_ssl()","bundler::molinillo::dependencygraph::vertex#recursive_successors()","bundler::rubygemsintegration#redefine_method()","bundler::thor::register()","bundler::thor::lineeditor::readline::pathcompletion#relative_matches()","bundler::source::path#relative_path()","bundler::thor::actions#relative_to_original_destination_root()","bundler::source::path#remote!()","bundler::source::rubygems#remote!()","bundler::sourcelist#remote!()","bundler::source::rubygems#remote_specs()","bundler::fetcher#remote_uri()","bundler::source::rubygems#remotes_equal?()","bundler::thor::base::classmethods#remove_argument()","bundler::anonymizableuri#remove_auth()","bundler::thor::base::classmethods#remove_class_option()","bundler::thor::base::classmethods#remove_command()","bundler::thor::actions#remove_dir()","bundler::thor::actions#remove_file()","bundler::thor::group::remove_invocation()","bundler::thor::base::classmethods#remove_task()","bundler::definition#removed_specs()","bundler::rubygemsintegration#replace_bin_path()","bundler::rubygemsintegration#replace_entrypoints()","bundler::rubygemsintegration#replace_gem()","bundler::rubygemsintegration#replace_refresh()","bundler::source::rubygems#replace_remotes()","bundler::sourcelist#replace_sources!()","bundler::env#report()","bundler::rubygemsintegration#repository_subdirectories()","bundler::rubygemsintegration::future#repository_subdirectories()","bundler::fetcher#request()","net::http::persistent#request()","bundler::request_issue_report_for()","bundler::definition#requested_dependencies()","bundler::definition#requested_specs()","bundler::environment#requested_specs()","bundler::require()","bundler::runtime#require()","bundler::molinillo::resolver::resolution#require_nested_dependencies_for()","bundler::cli::clean#require_path_or_force()","bundler::endpointspecification#require_paths()","bundler::thor::command#required_options()","bundler::depproxy#requirement()","gem::dependency#requirement()","bundler::molinillo::resolver::resolution#requirement_for_existing_name()","bundler::molinillo::specificationprovider#requirement_satisfied_by?()","bundler::resolver#requirement_satisfied_by?()","bundler::molinillo::resolver::resolution#requirement_tree_for()","bundler::molinillo::resolver::resolution#requirement_trees()","bundler::molinillo::dependencygraph::vertex#requirements()","bundler::source::git#requires_checkout?()","bundler::requires_sudo?()","net::http::persistent#reset()","bundler::reset!()","bundler::definition#resolve()","bundler::molinillo::resolver#resolve()","bundler::molinillo::resolver::resolution#resolve()","bundler::resolver::resolve()","bundler::cli::gem#resolve_name()","bundler::definition#resolve_remotely!()","bundler::definition#resolve_with_cache!()","bundler::lazyspecification#respond_to?()","bundler::rubygemsintegration#reverse_rubygems_kernel_mixin()","bundler::source::git#revision()","bundler::source::git::gitproxy#revision()","gem::specification#rg_full_gem_path()","gem::specification#rg_loaded_from()","bundler::root()","bundler::molinillo::dependencygraph#root_vertex_named()","bundler::rubydsl#ruby()","bundler::currentruby#ruby?()","bundler::currentruby#ruby_18?()","bundler::currentruby#ruby_19?()","bundler::currentruby#ruby_20?()","bundler::currentruby#ruby_21?()","bundler::currentruby#ruby_22?()","bundler::thor::util::ruby_command()","bundler::rubygemsintegration#ruby_engine()","bundler::ruby_scope()","bundler::ruby_version()","bundler::env#ruby_version()","bundler::gemhelper#rubygem_push()","bundler::definition#rubygems_index()","bundler::sourcelist#rubygems_primary_remotes()","bundler::sourcelist#rubygems_remotes()","bundler::sourcelist#rubygems_sources()","bundler::cli::binstubs#run()","bundler::cli::cache#run()","bundler::cli::check#run()","bundler::cli::clean#run()","bundler::cli::config#run()","bundler::cli::console#run()","bundler::cli::exec#run()","bundler::cli::gem#run()","bundler::cli::init#run()","bundler::cli::inject#run()","bundler::cli::install#run()","bundler::cli::open#run()","bundler::cli::outdated#run()","bundler::cli::package#run()","bundler::cli::platform#run()","bundler::cli::show#run()","bundler::cli::update#run()","bundler::cli::viz#run()","bundler::graph::graphvizclient#run()","bundler::installer#run()","bundler::retry#run()","bundler::thor::actions#run()","bundler::thor::command#run()","bundler::thor::dynamiccommand#run()","bundler::source::path#run_hooks()","bundler::thor::actions#run_ruby_script()","bundler::index#same_version?()","bundler::lazyspecification#satisfies?()","bundler::definition#satisfies_locked_spec?()","bundler::thor::shell::basic#say()","bundler::ui::rgproxy#say()","bundler::thor::shell::basic#say_status()","bundler::index#search()","bundler::index#search_all()","bundler::index#search_by_dependency()","bundler::index#search_by_spec()","bundler::molinillo::specificationprovider#search_for()","bundler::resolver#search_for()","bundler::sharedhelpers#search_up()","bundler::rubygemsintegration#security_policies()","bundler::rubygemsintegration#security_policy_keys()","bundler::cli::common::select_spec()","bundler::source::git#serialize_gemspecs_in()","bundler::sharedhelpers#set_bundle_environment()","bundler::thor::shell::color#set_color()","bundler::thor::shell::html#set_color()","bundler::settings#set_global()","bundler::settings#set_key()","bundler::settings#set_local()","bundler::source::git#set_local!()","bundler::settings()","bundler::setup()","bundler::runtime#setup()","bundler::cli::cache#setup_cache_all()","bundler::cli::package#setup_cache_all()","bundler::runtime#setup_environment()","bundler::runtime#setup_manpath()","bundler::gemhelper#sh()","bundler::gemhelper#sh_with_code()","bundler::molinillo::dependencygraph::vertex#shallow_eql?()","bundler::thor::base::shell()","bundler::thor::shell#shell()","bundler::source::git#shortref_for_display()","bundler::source::git#shortref_for_path()","bundler::dependency#should_include?()","bundler::cli#show()","net::http::persistent#shutdown()","net::http::persistent#shutdown_in_all_threads()","bundler::ui::shell#silence()","bundler::ui::silent#silence()","bundler::similaritydetector#similar_word_list()","bundler::similaritydetector#similar_words()","bundler::index#size()","bundler::deprecate::skip_during()","bundler::thor::util::snake_case()","bundler::specset#sort!()","bundler::molinillo::specificationprovider#sort_dependencies()","bundler::resolver#sort_dependencies()","bundler::specset#sorted()","bundler::dsl#source()","bundler::resolver::specgroup#source()","bundler::sourcelist#source_list_for()","bundler::thor::actions#source_paths()","bundler::thor::actions::classmethods#source_paths()","bundler::thor::actions::classmethods#source_paths_for_search()","bundler::definition#source_requirements()","bundler::cli::source_root()","bundler::thor::actions::classmethods#source_root()","bundler::index#source_types()","bundler::source::rubygems#source_uris_for_spec()","bundler::rubygemsintegration#sources()","bundler::rubygemsintegration#sources=()","bundler::rubygemsintegration#spec_cache_dirs()","bundler::rubygemsintegration#spec_from_gem()","bundler::definition#spec_git_paths()","bundler::index#spec_satisfies_dependency?()","bundler::dependency#specific?()","bundler::definition#specs()","bundler::environment#specs()","bundler::fetcher#specs()","bundler::source::git#specs()","bundler::source::path#specs()","bundler::source::rubygems#specs()","bundler::index#specs_by_name()","bundler::definition#specs_changed?()","bundler::definition#specs_for()","bundler::specs_path()","net::http::persistent#ssl()","net::http::persistent#ssl_version=()","bundler::cli::start()","bundler::resolver#start()","bundler::thor::base::classmethods#start()","net::http::persistent#start()","bundler::molinillo::resolver::resolution#start_resolution()","bundler::molinillo::resolver::resolution#state()","bundler::molinillo::resolver::resolution#state_any?()","bundler::molinillo::resolver::resolution#state_index_for_unwind()","bundler::bundlererror::status_code()","bundler::thor::shell::basic#stderr()","bundler::thor::shell::basic#stdout()","bundler::worker#stop()","bundler::thor::stop_on_unknown_option!()","bundler::worker#stop_threads()","bundler::thor::base::classmethods#strict_args_position!()","bundler::ui::shell#strip_leading_spaces()","bundler::rubygemsintegration::future#stub_rubygems()","bundler::rubygemsintegration::legacy#stub_rubygems()","bundler::rubygemsintegration::modern#stub_rubygems()","bundler::rubygemsintegration::transitional#stub_rubygems()","bundler::rubygemsintegration#stub_source_index()","bundler::thor::base::subclass_files()","bundler::thor::base::subclasses()","bundler::thor::subcommand()","bundler::thor::subcommand_classes()","bundler::thor::subcommand_help()","bundler::thor::subcommands()","bundler::thor::subtask()","bundler::thor::subtask_help()","bundler::thor::subtasks()","bundler::molinillo::dependencygraph::vertex#successors()","bundler::sudo()","bundler::source::rubygems#suppress_configured_credentials()","bundler::system_bindir()","bundler::gemhelper#tag_version()","object#task()","bundler::thor::task_help()","bundler::thor::base::classmethods#tasks()","bundler::ui::shell#tell_me()","bundler::thor::actions#template()","bundler::thor::shell::basic#terminal_width()","bundler::thor::actions#thor()","bundler::thor::util::thor_classes_in()","bundler::thor::util::thor_root()","bundler::thor::util::thor_root_glob()","bundler::tmp()","bundler::specset#to_a()","bundler::lazyspecification#to_ary()","bundler::settings#to_bool()","bundler::dsl#to_definition()","gem::specification#to_gemfile()","bundler::specset#to_hash()","bundler::definition#to_lock()","bundler::dependency#to_lock()","bundler::lazyspecification#to_lock()","bundler::source::git#to_lock()","bundler::source::path#to_lock()","bundler::source::rubygems#to_lock()","gem::dependency#to_lock()","bundler::depproxy#to_s()","bundler::lazyspecification#to_s()","bundler::resolver::specgroup#to_s()","bundler::rubyversion#to_s()","bundler::source::git#to_s()","bundler::source::path#to_s()","bundler::source::rubygems#to_s()","bundler::resolver::specgroup#to_specs()","gem::dependency#to_yaml_properties()","bundler::ui::shell#trace()","bundler::ui::silent#trace()","bundler::thor::shell::basic#truncate()","bundler::molinillo::dependencygraph::tsort()","bundler::molinillo::dependencygraph#tsort_each_child()","bundler::specset#tsort_each_child()","bundler::molinillo::dependencygraph#tsort_each_node()","bundler::specset#tsort_each_node()","bundler::depproxy#type()","bundler::ui()","bundler::rubygemsintegration#ui=()","bundler::thor::actions#uncomment_lines()","net::http::persistent#unescape()","bundler::thor::shell::basic#unix?()","bundler::source::git#unlock!()","bundler::index#unmet_dependency_names()","bundler::source#unmet_deps()","bundler::source::rubygems#unmet_deps()","bundler::molinillo::resolver::resolution#unwind_for_conflict()","bundler::cli#update()","bundler::environment#update()","bundler::upgrade_lockfile()","bundler::fetcher#uri()","bundler::source::git::gitproxy#uri_escaped()","bundler::source::git#uri_hash()","bundler::index#use()","bundler::fetcher#use_api()","bundler::thor::lineeditor::readline#use_path_completion?()","bundler::fetcher::user_agent()","bundler::user_bundle_path()","bundler::rubygemsintegration#user_home()","bundler::thor::util::user_home()","bundler::specset#valid_for?()","bundler::dsl#valid_keys()","bundler::cli::gem#validate_ext_name()","bundler::definition#validate_ruby!()","net::http::persistent#verify_callback=()","bundler::resolver#verify_gemfile_dependencies_are_found!()","net::http::persistent#verify_mode=()","bundler::cli#version()","bundler::gemhelper#version()","bundler::resolver::specgroup#version()","bundler::rubygemsintegration::version()","bundler::rubygemsintegration#version()","bundler::source::git::gitproxy#version()","bundler::systemrubyversion#version()","bundler::source#version_message()","bundler::gemhelper#version_tag()","bundler::molinillo::dependencygraph#vertex_named()","bundler::cli#viz()","bundler::graph#viz()","bundler::ui::shell#warn()","bundler::ui::silent#warn()","bundler::cli::install#warn_if_root()","bundler::fetcher#well_formed_dependency()","bundler::which()","bundler::rubygemsintegration#with_build_args()","bundler::with_clean_env()","bundler::sharedhelpers#with_clean_git_env()","bundler::with_friendly_errors()","bundler::with_original_env()","bundler::thor::shell#with_padding()","bundler::dsl#with_source()","bundler::settings#without()","bundler::settings#without=()","bundler::cli::common::without_groups_message()","bundler::cli::update#without_groups_messages()","bundler::ui::shell#word_wrap()","bundler::env#write()","bundler::currentruby#x64_mingw?()","bundler::currentruby#x64_mingw_20?()","bundler::currentruby#x64_mingw_21?()","bundler::currentruby#x64_mingw_22?()","bundler::thor::shell::basic#yes?()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["Bundler","","Bundler.html","","<p>Some versions of the Bundler 1.1 RC series introduced corrupted lockfiles.\nThere were two major problems: …\n"],["Bundler::AnonymizableURI","","Bundler/AnonymizableURI.html","",""],["Bundler::BundlerError","","Bundler/BundlerError.html","",""],["Bundler::CLI","","Bundler/CLI.html","",""],["Bundler::CLI::Binstubs","","Bundler/CLI/Binstubs.html","",""],["Bundler::CLI::Cache","","Bundler/CLI/Cache.html","",""],["Bundler::CLI::Check","","Bundler/CLI/Check.html","",""],["Bundler::CLI::Clean","","Bundler/CLI/Clean.html","",""],["Bundler::CLI::Common","","Bundler/CLI/Common.html","",""],["Bundler::CLI::Config","","Bundler/CLI/Config.html","",""],["Bundler::CLI::Console","","Bundler/CLI/Console.html","",""],["Bundler::CLI::Exec","","Bundler/CLI/Exec.html","",""],["Bundler::CLI::Gem","","Bundler/CLI/Gem.html","",""],["Bundler::CLI::Init","","Bundler/CLI/Init.html","",""],["Bundler::CLI::Inject","","Bundler/CLI/Inject.html","",""],["Bundler::CLI::Install","","Bundler/CLI/Install.html","",""],["Bundler::CLI::Open","","Bundler/CLI/Open.html","",""],["Bundler::CLI::Outdated","","Bundler/CLI/Outdated.html","",""],["Bundler::CLI::Package","","Bundler/CLI/Package.html","",""],["Bundler::CLI::Platform","","Bundler/CLI/Platform.html","",""],["Bundler::CLI::Show","","Bundler/CLI/Show.html","",""],["Bundler::CLI::Update","","Bundler/CLI/Update.html","",""],["Bundler::CLI::Viz","","Bundler/CLI/Viz.html","",""],["Bundler::CurrentRuby","","Bundler/CurrentRuby.html","",""],["Bundler::CyclicDependencyError","","Bundler/CyclicDependencyError.html","",""],["Bundler::Definition","","Bundler/Definition.html","",""],["Bundler::DepProxy","","Bundler/DepProxy.html","",""],["Bundler::Dependency","","Bundler/Dependency.html","",""],["Bundler::Deployment","","Bundler/Deployment.html","",""],["Bundler::Deprecate","","Bundler/Deprecate.html","",""],["Bundler::DeprecatedError","","Bundler/DeprecatedError.html","",""],["Bundler::Dsl","","Bundler/Dsl.html","",""],["Bundler::EndpointSpecification","","Bundler/EndpointSpecification.html","","<p>used for Creating Specifications from the Gemcutter Endpoint\n"],["Bundler::Env","","Bundler/Env.html","",""],["Bundler::Environment","","Bundler/Environment.html","",""],["Bundler::Fetcher","","Bundler/Fetcher.html","","<p>Handles all the fetching with the rubygems server\n"],["Bundler::Fetcher::AuthenticationRequiredError","","Bundler/Fetcher/AuthenticationRequiredError.html","","<p>This error is raised if HTTP authentication is required, but not provided.\n"],["Bundler::Fetcher::BadAuthenticationError","","Bundler/Fetcher/BadAuthenticationError.html","","<p>This error is raised if HTTP authentication is provided, but incorrect.\n"],["Bundler::Fetcher::CertificateFailureError","","Bundler/Fetcher/CertificateFailureError.html","","<p>This is the error raised if OpenSSL fails the cert verification\n"],["Bundler::Fetcher::FallbackError","","Bundler/Fetcher/FallbackError.html","","<p>This error is raised if the API returns a 413 (only printed in verbose)\n"],["Bundler::Fetcher::NetworkDownError","","Bundler/Fetcher/NetworkDownError.html","","<p>This error is raised when it looks like the network is down\n"],["Bundler::Fetcher::SSLError","","Bundler/Fetcher/SSLError.html","","<p>This is the error raised when a source is HTTPS and OpenSSL didn&#39;t load\n"],["Bundler::GemHelper","","Bundler/GemHelper.html","",""],["Bundler::GemHelper::Rake","","Bundler/GemHelper/Rake.html","",""],["Bundler::GemHelpers","","Bundler/GemHelpers.html","",""],["Bundler::GemInstaller","","Bundler/GemInstaller.html","",""],["Bundler::GemNotFound","","Bundler/GemNotFound.html","",""],["Bundler::GemfileError","","Bundler/GemfileError.html","",""],["Bundler::GemfileLockNotFound","","Bundler/GemfileLockNotFound.html","",""],["Bundler::GemfileNotFound","","Bundler/GemfileNotFound.html","",""],["Bundler::GemspecError","","Bundler/GemspecError.html","",""],["Bundler::GitError","","Bundler/GitError.html","",""],["Bundler::Graph","","Bundler/Graph.html","",""],["Bundler::Graph::GraphVizClient","","Bundler/Graph/GraphVizClient.html","",""],["Bundler::HTTPError","","Bundler/HTTPError.html","",""],["Bundler::Index","","Bundler/Index.html","",""],["Bundler::Injector","","Bundler/Injector.html","",""],["Bundler::InstallError","","Bundler/InstallError.html","",""],["Bundler::InstallHookError","","Bundler/InstallHookError.html","",""],["Bundler::Installer","","Bundler/Installer.html","",""],["Bundler::InvalidOption","","Bundler/InvalidOption.html","",""],["Bundler::LazySpecification","","Bundler/LazySpecification.html","",""],["Bundler::LockfileError","","Bundler/LockfileError.html","",""],["Bundler::LockfileParser","","Bundler/LockfileParser.html","",""],["Bundler::MarshalError","","Bundler/MarshalError.html","",""],["Bundler::MatchPlatform","","Bundler/MatchPlatform.html","",""],["Bundler::Molinillo","","Bundler/Molinillo.html","",""],["Bundler::Molinillo::CircularDependencyError","","Bundler/Molinillo/CircularDependencyError.html","","<p>An error caused by attempting to fulfil a dependency that was circular\n<p>@note This exception will be thrown …\n"],["Bundler::Molinillo::DependencyGraph","","Bundler/Molinillo/DependencyGraph.html","","<p>A directed acyclic graph that is tuned to hold named dependencies\n"],["Bundler::Molinillo::DependencyGraph::Vertex","","Bundler/Molinillo/DependencyGraph/Vertex.html","","<p>A vertex in a {DependencyGraph} that encapsulates a {#name} and a\n{#payload}\n"],["Bundler::Molinillo::DependencyState","","Bundler/Molinillo/DependencyState.html","","<p>A state that encapsulates a set of {#requirements} with an {Array} of\npossibilities\n"],["Bundler::Molinillo::NoSuchDependencyError","","Bundler/Molinillo/NoSuchDependencyError.html","","<p>An error caused by searching for a dependency that is completely unknown,\ni.e. has no versions available …\n"],["Bundler::Molinillo::PossibilityState","","Bundler/Molinillo/PossibilityState.html","","<p>A state that encapsulates a single possibility to fulfill the given\n{#requirement}\n"],["Bundler::Molinillo::Resolver","","Bundler/Molinillo/Resolver.html","","<p>This class encapsulates a dependency resolver. The resolver is responsible\nfor determining which set …\n"],["Bundler::Molinillo::Resolver::Resolution","","Bundler/Molinillo/Resolver/Resolution.html","","<p>A specific resolution from a given {Resolver}\n"],["Bundler::Molinillo::ResolverError","","Bundler/Molinillo/ResolverError.html","","<p>An error that occurred during the resolution process\n"],["Bundler::Molinillo::SpecificationProvider","","Bundler/Molinillo/SpecificationProvider.html","","<p>Provides information about specifcations and dependencies to the resolver,\nallowing the {Resolver} class …\n"],["Bundler::Molinillo::UI","","Bundler/Molinillo/UI.html","","<p>Conveys information about the resolution process to a user.\n"],["Bundler::Molinillo::VersionConflict","","Bundler/Molinillo/VersionConflict.html","","<p>An error caused by conflicts in version\n"],["Bundler::PathError","","Bundler/PathError.html","",""],["Bundler::ProductionError","","Bundler/ProductionError.html","",""],["Bundler::Psych","","Bundler/Psych.html","",""],["Bundler::RemoteSpecification","","Bundler/RemoteSpecification.html","","<p>Represents a lazily loaded gem specification, where the full specification\nis on the source server in …\n"],["Bundler::Resolver","","Bundler/Resolver.html","",""],["Bundler::Resolver::Molinillo","","Bundler/Resolver/Molinillo.html","",""],["Bundler::Resolver::Molinillo::VersionConflict","","Bundler/Resolver/Molinillo/VersionConflict.html","",""],["Bundler::Resolver::SpecGroup","","Bundler/Resolver/SpecGroup.html","",""],["Bundler::Retry","","Bundler/Retry.html","","<p>General purpose class for retrying code that may fail\n"],["Bundler::RubyDsl","","Bundler/RubyDsl.html","",""],["Bundler::RubyVersion","","Bundler/RubyVersion.html","",""],["Bundler::RubyVersionMismatch","","Bundler/RubyVersionMismatch.html","",""],["Bundler::RubygemsIntegration","","Bundler/RubygemsIntegration.html","",""],["Bundler::RubygemsIntegration::AlmostModern","","Bundler/RubygemsIntegration/AlmostModern.html","","<p>Rubygems 1.8.0 to 1.8.4\n"],["Bundler::RubygemsIntegration::Ancient","","Bundler/RubygemsIntegration/Ancient.html","","<p>Rubygems versions 1.3.6 and 1.3.7\n"],["Bundler::RubygemsIntegration::Future","","Bundler/RubygemsIntegration/Future.html","","<p>Rubygems 2.0\n"],["Bundler::RubygemsIntegration::Gem","","Bundler/RubygemsIntegration/Gem.html","",""],["Bundler::RubygemsIntegration::Legacy","","Bundler/RubygemsIntegration/Legacy.html","","<p>Rubygems 1.4 through 1.6\n"],["Bundler::RubygemsIntegration::Legacy::Gem::SourceIndex","","Bundler/RubygemsIntegration/Legacy/Gem/SourceIndex.html","",""],["Bundler::RubygemsIntegration::Modern","","Bundler/RubygemsIntegration/Modern.html","","<p>Rubygems 1.8.5-1.8.19\n"],["Bundler::RubygemsIntegration::MoreFuture","","Bundler/RubygemsIntegration/MoreFuture.html","",""],["Bundler::RubygemsIntegration::MoreModern","","Bundler/RubygemsIntegration/MoreModern.html","","<p>Rubygems 1.8.20+\n"],["Bundler::RubygemsIntegration::Transitional","","Bundler/RubygemsIntegration/Transitional.html","","<p>Rubygems 1.7\n"],["Bundler::Runtime","","Bundler/Runtime.html","",""],["Bundler::SecurityError","","Bundler/SecurityError.html","",""],["Bundler::Settings","","Bundler/Settings.html","",""],["Bundler::SharedHelpers","","Bundler/SharedHelpers.html","",""],["Bundler::SimilarityDetector","","Bundler/SimilarityDetector.html","",""],["Bundler::Source","","Bundler/Source.html","",""],["Bundler::Source::Git","","Bundler/Source/Git.html","",""],["Bundler::Source::Git::GitCommandError","","Bundler/Source/Git/GitCommandError.html","",""],["Bundler::Source::Git::GitNotAllowedError","","Bundler/Source/Git/GitNotAllowedError.html","",""],["Bundler::Source::Git::GitNotInstalledError","","Bundler/Source/Git/GitNotInstalledError.html","",""],["Bundler::Source::Git::GitProxy","","Bundler/Source/Git/GitProxy.html","","<p>The GitProxy is responsible to interact with git repositories. All actions\nrequired by the Git source …\n"],["Bundler::Source::Path","","Bundler/Source/Path.html","",""],["Bundler::Source::Path::Installer","","Bundler/Source/Path/Installer.html","",""],["Bundler::Source::Rubygems","","Bundler/Source/Rubygems.html","",""],["Bundler::SourceList","","Bundler/SourceList.html","",""],["Bundler::SpecSet","","Bundler/SpecSet.html","",""],["Bundler::SystemRubyVersion","","Bundler/SystemRubyVersion.html","","<p>A subclass of RubyVersion that implements version, engine and\nengine_version based upon the current information …\n"],["Bundler::Thor","","Bundler/Thor.html","",""],["Bundler::Thor::Actions","","Bundler/Thor/Actions.html","",""],["Bundler::Thor::Actions::ClassMethods","","Bundler/Thor/Actions/ClassMethods.html","",""],["Bundler::Thor::Actions::CreateFile","","Bundler/Thor/Actions/CreateFile.html","",""],["Bundler::Thor::Actions::CreateLink","","Bundler/Thor/Actions/CreateLink.html","",""],["Bundler::Thor::Actions::Directory","","Bundler/Thor/Actions/Directory.html","",""],["Bundler::Thor::Actions::EmptyDirectory","","Bundler/Thor/Actions/EmptyDirectory.html","",""],["Bundler::Thor::Actions::InjectIntoFile","","Bundler/Thor/Actions/InjectIntoFile.html","",""],["Bundler::Thor::AmbiguousCommandError","","Bundler/Thor/AmbiguousCommandError.html","",""],["Bundler::Thor::Argument","","Bundler/Thor/Argument.html","",""],["Bundler::Thor::Arguments","","Bundler/Thor/Arguments.html","",""],["Bundler::Thor::Base","","Bundler/Thor/Base.html","",""],["Bundler::Thor::Base::ClassMethods","","Bundler/Thor/Base/ClassMethods.html","",""],["Bundler::Thor::Command","","Bundler/Thor/Command.html","",""],["Bundler::Thor::CoreExt","","Bundler/Thor/CoreExt.html","",""],["Bundler::Thor::CoreExt::HashWithIndifferentAccess","","Bundler/Thor/CoreExt/HashWithIndifferentAccess.html","",""],["Bundler::Thor::CoreExt::OrderedHash","","Bundler/Thor/CoreExt/OrderedHash.html","",""],["Bundler::Thor::DynamicCommand","","Bundler/Thor/DynamicCommand.html","","<p>A dynamic command that handles method missing scenarios.\n"],["Bundler::Thor::Error","","Bundler/Thor/Error.html","","<p>Bundler::Thor::Error is raised when it&#39;s caused by wrong usage of thor\nclasses. Those errors have …\n"],["Bundler::Thor::Group","","Bundler/Thor/Group.html","","<p>Bundler::Thor has a special class called Bundler::Thor::Group. The main\ndifference to Bundler::Thor class …\n"],["Bundler::Thor::HiddenCommand","","Bundler/Thor/HiddenCommand.html","","<p>A command that is hidden in help messages but still invocable.\n"],["Bundler::Thor::Invocation","","Bundler/Thor/Invocation.html","",""],["Bundler::Thor::Invocation::ClassMethods","","Bundler/Thor/Invocation/ClassMethods.html","",""],["Bundler::Thor::InvocationError","","Bundler/Thor/InvocationError.html","","<p>Raised when a command was found, but not invoked properly.\n"],["Bundler::Thor::LineEditor","","Bundler/Thor/LineEditor.html","",""],["Bundler::Thor::LineEditor::Basic","","Bundler/Thor/LineEditor/Basic.html","",""],["Bundler::Thor::LineEditor::Readline","","Bundler/Thor/LineEditor/Readline.html","",""],["Bundler::Thor::LineEditor::Readline::PathCompletion","","Bundler/Thor/LineEditor/Readline/PathCompletion.html","",""],["Bundler::Thor::MalformattedArgumentError","","Bundler/Thor/MalformattedArgumentError.html","",""],["Bundler::Thor::Option","","Bundler/Thor/Option.html","",""],["Bundler::Thor::Options","","Bundler/Thor/Options.html","",""],["Bundler::Thor::RakeCompat","","Bundler/Thor/RakeCompat.html","","<p>Adds a compatibility layer to your Bundler::Thor classes which allows you\nto use rake package tasks. …\n"],["Bundler::Thor::RakeCompat::Rake","","Bundler/Thor/RakeCompat/Rake.html","",""],["Bundler::Thor::RequiredArgumentMissingError","","Bundler/Thor/RequiredArgumentMissingError.html","",""],["Bundler::Thor::Runner","","Bundler/Thor/Runner.html","",""],["Bundler::Thor::Sandbox","","Bundler/Thor/Sandbox.html","",""],["Bundler::Thor::Shell","","Bundler/Thor/Shell.html","",""],["Bundler::Thor::Shell::Basic","","Bundler/Thor/Shell/Basic.html","",""],["Bundler::Thor::Shell::Color","","Bundler/Thor/Shell/Color.html","","<p>Inherit from Bundler::Thor::Shell::Basic and add set_color behavior. Check\nBundler::Thor::Shell::Basic …\n"],["Bundler::Thor::Shell::HTML","","Bundler/Thor/Shell/HTML.html","","<p>Inherit from Bundler::Thor::Shell::Basic and add set_color behavior. Check\nBundler::Thor::Shell::Basic …\n"],["Bundler::Thor::UndefinedCommandError","","Bundler/Thor/UndefinedCommandError.html","","<p>Raised when a command was not found.\n"],["Bundler::Thor::UnknownArgumentError","","Bundler/Thor/UnknownArgumentError.html","",""],["Bundler::Thor::Util","","Bundler/Thor/Util.html","","<p>This module holds several utilities:\n<p>1) Methods to convert thor namespaces to constants and vice-versa. …\n"],["Bundler::UI","","Bundler/UI.html","",""],["Bundler::UI::RGProxy","","Bundler/UI/RGProxy.html","",""],["Bundler::UI::Shell","","Bundler/UI/Shell.html","",""],["Bundler::UI::Silent","","Bundler/UI/Silent.html","",""],["Bundler::VersionConflict","","Bundler/VersionConflict.html","","<p>Internal errors, should be rescued\n"],["Bundler::Worker","","Bundler/Worker.html","",""],["Bundler::Worker::WrappedException","","Bundler/Worker/WrappedException.html","",""],["Capistrano","","Capistrano.html","",""],["Gem","","Gem.html","",""],["Gem::Dependency","","Gem/Dependency.html","",""],["Gem::Platform","","Gem/Platform.html","",""],["Gem::Requirement","","Gem/Requirement.html","",""],["Gem::Specification","","Gem/Specification.html","",""],["IO","","IO.html","",""],["Net","","Net.html","",""],["Net::BufferedIO","","Net/BufferedIO.html","",""],["Net::HTTP","","Net/HTTP.html","",""],["Net::HTTP::Persistent","","Net/HTTP/Persistent.html","","<p>Persistent connections for Net::HTTP\n<p>Net::HTTP::Persistent maintains persistent connections across all …\n"],["Net::HTTP::Persistent::Error","","Net/HTTP/Persistent/Error.html","","<p>Error class for errors raised by Net::HTTP::Persistent.  Various\nSystemCallErrors are re-raised with …\n"],["Net::HTTP::Persistent::SSLReuse","","Net/HTTP/Persistent/SSLReuse.html","","<p>This Net::HTTP subclass adds SSL session reuse and Server Name Indication\n(SNI) RFC 3546.\n<p>DO NOT DEPEND …\n"],["Object","","Object.html","",""],["Rake","","Rake.html","",""],["<<","Bundler::Index","Bundler/Index.html#method-i-3C-3C","(spec)",""],["==","Bundler::DepProxy","Bundler/DepProxy.html#method-i-3D-3D","(o)",""],["==","Bundler::Index","Bundler/Index.html#method-i-3D-3D","(o)",""],["==","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-3D-3D","(other)",""],["==","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-3D-3D","(other)","<p>@return [Boolean] whether the two dependency graphs are equal, determined\n\n<pre>by a recursive traversal of ...</pre>\n"],["==","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-3D-3D","(other)","<p>@return [Boolean] whether the two vertices are equal, determined\n\n<pre>by a recursive traversal of each {Vertex#successors}</pre>\n"],["==","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-3D-3D","(other)",""],["==","Bundler::Source::Git","Bundler/Source/Git.html#method-i-3D-3D","(o)",""],["==","Bundler::Source::Path","Bundler/Source/Path.html#method-i-3D-3D","(o)",""],["==","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-3D-3D","(o)",""],["[]","Bundler::Index","Bundler/Index.html#method-i-5B-5D","(query, base = nil)",""],["[]","Bundler::Settings","Bundler/Settings.html#method-i-5B-5D","(name)",""],["[]","Bundler::SpecSet","Bundler/SpecSet.html#method-i-5B-5D","(key)",""],["[]=","Bundler::Settings","Bundler/Settings.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Bundler::SpecSet","Bundler/SpecSet.html#method-i-5B-5D-3D","(key, value)",""],["__dependencies","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-__dependencies","()",""],["__materialize__","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-__materialize__","()",""],["__swap__","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-__swap__","(spec)",""],["__swap__","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-__swap__","(spec)","<p>Because Rubyforge cannot be trusted to provide valid specifications once\nthe remote gem is downloaded, …\n"],["_groups","Bundler::Graph","Bundler/Graph.html#method-i-_groups","()",""],["_local_specification","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-_local_specification","()",""],["_make_label","Bundler::Graph","Bundler/Graph.html#method-i-_make_label","(symbol_or_string_or_dependency, element_type)",""],["_patching_gem_dependency_class","Bundler::Graph","Bundler/Graph.html#method-i-_patching_gem_dependency_class","()",""],["_populate_relations","Bundler::Graph","Bundler/Graph.html#method-i-_populate_relations","()",""],["_remote_specification","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-_remote_specification","()",""],["abort_threads","Bundler::Worker","Bundler/Worker.html#method-i-abort_threads","()",""],["absolute_matches","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-absolute_matches","()",""],["activate_platform","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-activate_platform","(platform)",""],["activate_spec","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-activate_spec","()","<p>Add the current {#possibility} to the dependency graph of the current\n{#state} @return [void]\n"],["add_child_vertex","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-add_child_vertex","(name, payload, parent_names, requirement)","<p>@param [String] name @param [Object] payload @param [Array&lt;String&gt;]\nparent_names @param [Object] …\n"],["add_edge","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-add_edge","(origin, destination, requirement)","<p>Adds a new {Edge} to the dependency graph @param [Vertex] origin @param\n[Vertex] destination @param [Object] …\n"],["add_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-add_file","(destination, *args, &block)",""],["add_git_source","Bundler::SourceList","Bundler/SourceList.html#method-i-add_git_source","(options = {})",""],["add_git_sources","Bundler::Dsl","Bundler/Dsl.html#method-i-add_git_sources","()",""],["add_link","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-add_link","(destination, *args, &block)",""],["add_path_source","Bundler::SourceList","Bundler/SourceList.html#method-i-add_path_source","(options = {})",""],["add_remote","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-add_remote","(source)",""],["add_root_vertex","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-add_root_vertex","(name, payload)","<p>@param [String] name @param [Object] payload @return [Vertex] the vertex\nthat was added to `self`\n"],["add_rubygems_remote","Bundler::SourceList","Bundler/SourceList.html#method-i-add_rubygems_remote","(uri)",""],["add_rubygems_source","Bundler::SourceList","Bundler/SourceList.html#method-i-add_rubygems_source","(options = {})",""],["add_runtime_options!","Bundler::Thor::Actions::ClassMethods","Bundler/Thor/Actions/ClassMethods.html#method-i-add_runtime_options-21","()","<p>Add runtime options that help actions execution.\n"],["add_source","Bundler::Index","Bundler/Index.html#method-i-add_source","(index)",""],["add_source_to_list","Bundler::SourceList","Bundler/SourceList.html#method-i-add_source_to_list","(source, list)",""],["add_to_history?","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-add_to_history-3F","()",""],["add_vertex","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-add_vertex","(name, payload)","<p>@param [String] name @param [Object] payload @return [Vertex] the vertex\nthat was added to `self`\n"],["after_resolution","Bundler::Molinillo::UI","Bundler/Molinillo/UI.html#method-i-after_resolution","()","<p>Called after resolution ends (either successfully or with an error). By\ndefault, prints a newline.\n<p>@return …\n"],["after_resolution","Bundler::Resolver","Bundler/Resolver.html#method-i-after_resolution","()",""],["all","Bundler::Settings","Bundler/Settings.html#method-i-all","()",""],["all_commands","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-all_commands","()","<p>Returns the commands for this Bundler::Thor class and all subclasses.\n<p>Returns\n<p>OrderedHash &mdash; An ordered hash …\n"],["all_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-all_sources","()",""],["all_specs","Bundler::RubygemsIntegration::Future","Bundler/RubygemsIntegration/Future.html#method-i-all_specs","()",""],["all_specs","Bundler::RubygemsIntegration::Legacy","Bundler/RubygemsIntegration/Legacy.html#method-i-all_specs","()",""],["all_specs","Bundler::RubygemsIntegration::Modern","Bundler/RubygemsIntegration/Modern.html#method-i-all_specs","()",""],["all_tasks","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-all_tasks","()",""],["allow?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-allow-3F","()",""],["allow_git_ops?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-allow_git_ops-3F","()",""],["allow_sudo?","Bundler::Settings","Bundler/Settings.html#method-i-allow_sudo-3F","()",""],["allowed_in_path","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-allowed_in_path","()",""],["already_tagged?","Bundler::GemHelper","Bundler/GemHelper.html#method-i-already_tagged-3F","()",""],["ancestor?","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-ancestor-3F","(other)","<p>Is there a path from `other` to `self` following edges in the dependency\ngraph? @return true iff there …\n"],["api_fetchers","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-api_fetchers","()",""],["app_cache","Bundler","Bundler.html#method-c-app_cache","(custom_path = nil)",""],["app_cache_dirname","Bundler::Source::Git","Bundler/Source/Git.html#method-i-app_cache_dirname","()",""],["app_cache_dirname","Bundler::Source::Path","Bundler/Source/Path.html#method-i-app_cache_dirname","()",""],["app_cache_path","Bundler::Settings","Bundler/Settings.html#method-i-app_cache_path","()",""],["app_cache_path","Bundler::Source::Path","Bundler/Source/Path.html#method-i-app_cache_path","(custom_path = nil)",""],["app_config_path","Bundler","Bundler.html#method-c-app_config_path","()",""],["append_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-append_file","(path, *args, &block)",""],["append_to","Bundler::Injector","Bundler/Injector.html#method-i-append_to","(gemfile_path)",""],["append_to_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-append_to_file","(path, *args, &block)","<p>Append text to a file. Since it depends on insert_into_file, it&#39;s\nreversible.\n<p>Parameters\n<p>path&lt;String&gt; … &mdash; "],["apply","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-apply","(path, config = {})","<p>Loads an external file and execute it in the instance binding.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; The path to …\n"],["apply_auth","Bundler::AnonymizableURI","Bundler/AnonymizableURI.html#method-i-apply_auth","(uri, auth = nil)",""],["apply_func","Bundler::Worker","Bundler/Worker.html#method-i-apply_func","(obj, i)",""],["argument","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-argument","(name, options = {})","<p>Adds an argument to the class and creates an attr_accessor for it.\n<p>Arguments are different from options …\n"],["arguments","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-arguments","()","<p>Returns this class arguments, looking up in the ancestors chain.\n<p>Returns\n<p>Array\n"],["as_unicode","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-as_unicode","()",""],["ask","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-ask","(statement, *args)","<p>Asks something to the user and receives a response.\n<p>If asked to limit the correct responses, you can pass …\n"],["ask","Bundler::Thor::Shell::HTML","Bundler/Thor/Shell/HTML.html#method-i-ask","(statement, color = nil)","<p>Ask something to the user and receives a response.\n<p>Example\n<p>ask(“What is your name?”)\n"],["ask","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-ask","(msg)",""],["ask","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-ask","(message)",""],["ask_and_set","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-ask_and_set","(key, header, message)",""],["ask_and_set_test_framework","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-ask_and_set_test_framework","()",""],["ask_filtered","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-ask_filtered","(statement, color, options)",""],["ask_for_spec_from","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-ask_for_spec_from","(specs)",""],["ask_simply","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-ask_simply","(statement, color, options)",""],["attempt","Bundler::Retry","Bundler/Retry.html#method-i-attempt","(&block)",""],["attempt_to_activate","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-attempt_to_activate","()","<p>Attempts to activate the current {#possibility} @return [void]\n"],["attempt_to_activate_existing_spec","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-attempt_to_activate_existing_spec","(existing_node)","<p>Attempts to activate the current {#possibility} (given that it has already\nbeen activated) @return [void] …\n"],["attempt_to_activate_new_spec","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-attempt_to_activate_new_spec","()","<p>Attempts to activate the current {#possibility} (given that it hasn&#39;t\nalready been activated) @return …\n"],["attempt_to_swap_possibility","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-attempt_to_swap_possibility","()","<p>Attempts to swp the current {#possibility} with the already-activated spec\nwith the given name @return …\n"],["attempts","Bundler::Retry","Bundler/Retry.html#method-i-attempts","(&block)",""],["auto_install","Bundler::CLI","Bundler/CLI.html#method-i-auto_install","()","<p>Automatically invoke `bundle install` and resume if Bundler.settings\nexists. This is set through config …\n"],["available?","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-c-available-3F","()",""],["available?","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-c-available-3F","()",""],["backport_base_dir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-backport_base_dir","()","<p>This backports base_dir which replaces installation path Rubygems 1.8+\n"],["backport_cache_file","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-backport_cache_file","()",""],["backport_ext_builder_monitor","Bundler::RubygemsIntegration::MoreFuture","Bundler/RubygemsIntegration/MoreFuture.html#method-i-backport_ext_builder_monitor","()",""],["backport_segment_generation","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-backport_segment_generation","()","<p>This backports the correct segment generation code from Rubygems 1.4+ by\nmonkeypatching it into the method …\n"],["backport_spec_file","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-backport_spec_file","()",""],["backport_yaml_initialize","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-backport_yaml_initialize","()","<p>This backport fixes the marshaling of @segments.\n"],["banner","Bundler::Thor","Bundler/Thor.html#method-c-banner","(command, namespace = nil, subcommand = false)","<p>The banner for this class. You can customize it if you are invoking the\nthor class by another ways which …\n"],["banner","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-banner","()","<p>The banner for this class. You can customize it if you are invoking the\nthor class by another ways which …\n"],["base_name","Bundler::Source::Git","Bundler/Source/Git.html#method-i-base_name","()",""],["base_path","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-base_path","()",""],["basename","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-basename","()","<p>The basename of the program invoking the thor class.\n"],["before_resolution","Bundler::Molinillo::UI","Bundler/Molinillo/UI.html#method-i-before_resolution","()","<p>Called before resolution begins.\n<p>@return [void]\n"],["before_resolution","Bundler::Resolver","Bundler/Resolver.html#method-i-before_resolution","()",""],["best_available","Bundler::Thor::LineEditor","Bundler/Thor/LineEditor.html#method-c-best_available","()",""],["bin_path","Bundler","Bundler.html#method-c-bin_path","()","<p>Returns absolute location of where binstubs are installed to.\n"],["bin_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-bin_path","(gem, bin, ver)",""],["bindir","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-bindir","()","<p>needed for bundle clean\n"],["binstubs","Bundler::CLI","Bundler/CLI.html#method-i-binstubs","(*gems)",""],["branch","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-branch","()",""],["build","Bundler::Definition","Bundler/Definition.html#method-c-build","(gemfile, lockfile, unlock)","<p>Given a gemfile and lockfile creates a Bundler definition\n<p>@param gemfile [Pathname] Path to Gemfile @param …\n"],["build","Bundler::Index","Bundler/Index.html#method-c-build","()",""],["build","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-build","(spec, skip_validation = false)",""],["build","Bundler::RubygemsIntegration::Future","Bundler/RubygemsIntegration/Future.html#method-i-build","(spec, skip_validation = false)",""],["build","Bundler::RubygemsIntegration::MoreModern","Bundler/RubygemsIntegration/MoreModern.html#method-i-build","(spec, skip_validation = false)","<p>Rubygems 1.8.20 and adds the skip_validation parameter, so that&#39;s when\nwe start passing it through. …\n"],["build_args","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-build_args","()",""],["build_args=","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-build_args-3D","(args)",""],["build_gem","Bundler::GemHelper","Bundler/GemHelper.html#method-i-build_gem","()",""],["build_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-build_gem","(gem_dir, spec)",""],["built_gem_path","Bundler::GemHelper","Bundler/GemHelper.html#method-i-built_gem_path","()",""],["builtin_gem?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-builtin_gem-3F","(spec)",""],["bundle_path","Bundler","Bundler.html#method-c-bundle_path","()","<p>Returns absolute path of where gems are installed on the filesystem.\n"],["bundler_cert_store","Bundler::Fetcher","Bundler/Fetcher.html#method-i-bundler_cert_store","()",""],["bundler_dependency_version","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-bundler_dependency_version","()",""],["ca_file=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-ca_file-3D","(file)","<p>Sets the SSL certificate authority file.\n"],["cache","Bundler","Bundler.html#method-c-cache","()",""],["cache","Bundler::CLI","Bundler/CLI.html#method-i-cache","()",""],["cache","Bundler::Runtime","Bundler/Runtime.html#method-i-cache","(custom_path = nil)",""],["cache","Bundler::Source::Git","Bundler/Source/Git.html#method-i-cache","(spec, custom_path = nil)",""],["cache","Bundler::Source::Path","Bundler/Source/Path.html#method-i-cache","(spec, custom_path = nil)",""],["cache","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cache","(spec, custom_path = nil)",""],["cache_path","Bundler::Source::Git","Bundler/Source/Git.html#method-i-cache_path","()","<p>This is the path which is going to contain a cache of the git repository.\nWhen using the same git repository …\n"],["cached!","Bundler::Source::Path","Bundler/Source/Path.html#method-i-cached-21","()",""],["cached!","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached-21","()",""],["cached!","Bundler::SourceList","Bundler/SourceList.html#method-i-cached-21","()",""],["cached?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-cached-3F","()",""],["cached_built_in_gem","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached_built_in_gem","(spec)",""],["cached_gem","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached_gem","(spec)",""],["cached_path","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached_path","(spec)",""],["cached_revision","Bundler::Source::Git","Bundler/Source/Git.html#method-i-cached_revision","()",""],["cached_specs","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached_specs","()",""],["camel_case","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-camel_case","(str)","<p>Receives a string and convert it to camel case. camel_case returns\nCamelCase.\n<p>Parameters\n<p>String\n"],["can_display_colors?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-can_display_colors-3F","()",""],["can_display_colors?","Bundler::Thor::Shell::Color","Bundler/Thor/Shell/Color.html#method-i-can_display_colors-3F","()",""],["can_display_colors?","Bundler::Thor::Shell::HTML","Bundler/Thor/Shell/HTML.html#method-i-can_display_colors-3F","()",""],["can_install_in_parallel?","Bundler::Installer","Bundler/Installer.html#method-i-can_install_in_parallel-3F","()",""],["can_lock?","Bundler::Source","Bundler/Source.html#method-i-can_lock-3F","(spec)",""],["can_lock?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-can_lock-3F","(spec)",""],["can_retry?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-can_retry-3F","(req, retried_on_ruby_2 = false)","<p>Is the request <code>req</code> idempotent or is retry_change_requests\nallowed.\n<p>If <code>retried_on_ruby_2</code> is true, true …\n"],["capture","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-capture","(*args, &block)",""],["cert=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-cert-3D","(certificate)","<p>For Net::HTTP parity\n"],["cert_store=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-cert_store-3D","(store)","<p>Overrides the default SSL certificate store used for verifying connections.\n"],["certificate=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-certificate-3D","(certificate)","<p>Sets this client&#39;s OpenSSL::X509::Certificate\n"],["chdir","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-chdir","(dir, &blk)",""],["chdir_monitor","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-chdir_monitor","()",""],["check","Bundler::CLI","Bundler/CLI.html#method-i-check","()",""],["check_executable_overwrite","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-check_executable_overwrite","(filename)",""],["check_primary_source_safety","Bundler::Dsl","Bundler/Dsl.html#method-i-check_primary_source_safety","(source)",""],["check_unknown_options!","Bundler::Thor","Bundler/Thor.html#method-c-check_unknown_options-21","(options = {})","<p>Extend check unknown options to accept a hash of conditions.\n<p>Parameters\n<p>options&lt;Hash&gt;: A hash containing …\n"],["check_unknown_options!","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-check_unknown_options-21","()","<p>If you want to raise an error for unknown options, call\ncheck_unknown_options! This is disabled by default …\n"],["checkout","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-checkout","()",""],["chmod","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-chmod","(path, mode, config = {})","<p>Changes the mode of the given file or directory.\n<p>Parameters\n<p>mode&lt;Integer&gt; &mdash; the file mode\n"],["class_option","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-class_option","(name, options = {})","<p>Adds an option to the set of class options\n<p>Parameters\n<p>name&lt;Symbol&gt; &mdash; The name of the argument.\n"],["class_options","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-class_options","(options = nil)","<p>Adds a bunch of options to the set of class options.\n\n<pre>class_options :foo =&gt; false, :bar =&gt; :required, :baz ...</pre>\n"],["clean","Bundler::CLI","Bundler/CLI.html#method-i-clean","()",""],["clean","Bundler::Runtime","Bundler/Runtime.html#method-i-clean","(dry_run = false)",""],["clean?","Bundler::GemHelper","Bundler/GemHelper.html#method-i-clean-3F","()",""],["clean_exec","Bundler","Bundler.html#method-c-clean_exec","(*args)",""],["clean_load_path","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-clean_load_path","()",""],["clean_req","Bundler::Resolver::Molinillo::VersionConflict","Bundler/Resolver/Molinillo/VersionConflict.html#method-i-clean_req","(req)",""],["clean_system","Bundler","Bundler.html#method-c-clean_system","(*args)",""],["cleanup","Bundler","Bundler.html#method-c-cleanup","()",""],["clear_gemspec_cache","Bundler","Bundler.html#method-c-clear_gemspec_cache","()",""],["clear_paths","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-clear_paths","()",""],["combine_rubygems_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-combine_rubygems_sources","()",""],["command_help","Bundler::Thor","Bundler/Thor.html#method-c-command_help","(shell, command_name)","<p>Prints help information for the given command.\n<p>Parameters\n<p>shell&lt;Bundler::Thor::Shell&gt; command_name …\n"],["commands","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-commands","()","<p>Returns the commands for this Bundler::Thor class.\n<p>Returns\n<p>OrderedHash &mdash; An ordered hash with commands names …\n"],["comment_lines","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-comment_lines","(path, flag, *args)","<p>Comment all lines matching a given regex.  It will leave the space which\nexisted before the beginning …\n"],["committed?","Bundler::GemHelper","Bundler/GemHelper.html#method-i-committed-3F","()",""],["completion_options","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-completion_options","()",""],["completion_proc","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-completion_proc","()",""],["concat","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-concat","(string)",""],["config","Bundler::CLI","Bundler/CLI.html#method-i-config","(*args)",""],["config_map","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-config_map","()",""],["configuration","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-configuration","()",""],["configure","Bundler","Bundler.html#method-c-configure","()",""],["configure_gem_home","Bundler","Bundler.html#method-c-configure_gem_home","()",""],["configure_gem_home_and_path","Bundler","Bundler.html#method-c-configure_gem_home_and_path","()",""],["configured_uri_for","Bundler::Fetcher","Bundler/Fetcher.html#method-i-configured_uri_for","(uri)",""],["confirm","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-confirm","(msg, newline = nil)",""],["confirm","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-confirm","(message, newline = nil)",""],["confirm_without_groups","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-confirm_without_groups","()",""],["connection","Bundler::Fetcher","Bundler/Fetcher.html#method-i-connection","()",""],["connection_close?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-connection_close-3F","(header)","<p>Workaround for missing Net::HTTPHeader#connection_close? on Ruby 1.8\n"],["connection_for","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-connection_for","(uri)","<p>Creates a new connection for <code>uri</code>\n"],["connection_keep_alive?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-connection_keep_alive-3F","(header)","<p>Workaround for missing Net::HTTPHeader#connection_keep_alive? on Ruby 1.8\n"],["console","Bundler::CLI","Bundler/CLI.html#method-i-console","(group = nil)",""],["contains?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-contains-3F","(commit)",""],["converge_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-converge_dependencies","()",""],["converge_locals","Bundler::Definition","Bundler/Definition.html#method-i-converge_locals","()","<p>Get all locals and override their matching sources. Return true if any of\nthe locals changed (for example, …\n"],["converge_locked_specs","Bundler::Definition","Bundler/Definition.html#method-i-converge_locked_specs","()","<p>Remove elements from the locked specs that are expired. This will most\ncommonly happen if the Gemfile …\n"],["converge_paths","Bundler::Definition","Bundler/Definition.html#method-i-converge_paths","()",""],["converge_sources","Bundler::Definition","Bundler/Definition.html#method-i-converge_sources","()",""],["copy_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-copy_file","(source, *args, &block)","<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">copy_file</span> <span class=\"ruby-string\">&quot;README&quot;</span>, <span class=\"ruby-string\">&quot;doc/README&quot;</span>\n\n<span class=\"ruby-identifier\">copy_file</span> <span class=\"ruby-string\">&quot;doc/README&quot;</span>\n</pre>\n"],["copy_to","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-copy_to","(destination, submodules=false)",""],["create_bundle_path","Bundler::Installer","Bundler/Installer.html#method-i-create_bundle_path","()",""],["create_conflict","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-create_conflict","()","<p>@return [Conflict] a {Conflict} that reflects the failure to activate\n\n<pre>the {#possibility} in conjunction ...</pre>\n"],["create_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-create_file","(destination, *args, &block)","<p>Create a new file relative to the destination root with the given data,\nwhich is the return value of …\n"],["create_link","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-create_link","(destination, *args, &block)","<p>Create a new file relative to the destination root from the given source.\n<p>Parameters\n<p>destination&lt;String&gt; … &mdash; "],["current_command_chain","Bundler::Thor::Invocation","Bundler/Thor/Invocation.html#method-i-current_command_chain","()","<p>Make the current command chain accessible with in a\nBundler::Thor-(sub)command\n"],["current_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-current_dependencies","()",""],["current_dependencies","Bundler::Environment","Bundler/Environment.html#method-i-current_dependencies","()",""],["current_env?","Bundler::Dependency","Bundler/Dependency.html#method-i-current_env-3F","()",""],["current_platform?","Bundler::Dependency","Bundler/Dependency.html#method-i-current_platform-3F","()",""],["current_ruby","Bundler","Bundler.html#method-c-current_ruby","()","<p>Returns current version of Ruby\n<p>@return [CurrentRuby] Current version of Ruby\n"],["debug","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-debug","(depth = 0, &block)","<p>Calls the {#resolver_ui}&#39;s {UI#debug} method @param [Integer] depth the\ndepth of the {#states} stack …\n"],["debug","Bundler::Molinillo::UI","Bundler/Molinillo/UI.html#method-i-debug","(depth = 0)","<p>Conveys debug information to the user.\n<p>@param [Integer] depth the current depth of the resolution process. …\n"],["debug","Bundler::Resolver","Bundler/Resolver.html#method-i-debug","(depth = 0)","<p>Conveys debug information to the user.\n<p>@param [Integer] depth the current depth of the resolution process. …\n"],["debug","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-debug","(msg, newline = nil)",""],["debug","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-debug","(message, newline = nil)",""],["debug?","Bundler::Molinillo::UI","Bundler/Molinillo/UI.html#method-i-debug-3F","()","<p>Whether or not debug messages should be printed. By default, whether or not\nthe `MOLINILLO_DEBUG` environment …\n"],["debug?","Bundler::Resolver","Bundler/Resolver.html#method-i-debug-3F","()",""],["debug?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-debug-3F","()",""],["debug?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-debug-3F","()",""],["default_attempts","Bundler::Retry","Bundler/Retry.html#method-i-default_attempts","()",""],["default_bundle_dir","Bundler","Bundler.html#method-c-default_bundle_dir","()",""],["default_bundle_dir","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-default_bundle_dir","()",""],["default_command","Bundler::Thor","Bundler/Thor.html#method-c-default_command","(meth = nil)","<p>Sets the default command when thor is executed without an explicit command\nto be called.\n<p>Parameters\n<p>meth&lt;Symbol&gt; … &mdash; "],["default_gemfile","Bundler","Bundler.html#method-c-default_gemfile","()",""],["default_gemfile","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-default_gemfile","()",""],["default_lockfile","Bundler","Bundler.html#method-c-default_lockfile","()",""],["default_lockfile","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-default_lockfile","()",""],["default_task","Bundler::Thor","Bundler/Thor.html#method-c-default_task","(meth = nil)",""],["define_task","Bundler::Deployment","Bundler/Deployment.html#method-c-define_task","(context, task_method = :task, opts = {})",""],["definition","Bundler","Bundler.html#method-c-definition","(unlock = nil)","<p>Returns an instance of Bundler::Definition for given Gemfile and lockfile\n<p>@param unlock [Hash, Boolean …\n"],["delete","Bundler::Settings","Bundler/Settings.html#method-i-delete","(key)",""],["dependencies","Bundler::Environment","Bundler/Environment.html#method-i-dependencies","()",""],["dependencies_count_for","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-dependencies_count_for","(definition)",""],["dependencies_for","Bundler::Molinillo::SpecificationProvider","Bundler/Molinillo/SpecificationProvider.html#method-i-dependencies_for","(specification)","<p>Returns the dependencies of `specification`. @note This method should be\n&#39;pure&#39;, i.e. the return …\n"],["dependencies_for","Bundler::Resolver","Bundler/Resolver.html#method-i-dependencies_for","(specification)",""],["dependencies_for","Bundler::Runtime","Bundler/Runtime.html#method-i-dependencies_for","(*groups)",""],["dependencies_for_activated_platforms","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-dependencies_for_activated_platforms","()",""],["dependencies_for_source_changed?","Bundler::Definition","Bundler/Definition.html#method-i-dependencies_for_source_changed-3F","(source)",""],["dependencies_to_gemfile","Gem::Specification","Gem/Specification.html#method-i-dependencies_to_gemfile","(dependencies, group = nil)",""],["dependency_api_uri","Bundler::Fetcher","Bundler/Fetcher.html#method-i-dependency_api_uri","(gem_names = [])",""],["dependency_names","Bundler::Index","Bundler/Index.html#method-i-dependency_names","()",""],["deq","Bundler::Worker","Bundler/Worker.html#method-i-deq","()","<p>Retrieves results of job function being executed in worker pool\n"],["desc","Bundler::Thor","Bundler/Thor.html#method-c-desc","(usage, description, options = {})","<p>Defines the usage and the description of the next command.\n<p>Parameters\n<p>usage&lt;String&gt; description&lt;String&gt; …\n"],["desc","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-desc","(description = nil)","<p>The description for this Bundler::Thor::Group. If none is provided, but a\nsource root exists, tries to …\n"],["descendent?","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-descendent-3F","(other)",""],["destination_root","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-destination_root","()","<p>Returns the root for this thor class (also aliased as destination root).\n"],["destination_root=","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-destination_root-3D","(root)","<p>Sets the root for this thor class. Relatives path are added to the\ndirectory where the script was invoked …\n"],["detach_vertex_named","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-detach_vertex_named","(name)","<p>Detaches the {#vertex_named} `name` {Vertex} from the graph, recursively\nremoving any non-root vertices …\n"],["detect_idle_timeout","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-c-detect_idle_timeout","(uri, max = 10)","<p>Use this method to detect the idle timeout of the host at <code>uri</code>.\nThe value returned can be used to configure …\n"],["diff","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-diff","(other)","<p>Returns a tuple of these things:\n\n<pre>[diff, this, other]\nThe priority of attributes are\n1. engine\n2. ruby_version ...</pre>\n"],["directory","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-directory","(source, *args, &block)","<p>Copies recursively the files from source directory to root directory. If\nany of the files finishes with …\n"],["download_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-download_gem","(spec, uri, path)",""],["download_gem","Bundler::RubygemsIntegration::Future","Bundler/RubygemsIntegration/Future.html#method-i-download_gem","(spec, uri, path)",""],["download_gem_from_uri","Bundler::Fetcher","Bundler/Fetcher.html#method-c-download_gem_from_uri","(spec, uri)",""],["dynamic_width","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-dynamic_width","()","<p>Calculate the dynamic width of the terminal\n"],["dynamic_width_stty","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-dynamic_width_stty","()",""],["dynamic_width_tput","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-dynamic_width_tput","()",""],["each","Bundler::Index","Bundler/Index.html#method-i-each","(&blk)",""],["each","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-each","()","<p>Enumerates through the vertices of the graph. @return [Array&lt;Vertex&gt;]\nThe graph&#39;s vertices. …\n"],["echo?","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-i-echo-3F","()",""],["empty?","Bundler::Index","Bundler/Index.html#method-i-empty-3F","()",""],["empty_directory","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-empty_directory","(destination, config = {})","<p>Creates an empty directory.\n<p>Parameters\n<p>destination&lt;String&gt; &mdash; the relative path to the destination root. …\n"],["encode_with","Gem::Dependency","Gem/Dependency.html#method-i-encode_with","(coder)",""],["end_resolution","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-end_resolution","()","<p>Ends the resolution process @return [void]\n"],["engine","Bundler::SystemRubyVersion","Bundler/SystemRubyVersion.html#method-i-engine","()",""],["engine_version","Bundler::SystemRubyVersion","Bundler/SystemRubyVersion.html#method-i-engine_version","()",""],["enq","Bundler::Worker","Bundler/Worker.html#method-i-enq","(obj)","<p>Enqueue a request to be executed in the worker pool\n<p>@param obj [String] mostly it is name of spec that …\n"],["ensure_equivalent_gemfile_and_lockfile","Bundler::Definition","Bundler/Definition.html#method-i-ensure_equivalent_gemfile_and_lockfile","(explicit_flag = false)",""],["ensure_safe_gem_name","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-ensure_safe_gem_name","(name, constant_array)",""],["env","Bundler::CLI","Bundler/CLI.html#method-i-env","()",""],["env","Bundler::Dsl","Bundler/Dsl.html#method-i-env","(name)",""],["environment","Bundler","Bundler.html#method-c-environment","()",""],["eql?","Bundler::DepProxy","Bundler/DepProxy.html#method-i-eql-3F","(o)",""],["eql?","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-eql-3F","(o)",""],["eql?","Bundler::Source::Path","Bundler/Source/Path.html#method-i-eql-3F","(o)",""],["eql?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-eql-3F","(o)",""],["error","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-error","(statement)","<p>Called if something goes wrong during the execution. This is used by\nBundler::Thor internally and should …\n"],["error","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-error","(msg, newline = nil)",""],["error","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-error","(message, newline = nil)",""],["error_message","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-error_message","(connection)","<p>Returns an error message containing the number of requests performed on\nthis connection\n"],["escape","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-escape","(str)","<p>URI::escape wrapper\n"],["escape_globs","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-escape_globs","(path)","<p>Returns a string that has had any glob characters escaped. The glob\ncharacters are `* ? { } [ ]`.\n<p>Examples …\n"],["eval_gemfile","Bundler::Dsl","Bundler/Dsl.html#method-i-eval_gemfile","(gemfile, contents = nil)",""],["eval_gemspec","Bundler","Bundler.html#method-c-eval_gemspec","(path, contents)",""],["eval_yaml_gemspec","Bundler","Bundler.html#method-c-eval_yaml_gemspec","(path, contents)",""],["evaluate","Bundler::Dsl","Bundler/Dsl.html#method-c-evaluate","(gemfile, lockfile, unlock)",""],["exec","Bundler::CLI","Bundler/CLI.html#method-i-exec","(*args)",""],["executables","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-executables","()","<p>needed for binstubs\n"],["exit_on_failure?","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-exit_on_failure-3F","()","<p>A flag that makes the process exit with status 1 if any error happens.\n"],["expand","Bundler::Source::Path","Bundler/Source/Path.html#method-i-expand","(somepath)",""],["expand_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-expand_dependencies","(dependencies, remote = false)",""],["expanded_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-expanded_dependencies","()",""],["expanded_path","Bundler::Source::Path","Bundler/Source/Path.html#method-i-expanded_path","()",""],["expired?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-expired-3F","(connection)","<p>Returns true if the connection should be reset due to an idle timeout, or\nmaximum request count, false …\n"],["ext_lock","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-ext_lock","()",""],["ext_lock","Bundler::RubygemsIntegration::MoreFuture","Bundler/RubygemsIntegration/MoreFuture.html#method-i-ext_lock","()",""],["extension_dir","Gem::Specification","Gem/Specification.html#method-i-extension_dir","()",""],["extension_dir_name","Bundler::Source::Git","Bundler/Source/Git.html#method-i-extension_dir_name","()",""],["extract_circular_gems","Bundler::SpecSet","Bundler/SpecSet.html#method-i-extract_circular_gems","(error)",""],["fail","Bundler::Retry","Bundler/Retry.html#method-i-fail","(e)",""],["fetch","Bundler::Fetcher","Bundler/Fetcher.html#method-i-fetch","(uri, counter = 0)",""],["fetch_all_remote_specs","Bundler::Fetcher","Bundler/Fetcher.html#method-i-fetch_all_remote_specs","()","<p>fetch from modern index: specs.4.8.gz\n"],["fetch_all_remote_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-fetch_all_remote_specs","()",""],["fetch_all_remote_specs","Bundler::RubygemsIntegration::Future","Bundler/RubygemsIntegration/Future.html#method-i-fetch_all_remote_specs","()",""],["fetch_dependency_remote_specs","Bundler::Fetcher","Bundler/Fetcher.html#method-i-fetch_dependency_remote_specs","(gem_names)","<p>fetch from Gemcutter Dependency Endpoint API\n"],["fetch_gem","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-fetch_gem","(spec)",""],["fetch_latest_specs","Bundler::CLI::Show","Bundler/CLI/Show.html#method-i-fetch_latest_specs","()",""],["fetch_platform","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-fetch_platform","()",""],["fetch_platform","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-fetch_platform","()","<p>Needed before installs, since the arch matters then and quick specs\ndon&#39;t bother to include the arch …\n"],["fetch_prerelease_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-fetch_prerelease_specs","()",""],["fetch_remote_specs","Bundler::Fetcher","Bundler/Fetcher.html#method-i-fetch_remote_specs","(gem_names, full_dependency_list = [], last_spec_list = [])","<p>fetch index\n"],["fetch_spec","Bundler::Fetcher","Bundler/Fetcher.html#method-i-fetch_spec","(spec)","<p>fetch a gem specification\n"],["fetch_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-fetch_specs","(all, pre, &blk)",""],["fetch_specs","Bundler::RubygemsIntegration::Future","Bundler/RubygemsIntegration/Future.html#method-i-fetch_specs","(source, name)",""],["fetch_uri","Bundler::Fetcher","Bundler/Fetcher.html#method-i-fetch_uri","()",""],["fetchers","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-fetchers","()",""],["file_collision","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-file_collision","(destination)","<p>Deals with file collision and returns true if the file should be\noverwritten and false otherwise. If …\n"],["find_by_namespace","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-find_by_namespace","(namespace)","<p>Receives a namespace and search for it in the Bundler::Thor::Base\nsubclasses.\n<p>Parameters\n<p>namespace&lt;String&gt; … &mdash; "],["find_class_and_command_by_namespace","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-find_class_and_command_by_namespace","(namespace, fallback = true)","<p>Receives a namespace and tries to retrieve a Bundler::Thor or\nBundler::Thor::Group class from it. It …\n"],["find_class_and_task_by_namespace","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-find_class_and_task_by_namespace","(namespace, fallback = true)",""],["find_command_possibilities","Bundler::Thor","Bundler/Thor.html#method-c-find_command_possibilities","(meth)","<p>this is the logic that takes the command name passed in by the user and\ndetermines whether it is an unambiguous …\n"],["find_directory","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-find_directory","(*names)",""],["find_file","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-find_file","(*names)",""],["find_gemfile","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-find_gemfile","()",""],["find_in_source_paths","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-find_in_source_paths","(file)","<p>Receives a file or directory and search for it in the source paths.\n"],["find_name","Bundler::RubygemsIntegration::Future","Bundler/RubygemsIntegration/Future.html#method-i-find_name","(name)",""],["find_name","Bundler::RubygemsIntegration::Legacy","Bundler/RubygemsIntegration/Legacy.html#method-i-find_name","(name)",""],["find_name","Bundler::RubygemsIntegration::Modern","Bundler/RubygemsIntegration/Modern.html#method-i-find_name","(name)",""],["find_state_for","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-find_state_for","(requirement)","<p>@return [ResolutionState] the state whose `requirement` is the given\n\n<pre>`requirement`.</pre>\n"],["find_task_possibilities","Bundler::Thor","Bundler/Thor.html#method-c-find_task_possibilities","(meth)",""],["finish","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-finish","(connection, thread = Thread.current)","<p>Finishes the Net::HTTP <code>connection</code>\n"],["fixup_dependency_types!","Bundler::Definition","Bundler/Definition.html#method-i-fixup_dependency_types-21","()",""],["for","Bundler::SpecSet","Bundler/SpecSet.html#method-i-for","(dependencies, skip = [], check = false, match_current_platform = false)",""],["for?","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-for-3F","(platform)",""],["formatted_usage","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-formatted_usage","(klass, namespace = true, subcommand = false)","<p>Returns the formatted usage by injecting given required arguments and\nrequired options into the given …\n"],["from_lock","Bundler::Source::Git","Bundler/Source/Git.html#method-c-from_lock","(options)",""],["from_lock","Bundler::Source::Path","Bundler/Source/Path.html#method-c-from_lock","(options)",""],["from_lock","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-c-from_lock","(options)",""],["from_superclass","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-from_superclass","(method, default = nil)","<p>Retrieves a value from superclass. If it reaches the baseclass, returns\ndefault.\n"],["full_gem_path","Gem::Specification","Gem/Specification.html#method-i-full_gem_path","()",""],["full_name","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-full_name","()",""],["full_name","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-full_name","()",""],["g","Bundler::Graph::GraphVizClient","Bundler/Graph/GraphVizClient.html#method-i-g","()",""],["gem","Bundler::CLI","Bundler/CLI.html#method-i-gem","(name)",""],["gem","Bundler::Dsl","Bundler/Dsl.html#method-i-gem","(name, *args)",""],["gem_bindir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_bindir","()",""],["gem_cache","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_cache","()",""],["gem_dir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_dir","()",""],["gem_dir","Gem::Specification","Gem/Specification.html#method-i-gem_dir","()",""],["gem_from_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_from_path","(path, policy = nil)",""],["gem_from_path","Bundler::RubygemsIntegration::Future","Bundler/RubygemsIntegration/Future.html#method-i-gem_from_path","(path, policy = nil)",""],["gem_mirrors","Bundler::Settings","Bundler/Settings.html#method-i-gem_mirrors","()",""],["gem_not_found_message","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-gem_not_found_message","(missing_gem_name, alternatives)",""],["gem_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_path","()",""],["gem_platforms","Bundler::Dependency","Bundler/Dependency.html#method-i-gem_platforms","(valid_platforms)",""],["gem_push?","Bundler::GemHelper","Bundler/GemHelper.html#method-i-gem_push-3F","()",""],["gem_version","Bundler::SystemRubyVersion","Bundler/SystemRubyVersion.html#method-i-gem_version","()",""],["gems_installed_for","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-gems_installed_for","(definition)",""],["gemspec","Bundler::Dsl","Bundler/Dsl.html#method-i-gemspec","(opts = nil)",""],["gemspec","Bundler::GemHelper","Bundler/GemHelper.html#method-c-gemspec","(&block)",""],["gemspec_cached_path","Bundler::Fetcher","Bundler/Fetcher.html#method-i-gemspec_cached_path","(spec_file_name)","<p>cached gem specification path, if one exists\n"],["generate_bin","Bundler::Source::Path","Bundler/Source/Path.html#method-i-generate_bin","(spec, disable_extensions = false)",""],["generate_bin","Bundler::Source::Path::Installer","Bundler/Source/Path/Installer.html#method-i-generate_bin","()",""],["generate_bundler_executable_stubs","Bundler::Installer","Bundler/Installer.html#method-i-generate_bundler_executable_stubs","(spec, options = {})",""],["generate_standalone","Bundler::Installer","Bundler/Installer.html#method-i-generate_standalone","(groups)",""],["generate_standalone_bundler_executable_stubs","Bundler::Installer","Bundler/Installer.html#method-i-generate_standalone_bundler_executable_stubs","(spec)",""],["generic","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-generic","(p)",""],["get","Bundler::SourceList","Bundler/SourceList.html#method-i-get","(source)",""],["get","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-get","(source, *args, &block)","<p>Gets the content at the given address and places it at the given relative\ndestination. If a block is …\n"],["get_console","Bundler::CLI::Console","Bundler/CLI/Console.html#method-i-get_console","(name)",""],["get_constant","Bundler::CLI::Console","Bundler/CLI/Console.html#method-i-get_constant","(name)",""],["get_input","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-i-get_input","()",""],["git","Bundler::Dsl","Bundler/Dsl.html#method-i-git","(uri, options = {}, &blk)",""],["git","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-git","(command, check_errors=true)",""],["git_null","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-git_null","(command)","<p>TODO: Do not rely on /dev/null. Given that open3 is not cross platform\nuntil Ruby 1.9.3, the best solution …\n"],["git_present?","Bundler","Bundler.html#method-c-git_present-3F","()",""],["git_proxy","Bundler::Source::Git","Bundler/Source/Git.html#method-i-git_proxy","()",""],["git_push","Bundler::GemHelper","Bundler/GemHelper.html#method-i-git_push","()",""],["git_retry","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-git_retry","(command)",""],["git_source","Bundler::Dsl","Bundler/Dsl.html#method-i-git_source","(name, &block)",""],["git_version","Bundler::Env","Bundler/Env.html#method-i-git_version","()",""],["git_version","Gem::Specification","Gem/Specification.html#method-i-git_version","()",""],["github","Bundler::Dsl","Bundler/Dsl.html#method-i-github","(repo, options = {})",""],["glob_pattern","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-glob_pattern","()",""],["global_config_file","Bundler::Settings","Bundler/Settings.html#method-i-global_config_file","()",""],["globs_for","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-globs_for","(path)","<p>Where to look for Bundler::Thor files.\n"],["group","Bundler::Dsl","Bundler/Dsl.html#method-i-group","(*args, &blk)",""],["group","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-group","(name = nil)","<p>Defines the group. This is used when thor list is invoked so you can\nspecify that only commands from …\n"],["groups","Bundler::Definition","Bundler/Definition.html#method-i-groups","()",""],["groups","Gem::Specification","Gem/Specification.html#method-i-groups","()",""],["gsub_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-gsub_file","(path, flag, *args, &block)","<p>Run a regular expression replacement on a file.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed …\n"],["guard_clean","Bundler::GemHelper","Bundler/GemHelper.html#method-i-guard_clean","()",""],["handle_argument_error?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-handle_argument_error-3F","(instance, error, caller)",""],["handle_no_command_error","Bundler::CLI","Bundler/CLI.html#method-c-handle_no_command_error","(command, has_namespace = $thor_runner)",""],["handle_no_method_error?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-handle_no_method_error-3F","(instance, error, caller)",""],["has_app_cache?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-has_app_cache-3F","()",""],["has_app_cache?","Bundler::Source::Path","Bundler/Source/Path.html#method-i-has_app_cache-3F","()",""],["has_local_dependencies?","Bundler::Definition","Bundler/Definition.html#method-i-has_local_dependencies-3F","()",""],["has_revision_cached?","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-has_revision_cached-3F","()",""],["has_rubygems_remotes?","Bundler::Definition","Bundler/Definition.html#method-i-has_rubygems_remotes-3F","()",""],["hash","Bundler::DepProxy","Bundler/DepProxy.html#method-i-hash","()",""],["hash","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-hash","()","<p>@return [Fixnum] a hash for the vertex based upon its {#name}\n"],["hash","Bundler::Source::Git","Bundler/Source/Git.html#method-i-hash","()",""],["hash","Bundler::Source::Path","Bundler/Source/Path.html#method-i-hash","()",""],["hash","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-hash","()",""],["hash","Gem::Platform","Gem/Platform.html#method-i-hash","()",""],["help","Bundler::CLI","Bundler/CLI.html#method-i-help","(cli = nil)",""],["help","Bundler::Thor","Bundler/Thor.html#method-i-help","(command = nil, subcommand = false)",""],["help","Bundler::Thor","Bundler/Thor.html#method-c-help","(shell, subcommand = false)","<p>Prints help information for this class.\n<p>Parameters\n<p>shell&lt;Bundler::Thor::Shell&gt;\n"],["help","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-help","(shell)","<p>Prints help information.\n<p>Options\n<p>short &mdash; When true, shows only usage.\n"],["hidden?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-hidden-3F","()",""],["hidden?","Bundler::Thor::HiddenCommand","Bundler/Thor/HiddenCommand.html#method-i-hidden-3F","()",""],["home","Bundler","Bundler.html#method-c-home","()",""],["host","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-host","()",""],["http_version","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-http_version","(uri)","<p>Returns the HTTP protocol version for <code>uri</code>\n"],["idempotent?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-idempotent-3F","(req)","<p>Is <code>req</code> idempotent according to RFC 2616?\n"],["identifier","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-identifier","()",""],["ignore_config?","Bundler::Settings","Bundler/Settings.html#method-i-ignore_config-3F","()",""],["in_bundle?","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-in_bundle-3F","()",""],["in_locked_deps?","Bundler::Definition","Bundler/Definition.html#method-i-in_locked_deps-3F","(dep, d)",""],["in_path","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-in_path","(&blk)",""],["in_root","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-in_root","()","<p>Goes to the root and execute the given block.\n"],["included","Bundler::Thor::RakeCompat","Bundler/Thor/RakeCompat.html#method-c-included","(base)",""],["incoming_edges","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-incoming_edges","()","<p>@return [Array&lt;Edge&gt;] the edges of {#graph} that have `self` as their\n\n<pre>{Edge#destination}</pre>\n"],["index","Bundler::Definition","Bundler/Definition.html#method-i-index","()",""],["indicate_progress","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-indicate_progress","()","<p>Indicates progress roughly once every second @return [void]\n"],["indicate_progress","Bundler::Molinillo::UI","Bundler/Molinillo/UI.html#method-i-indicate_progress","()","<p>Called roughly every {#progress_rate}, this method should convey progress\nto the user.\n<p>@return [void] …\n"],["indicate_progress","Bundler::Resolver","Bundler/Resolver.html#method-i-indicate_progress","()",""],["inflate","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-inflate","(obj)",""],["info","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-info","(msg, newline = nil)",""],["info","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-info","(message, newline = nil)",""],["inherited","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-inherited","(klass)","<p>Everytime someone inherits from a Bundler::Thor class, register the klass\nand file into baseclass.\n"],["init","Bundler::CLI","Bundler/CLI.html#method-i-init","()",""],["initial_state","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-initial_state","()","<p>Creates the initial state for the resolution, based upon the {#requested}\ndependencies @return [DependencyState] …\n"],["initialize_copy","Bundler::Index","Bundler/Index.html#method-i-initialize_copy","(o)",""],["initialize_copy","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-initialize_copy","(other)","<p>Initializes a copy of a {DependencyGraph}, ensuring that all {#vertices}\nhave the correct {Vertex#graph} …\n"],["initialize_copy","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-initialize_copy","(o)",""],["inject","Bundler::CLI","Bundler/CLI.html#method-i-inject","(name, version, *gems)",""],["inject","Bundler::Injector","Bundler/Injector.html#method-i-inject","(gemfile_path, lockfile_path)",""],["inject","Bundler::Injector","Bundler/Injector.html#method-c-inject","(new_deps)",""],["inject_into_class","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-inject_into_class","(path, klass, *args, &block)","<p>Injects text right after the class definition. Since it depends on\ninsert_into_file, it&#39;s reversible. …\n"],["inject_into_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-inject_into_file","(destination, *args, &block)",""],["insert_into_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-insert_into_file","(destination, *args, &block)","<p>Injects the given content into a file. Different from gsub_file, this\nmethod is reversible.\n<p>Parameters …\n"],["inside","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-inside","(dir = \"\", config = {}, &block)","<p>Do something in the root or on a provided subfolder. If a relative path is\ngiven it&#39;s referenced …\n"],["inspect","Bundler::Environment","Bundler/Environment.html#method-i-inspect","()",""],["inspect","Bundler::Fetcher","Bundler/Fetcher.html#method-i-inspect","()",""],["inspect","Bundler::Index","Bundler/Index.html#method-i-inspect","()",""],["inspect","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["inspect","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["install","Bundler::CLI","Bundler/CLI.html#method-i-install","()",""],["install","Bundler::CLI::Package","Bundler/CLI/Package.html#method-i-install","()",""],["install","Bundler::GemHelper","Bundler/GemHelper.html#method-i-install","()",""],["install","Bundler::Installer","Bundler/Installer.html#method-c-install","(root, definition, options = {})","<p>Begins the installation process for Bundler. For more information see the\n#run method on this class. …\n"],["install","Bundler::Source::Git","Bundler/Source/Git.html#method-i-install","(spec)",""],["install","Bundler::Source::Path","Bundler/Source/Path.html#method-i-install","(spec)",""],["install","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-install","(spec)",""],["install_gem","Bundler::GemHelper","Bundler/GemHelper.html#method-i-install_gem","(built_gem_path=nil)",""],["install_gem_from_spec","Bundler::Installer","Bundler/Installer.html#method-i-install_gem_from_spec","(spec, standalone = false, worker = 0)",""],["install_in_parallel","Bundler::Installer","Bundler/Installer.html#method-i-install_in_parallel","(size, standalone)",""],["install_path","Bundler","Bundler.html#method-c-install_path","()",""],["install_path","Bundler::Source::Git","Bundler/Source/Git.html#method-i-install_path","()","<p>This is the path which is going to contain a specific checkout of the git\nrepository. When using local …\n"],["install_sequentially","Bundler::Installer","Bundler/Installer.html#method-i-install_sequentially","(standalone)",""],["install_tasks","Bundler::GemHelper","Bundler/GemHelper.html#method-c-install_tasks","(opts = {})",""],["installed_specs","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-installed_specs","()",""],["invoke","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-invoke","(*names, &block)","<p>Invoke the given namespace or class given. It adds an instance method that\nwill invoke the klass and …\n"],["invoke","Bundler::Thor::Invocation","Bundler/Thor/Invocation.html#method-i-invoke","(name = nil, *args)","<p>Receives a name and invokes it. The name can be a string (either “command”\nor “namespace:command”), …\n"],["invoke_from_option","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-invoke_from_option","(*names, &block)","<p>Invoke a thor class based on the value supplied by the user to the given\noption named “name”. …\n"],["invoke_with_padding","Bundler::Thor::Invocation","Bundler/Thor/Invocation.html#method-i-invoke_with_padding","(*args)","<p>Invokes using shell padding.\n"],["is_bool","Bundler::Settings","Bundler/Settings.html#method-i-is_bool","(key)",""],["is_reachable_from?","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-is_reachable_from-3F","(other)",""],["issues_url","Bundler","Bundler.html#method-c-issues_url","(exception)",""],["jruby?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-jruby-3F","()",""],["jruby_18?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-jruby_18-3F","()",""],["jruby_19?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-jruby_19-3F","()",""],["keep_trying?","Bundler::Retry","Bundler/Retry.html#method-i-keep_trying-3F","()",""],["key=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-key-3D","(key)","<p>For Net::HTTP parity\n"],["key_for","Bundler::Settings","Bundler/Settings.html#method-i-key_for","(key)",""],["last_attempt?","Bundler::Retry","Bundler/Retry.html#method-i-last_attempt-3F","()",""],["level","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-level","(name = nil)",""],["level","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-level","(name = nil)",""],["level=","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-level-3D","(level)",""],["level=","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-level-3D","(name)",""],["levenshtein_distance","Bundler::SimilarityDetector","Bundler/SimilarityDetector.html#method-i-levenshtein_distance","(this, that, ins=2, del=2, sub=1)","<p>www.informit.com/articles/article.aspx?p=683059&seqNum=36\n"],["licenses","Bundler::CLI","Bundler/CLI.html#method-i-licenses","()",""],["link_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-link_file","(source, *args, &block)","<p>Links the file from the relative source to the relative destination. If the\ndestination is not given …\n"],["load","Bundler","Bundler.html#method-c-load","()",""],["load_config","Bundler::Settings","Bundler/Settings.html#method-i-load_config","(config_file)",""],["load_gemspec","Bundler","Bundler.html#method-c-load_gemspec","(file)",""],["load_gemspec_uncached","Bundler","Bundler.html#method-c-load_gemspec_uncached","(file)",""],["load_marshal","Bundler","Bundler.html#method-c-load_marshal","(data)",""],["load_paths","Gem::Specification","Gem/Specification.html#method-i-load_paths","()",""],["load_spec_files","Bundler::Source::Git","Bundler/Source/Git.html#method-i-load_spec_files","()",""],["load_spec_files","Bundler::Source::Path","Bundler/Source/Path.html#method-i-load_spec_files","()",""],["load_thorfile","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-load_thorfile","(path, content = nil, debug = false)","<p>Receives a path and load the thor file in the path. The file is evaluated\ninside the sandbox to avoid …\n"],["loaded_from","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-loaded_from","(spec)",""],["loaded_from","Gem::Specification","Gem/Specification.html#method-i-loaded_from","()",""],["loaded_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-loaded_specs","(name)",""],["local?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-local-3F","()",""],["local_config_file","Bundler::Settings","Bundler/Settings.html#method-i-local_config_file","()",""],["local_method?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-local_method-3F","(instance, name)",""],["local_override!","Bundler::Source::Git","Bundler/Source/Git.html#method-i-local_override-21","(path)",""],["local_overrides","Bundler::Settings","Bundler/Settings.html#method-i-local_overrides","()",""],["local_search","Bundler::Index","Bundler/Index.html#method-i-local_search","(query, base = nil)",""],["local_specification_path","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-local_specification_path","()",""],["local_specs","Bundler::Source::Path","Bundler/Source/Path.html#method-i-local_specs","(*)",""],["locations","Bundler::Settings","Bundler/Settings.html#method-i-locations","(key)",""],["lock","Bundler::Definition","Bundler/Definition.html#method-i-lock","(file)",""],["lock","Bundler::Environment","Bundler/Environment.html#method-i-lock","()",""],["lock_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-lock_sources","()",""],["locked_gems","Bundler","Bundler.html#method-c-locked_gems","()",""],["locked_requirement_named","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-locked_requirement_named","(requirement_name)","<p>@param [String] requirement_name the spec name to search for @return\n[Object] the locked spec named `requirement_name`, …\n"],["long_desc","Bundler::Thor","Bundler/Thor.html#method-c-long_desc","(long_description, options = {})","<p>Defines the long description of the next command.\n<p>Parameters\n<p>long description&lt;String&gt;\n"],["lookup","Bundler::SpecSet","Bundler/SpecSet.html#method-i-lookup","()",""],["lookup_color","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-lookup_color","(color)",""],["maglev?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-maglev-3F","()",""],["map","Bundler::Thor","Bundler/Thor.html#method-c-map","(mappings = nil)","<p>Maps an input to a command. If you define:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">map</span> <span class=\"ruby-string\">&quot;-T&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;list&quot;</span>\n</pre>\n<p>Running:\n"],["mark_loaded","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-mark_loaded","(spec)",""],["marshal_spec_dir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-marshal_spec_dir","()",""],["match_platform","Bundler::MatchPlatform","Bundler/MatchPlatform.html#method-i-match_platform","(p)",""],["matches","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-matches","()",""],["matches_spec?","Gem::Dependency","Gem/Dependency.html#method-i-matches_spec-3F","(spec)","<p>Backport of performance enhancement added to Rubygems 1.4\n"],["matching_specs","Bundler::Graph","Bundler/Graph.html#method-i-matching_specs","(platform_only = false)",""],["materialize","Bundler::SpecSet","Bundler/SpecSet.html#method-i-materialize","(deps, missing_specs = nil)",""],["merge","Bundler::SpecSet","Bundler/SpecSet.html#method-i-merge","(set)",""],["message","Bundler::Molinillo::NoSuchDependencyError","Bundler/Molinillo/NoSuchDependencyError.html#method-i-message","()",""],["message","Bundler::Resolver::Molinillo::VersionConflict","Bundler/Resolver/Molinillo/VersionConflict.html#method-i-message","()",""],["method_added","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-method_added","(meth)","<p>Fire this callback whenever a method is added. Added methods are tracked as\ncommands by invoking the …\n"],["method_missing","Bundler::DepProxy","Bundler/DepProxy.html#method-i-method_missing","(*args)",""],["method_missing","Bundler::Dsl","Bundler/Dsl.html#method-i-method_missing","(name, *args)",""],["method_missing","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-method_missing","(method, *args, &blk)",""],["method_missing","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-method_missing","(method, *args, &blk)",""],["method_option","Bundler::Thor","Bundler/Thor.html#method-c-method_option","(name, options = {})","<p>Adds an option to the set of method options. If :for is given as option, it\nallows you to change the …\n"],["method_options","Bundler::Thor","Bundler/Thor.html#method-c-method_options","(options = nil)","<p>Declares the options for the next command to be declared.\n<p>Parameters\n<p>Hash[Symbol =&gt; Object] &mdash; The hash …\n"],["mingw?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mingw-3F","()",""],["mingw_18?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mingw_18-3F","()",""],["mingw_19?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mingw_19-3F","()",""],["mingw_20?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mingw_20-3F","()",""],["mingw_21?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mingw_21-3F","()",""],["mingw_22?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mingw_22-3F","()",""],["mirror_for","Bundler::Source","Bundler/Source.html#method-c-mirror_for","(uri)",""],["missing_specs","Bundler::Definition","Bundler/Definition.html#method-i-missing_specs","()",""],["mkdir_p","Bundler","Bundler.html#method-c-mkdir_p","(path)",""],["mri?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mri-3F","()",""],["mri_18?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mri_18-3F","()",""],["mri_19?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mri_19-3F","()",""],["mri_20?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mri_20-3F","()",""],["mri_21?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mri_21-3F","()",""],["mri_22?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mri_22-3F","()",""],["mswin64?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin64-3F","()",""],["mswin64_19?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin64_19-3F","()",""],["mswin64_20?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin64_20-3F","()",""],["mswin64_21?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin64_21-3F","()",""],["mswin64_22?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin64_22-3F","()",""],["mswin?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin-3F","()",""],["mswin_18?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin_18-3F","()",""],["mswin_19?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin_19-3F","()",""],["mswin_20?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin_20-3F","()",""],["mswin_21?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin_21-3F","()",""],["mswin_22?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-mswin_22-3F","()",""],["mute","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-mute","()","<p>Mute everything that&#39;s inside given block\n"],["mute?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-mute-3F","()","<p>Check if base is muted\n"],["name","Bundler::DepProxy","Bundler/DepProxy.html#method-i-name","()",""],["name","Bundler::GemHelper","Bundler/GemHelper.html#method-i-name","()",""],["name","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-name","()",""],["name","Bundler::Source::Git","Bundler/Source/Git.html#method-i-name","()",""],["name","Bundler::Source::Path","Bundler/Source/Path.html#method-i-name","()",""],["name","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-name","()",""],["name_for","Bundler::Molinillo::SpecificationProvider","Bundler/Molinillo/SpecificationProvider.html#method-i-name_for","(dependency)","<p>Returns the name for the given `dependency`. @note This method should be\n&#39;pure&#39;, i.e. the return …\n"],["name_for","Bundler::Resolver","Bundler/Resolver.html#method-i-name_for","(dependency)",""],["name_for_explicit_dependency_source","Bundler::Molinillo::SpecificationProvider","Bundler/Molinillo/SpecificationProvider.html#method-i-name_for_explicit_dependency_source","()","<p>@return [String] the name of the source of explicit dependencies, i.e.\n\n<pre>those passed to {Resolver#resolve} ...</pre>\n"],["name_for_explicit_dependency_source","Bundler::Resolver","Bundler/Resolver.html#method-i-name_for_explicit_dependency_source","()",""],["name_for_locking_dependency_source","Bundler::Molinillo::SpecificationProvider","Bundler/Molinillo/SpecificationProvider.html#method-i-name_for_locking_dependency_source","()","<p>@return [String] the name of the source of &#39;locked&#39; dependencies,\ni.e.\n\n<pre>those passed to {Resolver#resolve} ...</pre>\n"],["name_for_locking_dependency_source","Bundler::Resolver","Bundler/Resolver.html#method-i-name_for_locking_dependency_source","()",""],["namespace","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-namespace","(name = nil)","<p>Sets the namespace for the Bundler::Thor or Bundler::Thor::Group class. By\ndefault the namespace is retrieved …\n"],["namespace","Object","Object.html#method-i-namespace","(name)",""],["namespace_from_thor_class","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-namespace_from_thor_class","(constant)","<p>Receives a constant and converts it to a Bundler::Thor namespace. Since\nBundler::Thor commands can be …\n"],["namespaces_in_content","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-namespaces_in_content","(contents, file = __FILE__)","<p>Given the contents, evaluate it inside the sandbox and returns the\nnamespaces defined in the sandbox. …\n"],["new","Bundler::AnonymizableURI","Bundler/AnonymizableURI.html#method-c-new","(original_uri, fallback_auth = nil)",""],["new","Bundler::CLI","Bundler/CLI.html#method-c-new","(*args)",""],["new","Bundler::CLI::Binstubs","Bundler/CLI/Binstubs.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Cache","Bundler/CLI/Cache.html#method-c-new","(options)",""],["new","Bundler::CLI::Check","Bundler/CLI/Check.html#method-c-new","(options)",""],["new","Bundler::CLI::Clean","Bundler/CLI/Clean.html#method-c-new","(options)",""],["new","Bundler::CLI::Config","Bundler/CLI/Config.html#method-c-new","(options, args, thor)",""],["new","Bundler::CLI::Console","Bundler/CLI/Console.html#method-c-new","(options, group)",""],["new","Bundler::CLI::Exec","Bundler/CLI/Exec.html#method-c-new","(options, args)",""],["new","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-c-new","(options, gem_name, thor)",""],["new","Bundler::CLI::Init","Bundler/CLI/Init.html#method-c-new","(options)",""],["new","Bundler::CLI::Inject","Bundler/CLI/Inject.html#method-c-new","(options, name, version, gems)",""],["new","Bundler::CLI::Install","Bundler/CLI/Install.html#method-c-new","(options)",""],["new","Bundler::CLI::Open","Bundler/CLI/Open.html#method-c-new","(options, name)",""],["new","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Package","Bundler/CLI/Package.html#method-c-new","(options)",""],["new","Bundler::CLI::Platform","Bundler/CLI/Platform.html#method-c-new","(options)",""],["new","Bundler::CLI::Show","Bundler/CLI/Show.html#method-c-new","(options, gem_name)",""],["new","Bundler::CLI::Update","Bundler/CLI/Update.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Viz","Bundler/CLI/Viz.html#method-c-new","(options)",""],["new","Bundler::Definition","Bundler/Definition.html#method-c-new","(lockfile, dependencies, sources, unlock, ruby_version = nil)","<p>How does the new system work?\n<p>Load information from Gemfile and Lockfile\n<p>Invalidate stale locked specs …\n"],["new","Bundler::DepProxy","Bundler/DepProxy.html#method-c-new","(dep, platform)",""],["new","Bundler::Dependency","Bundler/Dependency.html#method-c-new","(name, version, options = {}, &blk)",""],["new","Bundler::Dsl","Bundler/Dsl.html#method-c-new","()",""],["new","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-c-new","(name, version, platform, dependencies)",""],["new","Bundler::Environment","Bundler/Environment.html#method-c-new","(root, definition)",""],["new","Bundler::Fetcher","Bundler/Fetcher.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::AuthenticationRequiredError","Bundler/Fetcher/AuthenticationRequiredError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::BadAuthenticationError","Bundler/Fetcher/BadAuthenticationError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::CertificateFailureError","Bundler/Fetcher/CertificateFailureError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::SSLError","Bundler/Fetcher/SSLError.html#method-c-new","(msg = nil)",""],["new","Bundler::GemHelper","Bundler/GemHelper.html#method-c-new","(base = nil, name = nil)",""],["new","Bundler::Graph","Bundler/Graph.html#method-c-new","(env, output_file, show_version = false, show_requirements = false, output_format = \"png\", without = [])",""],["new","Bundler::Graph::GraphVizClient","Bundler/Graph/GraphVizClient.html#method-c-new","(graph_instance)",""],["new","Bundler::Index","Bundler/Index.html#method-c-new","()",""],["new","Bundler::Injector","Bundler/Injector.html#method-c-new","(new_deps)",""],["new","Bundler::LazySpecification","Bundler/LazySpecification.html#method-c-new","(name, version, platform, source = nil)",""],["new","Bundler::LockfileParser","Bundler/LockfileParser.html#method-c-new","(lockfile)",""],["new","Bundler::Molinillo::CircularDependencyError","Bundler/Molinillo/CircularDependencyError.html#method-c-new","(nodes)","<p>@param [Array&lt;DependencyGraph::Vertex&gt;] nodes the nodes in the\ndependency\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">that</span> <span class=\"ruby-identifier\">caused</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">error</span>\n</pre>\n"],["new","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-c-new","()",""],["new","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-c-new","(graph, name, payload)","<p>@param [DependencyGraph] graph see {#graph} @param [String] name see\n{#name} @param [Object] payload …\n"],["new","Bundler::Molinillo::NoSuchDependencyError","Bundler/Molinillo/NoSuchDependencyError.html#method-c-new","(dependency, required_by = [])","<p>@param [Object] dependency @see {#dependency} @param [Array&lt;Object&gt;]\nrequired_by @see {#required_by} …\n"],["new","Bundler::Molinillo::Resolver","Bundler/Molinillo/Resolver.html#method-c-new","(specification_provider, resolver_ui)","<p>@param  [SpecificationProvider] specification_provider\n\n<pre>see {#specification_provider}</pre>\n<p>@param  [UI] resolver_ui …\n"],["new","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-c-new","(specification_provider, resolver_ui, requested, base)","<p>@param [SpecificationProvider] specification_provider\n\n<pre>see {#specification_provider}</pre>\n<p>@param [UI] resolver_ui …\n"],["new","Bundler::Molinillo::VersionConflict","Bundler/Molinillo/VersionConflict.html#method-c-new","(conflicts)","<p>@param [{String =&gt; Resolution::Conflict}] conflicts see {#conflicts}\n"],["new","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-c-new","(name, version, platform, spec_fetcher)",""],["new","Bundler::Resolver","Bundler/Resolver.html#method-c-new","(index, source_requirements, base)",""],["new","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-c-new","(a)",""],["new","Bundler::Retry","Bundler/Retry.html#method-c-new","(name, exceptions = nil, attempts = nil)",""],["new","Bundler::RubyVersion","Bundler/RubyVersion.html#method-c-new","(version, patchlevel, engine, engine_version)",""],["new","Bundler::RubygemsIntegration::Ancient","Bundler/RubygemsIntegration/Ancient.html#method-c-new","()",""],["new","Bundler::RubygemsIntegration::Legacy","Bundler/RubygemsIntegration/Legacy.html#method-c-new","()",""],["new","Bundler::RubygemsIntegration::MoreFuture","Bundler/RubygemsIntegration/MoreFuture.html#method-c-new","()",""],["new","Bundler::Settings","Bundler/Settings.html#method-c-new","(root = nil)",""],["new","Bundler::SimilarityDetector","Bundler/SimilarityDetector.html#method-c-new","(corpus)","<p>initialize with an array of words to be matched against\n"],["new","Bundler::Source::Git","Bundler/Source/Git.html#method-c-new","(options)",""],["new","Bundler::Source::Git::GitCommandError","Bundler/Source/Git/GitCommandError.html#method-c-new","(command, path = nil)",""],["new","Bundler::Source::Git::GitNotAllowedError","Bundler/Source/Git/GitNotAllowedError.html#method-c-new","(command)",""],["new","Bundler::Source::Git::GitNotInstalledError","Bundler/Source/Git/GitNotInstalledError.html#method-c-new","()",""],["new","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-c-new","(path, uri, ref, revision = nil, git = nil)",""],["new","Bundler::Source::Path","Bundler/Source/Path.html#method-c-new","(options)",""],["new","Bundler::Source::Path::Installer","Bundler/Source/Path/Installer.html#method-c-new","(spec, options = {})",""],["new","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-c-new","(options = {})",""],["new","Bundler::SourceList","Bundler/SourceList.html#method-c-new","()",""],["new","Bundler::SpecSet","Bundler/SpecSet.html#method-c-new","(specs)",""],["new","Bundler::SystemRubyVersion","Bundler/SystemRubyVersion.html#method-c-new","(*)",""],["new","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-c-new","(args = [], options = {}, config = {})","<p>Extends initializer to add more configuration options.\n<p>Configuration\n<p>behavior&lt;Symbol&gt; &mdash; The actions …\n"],["new","Bundler::Thor::Base","Bundler/Thor/Base.html#method-c-new","(args = [], local_options = {}, config = {})","<p>It receives arguments in an Array and two hashes, one for options and other\nfor configuration.\n<p>Notice …\n"],["new","Bundler::Thor::Command","Bundler/Thor/Command.html#method-c-new","(name, description, long_description, usage, options = nil)",""],["new","Bundler::Thor::DynamicCommand","Bundler/Thor/DynamicCommand.html#method-c-new","(name, options = nil)",""],["new","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-c-new","(prompt, options)",""],["new","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-c-new","(text)",""],["new","Bundler::Thor::Shell","Bundler/Thor/Shell.html#method-c-new","(args = [], options = {}, config = {})","<p>Add shell to initialize config values.\n<p>Configuration\n<p>shell&lt;Object&gt; &mdash; An instance of the shell to be …\n"],["new","Bundler::UI::RGProxy","Bundler/UI/RGProxy.html#method-c-new","(ui)",""],["new","Bundler::UI::Shell","Bundler/UI/Shell.html#method-c-new","(options = {})",""],["new","Bundler::VersionConflict","Bundler/VersionConflict.html#method-c-new","(conflicts, msg = nil)",""],["new","Bundler::Worker","Bundler/Worker.html#method-c-new","(size, func)","<p>Creates a worker pool of specified size\n<p>@param size [Integer] Size of pool @param func [Proc] job to run …\n"],["new","Bundler::Worker::WrappedException","Bundler/Worker/WrappedException.html#method-c-new","(exn)",""],["new","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-c-new","(name = nil, proxy = nil)","<p>Creates a new Net::HTTP::Persistent.\n<p>Set <code>name</code> to keep your connections apart from everybody\nelse&#39;s. …\n"],["new_gem_lines","Bundler::Injector","Bundler/Injector.html#method-i-new_gem_lines","()",""],["new_platform?","Bundler::Definition","Bundler/Definition.html#method-i-new_platform-3F","()",""],["new_specs","Bundler::Definition","Bundler/Definition.html#method-i-new_specs","()",""],["no?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-no-3F","(statement, color = nil)","<p>Make a question the to user and returns true if the user replies “n” or\n“no”.\n"],["no_commands","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-no_commands","()","<p>All methods defined inside the given block are not added as commands.\n<p>So you can do:\n\n<pre>class MyScript &lt; Bundler::Thor ...</pre>\n"],["no_tasks","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-no_tasks","()",""],["nondevelopment_dependencies","Gem::Specification","Gem/Specification.html#method-i-nondevelopment_dependencies","()",""],["none?","Gem::Requirement","Gem/Requirement.html#method-i-none-3F","()","<p>Backport of performance enhancement added to Rubygems 1.4\n"],["normalize_hash","Bundler::Dsl","Bundler/Dsl.html#method-i-normalize_hash","(opts)",""],["normalize_options","Bundler::Dsl","Bundler/Dsl.html#method-i-normalize_options","(name, version, opts)",""],["normalize_source","Bundler::Dsl","Bundler/Dsl.html#method-i-normalize_source","(source)",""],["normalize_uri","Bundler::Settings","Bundler/Settings.html#method-i-normalize_uri","(uri)","<p>TODO: duplicates Rubygems#normalize_uri TODO: is this the correct place to\nvalidate mirror URIs?\n"],["normalize_uri","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-normalize_uri","(uri)",""],["normalize_uri","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-normalize_uri","(uri)","<p>Adds “http://” to the String <code>uri</code> if it is missing.\n"],["not_debugging?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-not_debugging-3F","(instance)",""],["nothing_changed?","Bundler::Definition","Bundler/Definition.html#method-i-nothing_changed-3F","()",""],["on_18?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-on_18-3F","()",""],["on_19?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-on_19-3F","()",""],["on_20?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-on_20-3F","()",""],["on_21?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-on_21-3F","()",""],["on_22?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-on_22-3F","()",""],["open","Bundler::CLI","Bundler/CLI.html#method-i-open","(name)",""],["option","Bundler::Thor","Bundler/Thor.html#method-c-option","(name, options = {})",""],["options","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-options","()",""],["options","Bundler::Thor","Bundler/Thor.html#method-c-options","(options = nil)",""],["outdated","Bundler::CLI","Bundler/CLI.html#method-i-outdated","(*gems)",""],["outdated?","Bundler::CLI::Show","Bundler/CLI/Show.html#method-i-outdated-3F","(current, latest)",""],["outgoing_edges","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-outgoing_edges","()","<p>@return [Array&lt;Edge&gt;] the edges of {#graph} that have `self` as their\n\n<pre>{Edge#origin}</pre>\n"],["output","Bundler::Molinillo::UI","Bundler/Molinillo/UI.html#method-i-output","()","<p>The {IO} object that should be used to print output. `STDOUT`, by default.\n<p>@return [IO]\n"],["package","Bundler::CLI","Bundler/CLI.html#method-i-package","()",""],["package_name","Bundler::Thor","Bundler/Thor.html#method-c-package_name","(name, options = {})","<p>Allows for custom “Command” package naming.\n<p>Parameters\n<p>name&lt;String&gt; options&lt;Hash&gt; …\n"],["padding=","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-padding-3D","(value)","<p>Sets the output padding, not allowing less than zero values.\n"],["parent_of","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-parent_of","(requirement)","<p>@return [Object] the requirement that led to `requirement` being added\n\n<pre>to the list of requirements.</pre>\n"],["parse_dependency","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_dependency","(line)",""],["parse_platform","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_platform","(line)",""],["parse_source","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_source","(line)",""],["parse_spec","Bundler::LockfileParser","Bundler/LockfileParser.html#method-i-parse_spec","(line)",""],["patchlevel","Bundler::SystemRubyVersion","Bundler/SystemRubyVersion.html#method-i-patchlevel","()",""],["path","Bundler::Dsl","Bundler/Dsl.html#method-i-path","(path, options = {}, &blk)",""],["path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-path","(obj)",""],["path","Bundler::Settings","Bundler/Settings.html#method-i-path","()","<p>@local_config should be prioritized over ENV\n"],["path","Bundler::Source::Git","Bundler/Source/Git.html#method-i-path","()",""],["path_to?","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-path_to-3F","(other)","<p>Is there a path from `self` to `other` following edges in the dependency\ngraph? @return true iff there …\n"],["perform_git_push","Bundler::GemHelper","Bundler/GemHelper.html#method-i-perform_git_push","(options = '')",""],["pinned_spec_names","Bundler::Definition","Bundler/Definition.html#method-i-pinned_spec_names","(specs)",""],["pipeline","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-pipeline","(uri, requests, &block)","<p>Pipelines <code>requests</code> to the HTTP server at <code>uri</code>\nyielding responses if a block is given.  Returns all responses …\n"],["platform","Bundler::CLI","Bundler/CLI.html#method-i-platform","()",""],["platform","Bundler::Dsl","Bundler/Dsl.html#method-i-platform","(*platforms)",""],["platforms","Bundler::Dsl","Bundler/Dsl.html#method-i-platforms","(*platforms)",""],["platforms","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-platforms","()",""],["platforms_for_dependency_named","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-platforms_for_dependency_named","(dependency)",""],["pop_possibility_state","Bundler::Molinillo::DependencyState","Bundler/Molinillo/DependencyState.html#method-i-pop_possibility_state","()","<p>Removes a possibility from `self` @return [PossibilityState] a state with a\nsingle possibility,\n\n<pre>the possibility ...</pre>\n"],["possibility","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-possibility","()","<p>@return [Object] the current possibility that the resolution is trying\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">activate</span>\n</pre>\n"],["post_install_message","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-post_install_message","()","<p>needed for post_install_messages during install\n"],["predecessors","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-predecessors","()","<p>@return [Set&lt;Vertex&gt;] the vertices of {#graph} that have an edge with\n\n<pre>`self` as their {Edge#destination}</pre>\n"],["prepare_message","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-prepare_message","(message, *color)",""],["prepend_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-prepend_file","(path, *args, &block)",""],["prepend_to_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-prepend_to_file","(path, *args, &block)","<p>Prepend text to a file. Since it depends on insert_into_file, it&#39;s\nreversible.\n<p>Parameters\n<p>path&lt;String&gt; … &mdash; "],["preserve_gem_path","Bundler","Bundler.html#method-c-preserve_gem_path","()",""],["preserve_paths","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-preserve_paths","()",""],["preserve_paths","Bundler::RubygemsIntegration::AlmostModern","Bundler/RubygemsIntegration/AlmostModern.html#method-i-preserve_paths","()","<p>Rubygems [&gt;= 1.8.0, &lt; 1.8.5] has a bug that changes Gem.dir whenever\nyou call Gem::Installer#install …\n"],["pretty_dep","Bundler::Definition","Bundler/Definition.html#method-i-pretty_dep","(dep, source = false)",""],["pretty_values_for","Bundler::Settings","Bundler/Settings.html#method-i-pretty_values_for","(exposed_key)",""],["print_in_columns","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-print_in_columns","(array)","<p>Prints values in columns\n<p>Parameters\n<p>Array[String, String, …]\n"],["print_options","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-print_options","(shell, options, group_name = nil)","<p>Receives a set of options and print them.\n"],["print_table","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-print_table","(array, options = {})","<p>Prints a table.\n<p>Parameters\n<p>Array[Array[String, String, …]]\n"],["print_wrapped","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-print_wrapped","(message, options = {})","<p>Prints a long string, word-wrapping the text to the current width of the\nterminal display. Ideal for …\n"],["printable_commands","Bundler::Thor","Bundler/Thor.html#method-c-printable_commands","(all = true, subcommand = false)","<p>Returns commands ready to be printed.\n"],["printable_commands","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-printable_commands","(*)","<p>Returns commands ready to be printed.\n"],["printable_tasks","Bundler::Thor","Bundler/Thor.html#method-c-printable_tasks","(all = true, subcommand = false)",""],["printable_tasks","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-printable_tasks","(*)",""],["private_key=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-private_key-3D","(key)","<p>Sets this client&#39;s SSL private key\n"],["private_method?","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-private_method-3F","(instance)",""],["process_queue","Bundler::Worker","Bundler/Worker.html#method-i-process_queue","(i)",""],["process_topmost_state","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-process_topmost_state","()","<p>Processes the topmost available {RequirementState} on the stack @return\n[void]\n"],["progress_rate","Bundler::Molinillo::UI","Bundler/Molinillo/UI.html#method-i-progress_rate","()","<p>How often progress should be conveyed to the user via {#indicate_progress},\nin seconds. A third of a …\n"],["provides?","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-provides-3F","(req_str)",""],["provides?","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-c-provides-3F","(req_str)",""],["proxy=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-proxy-3D","(proxy)","<p>Sets the proxy server.  The <code>proxy</code> may be the URI of the proxy\nserver, the symbol <code>:ENV</code> which will read …\n"],["proxy_bypass?","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-proxy_bypass-3F","(host, port)","<p>Returns true when proxy should by bypassed for host.\n"],["proxy_from_env","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-proxy_from_env","()","<p>Creates a URI for an HTTP proxy server from ENV variables.\n<p>If <code>HTTP_PROXY</code> is set a proxy will be returned. …\n"],["prune_cache","Bundler::Runtime","Bundler/Runtime.html#method-i-prune_cache","(cache_path)",""],["prune_gem_cache","Bundler::Runtime","Bundler/Runtime.html#method-i-prune_gem_cache","(resolve, cache_path)",""],["prune_git_and_path_cache","Bundler::Runtime","Bundler/Runtime.html#method-i-prune_git_and_path_cache","(resolve, cache_path)",""],["public_command","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-public_command","(*names)","<p>Allows to use private methods from parent in child classes as commands.\n<p>Parameters\n\n<pre>names&lt;Array&gt;:: Method ...</pre>\n"],["public_task","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-public_task","(*names)",""],["push_state_for_requirements","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-push_state_for_requirements","(new_requirements)","<p>Pushes a new {DependencyState} that encapsulates both existing and new\nrequirements @param [Array] new_requirements …\n"],["pwd","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-pwd","()",""],["quiet?","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-quiet-3F","()",""],["quiet?","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-quiet-3F","()",""],["rake_classes","Bundler::Thor::RakeCompat","Bundler/Thor/RakeCompat.html#method-c-rake_classes","()",""],["rake_namespace","Object","Object.html#method-i-rake_namespace","(name)",""],["rbx?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-rbx-3F","()",""],["read_binary","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-read_binary","(path)",""],["read_file","Bundler","Bundler.html#method-c-read_file","(file)",""],["read_file","Bundler::Env","Bundler/Env.html#method-i-read_file","(filename)",""],["readline","Bundler::Thor::LineEditor","Bundler/Thor/LineEditor.html#method-c-readline","(prompt, options = {})",""],["readline","Bundler::Thor::LineEditor::Basic","Bundler/Thor/LineEditor/Basic.html#method-i-readline","()",""],["readline","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-readline","()",""],["ready_to_install?","Bundler::Installer","Bundler/Installer.html#method-i-ready_to_install-3F","(spec, remains)","<p>We only want to install a gem spec if all its dependencies are met. If the\ndependency is no longer in …\n"],["reconnect","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-reconnect","()","<p>Forces reconnection of HTTP connections.\n"],["reconnect_ssl","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-reconnect_ssl","()","<p>Forces reconnection of SSL connections.\n"],["recursive_successors","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-recursive_successors","()","<p>@return [Set&lt;Vertex&gt;] the vertices of {#graph} where `self` is an\n\n<pre>{#ancestor?}</pre>\n"],["redefine_method","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-redefine_method","(klass, method, &block)",""],["register","Bundler::Thor","Bundler/Thor.html#method-c-register","(klass, subcommand_name, usage, description, options = {})","<p>Registers another Bundler::Thor subclass as a command.\n<p>Parameters\n<p>klass&lt;Class&gt; &mdash; Bundler::Thor subclass …\n"],["relative_matches","Bundler::Thor::LineEditor::Readline::PathCompletion","Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-relative_matches","()",""],["relative_path","Bundler::Source::Path","Bundler/Source/Path.html#method-i-relative_path","()",""],["relative_to_original_destination_root","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-relative_to_original_destination_root","(path, remove_dot = true)","<p>Returns the given path relative to the absolute root (ie, root where the\nscript started).\n"],["remote!","Bundler::Source::Path","Bundler/Source/Path.html#method-i-remote-21","()",""],["remote!","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-remote-21","()",""],["remote!","Bundler::SourceList","Bundler/SourceList.html#method-i-remote-21","()",""],["remote_specs","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-remote_specs","()",""],["remote_uri","Bundler::Fetcher","Bundler/Fetcher.html#method-i-remote_uri","()",""],["remotes_equal?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-remotes_equal-3F","(other_remotes)",""],["remove_argument","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-remove_argument","(*names)","<p>Removes a previous defined argument. If :undefine is given, undefine\naccessors as well.\n<p>Parameters\n<p>names&lt;Array&gt; … &mdash; "],["remove_auth","Bundler::AnonymizableURI","Bundler/AnonymizableURI.html#method-i-remove_auth","(uri)",""],["remove_class_option","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-remove_class_option","(*names)","<p>Removes a previous defined class option.\n<p>Parameters\n<p>names&lt;Array&gt; &mdash; Class options to be removed\n"],["remove_command","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-remove_command","(*names)","<p>Removes a given command from this Bundler::Thor class. This is usually done\nif you are inheriting from …\n"],["remove_dir","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-remove_dir","(path, config = {})",""],["remove_file","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-remove_file","(path, config = {})","<p>Removes a file at the given location.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed\n"],["remove_invocation","Bundler::Thor::Group","Bundler/Thor/Group.html#method-c-remove_invocation","(*names)","<p>Remove a previously added invocation.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">remove_invocation</span> :<span class=\"ruby-identifier\">test_framework</span>\n</pre>\n"],["remove_task","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-remove_task","(*names)",""],["removed_specs","Bundler::Definition","Bundler/Definition.html#method-i-removed_specs","()",""],["replace_bin_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_bin_path","(specs)","<p>Used to make bin stubs that are not created by bundler work under bundler.\nThe new Gem.bin_path only …\n"],["replace_entrypoints","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_entrypoints","(specs)","<p>Replace or hook into Rubygems to provide a bundlerized view of the world.\n"],["replace_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_gem","(specs)",""],["replace_refresh","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_refresh","()","<p>Because Bundler has a static view of what specs are available, we don&#39;t\n#refresh, so stub it out. …\n"],["replace_remotes","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-replace_remotes","(other_remotes)",""],["replace_sources!","Bundler::SourceList","Bundler/SourceList.html#method-i-replace_sources-21","(replacement_sources)",""],["report","Bundler::Env","Bundler/Env.html#method-i-report","(options = {})",""],["repository_subdirectories","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-repository_subdirectories","()",""],["repository_subdirectories","Bundler::RubygemsIntegration::Future","Bundler/RubygemsIntegration/Future.html#method-i-repository_subdirectories","()",""],["request","Bundler::Fetcher","Bundler/Fetcher.html#method-i-request","(uri)",""],["request","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-request","(uri, req = nil, &block)","<p>Makes a request on <code>uri</code>.  If <code>req</code> is nil a\nNet::HTTP::Get is performed against <code>uri</code>.\n<p>If a block is passed …\n"],["request_issue_report_for","Bundler","Bundler.html#method-c-request_issue_report_for","(e)",""],["requested_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-requested_dependencies","()",""],["requested_specs","Bundler::Definition","Bundler/Definition.html#method-i-requested_specs","()",""],["requested_specs","Bundler::Environment","Bundler/Environment.html#method-i-requested_specs","()",""],["require","Bundler","Bundler.html#method-c-require","(*groups)",""],["require","Bundler::Runtime","Bundler/Runtime.html#method-i-require","(*groups)",""],["require_nested_dependencies_for","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-require_nested_dependencies_for","(activated_spec)","<p>Requires the dependencies that the recently activated spec has @param\n[Object] activated_spec the specification …\n"],["require_path_or_force","Bundler::CLI::Clean","Bundler/CLI/Clean.html#method-i-require_path_or_force","()",""],["require_paths","Bundler::EndpointSpecification","Bundler/EndpointSpecification.html#method-i-require_paths","()","<p>needed for standalone, load required_paths from local gemspec after the gem\nis installed\n"],["required_options","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-required_options","()",""],["requirement","Bundler::DepProxy","Bundler/DepProxy.html#method-i-requirement","()",""],["requirement","Gem::Dependency","Gem/Dependency.html#method-i-requirement","()",""],["requirement_for_existing_name","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-requirement_for_existing_name","(name)","<p>@return [Object] the requirement that led to a version of a possibility\n\n<pre>with the given name being activated.</pre>\n"],["requirement_satisfied_by?","Bundler::Molinillo::SpecificationProvider","Bundler/Molinillo/SpecificationProvider.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)","<p>Determines whether the given `requirement` is satisfied by the given\n`spec`, in the context of the current …\n"],["requirement_satisfied_by?","Bundler::Resolver","Bundler/Resolver.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)",""],["requirement_tree_for","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-requirement_tree_for","(requirement)","<p>@return [Array&lt;Object&gt;] the list of requirements that led to\n\n<pre>`requirement` being required.</pre>\n"],["requirement_trees","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-requirement_trees","()","<p>@return [Array&lt;Array&lt;Object&gt;&gt;] The different requirement\n\n<pre>trees that led to every requirement ...</pre>\n"],["requirements","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-requirements","()","<p>@return [Array&lt;Object&gt;] all of the requirements that required\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">this</span> <span class=\"ruby-identifier\">vertex</span>\n</pre>\n"],["requires_checkout?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-requires_checkout-3F","()",""],["requires_sudo?","Bundler","Bundler.html#method-c-requires_sudo-3F","()",""],["reset","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-reset","(connection)","<p>Finishes then restarts the Net::HTTP <code>connection</code>\n"],["reset!","Bundler","Bundler.html#method-c-reset-21","()",""],["resolve","Bundler::Definition","Bundler/Definition.html#method-i-resolve","()","<p>Resolve all the dependencies specified in Gemfile. It ensures that\ndependencies that have been already …\n"],["resolve","Bundler::Molinillo::Resolver","Bundler/Molinillo/Resolver.html#method-i-resolve","(requested, base = DependencyGraph.new)","<p>Resolves the requested dependencies into a {DependencyGraph}, locking to\nthe base dependency graph (if …\n"],["resolve","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-resolve","()","<p>Resolves the {#original_requested} dependencies into a full dependency\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">graph</span>\n</pre>\n<p>@raise [ResolverError] if …\n"],["resolve","Bundler::Resolver","Bundler/Resolver.html#method-c-resolve","(requirements, index, source_requirements = {}, base = [])","<p>Figures out the best possible configuration of gems that satisfies the list\nof passed dependencies and …\n"],["resolve_name","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-resolve_name","(name)",""],["resolve_remotely!","Bundler::Definition","Bundler/Definition.html#method-i-resolve_remotely-21","()",""],["resolve_with_cache!","Bundler::Definition","Bundler/Definition.html#method-i-resolve_with_cache-21","()",""],["respond_to?","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-respond_to-3F","(*args)",""],["reverse_rubygems_kernel_mixin","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-reverse_rubygems_kernel_mixin","()",""],["revision","Bundler::Source::Git","Bundler/Source/Git.html#method-i-revision","()",""],["revision","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-revision","()",""],["rg_full_gem_path","Gem::Specification","Gem/Specification.html#method-i-rg_full_gem_path","()",""],["rg_loaded_from","Gem::Specification","Gem/Specification.html#method-i-rg_loaded_from","()",""],["root","Bundler","Bundler.html#method-c-root","()",""],["root_vertex_named","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-root_vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the root vertex with the given\nname\n"],["ruby","Bundler::RubyDsl","Bundler/RubyDsl.html#method-i-ruby","(ruby_version, options = {})",""],["ruby?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-ruby-3F","()",""],["ruby_18?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-ruby_18-3F","()",""],["ruby_19?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-ruby_19-3F","()",""],["ruby_20?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-ruby_20-3F","()",""],["ruby_21?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-ruby_21-3F","()",""],["ruby_22?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-ruby_22-3F","()",""],["ruby_command","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-ruby_command","()","<p>Return the path to the ruby interpreter taking into account multiple\ninstallations and windows extensions. …\n"],["ruby_engine","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-ruby_engine","()",""],["ruby_scope","Bundler","Bundler.html#method-c-ruby_scope","()",""],["ruby_version","Bundler","Bundler.html#method-c-ruby_version","()",""],["ruby_version","Bundler::Env","Bundler/Env.html#method-i-ruby_version","()",""],["rubygem_push","Bundler::GemHelper","Bundler/GemHelper.html#method-i-rubygem_push","(path)",""],["rubygems_index","Bundler::Definition","Bundler/Definition.html#method-i-rubygems_index","()","<p>used when frozen is enabled so we can find the bundler spec, even if (say)\na git gem is not checked out. …\n"],["rubygems_primary_remotes","Bundler::SourceList","Bundler/SourceList.html#method-i-rubygems_primary_remotes","()",""],["rubygems_remotes","Bundler::SourceList","Bundler/SourceList.html#method-i-rubygems_remotes","()",""],["rubygems_sources","Bundler::SourceList","Bundler/SourceList.html#method-i-rubygems_sources","()",""],["run","Bundler::CLI::Binstubs","Bundler/CLI/Binstubs.html#method-i-run","()",""],["run","Bundler::CLI::Cache","Bundler/CLI/Cache.html#method-i-run","()",""],["run","Bundler::CLI::Check","Bundler/CLI/Check.html#method-i-run","()",""],["run","Bundler::CLI::Clean","Bundler/CLI/Clean.html#method-i-run","()",""],["run","Bundler::CLI::Config","Bundler/CLI/Config.html#method-i-run","()",""],["run","Bundler::CLI::Console","Bundler/CLI/Console.html#method-i-run","()",""],["run","Bundler::CLI::Exec","Bundler/CLI/Exec.html#method-i-run","()",""],["run","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-run","()",""],["run","Bundler::CLI::Init","Bundler/CLI/Init.html#method-i-run","()",""],["run","Bundler::CLI::Inject","Bundler/CLI/Inject.html#method-i-run","()",""],["run","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-run","()",""],["run","Bundler::CLI::Open","Bundler/CLI/Open.html#method-i-run","()",""],["run","Bundler::CLI::Outdated","Bundler/CLI/Outdated.html#method-i-run","()",""],["run","Bundler::CLI::Package","Bundler/CLI/Package.html#method-i-run","()",""],["run","Bundler::CLI::Platform","Bundler/CLI/Platform.html#method-i-run","()",""],["run","Bundler::CLI::Show","Bundler/CLI/Show.html#method-i-run","()",""],["run","Bundler::CLI::Update","Bundler/CLI/Update.html#method-i-run","()",""],["run","Bundler::CLI::Viz","Bundler/CLI/Viz.html#method-i-run","()",""],["run","Bundler::Graph::GraphVizClient","Bundler/Graph/GraphVizClient.html#method-i-run","()",""],["run","Bundler::Installer","Bundler/Installer.html#method-i-run","(options)","<p>Runs the install procedures for a specific Gemfile.\n<p>Firstly, this method will check to see if Bundler.bundle_path …\n"],["run","Bundler::Retry","Bundler/Retry.html#method-i-run","(&block)",""],["run","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-run","(command, config = {})","<p>Executes a command returning the contents of the command.\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the command …\n"],["run","Bundler::Thor::Command","Bundler/Thor/Command.html#method-i-run","(instance, args = [])","<p>By default, a command invokes a method in the thor class. You can change\nthis implementation to create …\n"],["run","Bundler::Thor::DynamicCommand","Bundler/Thor/DynamicCommand.html#method-i-run","(instance, args = [])",""],["run_hooks","Bundler::Source::Path","Bundler/Source/Path.html#method-i-run_hooks","(type, installer)",""],["run_ruby_script","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-run_ruby_script","(command, config = {})","<p>Executes a ruby script (taking into account WIN32 platform quirks).\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the …\n"],["same_version?","Bundler::Index","Bundler/Index.html#method-i-same_version-3F","(a, b)",""],["satisfies?","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-satisfies-3F","(dependency)",""],["satisfies_locked_spec?","Bundler::Definition","Bundler/Definition.html#method-i-satisfies_locked_spec-3F","(dep)",""],["say","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-say","(message = \"\", color = nil, force_new_line = (message.to_s !~ /( |\\t)\\Z/))","<p>Say (print) something to the user. If the sentence ends with a whitespace\nor tab character, a new line …\n"],["say","Bundler::UI::RGProxy","Bundler/UI/RGProxy.html#method-i-say","(message)",""],["say_status","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-say_status","(status, message, log_status = true)","<p>Say a status with the given color and appends the message. Since this\nmethod is used frequently by actions, …\n"],["search","Bundler::Index","Bundler/Index.html#method-i-search","(query, base = nil)","<p>Search this index&#39;s specs, and any source indexes that this index knows\nabout, returning all of the …\n"],["search_all","Bundler::Index","Bundler/Index.html#method-i-search_all","(name)",""],["search_by_dependency","Bundler::Index","Bundler/Index.html#method-i-search_by_dependency","(dependency, base = nil)",""],["search_by_spec","Bundler::Index","Bundler/Index.html#method-i-search_by_spec","(spec)",""],["search_for","Bundler::Molinillo::SpecificationProvider","Bundler/Molinillo/SpecificationProvider.html#method-i-search_for","(dependency)","<p>Search for the specifications that match the given dependency. The\nspecifications in the returned array …\n"],["search_for","Bundler::Resolver","Bundler/Resolver.html#method-i-search_for","(dependency)",""],["search_up","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-search_up","(*names)",""],["security_policies","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-security_policies","()",""],["security_policy_keys","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-security_policy_keys","()",""],["select_spec","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-select_spec","(name, regex_match = nil)",""],["serialize_gemspecs_in","Bundler::Source::Git","Bundler/Source/Git.html#method-i-serialize_gemspecs_in","(destination)",""],["set_bundle_environment","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-set_bundle_environment","()",""],["set_color","Bundler::Thor::Shell::Color","Bundler/Thor/Shell/Color.html#method-i-set_color","(string, *colors)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["set_color","Bundler::Thor::Shell::HTML","Bundler/Thor/Shell/HTML.html#method-i-set_color","(string, *colors)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["set_global","Bundler::Settings","Bundler/Settings.html#method-i-set_global","(key, value)",""],["set_key","Bundler::Settings","Bundler/Settings.html#method-i-set_key","(key, value, hash, file)",""],["set_local","Bundler::Settings","Bundler/Settings.html#method-i-set_local","(key, value)",""],["set_local!","Bundler::Source::Git","Bundler/Source/Git.html#method-i-set_local-21","(path)",""],["settings","Bundler","Bundler.html#method-c-settings","()",""],["setup","Bundler","Bundler.html#method-c-setup","(*groups)",""],["setup","Bundler::Runtime","Bundler/Runtime.html#method-i-setup","(*groups)",""],["setup_cache_all","Bundler::CLI::Cache","Bundler/CLI/Cache.html#method-i-setup_cache_all","()",""],["setup_cache_all","Bundler::CLI::Package","Bundler/CLI/Package.html#method-i-setup_cache_all","()",""],["setup_environment","Bundler::Runtime","Bundler/Runtime.html#method-i-setup_environment","()",""],["setup_manpath","Bundler::Runtime","Bundler/Runtime.html#method-i-setup_manpath","()",""],["sh","Bundler::GemHelper","Bundler/GemHelper.html#method-i-sh","(cmd, &block)",""],["sh_with_code","Bundler::GemHelper","Bundler/GemHelper.html#method-i-sh_with_code","(cmd, &block)",""],["shallow_eql?","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-shallow_eql-3F","(other)","<p>@return [Boolean] whether the two vertices are equal, determined\n\n<pre>solely by {#name} and {#payload} equality</pre>\n"],["shell","Bundler::Thor::Base","Bundler/Thor/Base.html#method-c-shell","()","<p>Returns the shell used in all Bundler::Thor classes. If you are in a Unix\nplatform it will use a colored …\n"],["shell","Bundler::Thor::Shell","Bundler/Thor/Shell.html#method-i-shell","()","<p>Holds the shell for the given Bundler::Thor instance. If no shell is given,\nit gets a default shell from …\n"],["shortref_for_display","Bundler::Source::Git","Bundler/Source/Git.html#method-i-shortref_for_display","(ref)",""],["shortref_for_path","Bundler::Source::Git","Bundler/Source/Git.html#method-i-shortref_for_path","(ref)",""],["should_include?","Bundler::Dependency","Bundler/Dependency.html#method-i-should_include-3F","()",""],["show","Bundler::CLI","Bundler/CLI.html#method-i-show","(gem_name = nil)",""],["shutdown","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-shutdown","(thread = Thread.current)","<p>Shuts down all connections for <code>thread</code>.\n<p>Uses the current thread by default.\n<p>If you&#39;ve used Net::HTTP::Persistent …\n"],["shutdown_in_all_threads","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-shutdown_in_all_threads","()","<p>Shuts down all connections in all threads\n<p><strong>NOTE</strong>: THIS METHOD IS VERY DANGEROUS!\n<p>Do not call this method …\n"],["silence","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-silence","()",""],["silence","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-silence","()",""],["similar_word_list","Bundler::SimilarityDetector","Bundler/SimilarityDetector.html#method-i-similar_word_list","(word, limit=3)","<p>return the result of &#39;similar_words&#39;, concatenated into a list (eg\n“a, b, or c”)\n"],["similar_words","Bundler::SimilarityDetector","Bundler/SimilarityDetector.html#method-i-similar_words","(word, limit=3)","<p>return an array of words similar to &#39;word&#39; from the corpus\n"],["size","Bundler::Index","Bundler/Index.html#method-i-size","()",""],["skip_during","Bundler::Deprecate","Bundler/Deprecate.html#method-c-skip_during","()",""],["snake_case","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-snake_case","(str)","<p>Receives a string and convert it to snake case. SnakeCase returns\nsnake_case.\n<p>Parameters\n<p>String\n"],["sort!","Bundler::SpecSet","Bundler/SpecSet.html#method-i-sort-21","()",""],["sort_dependencies","Bundler::Molinillo::SpecificationProvider","Bundler/Molinillo/SpecificationProvider.html#method-i-sort_dependencies","(dependencies, activated, conflicts)","<p>Sort dependencies so that the ones that are easiest to resolve are first.\nEasiest to resolve is (usually) …\n"],["sort_dependencies","Bundler::Resolver","Bundler/Resolver.html#method-i-sort_dependencies","(dependencies, activated, conflicts)",""],["sorted","Bundler::SpecSet","Bundler/SpecSet.html#method-i-sorted","()",""],["source","Bundler::Dsl","Bundler/Dsl.html#method-i-source","(source, &blk)",""],["source","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-source","()",""],["source_list_for","Bundler::SourceList","Bundler/SourceList.html#method-i-source_list_for","(source)",""],["source_paths","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-source_paths","()","<p>Holds source paths in instance so they can be manipulated.\n"],["source_paths","Bundler::Thor::Actions::ClassMethods","Bundler/Thor/Actions/ClassMethods.html#method-i-source_paths","()","<p>Hold source paths for one Bundler::Thor instance. source_paths_for_search\nis the method responsible to …\n"],["source_paths_for_search","Bundler::Thor::Actions::ClassMethods","Bundler/Thor/Actions/ClassMethods.html#method-i-source_paths_for_search","()","<p>Returns the source paths in the following order:\n\n<pre>1) This class source paths\n2) Source root\n3) Parents ...</pre>\n"],["source_requirements","Bundler::Definition","Bundler/Definition.html#method-i-source_requirements","()",""],["source_root","Bundler::CLI","Bundler/CLI.html#method-c-source_root","()",""],["source_root","Bundler::Thor::Actions::ClassMethods","Bundler/Thor/Actions/ClassMethods.html#method-i-source_root","(path = nil)","<p>Stores and return the source root for this class\n"],["source_types","Bundler::Index","Bundler/Index.html#method-i-source_types","()",""],["source_uris_for_spec","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-source_uris_for_spec","(spec)",""],["sources","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-sources","()",""],["sources=","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-sources-3D","(val)",""],["spec_cache_dirs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-spec_cache_dirs","()",""],["spec_from_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-spec_from_gem","(path, policy = nil)",""],["spec_git_paths","Bundler::Definition","Bundler/Definition.html#method-i-spec_git_paths","()",""],["spec_satisfies_dependency?","Bundler::Index","Bundler/Index.html#method-i-spec_satisfies_dependency-3F","(spec, dep)",""],["specific?","Bundler::Dependency","Bundler/Dependency.html#method-i-specific-3F","()",""],["specs","Bundler::Definition","Bundler/Definition.html#method-i-specs","()","<p>For given dependency list returns a SpecSet with Gemspec of all the\nrequired dependencies.\n\n<pre>1. The method ...</pre>\n"],["specs","Bundler::Environment","Bundler/Environment.html#method-i-specs","()",""],["specs","Bundler::Fetcher","Bundler/Fetcher.html#method-i-specs","(gem_names, source)","<p>return the specs in the bundler format as an index\n"],["specs","Bundler::Source::Git","Bundler/Source/Git.html#method-i-specs","(*)","<p>TODO: actually cache git specs\n"],["specs","Bundler::Source::Path","Bundler/Source/Path.html#method-i-specs","()",""],["specs","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-specs","()",""],["specs_by_name","Bundler::Index","Bundler/Index.html#method-i-specs_by_name","(name)",""],["specs_changed?","Bundler::Definition","Bundler/Definition.html#method-i-specs_changed-3F","(source, &block)","<p>Check if the specs of the given source changed according to the locked\nsource. A block should be in order …\n"],["specs_for","Bundler::Definition","Bundler/Definition.html#method-i-specs_for","(groups)",""],["specs_path","Bundler","Bundler.html#method-c-specs_path","()",""],["ssl","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-ssl","(connection)","<p>Enables SSL on <code>connection</code>\n"],["ssl_version=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-ssl_version-3D","(ssl_version)","<p>SSL version to use\n"],["start","Bundler::CLI","Bundler/CLI.html#method-c-start","(*)",""],["start","Bundler::Resolver","Bundler/Resolver.html#method-i-start","(requirements)",""],["start","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-start","(given_args = ARGV, config = {})","<p>Parses the command and options from the given args, instantiate the class\nand invoke the command. This …\n"],["start","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-start","(connection)","<p>Starts the Net::HTTP <code>connection</code>\n"],["start_resolution","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-start_resolution","()","<p>Sets up the resolution process @return [void]\n"],["state","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-state","()","<p>@return [RequirementState] the current state the resolution is\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">operating</span> <span class=\"ruby-identifier\">upon</span>\n</pre>\n"],["state_any?","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-state_any-3F","(state)","<p>@return [Boolean] whether or not the given state has any possibilities\n\n<pre>left.</pre>\n"],["state_index_for_unwind","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-state_index_for_unwind","()","<p>@return [Integer] The index to which the resolution should unwind in the\n\n<pre>case of conflict.</pre>\n"],["status_code","Bundler::BundlerError","Bundler/BundlerError.html#method-c-status_code","(code)",""],["stderr","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-stderr","()",""],["stdout","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-stdout","()",""],["stop","Bundler::Worker","Bundler/Worker.html#method-i-stop","()",""],["stop_on_unknown_option!","Bundler::Thor","Bundler/Thor.html#method-c-stop_on_unknown_option-21","(*command_names)","<p>Stop parsing of options as soon as an unknown option or a regular argument\nis encountered.  All remaining …\n"],["stop_threads","Bundler::Worker","Bundler/Worker.html#method-i-stop_threads","()","<p>Stop the worker threads by sending a poison object down the request queue\nso as worker threads after …\n"],["strict_args_position!","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-strict_args_position-21","()","<p>If you want only strict string args (useful when cascading thor classes),\ncall strict_args_position! …\n"],["strip_leading_spaces","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-strip_leading_spaces","(text)",""],["stub_rubygems","Bundler::RubygemsIntegration::Future","Bundler/RubygemsIntegration/Future.html#method-i-stub_rubygems","(specs)",""],["stub_rubygems","Bundler::RubygemsIntegration::Legacy","Bundler/RubygemsIntegration/Legacy.html#method-i-stub_rubygems","(specs)",""],["stub_rubygems","Bundler::RubygemsIntegration::Modern","Bundler/RubygemsIntegration/Modern.html#method-i-stub_rubygems","(specs)",""],["stub_rubygems","Bundler::RubygemsIntegration::Transitional","Bundler/RubygemsIntegration/Transitional.html#method-i-stub_rubygems","(specs)",""],["stub_source_index","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-stub_source_index","(specs)",""],["subclass_files","Bundler::Thor::Base","Bundler/Thor/Base.html#method-c-subclass_files","()","<p>Returns the files where the subclasses are kept.\n<p>Returns\n<p>Hash[path&lt;String&gt; =&gt; Class]\n"],["subclasses","Bundler::Thor::Base","Bundler/Thor/Base.html#method-c-subclasses","()","<p>Returns the classes that inherits from Bundler::Thor or\nBundler::Thor::Group.\n<p>Returns\n<p>Array\n"],["subcommand","Bundler::Thor","Bundler/Thor.html#method-c-subcommand","(subcommand, subcommand_class)",""],["subcommand_classes","Bundler::Thor","Bundler/Thor.html#method-c-subcommand_classes","()",""],["subcommand_help","Bundler::Thor","Bundler/Thor.html#method-c-subcommand_help","(cmd)",""],["subcommands","Bundler::Thor","Bundler/Thor.html#method-c-subcommands","()",""],["subtask","Bundler::Thor","Bundler/Thor.html#method-c-subtask","(subcommand, subcommand_class)",""],["subtask_help","Bundler::Thor","Bundler/Thor.html#method-c-subtask_help","(cmd)",""],["subtasks","Bundler::Thor","Bundler/Thor.html#method-c-subtasks","()",""],["successors","Bundler::Molinillo::DependencyGraph::Vertex","Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-successors","()","<p>@return [Set&lt;Vertex&gt;] the vertices of {#graph} that have an edge with\n\n<pre>`self` as their {Edge#origin}</pre>\n"],["sudo","Bundler","Bundler.html#method-c-sudo","(str)",""],["suppress_configured_credentials","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-suppress_configured_credentials","(remote)",""],["system_bindir","Bundler","Bundler.html#method-c-system_bindir","()",""],["tag_version","Bundler::GemHelper","Bundler/GemHelper.html#method-i-tag_version","()",""],["task","Object","Object.html#method-i-task","(*)",""],["task_help","Bundler::Thor","Bundler/Thor.html#method-c-task_help","(shell, command_name)",""],["tasks","Bundler::Thor::Base::ClassMethods","Bundler/Thor/Base/ClassMethods.html#method-i-tasks","()",""],["tell_me","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-tell_me","(msg, color = nil, newline = nil)","<p>valimism\n"],["template","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-template","(source, *args, &block)","<p>Gets an ERB template at the relative source, executes it and makes a copy\nat the relative destination. …\n"],["terminal_width","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-terminal_width","()","<p>This code was copied from Rake, available under MIT-LICENSE Copyright ©\n2003, 2004 Jim Weirich\n"],["thor","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-thor","(command, *args)","<p>Run a thor command. A hash of options can be given and it&#39;s converted\nto switches.\n<p>Parameters\n<p>command&lt;String&gt; … &mdash; "],["thor_classes_in","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-thor_classes_in","(klass)","<p>Returns the thor classes declared inside the given class.\n"],["thor_root","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-thor_root","()","<p>Returns the root where thor files are located, depending on the OS.\n"],["thor_root_glob","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-thor_root_glob","()","<p>Returns the files in the thor root. On Windows thor_root will be something\nlike this:\n\n<pre>C:\\Documents and ...</pre>\n"],["tmp","Bundler","Bundler.html#method-c-tmp","(name = Process.pid.to_s)",""],["to_a","Bundler::SpecSet","Bundler/SpecSet.html#method-i-to_a","()",""],["to_ary","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-to_ary","()",""],["to_bool","Bundler::Settings","Bundler/Settings.html#method-i-to_bool","(value)",""],["to_definition","Bundler::Dsl","Bundler/Dsl.html#method-i-to_definition","(lockfile, unlock)",""],["to_gemfile","Gem::Specification","Gem/Specification.html#method-i-to_gemfile","(path = nil)",""],["to_hash","Bundler::SpecSet","Bundler/SpecSet.html#method-i-to_hash","()",""],["to_lock","Bundler::Definition","Bundler/Definition.html#method-i-to_lock","()",""],["to_lock","Bundler::Dependency","Bundler/Dependency.html#method-i-to_lock","()",""],["to_lock","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-to_lock","()",""],["to_lock","Bundler::Source::Git","Bundler/Source/Git.html#method-i-to_lock","()",""],["to_lock","Bundler::Source::Path","Bundler/Source/Path.html#method-i-to_lock","()",""],["to_lock","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-to_lock","()",""],["to_lock","Gem::Dependency","Gem/Dependency.html#method-i-to_lock","()",""],["to_s","Bundler::DepProxy","Bundler/DepProxy.html#method-i-to_s","()",""],["to_s","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-to_s","()",""],["to_s","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-to_s","()",""],["to_s","Bundler::RubyVersion","Bundler/RubyVersion.html#method-i-to_s","()",""],["to_s","Bundler::Source::Git","Bundler/Source/Git.html#method-i-to_s","()",""],["to_s","Bundler::Source::Path","Bundler/Source/Path.html#method-i-to_s","()",""],["to_s","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-to_s","()",""],["to_specs","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-to_specs","()",""],["to_yaml_properties","Gem::Dependency","Gem/Dependency.html#method-i-to_yaml_properties","()",""],["trace","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-trace","(e, newline = nil)",""],["trace","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-trace","(message, newline = nil)",""],["truncate","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-truncate","(string, width)",""],["tsort","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-c-tsort","(vertices)","<p>Topologically sorts the given vertices. @param [Enumerable&lt;Vertex&gt;]\nvertices the vertices to be …\n"],["tsort_each_child","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-tsort_each_child","(vertex, &block)",""],["tsort_each_child","Bundler::SpecSet","Bundler/SpecSet.html#method-i-tsort_each_child","(s)",""],["tsort_each_node","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-tsort_each_node","()",""],["tsort_each_node","Bundler::SpecSet","Bundler/SpecSet.html#method-i-tsort_each_node","()",""],["type","Bundler::DepProxy","Bundler/DepProxy.html#method-i-type","()",""],["ui","Bundler","Bundler.html#method-c-ui","()",""],["ui=","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-ui-3D","(obj)",""],["uncomment_lines","Bundler::Thor::Actions","Bundler/Thor/Actions.html#method-i-uncomment_lines","(path, flag, *args)","<p>Uncomment all lines matching a given regex.  It will leave the space which\nexisted before the comment …\n"],["unescape","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-unescape","(str)","<p>URI::unescape wrapper\n"],["unix?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-unix-3F","()",""],["unlock!","Bundler::Source::Git","Bundler/Source/Git.html#method-i-unlock-21","()",""],["unmet_dependency_names","Bundler::Index","Bundler/Index.html#method-i-unmet_dependency_names","()","<p>returns a list of the dependencies\n"],["unmet_deps","Bundler::Source","Bundler/Source.html#method-i-unmet_deps","()",""],["unmet_deps","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-unmet_deps","()",""],["unwind_for_conflict","Bundler::Molinillo::Resolver::Resolution","Bundler/Molinillo/Resolver/Resolution.html#method-i-unwind_for_conflict","()","<p>Unwinds the states stack because a conflict has been encountered @return\n[void]\n"],["update","Bundler::CLI","Bundler/CLI.html#method-i-update","(*gems)",""],["update","Bundler::Environment","Bundler/Environment.html#method-i-update","(*gems)",""],["upgrade_lockfile","Bundler","Bundler.html#method-c-upgrade_lockfile","()",""],["uri","Bundler::Fetcher","Bundler/Fetcher.html#method-i-uri","()",""],["uri_escaped","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-uri_escaped","()","<p>Escape the URI for git commands\n"],["uri_hash","Bundler::Source::Git","Bundler/Source/Git.html#method-i-uri_hash","()",""],["use","Bundler::Index","Bundler/Index.html#method-i-use","(other, override_dupes = false)",""],["use_api","Bundler::Fetcher","Bundler/Fetcher.html#method-i-use_api","()",""],["use_path_completion?","Bundler::Thor::LineEditor::Readline","Bundler/Thor/LineEditor/Readline.html#method-i-use_path_completion-3F","()",""],["user_agent","Bundler::Fetcher","Bundler/Fetcher.html#method-c-user_agent","()",""],["user_bundle_path","Bundler","Bundler.html#method-c-user_bundle_path","()",""],["user_home","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-user_home","()",""],["user_home","Bundler::Thor::Util","Bundler/Thor/Util.html#method-c-user_home","()",""],["valid_for?","Bundler::SpecSet","Bundler/SpecSet.html#method-i-valid_for-3F","(deps)",""],["valid_keys","Bundler::Dsl","Bundler/Dsl.html#method-i-valid_keys","()",""],["validate_ext_name","Bundler::CLI::Gem","Bundler/CLI/Gem.html#method-i-validate_ext_name","()",""],["validate_ruby!","Bundler::Definition","Bundler/Definition.html#method-i-validate_ruby-21","()",""],["verify_callback=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-verify_callback-3D","(callback)","<p>SSL verification callback.\n"],["verify_gemfile_dependencies_are_found!","Bundler::Resolver","Bundler/Resolver.html#method-i-verify_gemfile_dependencies_are_found-21","(requirements)",""],["verify_mode=","Net::HTTP::Persistent","Net/HTTP/Persistent.html#method-i-verify_mode-3D","(verify_mode)","<p>Sets the HTTPS verify mode.  Defaults to OpenSSL::SSL::VERIFY_PEER.\n<p>Setting this to VERIFY_NONE is a  …\n"],["version","Bundler::CLI","Bundler/CLI.html#method-i-version","()",""],["version","Bundler::GemHelper","Bundler/GemHelper.html#method-i-version","()",""],["version","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-version","()",""],["version","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-c-version","()",""],["version","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-version","()",""],["version","Bundler::Source::Git::GitProxy","Bundler/Source/Git/GitProxy.html#method-i-version","()",""],["version","Bundler::SystemRubyVersion","Bundler/SystemRubyVersion.html#method-i-version","()",""],["version_message","Bundler::Source","Bundler/Source.html#method-i-version_message","(spec)",""],["version_tag","Bundler::GemHelper","Bundler/GemHelper.html#method-i-version_tag","()",""],["vertex_named","Bundler::Molinillo::DependencyGraph","Bundler/Molinillo/DependencyGraph.html#method-i-vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the vertex with the given name\n"],["viz","Bundler::CLI","Bundler/CLI.html#method-i-viz","()",""],["viz","Bundler::Graph","Bundler/Graph.html#method-i-viz","()",""],["warn","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-warn","(msg, newline = nil)",""],["warn","Bundler::UI::Silent","Bundler/UI/Silent.html#method-i-warn","(message, newline = nil)",""],["warn_if_root","Bundler::CLI::Install","Bundler/CLI/Install.html#method-i-warn_if_root","()",""],["well_formed_dependency","Bundler::Fetcher","Bundler/Fetcher.html#method-i-well_formed_dependency","(name, *requirements)",""],["which","Bundler","Bundler.html#method-c-which","(executable)",""],["with_build_args","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-with_build_args","(args)",""],["with_clean_env","Bundler","Bundler.html#method-c-with_clean_env","()",""],["with_clean_git_env","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-with_clean_git_env","(&block)",""],["with_friendly_errors","Bundler","Bundler.html#method-c-with_friendly_errors","()",""],["with_original_env","Bundler","Bundler.html#method-c-with_original_env","()",""],["with_padding","Bundler::Thor::Shell","Bundler/Thor/Shell.html#method-i-with_padding","()","<p>Yields the given block with padding.\n"],["with_source","Bundler::Dsl","Bundler/Dsl.html#method-i-with_source","(source)",""],["without","Bundler::Settings","Bundler/Settings.html#method-i-without","()",""],["without=","Bundler::Settings","Bundler/Settings.html#method-i-without-3D","(array)",""],["without_groups_message","Bundler::CLI::Common","Bundler/CLI/Common.html#method-c-without_groups_message","()",""],["without_groups_messages","Bundler::CLI::Update","Bundler/CLI/Update.html#method-i-without_groups_messages","()",""],["word_wrap","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-word_wrap","(text, line_width = @shell.terminal_width)",""],["write","Bundler::Env","Bundler/Env.html#method-i-write","(io)",""],["x64_mingw?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-x64_mingw-3F","()",""],["x64_mingw_20?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-x64_mingw_20-3F","()",""],["x64_mingw_21?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-x64_mingw_21-3F","()",""],["x64_mingw_22?","Bundler::CurrentRuby","Bundler/CurrentRuby.html#method-i-x64_mingw_22-3F","()",""],["yes?","Bundler::Thor::Shell::Basic","Bundler/Thor/Shell/Basic.html#method-i-yes-3F","(statement, color = nil)","<p>Make a question the to user and returns true if the user replies “y” or\n“yes”.\n"],["bundle","","lib/bundler/man/bundle.html","","<p>.&quot; generated with Ronn/v0.7.3 .&quot;\ngithub.com/rtomayko/ronn/tree/0.7.3 . .TH “BUNDLE” …\n"],["bundle-config","","lib/bundler/man/bundle-config.html","","<p>.&quot; generated with Ronn/v0.7.3 .&quot;\ngithub.com/rtomayko/ronn/tree/0.7.3 . .TH “BUNDLE-CONFIG” …\n"],["bundle-config","","lib/bundler/man/bundle-config_txt.html","","<p>BUNDLE-CONFIG(1)                                             \nBUNDLE-CONFIG(1)\n<p>NAME\n\n<pre>bundle-config - Set ...</pre>\n"],["bundle-exec","","lib/bundler/man/bundle-exec.html","","<p>.&quot; generated with Ronn/v0.7.3 .&quot;\ngithub.com/rtomayko/ronn/tree/0.7.3 . .TH “BUNDLE-EXEC” …\n"],["bundle-exec","","lib/bundler/man/bundle-exec_txt.html","","<p>BUNDLE-EXEC(1)                                                 \nBUNDLE-EXEC(1)\n<p>NAME\n\n<pre>bundle-exec - Execute ...</pre>\n"],["bundle-install","","lib/bundler/man/bundle-install.html","","<p>.&quot; generated with Ronn/v0.7.3 .&quot;\ngithub.com/rtomayko/ronn/tree/0.7.3 . .TH “BUNDLE-INSTALL” …\n"],["bundle-install","","lib/bundler/man/bundle-install_txt.html","","<p>BUNDLE-INSTALL(1)                                           \nBUNDLE-INSTALL(1)\n<p>NAME\n\n<pre>bundle-install - Install ...</pre>\n"],["bundle-package","","lib/bundler/man/bundle-package.html","","<p>.&quot; generated with Ronn/v0.7.3 .&quot;\ngithub.com/rtomayko/ronn/tree/0.7.3 . .TH “BUNDLE-PACKAGE” …\n"],["bundle-package","","lib/bundler/man/bundle-package_txt.html","","<p>BUNDLE-PACKAGE(1)                                           \nBUNDLE-PACKAGE(1)\n<p>NAME\n\n<pre>bundle-package - Package ...</pre>\n"],["bundle-platform","","lib/bundler/man/bundle-platform.html","","<p>.&quot; generated with Ronn/v0.7.3 .&quot;\ngithub.com/rtomayko/ronn/tree/0.7.3 . .TH “BUNDLE-PLATFORM” …\n"],["bundle-platform","","lib/bundler/man/bundle-platform_txt.html","","<p>BUNDLE-PLATFORM(1)                                         \nBUNDLE-PLATFORM(1)\n<p>NAME\n\n<pre>bundle-platform - Displays ...</pre>\n"],["bundle-update","","lib/bundler/man/bundle-update.html","","<p>.&quot; generated with Ronn/v0.7.3 .&quot;\ngithub.com/rtomayko/ronn/tree/0.7.3 . .TH “BUNDLE-UPDATE” …\n"],["bundle-update","","lib/bundler/man/bundle-update_txt.html","","<p>BUNDLE-UPDATE(1)                                             \nBUNDLE-UPDATE(1)\n<p>NAME\n\n<pre>bundle-update - Update ...</pre>\n"],["bundle","","lib/bundler/man/bundle_txt.html","","<p>BUNDLE(1)                                                           \nBUNDLE(1)\n<p>NAME\n\n<pre>bundle - Ruby Dependency ...</pre>\n"],["gemfile.5","","lib/bundler/man/gemfile_5.html","","<p>.&quot; generated with Ronn/v0.7.3 .&quot;\ngithub.com/rtomayko/ronn/tree/0.7.3 . .TH “GEMFILE” …\n"],["gemfile.5","","lib/bundler/man/gemfile_5_txt.html","","<p>GEMFILE(5)                                                         \nGEMFILE(5)\n<p>NAME\n\n<pre>Gemfile - A format ...</pre>\n"],["Executable","","lib/bundler/templates/Executable.html","","<p>#!/usr/bin/env &lt;%= Bundler.settings || RbConfig::CONFIG %&gt; # # This\nfile was generated by Bundler …\n"],["Executable.standalone","","lib/bundler/templates/Executable_standalone.html","","<p>#!/usr/bin/env &lt;%= Bundler.settings || RbConfig::CONFIG %&gt; # # This\nfile was generated by Bundler …\n"],["Gemfile","","lib/bundler/templates/Gemfile.html","","<p># A sample Gemfile source “rubygems.org”\n<p># gem “rails”\n"],["CODE_OF_CONDUCT.md.tt","","lib/bundler/templates/newgem/CODE_OF_CONDUCT_md_tt.html","","<p>Contributor Code of Conduct\n<p>As contributors and maintainers of this project, we pledge to respect all …\n"],["Gemfile.tt","","lib/bundler/templates/newgem/Gemfile_tt.html","","<p>source &#39;rubygems.org&#39;\n<p># Specify your gem&#39;s dependencies in &lt;%=config%&gt;.gemspec gemspec\n…\n"],["LICENSE.txt.tt","","lib/bundler/templates/newgem/LICENSE_txt_tt.html","","<p>The MIT License (MIT)\n<p>Copyright © &lt;%=Time.now.year%&gt; &lt;%=config%&gt;\n<p>Permission is hereby granted, …\n"],["README.md.tt","","lib/bundler/templates/newgem/README_md_tt.html","","<p>&lt;%=config%&gt;\n<p>Welcome to your new gem! In this directory, you&#39;ll find the files you\nneed to be …\n"],["Rakefile.tt","","lib/bundler/templates/newgem/Rakefile_tt.html","","<p>require “bundler/gem_tasks” &lt;% if config == &#39;minitest&#39; -%&gt;\nrequire “rake/testtask” …\n"],["console.tt","","lib/bundler/templates/newgem/bin/console_tt.html","","<p>#!/usr/bin/env ruby\n<p>require “bundler/setup” require “&lt;%= config %&gt;”\n<p># You can …\n"],["setup.tt","","lib/bundler/templates/newgem/bin/setup_tt.html","","<p>#!/bin/bash set -euo pipefail IFS=$&#39;nt&#39;\n<p>bundle install\n<p># Do any other automated setup that you …\n"],["newgem.tt","","lib/bundler/templates/newgem/exe/newgem_tt.html","","<p>#!/usr/bin/env ruby\n<p>require “&lt;%= config %&gt;”\n"],["extconf.rb.tt","","lib/bundler/templates/newgem/ext/newgem/extconf_rb_tt.html","","<p>require “mkmf”\n<p>create_makefile(&lt;%= config.inspect %&gt;)\n"],["newgem.c.tt","","lib/bundler/templates/newgem/ext/newgem/newgem_c_tt.html","","<p>#include “&lt;%=config%&gt;.h”\n<p>VALUE rb_m<%=config.join%&gt;;\n<p>void Init_<%=config%&gt;(void) …\n"],["newgem.h.tt","","lib/bundler/templates/newgem/ext/newgem/newgem_h_tt.html","","<p>ifndef &lt;%=config.upcase%&gt;_H define &lt;%=config.upcase%&gt;_H 1\ninclude “ruby.h” endif …\n"],["gitignore.tt","","lib/bundler/templates/newgem/gitignore_tt.html","","<p>/.bundle/ /.yardoc /Gemfile.lock /_yardoc/ /coverage/ /doc/ /pkg/\n/spec/reports/ /tmp/ &lt;%- if config …\n"],["newgem.rb.tt","","lib/bundler/templates/newgem/lib/newgem_rb_tt.html","","<p>require “&lt;%=config%&gt;/version” &lt;%- if config -%&gt; require\n“&lt;%=config%&gt;/&lt;%= …\n"],["version.rb.tt","","lib/bundler/templates/newgem/lib/newgem/version_rb_tt.html","","<p>&lt;%- config.each_with_index do |c,i| -%&gt; &lt;%= &#39;  &#39;*i\n%&gt;module &lt;%= c %&gt; &lt;%- …\n"],["newgem.gemspec.tt","","lib/bundler/templates/newgem/newgem_gemspec_tt.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"],["rspec.tt","","lib/bundler/templates/newgem/rspec_tt.html","","<p>–format documentation –color\n"],["newgem_spec.rb.tt","","lib/bundler/templates/newgem/spec/newgem_spec_rb_tt.html","","<p>require &#39;spec_helper&#39;\n<p>describe &lt;%= config %&gt; do\n\n<pre>it &#39;has a version number&#39; do\n  expect(&lt;%= ...</pre>\n"],["spec_helper.rb.tt","","lib/bundler/templates/newgem/spec/spec_helper_rb_tt.html","","<p>$LOAD_PATH.unshift File.expand_path(&#39;../../lib&#39;, __FILE__) require\n&#39;&lt;%= config %&gt;&#39; …\n"],["minitest_helper.rb.tt","","lib/bundler/templates/newgem/test/minitest_helper_rb_tt.html","","<p>$LOAD_PATH.unshift File.expand_path(&#39;../../lib&#39;, __FILE__) require\n&#39;&lt;%= config %&gt;&#39; …\n"],["test_newgem.rb.tt","","lib/bundler/templates/newgem/test/test_newgem_rb_tt.html","","<p>require &#39;minitest_helper&#39;\n<p>class Test&lt;%= config %&gt; &lt; Minitest::Test\n\n<pre>def test_that_it_has_a_version_number ...</pre>\n"]]}}