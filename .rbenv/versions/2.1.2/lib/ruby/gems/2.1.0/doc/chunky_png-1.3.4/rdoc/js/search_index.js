var search_data = {"index":{"searchIndex":["chunkypng","crcmismatch","canvas","adam7interlacing","dataurlexporting","dataurlimporting","drawing","masking","operations","pngdecoding","pngencoding","resampling","streamexporting","streamimporting","chunk","base","compressedtext","end","generic","header","imagedata","internationaltext","palette","text","transparency","color","datastream","dimension","exception","expectationfailed","image","notsupported","outofbounds","palette","point","rmagick","signaturemismatch","vector","enumerable","string","<=>()","<=>()","==()","==()","==()","==()","color()","dimension()","point()","vector()","[]()","[]()","[]()","[]=()","a()","adam7_extract_pass()","adam7_merge_pass()","adam7_multiplier_offset()","adam7_pass_size()","adam7_pass_sizes()","alpha_decomposable?()","area()","area()","assert_height!()","assert_size!()","assert_width!()","assert_x!()","assert_xy!()","assert_y!()","b()","best_color_settings()","bezier_curve()","binomial_coefficient()","black_and_white?()","blend()","border()","border!()","build_dimension_from_object()","build_point_from_object()","can_decode?()","can_encode?()","change_mask_color!()","change_theme_color!()","check_size_constraints!()","chunks()","circle()","column()","combine_chunks()","compose()","compose()","compose!()","compose_pixel()","compose_pixel_unsafe()","compose_precise()","compose_quick()","content()","content()","content()","content()","crop()","crop!()","cylindrical_to_cubic()","decode_png_extract_1bit_value()","decode_png_extract_2bit_value()","decode_png_extract_4bit_value()","decode_png_image_pass()","decode_png_pixels_from_scanline_grayscale_16bit()","decode_png_pixels_from_scanline_grayscale_1bit()","decode_png_pixels_from_scanline_grayscale_2bit()","decode_png_pixels_from_scanline_grayscale_4bit()","decode_png_pixels_from_scanline_grayscale_8bit()","decode_png_pixels_from_scanline_grayscale_alpha_16bit()","decode_png_pixels_from_scanline_grayscale_alpha_8bit()","decode_png_pixels_from_scanline_indexed_1bit()","decode_png_pixels_from_scanline_indexed_2bit()","decode_png_pixels_from_scanline_indexed_4bit()","decode_png_pixels_from_scanline_indexed_8bit()","decode_png_pixels_from_scanline_method()","decode_png_pixels_from_scanline_truecolor_16bit()","decode_png_pixels_from_scanline_truecolor_8bit()","decode_png_pixels_from_scanline_truecolor_alpha_16bit()","decode_png_pixels_from_scanline_truecolor_alpha_8bit()","decode_png_pixelstream()","decode_png_resample_16bit_value()","decode_png_resample_1bit_value()","decode_png_resample_2bit_value()","decode_png_resample_4bit_value()","decode_png_resample_8bit_value()","decode_png_str_scanline()","decode_png_str_scanline_average()","decode_png_str_scanline_paeth()","decode_png_str_scanline_sub()","decode_png_str_scanline_sub_none()","decode_png_str_scanline_up()","decode_png_with_adam7_interlacing()","decode_png_without_interlacing()","decompose_alpha()","decompose_alpha_component()","decompose_alpha_components()","decompose_color()","determine_bit_depth()","determine_png_encoding()","dimension()","dimension()","each()","each_chunk()","each_edge()","edges()","empty_bytearray()","encode_png_image_pass_to_stream()","encode_png_image_with_interlacing()","encode_png_image_without_interlacing()","encode_png_pixels_to_scanline_grayscale_1bit()","encode_png_pixels_to_scanline_grayscale_2bit()","encode_png_pixels_to_scanline_grayscale_4bit()","encode_png_pixels_to_scanline_grayscale_8bit()","encode_png_pixels_to_scanline_grayscale_alpha_8bit()","encode_png_pixels_to_scanline_indexed_1bit()","encode_png_pixels_to_scanline_indexed_2bit()","encode_png_pixels_to_scanline_indexed_4bit()","encode_png_pixels_to_scanline_indexed_8bit()","encode_png_pixels_to_scanline_method()","encode_png_pixels_to_scanline_truecolor_8bit()","encode_png_pixels_to_scanline_truecolor_alpha_8bit()","encode_png_pixelstream()","encode_png_str_scanline_average()","encode_png_str_scanline_none()","encode_png_str_scanline_paeth()","encode_png_str_scanline_sub()","encode_png_str_scanline_up()","eql?()","eql?()","eql?()","eql?()","euclidean_distance_rgba()","export()","extract_mask()","fade()","flip()","flip!()","flip_horizontally()","flip_horizontally!()","flip_vertically()","flip_vertically!()","force_binary()","from_abgr_stream()","from_bgr_stream()","from_blob()","from_blob()","from_canvas()","from_canvas()","from_chunks()","from_data_url()","from_datastream()","from_datastream()","from_file()","from_file()","from_hex()","from_hsb()","from_hsl()","from_hsv()","from_io()","from_io()","from_pixels()","from_rgb_stream()","from_rgb_stream()","from_rgba_stream()","from_rgba_stream()","from_stream()","from_string()","from_string()","fully_transparent?()","g()","get_pixel()","grayscale()","grayscale()","grayscale!()","grayscale?()","grayscale?()","grayscale_alpha()","grayscale_entry()","grayscale_teint()","height()","html_color()","hue_and_chroma()","imagedata()","import()","include?()","include?()","include_point?()","include_x?()","include_xy?()","include_y?()","index()","indexable?()","initialize_copy()","initialize_copy()","inspect()","int8_mult()","interpolate_quick()","length()","line()","line_xiaolin_wu()","max_x()","max_y()","metadata()","metadata_chunks()","min_x()","min_y()","minmax()","mirror()","mirror!()","multiple_from_array()","multiple_from_string()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","offset()","opaque!()","opaque?()","opaque?()","opaque_palette()","palette()","palette_alpha_channel()","parse()","pass_bytesize()","pixel_bitsize()","pixel_bytesize()","polygon()","r()","read()","read()","read()","read()","read()","read()","read_bytes()","rect()","replace()","replace!()","replace_canvas!()","replace_column!()","replace_row!()","resample()","resample_bilinear()","resample_bilinear!()","resample_nearest_neighbor()","resample_nearest_neighbor!()","resize()","rgb()","rgba()","rotate_180()","rotate_180!()","rotate_clockwise()","rotate_clockwise!()","rotate_counter_clockwise()","rotate_counter_clockwise!()","rotate_left()","rotate_left!()","rotate_right()","rotate_right!()","row()","samples_per_pixel()","save()","save()","scanline_bytesize()","set_pixel()","set_pixel_if_within_bounds()","split_in_chunks()","steps()","steps_residues()","to_a()","to_a()","to_abgr_stream()","to_alpha_channel_stream()","to_ary()","to_ary()","to_blob()","to_blob()","to_data_url()","to_datastream()","to_datastream()","to_grayscale()","to_grayscale_alpha_bytes()","to_grayscale_bytes()","to_grayscale_stream()","to_hex()","to_hsb()","to_hsl()","to_hsv()","to_image()","to_plte_chunk()","to_rgb_stream()","to_rgba_stream()","to_s()","to_s()","to_string()","to_string()","to_trns_chunk()","to_truecolor_alpha_bytes()","to_truecolor_bytes()","trim()","trim!()","truecolor_entry()","verify_crc!()","verify_signature!()","width()","within_bounds?()","write()","write()","write()","write_with_crc()","x_range()","y_range()","benchmarking","changelog","contributing","readme"],"longSearchIndex":["chunkypng","chunkypng::crcmismatch","chunkypng::canvas","chunkypng::canvas::adam7interlacing","chunkypng::canvas::dataurlexporting","chunkypng::canvas::dataurlimporting","chunkypng::canvas::drawing","chunkypng::canvas::masking","chunkypng::canvas::operations","chunkypng::canvas::pngdecoding","chunkypng::canvas::pngencoding","chunkypng::canvas::resampling","chunkypng::canvas::streamexporting","chunkypng::canvas::streamimporting","chunkypng::chunk","chunkypng::chunk::base","chunkypng::chunk::compressedtext","chunkypng::chunk::end","chunkypng::chunk::generic","chunkypng::chunk::header","chunkypng::chunk::imagedata","chunkypng::chunk::internationaltext","chunkypng::chunk::palette","chunkypng::chunk::text","chunkypng::chunk::transparency","chunkypng::color","chunkypng::datastream","chunkypng::dimension","chunkypng::exception","chunkypng::expectationfailed","chunkypng::image","chunkypng::notsupported","chunkypng::outofbounds","chunkypng::palette","chunkypng::point","chunkypng::rmagick","chunkypng::signaturemismatch","chunkypng::vector","enumerable","string","chunkypng::dimension#<=>()","chunkypng::point#<=>()","chunkypng::canvas#==()","chunkypng::dimension#==()","chunkypng::point#==()","chunkypng::vector#==()","chunkypng::color()","chunkypng::dimension()","chunkypng::point()","chunkypng::vector()","chunkypng::canvas#[]()","chunkypng::palette#[]()","chunkypng::vector#[]()","chunkypng::canvas#[]=()","chunkypng::color#a()","chunkypng::canvas::adam7interlacing#adam7_extract_pass()","chunkypng::canvas::adam7interlacing#adam7_merge_pass()","chunkypng::canvas::adam7interlacing#adam7_multiplier_offset()","chunkypng::canvas::adam7interlacing#adam7_pass_size()","chunkypng::canvas::adam7interlacing#adam7_pass_sizes()","chunkypng::color#alpha_decomposable?()","chunkypng::canvas#area()","chunkypng::dimension#area()","chunkypng::canvas#assert_height!()","chunkypng::canvas#assert_size!()","chunkypng::canvas#assert_width!()","chunkypng::canvas#assert_x!()","chunkypng::canvas#assert_xy!()","chunkypng::canvas#assert_y!()","chunkypng::color#b()","chunkypng::palette#best_color_settings()","chunkypng::canvas::drawing#bezier_curve()","chunkypng::canvas::drawing#binomial_coefficient()","chunkypng::palette#black_and_white?()","chunkypng::color#blend()","chunkypng::canvas::operations#border()","chunkypng::canvas::operations#border!()","chunkypng::build_dimension_from_object()","chunkypng::build_point_from_object()","chunkypng::palette#can_decode?()","chunkypng::palette#can_encode?()","chunkypng::canvas::masking#change_mask_color!()","chunkypng::canvas::masking#change_theme_color!()","chunkypng::canvas::operations#check_size_constraints!()","chunkypng::datastream#chunks()","chunkypng::canvas::drawing#circle()","chunkypng::canvas#column()","chunkypng::chunk::imagedata::combine_chunks()","chunkypng::canvas::operations#compose()","chunkypng::color#compose()","chunkypng::canvas::operations#compose!()","chunkypng::canvas::drawing#compose_pixel()","chunkypng::canvas::drawing#compose_pixel_unsafe()","chunkypng::color#compose_precise()","chunkypng::color#compose_quick()","chunkypng::chunk::compressedtext#content()","chunkypng::chunk::end#content()","chunkypng::chunk::header#content()","chunkypng::chunk::text#content()","chunkypng::canvas::operations#crop()","chunkypng::canvas::operations#crop!()","chunkypng::color#cylindrical_to_cubic()","chunkypng::canvas::pngdecoding#decode_png_extract_1bit_value()","chunkypng::canvas::pngdecoding#decode_png_extract_2bit_value()","chunkypng::canvas::pngdecoding#decode_png_extract_4bit_value()","chunkypng::canvas::pngdecoding#decode_png_image_pass()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_grayscale_16bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_grayscale_1bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_grayscale_2bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_grayscale_4bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_grayscale_8bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_grayscale_alpha_16bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_grayscale_alpha_8bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_indexed_1bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_indexed_2bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_indexed_4bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_indexed_8bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_method()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_truecolor_16bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_truecolor_8bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_truecolor_alpha_16bit()","chunkypng::canvas::pngdecoding#decode_png_pixels_from_scanline_truecolor_alpha_8bit()","chunkypng::canvas::pngdecoding#decode_png_pixelstream()","chunkypng::canvas::pngdecoding#decode_png_resample_16bit_value()","chunkypng::canvas::pngdecoding#decode_png_resample_1bit_value()","chunkypng::canvas::pngdecoding#decode_png_resample_2bit_value()","chunkypng::canvas::pngdecoding#decode_png_resample_4bit_value()","chunkypng::canvas::pngdecoding#decode_png_resample_8bit_value()","chunkypng::canvas::pngdecoding#decode_png_str_scanline()","chunkypng::canvas::pngdecoding#decode_png_str_scanline_average()","chunkypng::canvas::pngdecoding#decode_png_str_scanline_paeth()","chunkypng::canvas::pngdecoding#decode_png_str_scanline_sub()","chunkypng::canvas::pngdecoding#decode_png_str_scanline_sub_none()","chunkypng::canvas::pngdecoding#decode_png_str_scanline_up()","chunkypng::canvas::pngdecoding#decode_png_with_adam7_interlacing()","chunkypng::canvas::pngdecoding#decode_png_without_interlacing()","chunkypng::color#decompose_alpha()","chunkypng::color#decompose_alpha_component()","chunkypng::color#decompose_alpha_components()","chunkypng::color#decompose_color()","chunkypng::palette#determine_bit_depth()","chunkypng::canvas::pngencoding#determine_png_encoding()","chunkypng::canvas#dimension()","chunkypng::vector#dimension()","chunkypng::vector#each()","chunkypng::datastream#each_chunk()","chunkypng::vector#each_edge()","chunkypng::vector#edges()","chunkypng::datastream::empty_bytearray()","chunkypng::canvas::pngencoding#encode_png_image_pass_to_stream()","chunkypng::canvas::pngencoding#encode_png_image_with_interlacing()","chunkypng::canvas::pngencoding#encode_png_image_without_interlacing()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_grayscale_1bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_grayscale_2bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_grayscale_4bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_grayscale_8bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_grayscale_alpha_8bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_indexed_1bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_indexed_2bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_indexed_4bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_indexed_8bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_method()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_truecolor_8bit()","chunkypng::canvas::pngencoding#encode_png_pixels_to_scanline_truecolor_alpha_8bit()","chunkypng::canvas::pngencoding#encode_png_pixelstream()","chunkypng::canvas::pngencoding#encode_png_str_scanline_average()","chunkypng::canvas::pngencoding#encode_png_str_scanline_none()","chunkypng::canvas::pngencoding#encode_png_str_scanline_paeth()","chunkypng::canvas::pngencoding#encode_png_str_scanline_sub()","chunkypng::canvas::pngencoding#encode_png_str_scanline_up()","chunkypng::canvas#eql?()","chunkypng::dimension#eql?()","chunkypng::point#eql?()","chunkypng::vector#eql?()","chunkypng::color#euclidean_distance_rgba()","chunkypng::rmagick#export()","chunkypng::canvas::masking#extract_mask()","chunkypng::color#fade()","chunkypng::canvas::operations#flip()","chunkypng::canvas::operations#flip!()","chunkypng::canvas::operations#flip_horizontally()","chunkypng::canvas::operations#flip_horizontally!()","chunkypng::canvas::operations#flip_vertically()","chunkypng::canvas::operations#flip_vertically!()","chunkypng::force_binary()","chunkypng::canvas::streamimporting#from_abgr_stream()","chunkypng::canvas::streamimporting#from_bgr_stream()","chunkypng::canvas::pngdecoding#from_blob()","chunkypng::datastream::from_blob()","chunkypng::canvas::from_canvas()","chunkypng::palette::from_canvas()","chunkypng::palette::from_chunks()","chunkypng::canvas::dataurlimporting#from_data_url()","chunkypng::canvas::pngdecoding#from_datastream()","chunkypng::image::from_datastream()","chunkypng::canvas::pngdecoding#from_file()","chunkypng::datastream::from_file()","chunkypng::color#from_hex()","chunkypng::color#from_hsb()","chunkypng::color#from_hsl()","chunkypng::color#from_hsv()","chunkypng::canvas::pngdecoding#from_io()","chunkypng::datastream::from_io()","chunkypng::palette::from_pixels()","chunkypng::canvas::streamimporting#from_rgb_stream()","chunkypng::color#from_rgb_stream()","chunkypng::canvas::streamimporting#from_rgba_stream()","chunkypng::color#from_rgba_stream()","chunkypng::canvas::pngdecoding#from_stream()","chunkypng::canvas::pngdecoding#from_string()","chunkypng::datastream::from_string()","chunkypng::color#fully_transparent?()","chunkypng::color#g()","chunkypng::canvas#get_pixel()","chunkypng::canvas::operations#grayscale()","chunkypng::color#grayscale()","chunkypng::canvas::operations#grayscale!()","chunkypng::color#grayscale?()","chunkypng::palette#grayscale?()","chunkypng::color#grayscale_alpha()","chunkypng::chunk::transparency#grayscale_entry()","chunkypng::color#grayscale_teint()","chunkypng::vector#height()","chunkypng::color#html_color()","chunkypng::color#hue_and_chroma()","chunkypng::datastream#imagedata()","chunkypng::rmagick#import()","chunkypng::canvas#include?()","chunkypng::dimension#include?()","chunkypng::canvas#include_point?()","chunkypng::canvas#include_x?()","chunkypng::canvas#include_xy?()","chunkypng::canvas#include_y?()","chunkypng::palette#index()","chunkypng::palette#indexable?()","chunkypng::canvas#initialize_copy()","chunkypng::image#initialize_copy()","chunkypng::canvas#inspect()","chunkypng::color#int8_mult()","chunkypng::color#interpolate_quick()","chunkypng::vector#length()","chunkypng::canvas::drawing#line()","chunkypng::canvas::drawing#line_xiaolin_wu()","chunkypng::vector#max_x()","chunkypng::vector#max_y()","chunkypng::datastream#metadata()","chunkypng::image#metadata_chunks()","chunkypng::vector#min_x()","chunkypng::vector#min_y()","enumerable#minmax()","chunkypng::canvas::operations#mirror()","chunkypng::canvas::operations#mirror!()","chunkypng::vector::multiple_from_array()","chunkypng::vector::multiple_from_string()","chunkypng::canvas::new()","chunkypng::chunk::base::new()","chunkypng::chunk::compressedtext::new()","chunkypng::chunk::end::new()","chunkypng::chunk::generic::new()","chunkypng::chunk::header::new()","chunkypng::chunk::text::new()","chunkypng::datastream::new()","chunkypng::dimension::new()","chunkypng::image::new()","chunkypng::palette::new()","chunkypng::point::new()","chunkypng::vector::new()","chunkypng::vector#offset()","chunkypng::color#opaque!()","chunkypng::color#opaque?()","chunkypng::palette#opaque?()","chunkypng::palette#opaque_palette()","chunkypng::canvas#palette()","chunkypng::chunk::transparency#palette_alpha_channel()","chunkypng::color#parse()","chunkypng::color#pass_bytesize()","chunkypng::color#pixel_bitsize()","chunkypng::color#pixel_bytesize()","chunkypng::canvas::drawing#polygon()","chunkypng::color#r()","chunkypng::chunk::read()","chunkypng::chunk::compressedtext::read()","chunkypng::chunk::end::read()","chunkypng::chunk::generic::read()","chunkypng::chunk::header::read()","chunkypng::chunk::text::read()","chunkypng::chunk::read_bytes()","chunkypng::canvas::drawing#rect()","chunkypng::canvas::operations#replace()","chunkypng::canvas::operations#replace!()","chunkypng::canvas#replace_canvas!()","chunkypng::canvas#replace_column!()","chunkypng::canvas#replace_row!()","chunkypng::canvas::resampling#resample()","chunkypng::canvas::resampling#resample_bilinear()","chunkypng::canvas::resampling#resample_bilinear!()","chunkypng::canvas::resampling#resample_nearest_neighbor()","chunkypng::canvas::resampling#resample_nearest_neighbor!()","chunkypng::canvas::resampling#resize()","chunkypng::color#rgb()","chunkypng::color#rgba()","chunkypng::canvas::operations#rotate_180()","chunkypng::canvas::operations#rotate_180!()","chunkypng::canvas::operations#rotate_clockwise()","chunkypng::canvas::operations#rotate_clockwise!()","chunkypng::canvas::operations#rotate_counter_clockwise()","chunkypng::canvas::operations#rotate_counter_clockwise!()","chunkypng::canvas::operations#rotate_left()","chunkypng::canvas::operations#rotate_left!()","chunkypng::canvas::operations#rotate_right()","chunkypng::canvas::operations#rotate_right!()","chunkypng::canvas#row()","chunkypng::color#samples_per_pixel()","chunkypng::canvas::pngencoding#save()","chunkypng::datastream#save()","chunkypng::color#scanline_bytesize()","chunkypng::canvas#set_pixel()","chunkypng::canvas#set_pixel_if_within_bounds()","chunkypng::chunk::imagedata::split_in_chunks()","chunkypng::canvas::resampling#steps()","chunkypng::canvas::resampling#steps_residues()","chunkypng::dimension#to_a()","chunkypng::point#to_a()","chunkypng::canvas::streamexporting#to_abgr_stream()","chunkypng::canvas::streamexporting#to_alpha_channel_stream()","chunkypng::dimension#to_ary()","chunkypng::point#to_ary()","chunkypng::canvas::pngencoding#to_blob()","chunkypng::datastream#to_blob()","chunkypng::canvas::dataurlexporting#to_data_url()","chunkypng::canvas::pngencoding#to_datastream()","chunkypng::image#to_datastream()","chunkypng::color#to_grayscale()","chunkypng::color#to_grayscale_alpha_bytes()","chunkypng::color#to_grayscale_bytes()","chunkypng::canvas::streamexporting#to_grayscale_stream()","chunkypng::color#to_hex()","chunkypng::color#to_hsb()","chunkypng::color#to_hsl()","chunkypng::color#to_hsv()","chunkypng::canvas#to_image()","chunkypng::palette#to_plte_chunk()","chunkypng::canvas::streamexporting#to_rgb_stream()","chunkypng::canvas::streamexporting#to_rgba_stream()","chunkypng::canvas::pngencoding#to_s()","chunkypng::datastream#to_s()","chunkypng::canvas::pngencoding#to_string()","chunkypng::datastream#to_string()","chunkypng::palette#to_trns_chunk()","chunkypng::color#to_truecolor_alpha_bytes()","chunkypng::color#to_truecolor_bytes()","chunkypng::canvas::operations#trim()","chunkypng::canvas::operations#trim!()","chunkypng::chunk::transparency#truecolor_entry()","chunkypng::chunk::verify_crc!()","chunkypng::datastream::verify_signature!()","chunkypng::vector#width()","chunkypng::point#within_bounds?()","chunkypng::canvas::pngencoding#write()","chunkypng::chunk::base#write()","chunkypng::datastream#write()","chunkypng::chunk::base#write_with_crc()","chunkypng::vector#x_range()","chunkypng::vector#y_range()","","","",""],"info":[["ChunkyPNG","","ChunkyPNG.html","","<p>ChunkyPNG - the pure ruby library to access PNG files.\n<p>The ChunkyPNG module defines some constants that …\n"],["ChunkyPNG::CRCMismatch","","ChunkyPNG/CRCMismatch.html","","<p>Exception that is raised if the CRC check for a block fails\n"],["ChunkyPNG::Canvas","","ChunkyPNG/Canvas.html","","<p>The ChunkyPNG::Canvas class represents a raster image as a matrix of\npixels.\n<p>This class supports loading …\n"],["ChunkyPNG::Canvas::Adam7Interlacing","","ChunkyPNG/Canvas/Adam7Interlacing.html","","<p>Methods for decoding and encoding Adam7 interlacing.\n<p>Adam7 interlacing extracts 7 pass images out of a …\n"],["ChunkyPNG::Canvas::DataUrlExporting","","ChunkyPNG/Canvas/DataUrlExporting.html","","<p>Methods to export a canvas to a PNG data URL.\n"],["ChunkyPNG::Canvas::DataUrlImporting","","ChunkyPNG/Canvas/DataUrlImporting.html","","<p>Methods to import a canvas from a PNG data URL.\n"],["ChunkyPNG::Canvas::Drawing","","ChunkyPNG/Canvas/Drawing.html","","<p>Module that adds some primitive drawing methods to {ChunkyPNG::Canvas}.\n<p>All of these methods change the …\n"],["ChunkyPNG::Canvas::Masking","","ChunkyPNG/Canvas/Masking.html","","<p>The ChunkyPNG::Canvas::Masking module defines methods to perform masking\nand theming operations on a …\n"],["ChunkyPNG::Canvas::Operations","","ChunkyPNG/Canvas/Operations.html","","<p>The ChunkyPNG::Canvas::Operations module defines methods to perform\noperations on a {ChunkyPNG::Canvas}. …\n"],["ChunkyPNG::Canvas::PNGDecoding","","ChunkyPNG/Canvas/PNGDecoding.html","","<p>The PNGDecoding contains methods for decoding PNG datastreams to create a \nCanvas object. The datastream …\n"],["ChunkyPNG::Canvas::PNGEncoding","","ChunkyPNG/Canvas/PNGEncoding.html","","<p>Methods for encoding a Canvas instance into a PNG datastream.\n<p>Overview of the encoding process:\n<p>The image …\n"],["ChunkyPNG::Canvas::Resampling","","ChunkyPNG/Canvas/Resampling.html","","<p>The ChunkyPNG::Canvas::Resampling module defines methods to perform image\nresampling to  a {ChunkyPNG::Canvas}. …\n"],["ChunkyPNG::Canvas::StreamExporting","","ChunkyPNG/Canvas/StreamExporting.html","","<p>Methods to save load a canvas from to stream, encoded in RGB, RGBA, BGR or\nABGR format.\n"],["ChunkyPNG::Canvas::StreamImporting","","ChunkyPNG/Canvas/StreamImporting.html","","<p>Methods to quickly load a canvas from a stream, encoded in RGB, RGBA, BGR\nor ABGR format.\n"],["ChunkyPNG::Chunk","","ChunkyPNG/Chunk.html","","<p>A PNG datastream consists of multiple chunks. This module, and the classes\ncontained within, help with …\n"],["ChunkyPNG::Chunk::Base","","ChunkyPNG/Chunk/Base.html","","<p>The base chunk class is the superclass for every chunk type. It contains\nmethods to write the chunk to …\n"],["ChunkyPNG::Chunk::CompressedText","","ChunkyPNG/Chunk/CompressedText.html","","<p>The CompressedText (zTXt) chunk contains keyword/value metadata about the\nPNG stream. In this chunk, …\n"],["ChunkyPNG::Chunk::End","","ChunkyPNG/Chunk/End.html","","<p>The End (IEND) chunk indicates the last chunk of a PNG stream. It does not\ncontain any data.\n"],["ChunkyPNG::Chunk::Generic","","ChunkyPNG/Chunk/Generic.html","","<p>The Generic chunk type will read the content from the chunk as it, and will\nwrite it back as it was read. …\n"],["ChunkyPNG::Chunk::Header","","ChunkyPNG/Chunk/Header.html","","<p>The header (IHDR) chunk is the first chunk of every PNG image, and contains\ninformation about the image: …\n"],["ChunkyPNG::Chunk::ImageData","","ChunkyPNG/Chunk/ImageData.html","",""],["ChunkyPNG::Chunk::InternationalText","","ChunkyPNG/Chunk/InternationalText.html","","<p>The Text (iTXt) chunk contains keyword/value metadata about the PNG stream.\n<p>The metadata in this chunk …\n"],["ChunkyPNG::Chunk::Palette","","ChunkyPNG/Chunk/Palette.html","","<p>The Palette (PLTE) chunk contains the image&#39;s palette, i.e. the 8-bit\nRGB colors this image is using. …\n"],["ChunkyPNG::Chunk::Text","","ChunkyPNG/Chunk/Text.html","","<p>The Text (tEXt) chunk contains keyword/value metadata about the PNG stream.\nIn this chunk, the value …\n"],["ChunkyPNG::Chunk::Transparency","","ChunkyPNG/Chunk/Transparency.html","","<p>A transparency (tRNS) chunk defines the transparency for an image.\n<p>For indexed images, it contains the …\n"],["ChunkyPNG::Color","","ChunkyPNG/Color.html","","<p>The Color module defines methods for handling colors. Within the ChunkyPNG\nlibrary, the concepts of pixels …\n"],["ChunkyPNG::Datastream","","ChunkyPNG/Datastream.html","","<p>The Datastream class represents a PNG formatted datastream. It supports\nboth reading from and writing …\n"],["ChunkyPNG::Dimension","","ChunkyPNG/Dimension.html","","<p>Class that represents the dimension of something, e.g. a\n{ChunkyPNG::Canvas}.\n<p>This class contains some …\n"],["ChunkyPNG::Exception","","ChunkyPNG/Exception.html","","<p>Default exception class for ChunkyPNG\n"],["ChunkyPNG::ExpectationFailed","","ChunkyPNG/ExpectationFailed.html","","<p>Exception that is raised if an expectation fails.\n"],["ChunkyPNG::Image","","ChunkyPNG/Image.html","","<p>ChunkyPNG::Image is an extension of the {ChunkyPNG::Canvas} class, that\nalso includes support for metadata. …\n"],["ChunkyPNG::NotSupported","","ChunkyPNG/NotSupported.html","","<p>Exception that is raised for an unsupported PNG image.\n"],["ChunkyPNG::OutOfBounds","","ChunkyPNG/OutOfBounds.html","","<p>Exception that is raised if an expectation fails.\n"],["ChunkyPNG::Palette","","ChunkyPNG/Palette.html","","<p>A palette describes the set of colors that is being used for an image.\n<p>A PNG image can contain an explicit …\n"],["ChunkyPNG::Point","","ChunkyPNG/Point.html","","<p>Simple class that represents a point on a canvas using an x and y\ncoordinate.\n<p>This class implements some …\n"],["ChunkyPNG::RMagick","","ChunkyPNG/RMagick.html","","<p>Methods for importing and exporting RMagick image objects.\n<p>By default, this module is disabled because …\n"],["ChunkyPNG::SignatureMismatch","","ChunkyPNG/SignatureMismatch.html","","<p>Exception that is raised if the PNG signature is not encountered at the \nbeginning of the file.\n"],["ChunkyPNG::Vector","","ChunkyPNG/Vector.html","","<p>Class that represents a vector of points, i.e. a list of {ChunkyPNG::Point}\ninstances.\n<p>Vectors can be …\n"],["Enumerable","","Enumerable.html","",""],["String","","String.html","","<p>Define the byte-operators on a string if they&#39;re not defined (Ruby 1.8)\n"],["<=>","ChunkyPNG::Dimension","ChunkyPNG/Dimension.html#method-i-3C-3D-3E","(other)","<p>Compares the size of 2 dimensions. @param [ChunkyPNG::Dimension] The\ndimension to compare with. @return …\n"],["<=>","ChunkyPNG::Point","ChunkyPNG/Point.html#method-i-3C-3D-3E","(other)","<p>Compares 2 points.\n<p>It will first compare the y coordinate, and it only takes the x-coordinate\ninto account …\n"],["==","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-3D-3D","(other)",""],["==","ChunkyPNG::Dimension","ChunkyPNG/Dimension.html#method-i-3D-3D","(other)",""],["==","ChunkyPNG::Point","ChunkyPNG/Point.html#method-i-3D-3D","(other)",""],["==","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-3D-3D","(other)",""],["Color","ChunkyPNG","ChunkyPNG.html#method-c-Color","(*args)","<p>Factory method to return a color value, based on the arguments given.\n<p>@overload Color(r, g, b, a)\n\n<pre>@param ...</pre>\n"],["Dimension","ChunkyPNG","ChunkyPNG.html#method-c-Dimension","(*args)","<p>Creates a {ChunkyPNG::Dimension} instance using arguments that can be\ninterpreted as width and height. …\n"],["Point","ChunkyPNG","ChunkyPNG.html#method-c-Point","(*args)","<p>Factory method to create {ChunkyPNG::Point} instances.\n<p>This method tries to be as flexible as possible …\n"],["Vector","ChunkyPNG","ChunkyPNG.html#method-c-Vector","(*args)","<p>Factory method for {ChunkyPNG::Vector} instances.\n<p>@overload Vector(x0, y0, x1, y1, x2, y2, …)\n\n<pre>Creates ...</pre>\n"],["[]","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-5B-5D","(x, y)","<p>Returns a single pixel&#39;s color value from this canvas. @param [Integer]\nx The x-coordinate of the …\n"],["[]","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-5B-5D","(index)","<p>Returns a color, given the position in the original palette chunk. @param\nindex [Integer] The 0-based …\n"],["[]","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-5B-5D","(index)","<p>Returns the point with the given indexof this vector. @param [Integer]\nindex The 0-based index of the …\n"],["[]=","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-5B-5D-3D","(x, y, color)","<p>Replaces a single pixel in this canvas. @param [Integer] x The x-coordinate\nof the pixel (column) @param …\n"],["a","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-a","(value)","<p>Returns the alpha channel value for the color value.\n<p>@param [Integer] value The color value. @return [Integer] …\n"],["adam7_extract_pass","ChunkyPNG::Canvas::Adam7Interlacing","ChunkyPNG/Canvas/Adam7Interlacing.html#method-i-adam7_extract_pass","(pass, canvas)","<p>Extracts a pass from a complete image @param [Integer] pass The pass\nnumber, should be in 0..6. @param …\n"],["adam7_merge_pass","ChunkyPNG::Canvas::Adam7Interlacing","ChunkyPNG/Canvas/Adam7Interlacing.html#method-i-adam7_merge_pass","(pass, canvas, subcanvas)","<p>Merges a pass image into a total image that is being constructed. @param\n[Integer] pass The pass number, …\n"],["adam7_multiplier_offset","ChunkyPNG::Canvas::Adam7Interlacing","ChunkyPNG/Canvas/Adam7Interlacing.html#method-i-adam7_multiplier_offset","(pass)","<p>Returns an array with the x-shift, x-offset, y-shift and y-offset for the\nrequested pass. @param [Integer] …\n"],["adam7_pass_size","ChunkyPNG::Canvas::Adam7Interlacing","ChunkyPNG/Canvas/Adam7Interlacing.html#method-i-adam7_pass_size","(pass, original_width, original_height)","<p>Returns the pixel dimensions of the requested pass. @param [Integer] pass\nThe pass number, should be …\n"],["adam7_pass_sizes","ChunkyPNG::Canvas::Adam7Interlacing","ChunkyPNG/Canvas/Adam7Interlacing.html#method-i-adam7_pass_sizes","(original_width, original_height)","<p>Returns an array of the dimension of all the pass images. @param [Integer]\noriginal_width The width of …\n"],["alpha_decomposable?","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-alpha_decomposable-3F","(color, mask, bg, tolerance = 1)","<p>Checks whether an alpha channel value can successfully be composed given\nthe resulting color, the mask …\n"],["area","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-area","()","<p>Returns the area of this canvas in number of pixels. @return [Integer] The\nnumber of pixels in this canvas …\n"],["area","ChunkyPNG::Dimension","ChunkyPNG/Dimension.html#method-i-area","()","<p>Returns the area of this dimension. @return [Integer] The area in number of\npixels.\n"],["assert_height!","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-assert_height-21","(vector_length)","<p>Throws an exception if the vector_length does not match this canvas&#39;\nheight.\n"],["assert_size!","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-assert_size-21","(matrix_width, matrix_height)","<p>Throws an exception if the matrix width and height does not match this\ncanvas&#39; dimensions.\n"],["assert_width!","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-assert_width-21","(vector_length)","<p>Throws an exception if the vector_length does not match this canvas&#39;\nwidth.\n"],["assert_x!","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-assert_x-21","(x)","<p>Throws an exception if the x-coordinate is out of bounds.\n"],["assert_xy!","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-assert_xy-21","(x, y)","<p>Throws an exception if the x- or y-coordinate is out of bounds.\n"],["assert_y!","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-assert_y-21","(y)","<p>Throws an exception if the y-coordinate is out of bounds.\n"],["b","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-b","(value)","<p>Returns the blue-component from the color value.\n<p>@param [Integer] value The color value. @return [Integer] …\n"],["best_color_settings","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-best_color_settings","()","<p>Determines the most suitable colormode for this palette. @return [Integer]\nThe colormode which would …\n"],["bezier_curve","ChunkyPNG::Canvas::Drawing","ChunkyPNG/Canvas/Drawing.html#method-i-bezier_curve","(points, stroke_color = ChunkyPNG::Color::BLACK)","<p>Draws a Bezier curve @param [Array, Point] A collection of control points\n@return [Chunky:PNG::Canvas] …\n"],["binomial_coefficient","ChunkyPNG::Canvas::Drawing","ChunkyPNG/Canvas/Drawing.html#method-i-binomial_coefficient","(n, k)","<p>Calculates the binomial coefficient for n over k.\n<p>@param [Integer] n first parameter in coeffient (the …\n"],["black_and_white?","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-black_and_white-3F","()","<p>Check whether this palette only contains bacl and white. @return [true,\nfalse] True if all colors in …\n"],["blend","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-blend","(fg, bg)","<p>Blends the foreground and background color by taking the average of the\ncomponents.\n<p>@param [Integer] fg …\n"],["border","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-border","(size, color = ChunkyPNG::Color::BLACK)","<p>Draws a border around the image.\n<p>@param [Integer] size The size of the border. @param [Integer] color …\n"],["border!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-border-21","(size, color = ChunkyPNG::Color::BLACK)","<p>Draws a border around the image in place.\n<p>@param [Integer] size The size of the border. @param [Integer] …\n"],["build_dimension_from_object","ChunkyPNG","ChunkyPNG.html#method-c-build_dimension_from_object","(source)",""],["build_point_from_object","ChunkyPNG","ChunkyPNG.html#method-c-build_point_from_object","(source)",""],["can_decode?","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-can_decode-3F","()","<p>Checks whether this palette is suitable for decoding an image from a\ndatastream.\n<p>This requires that the …\n"],["can_encode?","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-can_encode-3F","()","<p>Checks whether this palette is suitable for encoding an image from to\ndatastream.\n<p>This requires that the …\n"],["change_mask_color!","ChunkyPNG::Canvas::Masking","ChunkyPNG/Canvas/Masking.html#method-i-change_mask_color-21","(new_color)","<p>Changes the color of a mask image.\n<p>This method works on a canvas extracted out of another image using …\n"],["change_theme_color!","ChunkyPNG::Canvas::Masking","ChunkyPNG/Canvas/Masking.html#method-i-change_theme_color-21","(old_theme_color, new_theme_color, bg_color = ChunkyPNG::Color::WHITE, tolerance = 5)","<p>Creates a new image, based on the current image but with a new theme color.\n<p>This method will replace one …\n"],["check_size_constraints!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-check_size_constraints-21","(other, offset_x, offset_y)","<p>Checks whether another image has the correct dimension to be used for an\noperation on the current image, …\n"],["chunks","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-i-chunks","()","<p>Returns an enumerator instance for this datastream&#39;s chunks. @return\n[Enumerable::Enumerator] An …\n"],["circle","ChunkyPNG::Canvas::Drawing","ChunkyPNG/Canvas/Drawing.html#method-i-circle","(x0, y0, radius, stroke_color = ChunkyPNG::Color::BLACK, fill_color = ChunkyPNG::Color::TRANSPARENT)","<p>Draws a circle on the canvas.\n<p>@param [Integer] x0 The x-coordinate of the center of the circle. @param …\n"],["column","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-column","(x)","<p>Returns an extracted column as vector of pixels. @param [Integer] x The\n0-based column index. @return …\n"],["combine_chunks","ChunkyPNG::Chunk::ImageData","ChunkyPNG/Chunk/ImageData.html#method-c-combine_chunks","(data_chunks)",""],["compose","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-compose","(other, offset_x = 0, offset_y = 0)","<p>Composes another image onto this image using alpha blending. This will\nreturn a new canvas and leave …\n"],["compose","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-compose","(fg, bg)",""],["compose!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-compose-21","(other, offset_x = 0, offset_y = 0)","<p>Composes another image onto this image using alpha blending. This will\nmodify the current canvas.\n<p>If you …\n"],["compose_pixel","ChunkyPNG::Canvas::Drawing","ChunkyPNG/Canvas/Drawing.html#method-i-compose_pixel","(x, y, color)","<p>Composes a pixel on the canvas by alpha blending a color with its\nbackground color.\n<p>@param [Integer] x …\n"],["compose_pixel_unsafe","ChunkyPNG::Canvas::Drawing","ChunkyPNG/Canvas/Drawing.html#method-i-compose_pixel_unsafe","(x, y, color)","<p>Composes a pixel on the canvas by alpha blending a color with its\nbackground color, without bounds checking. …\n"],["compose_precise","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-compose_precise","(fg, bg)","<p>Composes two colors with an alpha channel using floating point math.\n<p>This method uses more precise floating …\n"],["compose_quick","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-compose_quick","(fg, bg)","<p>Composes two colors with an alpha channel using integer math.\n<p>This version is faster than the version …\n"],["content","ChunkyPNG::Chunk::CompressedText","ChunkyPNG/Chunk/CompressedText.html#method-i-content","()","<p>Creates the content to write to the stream, by concatenating the keyword\nwith the deflated value, joined …\n"],["content","ChunkyPNG::Chunk::End","ChunkyPNG/Chunk/End.html#method-i-content","()","<p>Returns an empty string, because this chunk should always be empty. @return\n[“”] An empty string. …\n"],["content","ChunkyPNG::Chunk::Header","ChunkyPNG/Chunk/Header.html#method-i-content","()","<p>Returns the content for this chunk when it gets written to a file, by\npacking the image information variables …\n"],["content","ChunkyPNG::Chunk::Text","ChunkyPNG/Chunk/Text.html#method-i-content","()","<p>Creates the content to write to the stream, by concatenating the keyword\nwith the value, joined by a …\n"],["crop","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-crop","(x, y, crop_width, crop_height)","<p>Crops an image, given the coordinates and size of the image that needs to\nbe cut out. This will leave …\n"],["crop!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-crop-21","(x, y, crop_width, crop_height)","<p>Crops an image, given the coordinates and size of the image that needs to\nbe cut out.\n<p>This will change …\n"],["cylindrical_to_cubic","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-cylindrical_to_cubic","(hue, saturation, y_component, chroma)","<p>Convert one HSL or HSV triple and associated chroma to a scaled rgb triple\n<p>This method encapsulates the …\n"],["decode_png_extract_1bit_value","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_extract_1bit_value","(byte, index)","<p>Extract a bit from a byte on a given index. @param [Integer] byte The byte\n(0..255) value to extract …\n"],["decode_png_extract_2bit_value","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_extract_2bit_value","(byte, index)","<p>Extract 2 consecutive bits from a byte. @param [Integer] byte The byte\n(0..255) value to extract a 2 …\n"],["decode_png_extract_4bit_value","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_extract_4bit_value","(byte, index)","<p>Extract 4 consecutive bits from a byte. @param [Integer] byte The byte\n(0..255) value to extract a 4 …\n"],["decode_png_image_pass","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_image_pass","(stream, width, height, color_mode, depth, start_pos)","<p>Decodes a single PNG image pass width a given width, height and color \nmode, to a Canvas, starting at …\n"],["decode_png_pixels_from_scanline_grayscale_16bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_grayscale_16bit","(stream, pos, width)","<p>Decodes a scanline of a 16-bit, grayscale image into a row of pixels.\n@params (see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_grayscale_1bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_grayscale_1bit","(stream, pos, width)","<p>Decodes a scanline of a 1-bit, grayscale image into a row of pixels.\n@params (see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_grayscale_2bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_grayscale_2bit","(stream, pos, width)","<p>Decodes a scanline of a 2-bit, grayscale image into a row of pixels.\n@params (see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_grayscale_4bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_grayscale_4bit","(stream, pos, width)","<p>Decodes a scanline of a 4-bit, grayscale image into a row of pixels.\n@params (see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_grayscale_8bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_grayscale_8bit","(stream, pos, width)","<p>Decodes a scanline of an 8-bit, grayscale image into a row of pixels.\n@params (see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_grayscale_alpha_16bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_grayscale_alpha_16bit","(stream, pos, width)","<p>Decodes a scanline of a 16-bit, grayscale image with transparency into a\nrow of pixels. @params (see …\n"],["decode_png_pixels_from_scanline_grayscale_alpha_8bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_grayscale_alpha_8bit","(stream, pos, width)","<p>Decodes a scanline of an 8-bit, grayscale image with transparency into a\nrow of pixels. @params (see …\n"],["decode_png_pixels_from_scanline_indexed_1bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_indexed_1bit","(stream, pos, width)","<p>Decodes a scanline of a 1-bit, indexed image into a row of pixels. @param\n[String] stream The stream …\n"],["decode_png_pixels_from_scanline_indexed_2bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_indexed_2bit","(stream, pos, width)","<p>Decodes a scanline of a 2-bit, indexed image into a row of pixels. @params\n(see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_indexed_4bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_indexed_4bit","(stream, pos, width)","<p>Decodes a scanline of a 4-bit, indexed image into a row of pixels. @params\n(see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_indexed_8bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_indexed_8bit","(stream, pos, width)","<p>Decodes a scanline of a 8-bit, indexed image into a row of pixels. @params\n(see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_method","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_method","(color_mode, depth)","<p>Returns the method name to use to decode scanlines into pixels. @param\n[Integer] color_mode The color …\n"],["decode_png_pixels_from_scanline_truecolor_16bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_truecolor_16bit","(stream, pos, width)","<p>Decodes a scanline of a 16-bit, true color image into a row of pixels.\n@params (see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_truecolor_8bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_truecolor_8bit","(stream, pos, width)","<p>Decodes a scanline of an 8-bit, true color image into a row of pixels.\n@params (see #decode_png_pixels_from_scanline_indexed_1bit …\n"],["decode_png_pixels_from_scanline_truecolor_alpha_16bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_truecolor_alpha_16bit","(stream, pos, width)","<p>Decodes a scanline of a 16-bit, true color image with transparency into a\nrow of pixels. @params (see …\n"],["decode_png_pixels_from_scanline_truecolor_alpha_8bit","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixels_from_scanline_truecolor_alpha_8bit","(stream, pos, width)","<p>Decodes a scanline of an 8-bit, true color image with transparency into a\nrow of pixels. @params (see …\n"],["decode_png_pixelstream","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_pixelstream","(stream, width, height, color_mode, depth, interlace)","<p>Decodes a canvas from a PNG encoded pixelstream, using a given width,\nheight,  color mode and interlacing …\n"],["decode_png_resample_16bit_value","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_resample_16bit_value","(value)","<p>Resamples a 16 bit value to an 8 bit value. This will discard some color\ninformation. @param [Integer] …\n"],["decode_png_resample_1bit_value","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_resample_1bit_value","(value)","<p>Resamples a 1 bit value to an 8 bit value. @param [Integer] value The 1 bit\nvalue to resample. @return …\n"],["decode_png_resample_2bit_value","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_resample_2bit_value","(value)","<p>Resamples a 2 bit value to an 8 bit value. @param [Integer] value The 2 bit\nvalue to resample. @return …\n"],["decode_png_resample_4bit_value","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_resample_4bit_value","(value)","<p>Resamples a 4 bit value to an 8 bit value. @param [Integer] value The 4 bit\nvalue to resample. @return …\n"],["decode_png_resample_8bit_value","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_resample_8bit_value","(value)","<p>No-op - available for completeness sake only @param [Integer] value The 8\nbit value to resample. @return …\n"],["decode_png_str_scanline","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_str_scanline","(stream, pos, prev_pos, line_length, pixel_size)","<p>Decodes a scanline if it was encoded using filtering.\n<p>It will extract the filtering method from the first …\n"],["decode_png_str_scanline_average","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_str_scanline_average","(stream, pos, prev_pos, line_length, pixel_size)","<p>Decodes a scanline in a pixelstream that was encoded using AVERAGE\nfiltering. This will change the pixelstream …\n"],["decode_png_str_scanline_paeth","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_str_scanline_paeth","(stream, pos, prev_pos, line_length, pixel_size)","<p>Decodes a scanline in a pixelstream that was encoded using PAETH filtering.\nThis will change the pixelstream …\n"],["decode_png_str_scanline_sub","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_str_scanline_sub","(stream, pos, prev_pos, line_length, pixel_size)","<p>Decodes a scanline in a pixelstream that was encoded using SUB filtering.\nThis will change the pixelstream …\n"],["decode_png_str_scanline_sub_none","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_str_scanline_sub_none","(stream, pos, prev_pos, line_length, pixel_size)","<p>Decodes a scanline that wasn&#39;t encoded using filtering. This is a\nno-op. @params (see #decode_png_str_scanline …\n"],["decode_png_str_scanline_up","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_str_scanline_up","(stream, pos, prev_pos, line_length, pixel_size)","<p>Decodes a scanline in a pixelstream that was encoded using UP filtering.\nThis will change the pixelstream …\n"],["decode_png_with_adam7_interlacing","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_with_adam7_interlacing","(stream, width, height, color_mode, depth)","<p>Decodes a canvas from a Adam 7 interlaced PNG encoded pixelstream, using a \ngiven width, height and color …\n"],["decode_png_without_interlacing","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-decode_png_without_interlacing","(stream, width, height, color_mode, depth)","<p>Decodes a canvas from a non-interlaced PNG encoded pixelstream, using a \ngiven width, height and color …\n"],["decompose_alpha","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-decompose_alpha","(color, mask, bg)","<p>Decomposes the alpha channel value given the resulting color, the mask\ncolor and a background color, …\n"],["decompose_alpha_component","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-decompose_alpha_component","(channel, color, mask, bg)","<p>Decomposes an alpha channel for either the r, g or b color channel. @param\n[:r, :g, :b] channel The channel …\n"],["decompose_alpha_components","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-decompose_alpha_components","(color, mask, bg)","<p>Decomposes the alpha channels for the r, g and b color channel. @param\n[Integer] color The color that …\n"],["decompose_color","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-decompose_color","(color, mask, bg, tolerance = 1)","<p>Decomposes a color, given a color, a mask color and a background color. The\nreturned color will be a …\n"],["determine_bit_depth","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-determine_bit_depth","()","<p>Determines the minimal bit depth required for an indexed image @return\n[Integer] Number of bits per pixel, …\n"],["determine_png_encoding","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-determine_png_encoding","(constraints = {})","<p>Determines the best possible PNG encoding variables for this image, by\nanalyzing  the colors used for …\n"],["dimension","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-dimension","()","<p>Returns the dimension (width x height) for this canvas. @return\n[ChunkyPNG::Dimension] A dimension instance …\n"],["dimension","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-dimension","()","<p>Returns the dimension of the minimal bounding rectangle of the points in\nthis vector. @return [ChunkyPNG::Dimension] …\n"],["each","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-each","(&block)","<p>Iterates over all the points in this vector @yield [ChunkyPNG::Point] The\npoints in the correct order. …\n"],["each_chunk","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-i-each_chunk","()","<p>Enumerates the chunks in this datastream.\n<p>This will iterate over the chunks using the order in which the …\n"],["each_edge","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-each_edge","(close = true)","<p>Iterates over all the edges in this vector.\n<p>An edge is a combination of two subsequent points in the vector. …\n"],["edges","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-edges","(close = true)","<p>Returns an enumerator that will iterate over all the edges in this vector.\n@param (see #each_edge) @return …\n"],["empty_bytearray","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-c-empty_bytearray","()","<p>Returns an empty stream using binary encoding that can be used as stream to\nencode to. @return [String] …\n"],["encode_png_image_pass_to_stream","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_image_pass_to_stream","(stream, color_mode, bit_depth, filtering)","<p>Encodes the canvas to a stream, in a given color mode. @param [String]\nstream The stream to write to. …\n"],["encode_png_image_with_interlacing","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_image_with_interlacing","(color_mode, bit_depth = 8, filtering = ChunkyPNG::FILTER_NONE)","<p>Encodes the canvas according to the PNG format specification with a given\ncolor  mode and Adam7 interlacing. …\n"],["encode_png_image_without_interlacing","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_image_without_interlacing","(color_mode, bit_depth = 8, filtering = ChunkyPNG::FILTER_NONE)","<p>Encodes the canvas according to the PNG format specification with a given\ncolor mode. @param [Integer] …\n"],["encode_png_pixels_to_scanline_grayscale_1bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_grayscale_1bit","(pixels)","<p>Encodes a line of pixels using 1-bit grayscale mode. @param\n[Array&lt;Integer&gt;] pixels A row of pixels …\n"],["encode_png_pixels_to_scanline_grayscale_2bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_grayscale_2bit","(pixels)","<p>Encodes a line of pixels using 2-bit grayscale mode. @param\n[Array&lt;Integer&gt;] pixels A row of pixels …\n"],["encode_png_pixels_to_scanline_grayscale_4bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_grayscale_4bit","(pixels)","<p>Encodes a line of pixels using 2-bit grayscale mode. @param\n[Array&lt;Integer&gt;] pixels A row of pixels …\n"],["encode_png_pixels_to_scanline_grayscale_8bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_grayscale_8bit","(pixels)","<p>Encodes a line of pixels using 8-bit grayscale mode. @param\n[Array&lt;Integer&gt;] pixels A row of pixels …\n"],["encode_png_pixels_to_scanline_grayscale_alpha_8bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_grayscale_alpha_8bit","(pixels)","<p>Encodes a line of pixels using 8-bit grayscale alpha mode. @param\n[Array&lt;Integer&gt;] pixels A row …\n"],["encode_png_pixels_to_scanline_indexed_1bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_indexed_1bit","(pixels)","<p>Encodes a line of pixels using 1-bit indexed mode. @param\n[Array&lt;Integer&gt;] pixels A row of pixels …\n"],["encode_png_pixels_to_scanline_indexed_2bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_indexed_2bit","(pixels)","<p>Encodes a line of pixels using 2-bit indexed mode. @param\n[Array&lt;Integer&gt;] pixels A row of pixels …\n"],["encode_png_pixels_to_scanline_indexed_4bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_indexed_4bit","(pixels)","<p>Encodes a line of pixels using 4-bit indexed mode. @param\n[Array&lt;Integer&gt;] pixels A row of pixels …\n"],["encode_png_pixels_to_scanline_indexed_8bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_indexed_8bit","(pixels)","<p>Encodes a line of pixels using 8-bit indexed mode. @param\n[Array&lt;Integer&gt;] pixels A row of pixels …\n"],["encode_png_pixels_to_scanline_method","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_method","(color_mode, depth)","<p>Returns the method name to use to decode scanlines into pixels. @param\n[Integer] color_mode The color …\n"],["encode_png_pixels_to_scanline_truecolor_8bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_truecolor_8bit","(pixels)","<p>Encodes a line of pixels using 8-bit truecolor mode. @param\n[Array&lt;Integer&gt;] pixels A row of pixels …\n"],["encode_png_pixels_to_scanline_truecolor_alpha_8bit","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixels_to_scanline_truecolor_alpha_8bit","(pixels)","<p>Encodes a line of pixels using 8-bit truecolor alpha mode. @param\n[Array&lt;Integer&gt;] pixels A row …\n"],["encode_png_pixelstream","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_pixelstream","(color_mode = ChunkyPNG::COLOR_TRUECOLOR, bit_depth = 8, interlace = ChunkyPNG::INTERLACING_NONE, filtering = ChunkyPNG::FILTER_NONE)","<p>Encodes the canvas according to the PNG format specification with a given\ncolor  mode, possibly with …\n"],["encode_png_str_scanline_average","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_str_scanline_average","(stream, pos, prev_pos, line_width, pixel_size)","<p>Encodes a scanline of a pixelstream using AVERAGE filtering. This will\nmodify the stream. @param (see …\n"],["encode_png_str_scanline_none","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_str_scanline_none","(stream, pos, prev_pos, line_width, pixel_size)","<p>Encodes a scanline of a pixelstream without filtering. This is a no-op.\n@param [String] stream The pixelstream …\n"],["encode_png_str_scanline_paeth","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_str_scanline_paeth","(stream, pos, prev_pos, line_width, pixel_size)","<p>Encodes a scanline of a pixelstream using PAETH filtering. This will modify\nthe stream. @param (see  …\n"],["encode_png_str_scanline_sub","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_str_scanline_sub","(stream, pos, prev_pos, line_width, pixel_size)","<p>Encodes a scanline of a pixelstream using SUB filtering. This will modify\nthe stream. @param (see #encode_png_str_scanline_none …\n"],["encode_png_str_scanline_up","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-encode_png_str_scanline_up","(stream, pos, prev_pos, line_width, pixel_size)","<p>Encodes a scanline of a pixelstream using UP filtering. This will modify\nthe stream. @param (see #encode_png_str_scanline_none …\n"],["eql?","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-eql-3F","(other)","<p>Equality check to compare this canvas with other matrices. @param other The\nobject to compare this Matrix …\n"],["eql?","ChunkyPNG::Dimension","ChunkyPNG/Dimension.html#method-i-eql-3F","(other)","<p>Checks whether 2 dimensions are identical. @param [ChunkyPNG::Dimension]\nThe dimension to compare with. …\n"],["eql?","ChunkyPNG::Point","ChunkyPNG/Point.html#method-i-eql-3F","(other)","<p>Checks whether 2 points are identical. @return [true, false]\n<code>true</code> iff the x and y coordinates match\n"],["eql?","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-eql-3F","(other)","<p>Comparison between two vectors for quality. @param [ChunkyPNG::Vector]\nother The vector to compare with. …\n"],["euclidean_distance_rgba","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-euclidean_distance_rgba","(pixel_after, pixel_before)","<p>Compute the Euclidean distance between 2 colors in RGBA\n<p>This method simply takes the Euclidean distance …\n"],["export","ChunkyPNG::RMagick","ChunkyPNG/RMagick.html#method-i-export","(canvas)","<p>Exports a Canvas as RMagick image instance. @param [ChunkyPNG::Canvas]\ncanvas The canvas to export. @return …\n"],["extract_mask","ChunkyPNG::Canvas::Masking","ChunkyPNG/Canvas/Masking.html#method-i-extract_mask","(mask_color, bg_color = ChunkyPNG::Color::WHITE, tolerance = 5)","<p>Creates a base image and a mask image from an original image that has a\nparticular theme color. This …\n"],["fade","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-fade","(color, factor)","<p>Lowers the intensity of a color, by lowering its alpha by a given factor.\n@param [Integer] color The …\n"],["flip","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-flip","()",""],["flip!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-flip-21","()",""],["flip_horizontally","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-flip_horizontally","()","<p>Flips the image horizontally, leaving the original intact.\n<p>This will flip the image on its horizontal …\n"],["flip_horizontally!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-flip_horizontally-21","()","<p>Flips the image horizontally in place.\n<p>This will flip the image on its horizontal axis, e.g. pixels on …\n"],["flip_vertically","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-flip_vertically","()","<p>Flips the image vertically, leaving the original intact.\n<p>This will flip the image on its vertical axis, …\n"],["flip_vertically!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-flip_vertically-21","()","<p>Flips the image vertically in place.\n<p>This will flip the image on its vertical axis, e.g. pixels on the …\n"],["force_binary","ChunkyPNG","ChunkyPNG.html#method-c-force_binary","(str)",""],["from_abgr_stream","ChunkyPNG::Canvas::StreamImporting","ChunkyPNG/Canvas/StreamImporting.html#method-i-from_abgr_stream","(width, height, stream)","<p>Creates a canvas by reading pixels from an ARGB formatted stream with a\nprovided with and height.\n<p>Every …\n"],["from_bgr_stream","ChunkyPNG::Canvas::StreamImporting","ChunkyPNG/Canvas/StreamImporting.html#method-i-from_bgr_stream","(width, height, stream)","<p>Creates a canvas by reading pixels from an BGR formatted stream with a\nprovided with and height.\n<p>Every …\n"],["from_blob","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-from_blob","(str)","<p>Decodes a Canvas from a PNG encoded string. @param [String] str The string\nto read from. @return [ChunkyPNG::Canvas] …\n"],["from_blob","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-c-from_blob","(str)","<p>Reads a PNG datastream from a string. @param [String] str The PNG encoded\nstring to load from. @return …\n"],["from_canvas","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-c-from_canvas","(canvas)","<p>Creates a new canvas instance by duplicating another instance. @param\n[ChunkyPNG::Canvas] canvas The …\n"],["from_canvas","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-c-from_canvas","(canvas)","<p>Builds a palette instance from a given canvas. @param canvas\n[ChunkyPNG::Canvas] The canvas to create …\n"],["from_chunks","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-c-from_chunks","(palette_chunk, transparency_chunk = nil)","<p>Builds a palette instance from a PLTE chunk and optionally a tRNS chunk\nfrom a PNG datastream.\n<p>This method …\n"],["from_data_url","ChunkyPNG::Canvas::DataUrlImporting","ChunkyPNG/Canvas/DataUrlImporting.html#method-i-from_data_url","(string)","<p>Imports a canvas from a PNG data URL. @param [String] string The data URL\nstring to load from. @return …\n"],["from_datastream","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-from_datastream","(ds)","<p>Decodes the Canvas from a PNG datastream instance. @param\n[ChunkyPNG::Datastream] ds The datastream to …\n"],["from_datastream","ChunkyPNG::Image","ChunkyPNG/Image.html#method-c-from_datastream","(ds)","<p>Reads a ChunkyPNG::Image instance from a data stream.\n<p>Besides decoding the canvas, this will also read …\n"],["from_file","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-from_file","(filename)","<p>Decodes a Canvas from a PNG encoded file. @param [String] filename The file\nto read from. @return [ChunkyPNG::Canvas] …\n"],["from_file","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-c-from_file","(filename)","<p>Reads a PNG datastream from a file. @param [String] filename The path of\nthe file to load from. @return …\n"],["from_hex","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-from_hex","(hex_value, opacity = nil)","<p>Creates a color by converting it from a string in hex notation.\n<p>It supports colors with (#rrggbbaa) or …\n"],["from_hsb","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-from_hsb","(hue, saturation, value, alpha = 255)",""],["from_hsl","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-from_hsl","(hue, saturation, lightness, alpha = 255)","<p>Creates a new color from an HSL triple.\n<p>This implementation follows the modern convention of 0 degrees …\n"],["from_hsv","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-from_hsv","(hue, saturation, value, alpha = 255)","<p>Creates a new color from an HSV triple.\n<p>Create a new color using an HSV (sometimes also called HSB) triple. …\n"],["from_io","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-from_io","(io)","<p>Decodes a Canvas from a PNG encoded stream. @param [IO, #read] io The\nstream to read from. @return [ChunkyPNG::Canvas] …\n"],["from_io","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-c-from_io","(io)","<p>Reads a PNG datastream from an input stream @param [IO] io The stream to\nread from. @return [ChunkyPNG::Datastream] …\n"],["from_pixels","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-c-from_pixels","(pixels)","<p>Builds a palette instance from a given set of pixels. @param pixels\n[Enumerable&lt;Integer&gt;] An enumeration …\n"],["from_rgb_stream","ChunkyPNG::Canvas::StreamImporting","ChunkyPNG/Canvas/StreamImporting.html#method-i-from_rgb_stream","(width, height, stream)","<p>Creates a canvas by reading pixels from an RGB formatted stream with a\nprovided with and height.\n<p>Every …\n"],["from_rgb_stream","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-from_rgb_stream","(stream, pos = 0)","<p>Creates a color by unpacking an rgb triple from a string.\n<p>@param [String] stream The string to load the …\n"],["from_rgba_stream","ChunkyPNG::Canvas::StreamImporting","ChunkyPNG/Canvas/StreamImporting.html#method-i-from_rgba_stream","(width, height, stream)","<p>Creates a canvas by reading pixels from an RGBA formatted stream with a\nprovided with and height.\n<p>Every …\n"],["from_rgba_stream","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-from_rgba_stream","(stream, pos = 0)","<p>Creates a color by unpacking an rgba triple from a string\n<p>@param [String] stream The string to load the …\n"],["from_stream","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-from_stream","(io)",""],["from_string","ChunkyPNG::Canvas::PNGDecoding","ChunkyPNG/Canvas/PNGDecoding.html#method-i-from_string","(str)",""],["from_string","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-c-from_string","(str)",""],["fully_transparent?","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-fully_transparent-3F","(value)","<p>Returns true if this color is fully transparent.\n<p>@param [Integer] value The color to test. @return [true, …\n"],["g","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-g","(value)","<p>Returns the green-component from the color value.\n<p>@param [Integer] value The color value. @return [Integer] …\n"],["get_pixel","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-get_pixel","(x, y)","<p>Returns a single pixel from this canvas, without checking bounds. The\nreturn value for this method is …\n"],["grayscale","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-grayscale","()","<p>Converts the canvas to grayscale, returning a new canvas.\n<p>This method will not modify the canvas. To modift …\n"],["grayscale","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-grayscale","(teint)","<p>Creates a new color using a grayscale teint. @param [Integer] teint The\ngrayscale teint (0-255), will …\n"],["grayscale!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-grayscale-21","()","<p>Converts the canvas to grayscale.\n<p>This method will modify the canvas. The obtain a new canvas and leave …\n"],["grayscale?","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-grayscale-3F","(value)","<p>Returns true if this color is fully transparent.\n<p>@param [Integer] value The color to test. @return [true, …\n"],["grayscale?","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-grayscale-3F","()","<p>Check whether this palette only contains grayscale colors. @return [true,\nfalse] True if all colors in …\n"],["grayscale_alpha","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-grayscale_alpha","(teint, a)","<p>Creates a new color using a grayscale teint and alpha value. @param\n[Integer] teint The grayscale teint …\n"],["grayscale_entry","ChunkyPNG::Chunk::Transparency","ChunkyPNG/Chunk/Transparency.html#method-i-grayscale_entry","(bit_depth)","<p>Returns the grayscale entry to be replaced by transparent pixels.\n<p>This method should only be used for …\n"],["grayscale_teint","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-grayscale_teint","(color)","<p>Calculates the grayscale teint of an RGB color.\n<p>@param [Integer] color The color to convert. @return [Integer] …\n"],["height","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-height","()","<p>Returns the height of the minimal bounding box of all the points in this\nvector. @return [Integer] The …\n"],["html_color","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-html_color","(color_name, opacity = nil)","<p>Gets a color value based on a HTML color name.\n<p>The color name is flexible. E.g. <code>&#39;yellowgreen&#39;</code> …\n"],["hue_and_chroma","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-hue_and_chroma","(color)","<p>This method encapsulates the logic needed to extract hue and chroma from a\nChunkPNG color. This logic …\n"],["imagedata","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-i-imagedata","()","<p>Returns the uncompressed image data, combined from all the IDAT chunks\n@return [String] The uncompressed …\n"],["import","ChunkyPNG::RMagick","ChunkyPNG/RMagick.html#method-i-import","(image)","<p>Imports an RMagick image as Canvas object. @param [Magick::Image] image The\nimage to import @return [ChunkyPNG::Canvas] …\n"],["include?","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-include-3F","(*point_like)",""],["include?","ChunkyPNG::Dimension","ChunkyPNG/Dimension.html#method-i-include-3F","(*point_like)","<p>Checks whether a point is within bounds of this dimension. @param\n[ChunkyPNG::Point, …] A point-like …\n"],["include_point?","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-include_point-3F","(*point_like)","<p>Checks whether the given coordinates are in the range of the canvas @param\n[ChunkyPNG::Point, Array, …\n"],["include_x?","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-include_x-3F","(x)","<p>Checks whether the given x-coordinate is in the range of the canvas @param\n[Integer] x The y-coordinate …\n"],["include_xy?","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-include_xy-3F","(x, y)","<p>Checks whether the given x- and y-coordinate are in the range of the canvas\n<p>@param [Integer] x The x-coordinate …\n"],["include_y?","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-include_y-3F","(y)","<p>Checks whether the given y-coordinate is in the range of the canvas @param\n[Integer] y The y-coordinate …\n"],["index","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-index","(color)","<p>Returns the position of a color in the palette @param color\n[ChunkyPNG::Color] The color for which to …\n"],["indexable?","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-indexable-3F","()","<p>Checks whether the size of this palette is suitable for indexed storage.\n@return [true, false] True if …\n"],["initialize_copy","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-initialize_copy","(other)","<p>Initializes a new Canvas instances when being cloned. @param\n[ChunkyPNG::Canvas] other The canvas to …\n"],["initialize_copy","ChunkyPNG::Image","ChunkyPNG/Image.html#method-i-initialize_copy","(other)","<p>Initializes a copy of another ChunkyPNG::Image instance.\n<p>@param [ChunkyPNG::Image] other The other image …\n"],["inspect","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-inspect","()","<p>Alternative implementation of the inspect method. @return [String] A nicely\nformatted string representation …\n"],["int8_mult","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-int8_mult","(a, b)","<p>Multiplies two fractions using integer math, where the fractions are stored\nusing an integer between …\n"],["interpolate_quick","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-interpolate_quick","(fg, bg, alpha)","<p>Interpolates the foreground and background colors by the given alpha value.\nThis also blends the alpha …\n"],["length","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-length","()","<p>Returns the number of points in this vector. @return [Integer] The length\nof the points array.\n"],["line","ChunkyPNG::Canvas::Drawing","ChunkyPNG/Canvas/Drawing.html#method-i-line","(x0, y0, x1, y1, stroke_color, inclusive = true)",""],["line_xiaolin_wu","ChunkyPNG::Canvas::Drawing","ChunkyPNG/Canvas/Drawing.html#method-i-line_xiaolin_wu","(x0, y0, x1, y1, stroke_color, inclusive = true)","<p>Draws an anti-aliased line using Xiaolin Wu&#39;s algorithm.\n<p>@param [Integer] x0 The x-coordinate of the …\n"],["max_x","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-max_x","()","<p>Finds the highest x-coordinate in this vector. @return [Integer] The\nhighest x-coordinate of all the …\n"],["max_y","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-max_y","()","<p>Finds the highest y-coordinate in this vector. @return [Integer] The\nhighest y-coordinate of all the …\n"],["metadata","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-i-metadata","()","<p>Returns all the textual metadata key/value pairs as hash. @return [Hash] A\nhash containing metadata fields …\n"],["metadata_chunks","ChunkyPNG::Image","ChunkyPNG/Image.html#method-i-metadata_chunks","()","<p>Returns the metadata for this image as PNG chunks.\n<p>Chunks will either be of the {ChunkyPNG::Chunk::Text} …\n"],["min_x","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-min_x","()","<p>Finds the lowest x-coordinate in this vector. @return [Integer] The lowest\nx-coordinate of all the points …\n"],["min_y","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-min_y","()","<p>Finds the lowest y-coordinate in this vector. @return [Integer] The lowest\ny-coordinate of all the points …\n"],["minmax","Enumerable","Enumerable.html#method-i-minmax","()",""],["mirror","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-mirror","()",""],["mirror!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-mirror-21","()",""],["multiple_from_array","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-c-multiple_from_array","(source)","<p>@return [Array&lt;ChunkyPNG::Point&gt;] The list of points interpreted from\nthe input array.\n"],["multiple_from_string","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-c-multiple_from_string","(source_str)","<p>@return [Array&lt;ChunkyPNG::Point&gt;] The list of points parsed from the\nstring.\n"],["new","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-c-new","(width, height, initial = ChunkyPNG::Color::TRANSPARENT)","<p>Initializes a new Canvas instance.\n<p>@overload initialize(width, height, background_color)\n\n<pre>@param [Integer] ...</pre>\n"],["new","ChunkyPNG::Chunk::Base","ChunkyPNG/Chunk/Base.html#method-c-new","(type, attributes = {})","<p>Initializes the chunk instance. @param type [String] The four character\nchunk type indicator. @param …\n"],["new","ChunkyPNG::Chunk::CompressedText","ChunkyPNG/Chunk/CompressedText.html#method-c-new","(keyword, value)",""],["new","ChunkyPNG::Chunk::End","ChunkyPNG/Chunk/End.html#method-c-new","()",""],["new","ChunkyPNG::Chunk::Generic","ChunkyPNG/Chunk/Generic.html#method-c-new","(type, content = '')",""],["new","ChunkyPNG::Chunk::Header","ChunkyPNG/Chunk/Header.html#method-c-new","(attrs = {})",""],["new","ChunkyPNG::Chunk::Text","ChunkyPNG/Chunk/Text.html#method-c-new","(keyword, value)",""],["new","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-c-new","()","<p>Initializes a new Datastream instance.\n"],["new","ChunkyPNG::Dimension","ChunkyPNG/Dimension.html#method-c-new","(width, height)","<p>Initializes a new dimension instance. @param [Integer] width The\nwidth-component of the new dimension. …\n"],["new","ChunkyPNG::Image","ChunkyPNG/Image.html#method-c-new","(width, height, bg_color = ChunkyPNG::Color::TRANSPARENT, metadata = {})","<p>Initializes a new ChunkyPNG::Image instance. @param [Integer] width The\nwidth of the new image. @param …\n"],["new","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-c-new","(enum, decoding_map = nil)","<p>Builds a new palette given a set (Enumerable instance) of colors.\n<p>@param enum [Enumerable&lt;Integer&gt;] …\n"],["new","ChunkyPNG::Point","ChunkyPNG/Point.html#method-c-new","(x, y)","<p>Initializes a new point instance. @param [Integer, :to_i] x The\nx-coordinate. @param [Integer, :to_i] …\n"],["new","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-c-new","(points = [])","<p>Initializes a vector based on a list of Point instances.\n<p>You usually do not want to use this method directly, …\n"],["offset","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-offset","()","<p>Returns the offset from (0,0) of the minimal bounding box of all the points\nin this vector @return [ChunkyPNG::Point] …\n"],["opaque!","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-opaque-21","(value)","<p>Returns the opaque value of this color by removing the alpha channel.\n@param [Integer] value The color …\n"],["opaque?","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-opaque-3F","(value)","<p>Returns true if this color is fully opaque.\n<p>@param [Integer] value The color to test. @return [true, false] …\n"],["opaque?","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-opaque-3F","()","<p>Check whether this palette only contains opaque colors. @return [true,\nfalse] True if all colors in this …\n"],["opaque_palette","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-opaque_palette","()","<p>Returns a palette with all the opaque variants of the colors in this\npalette. @return [ChunkyPNG::Palette] …\n"],["palette","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-palette","()","<p>Returns the palette used for this canvas. @return [ChunkyPNG::Palette] A\npalette which contains all the …\n"],["palette_alpha_channel","ChunkyPNG::Chunk::Transparency","ChunkyPNG/Chunk/Transparency.html#method-i-palette_alpha_channel","()","<p>Returns the alpha channel for the palette of an indexed image.\n<p>This method should only be used for images …\n"],["parse","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-parse","(source)","<p>Parses a color value given a numeric or string argument.\n<p>It supports color numbers, colors in hex notation …\n"],["pass_bytesize","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-pass_bytesize","(color_mode, depth, width, height)","<p>Returns the number of bytes used for an image pass @param [Integer]\ncolor_mode The color mode in which …\n"],["pixel_bitsize","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-pixel_bitsize","(color_mode, depth = 8)","<p>Returns the size in bits of a pixel when it is stored using a given color\nmode.\n<p>@param [Integer] color_mode …\n"],["pixel_bytesize","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-pixel_bytesize","(color_mode, depth = 8)","<p>Returns the size in bytes of a pixel when it is stored using a given color\nmode.\n<p>@param [Integer] color_mode …\n"],["polygon","ChunkyPNG::Canvas::Drawing","ChunkyPNG/Canvas/Drawing.html#method-i-polygon","(path, stroke_color = ChunkyPNG::Color::BLACK, fill_color = ChunkyPNG::Color::TRANSPARENT)","<p>Draws a polygon on the canvas using the stroke_color, filled using the\nfill_color if any.\n<p>@param [Array, …\n"],["r","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-r","(value)","<p>Returns the red-component from the color value.\n<p>@param [Integer] value The color value. @return [Integer] …\n"],["read","ChunkyPNG::Chunk","ChunkyPNG/Chunk.html#method-c-read","(io)","<p>Reads a chunk from an IO stream.\n<p>@param io [IO, #read] The IO stream to read from. @return\n[ChunkyPNG::Chung::Base] …\n"],["read","ChunkyPNG::Chunk::CompressedText","ChunkyPNG/Chunk/CompressedText.html#method-c-read","(type, content)",""],["read","ChunkyPNG::Chunk::End","ChunkyPNG/Chunk/End.html#method-c-read","(type, content)","<p>Reads the END chunk. It will check if the content is empty. @param type\n[String] The four character chunk …\n"],["read","ChunkyPNG::Chunk::Generic","ChunkyPNG/Chunk/Generic.html#method-c-read","(type, content)","<p>Creates an instance, given the chunk&#39;s type and content. @param type\n[String] The four character …\n"],["read","ChunkyPNG::Chunk::Header","ChunkyPNG/Chunk/Header.html#method-c-read","(type, content)","<p>Reads the 13 bytes of content from the header chunk to set the image\nattributes. @param type [String] …\n"],["read","ChunkyPNG::Chunk::Text","ChunkyPNG/Chunk/Text.html#method-c-read","(type, content)",""],["read_bytes","ChunkyPNG::Chunk","ChunkyPNG/Chunk.html#method-c-read_bytes","(io, length)","<p>Reads an exact number of bytes from an IO stream. @param io [IO, #read] The\nIO stream to read from. @param …\n"],["rect","ChunkyPNG::Canvas::Drawing","ChunkyPNG/Canvas/Drawing.html#method-i-rect","(x0, y0, x1, y1, stroke_color = ChunkyPNG::Color::BLACK, fill_color = ChunkyPNG::Color::TRANSPARENT)","<p>Draws a rectangle on the canvas, using two control points.\n<p>@param [Integer] x0 The x-coordinate of the …\n"],["replace","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-replace","(other, offset_x = 0, offset_y = 0)","<p>Replaces pixels on this image by pixels from another pixels, on a given\noffset. This method will modify …\n"],["replace!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-replace-21","(other, offset_x = 0, offset_y = 0)","<p>Replaces pixels on this image by pixels from another pixels, on a given\noffset. This method will modify …\n"],["replace_canvas!","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-replace_canvas-21","(new_width, new_height, new_pixels)","<p>Replaces the image, given a new width, new height, and a new pixel array.\n"],["replace_column!","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-replace_column-21","(x, vector)","<p>Replaces a column of pixels on this canvas. @param [Integer] x The 0-based\ncolumn index. @param [Array&lt;Integer&gt;] …\n"],["replace_row!","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-replace_row-21","(y, vector)","<p>Replaces a row of pixels on this canvas. @param [Integer] y The 0-based row\nindex. @param [Array&lt;Integer&gt;] …\n"],["resample","ChunkyPNG::Canvas::Resampling","ChunkyPNG/Canvas/Resampling.html#method-i-resample","(new_width, new_height)",""],["resample_bilinear","ChunkyPNG::Canvas::Resampling","ChunkyPNG/Canvas/Resampling.html#method-i-resample_bilinear","(new_width, new_height)",""],["resample_bilinear!","ChunkyPNG::Canvas::Resampling","ChunkyPNG/Canvas/Resampling.html#method-i-resample_bilinear-21","(new_width, new_height)","<p>Resamples the canvas with bilinear interpolation. @param [Integer]\nnew_width The width of the resampled …\n"],["resample_nearest_neighbor","ChunkyPNG::Canvas::Resampling","ChunkyPNG/Canvas/Resampling.html#method-i-resample_nearest_neighbor","(new_width, new_height)",""],["resample_nearest_neighbor!","ChunkyPNG::Canvas::Resampling","ChunkyPNG/Canvas/Resampling.html#method-i-resample_nearest_neighbor-21","(new_width, new_height)","<p>Resamples the canvas using nearest neighbor interpolation. @param [Integer]\nnew_width The width of the …\n"],["resize","ChunkyPNG::Canvas::Resampling","ChunkyPNG/Canvas/Resampling.html#method-i-resize","(new_width, new_height)",""],["rgb","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-rgb","(r, g, b)","<p>Creates a new color using an r, g, b triple. @param [Integer] r The\nr-component (0-255) @param [Integer] …\n"],["rgba","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-rgba","(r, g, b, a)","<p>Creates a new color using an r, g, b triple and an alpha value. @param\n[Integer] r The r-component (0-255) …\n"],["rotate_180","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_180","()","<p>Rotates the image 180 degrees.\n<p>This method will leave the original object intact and return a new canvas.\n…\n"],["rotate_180!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_180-21","()","<p>Rotates the image 180 degrees in place.\n<p>@return [ChunkyPNG::Canvas] Itself, but rotated 180 degrees. @see …\n"],["rotate_clockwise","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_clockwise","()",""],["rotate_clockwise!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_clockwise-21","()",""],["rotate_counter_clockwise","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_counter_clockwise","()",""],["rotate_counter_clockwise!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_counter_clockwise-21","()",""],["rotate_left","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_left","()","<p>Returns an image that is rotated 90 degrees counter-clockwise.\n<p>This method will leave the original object …\n"],["rotate_left!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_left-21","()","<p>Rotates the image 90 degrees counter-clockwise in place.\n<p>This method will change the original canvas. …\n"],["rotate_right","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_right","()","<p>Returns a new canvas instance that is rotated 90 degrees clockwise.\n<p>This method will return a new canvas …\n"],["rotate_right!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-rotate_right-21","()","<p>Rotates the image 90 degrees clockwise in place.\n<p>This method will change the current canvas.\n<p>@return [ChunkyPNG::Canvas] …\n"],["row","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-row","(y)","<p>Returns an extracted row as vector of pixels @param [Integer] y The 0-based\nrow index @return [Array&lt;Integer&gt;] …\n"],["samples_per_pixel","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-samples_per_pixel","(color_mode)","<p>Returns the number of sample values per pixel. @param [Integer] color_mode\nThe color mode being used. …\n"],["save","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-save","(filename, constraints = {})","<p>Writes the canvas to a file, encoded as a PNG image. @param [String]\nfilename The file to save the PNG …\n"],["save","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-i-save","(filename)","<p>Saves this datastream as a PNG file. @param [String] filename The filename\nto use.\n"],["scanline_bytesize","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-scanline_bytesize","(color_mode, depth, width)","<p>Returns the number of bytes used per scanline. @param [Integer] color_mode\nThe color mode in which the …\n"],["set_pixel","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-set_pixel","(x, y, color)","<p>Replaces a single pixel in this canvas, without bounds checking.\n<p>This method return value and effects …\n"],["set_pixel_if_within_bounds","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-set_pixel_if_within_bounds","(x, y, color)","<p>Replaces a single pixel in this canvas, with bounds checking. It will do\nnoting if the provided coordinates …\n"],["split_in_chunks","ChunkyPNG::Chunk::ImageData","ChunkyPNG/Chunk/ImageData.html#method-c-split_in_chunks","(data, level = Zlib::DEFAULT_COMPRESSION, chunk_size = 2147483647)",""],["steps","ChunkyPNG::Canvas::Resampling","ChunkyPNG/Canvas/Resampling.html#method-i-steps","(width, new_width)","<p>Integer Interpolation between two values\n<p>Used for generating indicies for interpolation (eg, nearest neighbour). …\n"],["steps_residues","ChunkyPNG::Canvas::Resampling","ChunkyPNG/Canvas/Resampling.html#method-i-steps_residues","(width, new_width)","<p>Fractional Interpolation between two values\n<p>Used for generating values for interpolation (eg, bilinear). …\n"],["to_a","ChunkyPNG::Dimension","ChunkyPNG/Dimension.html#method-i-to_a","()","<p>Casts this dimension into an array. @return [Array&lt;Integer&gt;]\n<code>[width, height]</code> for this dimension. …\n"],["to_a","ChunkyPNG::Point","ChunkyPNG/Point.html#method-i-to_a","()","<p>Converts the point instance to an array. @return [Array] A 2-element array,\ni.e. <code>[x, y]</code>.\n"],["to_abgr_stream","ChunkyPNG::Canvas::StreamExporting","ChunkyPNG/Canvas/StreamExporting.html#method-i-to_abgr_stream","()","<p>Creates an ABGR-formatted pixelstream with the pixel data from this canvas.\n<p>Note that this format is fast …\n"],["to_alpha_channel_stream","ChunkyPNG::Canvas::StreamExporting","ChunkyPNG/Canvas/StreamExporting.html#method-i-to_alpha_channel_stream","()","<p>Creates a stream of the alpha channel of this canvas.\n<p>@return [String] The 0-255 alpha values of all pixels …\n"],["to_ary","ChunkyPNG::Dimension","ChunkyPNG/Dimension.html#method-i-to_ary","()",""],["to_ary","ChunkyPNG::Point","ChunkyPNG/Point.html#method-i-to_ary","()",""],["to_blob","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-to_blob","(constraints = {})","<p>Encoded the canvas to a PNG formatted string. @param constraints (see\nChunkyPNG::Canvas::PNGEncoding#to_datastream …\n"],["to_blob","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-i-to_blob","()","<p>Encodes this datastream into a string. @return [String] The encoded PNG\ndatastream.\n"],["to_data_url","ChunkyPNG::Canvas::DataUrlExporting","ChunkyPNG/Canvas/DataUrlExporting.html#method-i-to_data_url","()","<p>Exports the canvas as a data url (e.g. data:image/png;base64,&lt;data&gt;)\nthat can easily be used inline …\n"],["to_datastream","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-to_datastream","(constraints = {})","<p>Converts this Canvas to a datastream, so that it can be saved as a PNG\nimage. @param [Hash, Symbol] constraints …\n"],["to_datastream","ChunkyPNG::Image","ChunkyPNG/Image.html#method-i-to_datastream","(constraints = {})","<p>Encodes the image to a PNG datastream for saving to disk or writing to an\nIO stream.\n<p>Besides encoding …\n"],["to_grayscale","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-to_grayscale","(color)","<p>Converts a color to a fiting grayscale value. It will conserve the alpha\nchannel.\n<p>This method will return …\n"],["to_grayscale_alpha_bytes","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-to_grayscale_alpha_bytes","(color)","<p>Returns an array with the grayscale teint and alpha channel values for this\ncolor.\n<p>This method expects …\n"],["to_grayscale_bytes","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-to_grayscale_bytes","(color)","<p>Returns an array with the grayscale teint value for this color.\n<p>This method expects the r, g, and b value …\n"],["to_grayscale_stream","ChunkyPNG::Canvas::StreamExporting","ChunkyPNG/Canvas/StreamExporting.html#method-i-to_grayscale_stream","()","<p>Creates a grayscale stream of this canvas.\n<p>This method assume sthat this image is fully grayscale, i.e. …\n"],["to_hex","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-to_hex","(color, include_alpha = true)","<p>Returns a string representing this color using hex notation (i.e.\n#rrggbbaa).\n<p>@param [Integer] value  …\n"],["to_hsb","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-to_hsb","(color, include_alpha = false)",""],["to_hsl","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-to_hsl","(color, include_alpha = false)","<p>Returns an array with the separate HSL components of a color.\n<p>Because ChunkyPNG internally handles colors …\n"],["to_hsv","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-to_hsv","(color, include_alpha = false)","<p>Returns an array with the separate HSV components of a color.\n<p>Because ChunkyPNG internally handles colors …\n"],["to_image","ChunkyPNG::Canvas","ChunkyPNG/Canvas.html#method-i-to_image","()","<p>Creates an ChunkyPNG::Image object from this canvas. @return\n[ChunkyPNG::Image] This canvas wrapped in …\n"],["to_plte_chunk","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-to_plte_chunk","()","<p>Creates a PLTE chunk that corresponds with this palette to store the r, g,\nand b channels of all colors. …\n"],["to_rgb_stream","ChunkyPNG::Canvas::StreamExporting","ChunkyPNG/Canvas/StreamExporting.html#method-i-to_rgb_stream","()","<p>Creates an RGB-formatted pixelstream with the pixel data from this canvas.\n<p>Note that this format is fast …\n"],["to_rgba_stream","ChunkyPNG::Canvas::StreamExporting","ChunkyPNG/Canvas/StreamExporting.html#method-i-to_rgba_stream","()","<p>Creates an RGB-formatted pixelstream with the pixel data from this canvas.\n<p>Note that this format is fast …\n"],["to_s","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-to_s","(constraints = {})",""],["to_s","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-i-to_s","()",""],["to_string","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-to_string","(constraints = {})",""],["to_string","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-i-to_string","()",""],["to_trns_chunk","ChunkyPNG::Palette","ChunkyPNG/Palette.html#method-i-to_trns_chunk","()","<p>Creates a tRNS chunk that corresponds with this palette to store the alpha\nchannel of all colors.\n<p>Note …\n"],["to_truecolor_alpha_bytes","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-to_truecolor_alpha_bytes","(color)","<p>Returns an array with the separate RGBA values for this color.\n<p>@param [Integer] color The color to convert. …\n"],["to_truecolor_bytes","ChunkyPNG::Color","ChunkyPNG/Color.html#method-i-to_truecolor_bytes","(color)","<p>Returns an array with the separate RGB values for this color. The alpha\nchannel will be discarded.\n<p>@param …\n"],["trim","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-trim","(border = pixels.first)","<p>Trims the border around the image, presumed to be the color of the first\npixel.\n<p>@param [Integer] border …\n"],["trim!","ChunkyPNG::Canvas::Operations","ChunkyPNG/Canvas/Operations.html#method-i-trim-21","(border = pixels.first)","<p>Trims the border around the image in place.\n<p>@param [Integer] border The color to attempt to trim. @return …\n"],["truecolor_entry","ChunkyPNG::Chunk::Transparency","ChunkyPNG/Chunk/Transparency.html#method-i-truecolor_entry","(bit_depth)","<p>Returns the truecolor entry to be replaced by transparent pixels,\n<p>This method should only be used for …\n"],["verify_crc!","ChunkyPNG::Chunk","ChunkyPNG/Chunk.html#method-c-verify_crc-21","(type, content, found_crc)","<p>Verifies the CRC of a chunk. @param type [String] The chunk&#39;s type.\n@param content [String] The chunk&#39;s …\n"],["verify_signature!","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-c-verify_signature-21","(io)","<p>Verifies that the current stream is a PNG datastream by checking its\nsignature.\n<p>This method reads the …\n"],["width","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-width","()","<p>Returns the width of the minimal bounding box of all the points in this\nvector. @return [Integer] The …\n"],["within_bounds?","ChunkyPNG::Point","ChunkyPNG/Point.html#method-i-within_bounds-3F","(*dimension_like)","<p>Checks whether the point falls into a dimension @param\n[ChunkyPNG::Dimension, …] dimension_like The …\n"],["write","ChunkyPNG::Canvas::PNGEncoding","ChunkyPNG/Canvas/PNGEncoding.html#method-i-write","(io, constraints = {})","<p>Writes the canvas to an IO stream, encoded as a PNG image. @param [IO] io\nThe output stream to write …\n"],["write","ChunkyPNG::Chunk::Base","ChunkyPNG/Chunk/Base.html#method-i-write","(io)","<p>Writes the chunk to the IO stream.\n<p>It will call the <code>content</code> method to get the content for this\nchunk, …\n"],["write","ChunkyPNG::Datastream","ChunkyPNG/Datastream.html#method-i-write","(io)","<p>Writes the datastream to the given output stream. @param [IO] io The output\nstream to write to.\n"],["write_with_crc","ChunkyPNG::Chunk::Base","ChunkyPNG/Chunk/Base.html#method-i-write_with_crc","(io, content)","<p>Writes the chunk to the IO stream, using the provided content. The checksum\nwill be calculated and appended …\n"],["x_range","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-x_range","()","<p>Returns the range in x-coordinates for all the points in this vector.\n@return [Range] The (inclusive) …\n"],["y_range","ChunkyPNG::Vector","ChunkyPNG/Vector.html#method-i-y_range","()","<p>Returns the range in y-coordinates for all the points in this vector.\n@return [Range] The (inclusive) …\n"],["BENCHMARKING","","BENCHMARKING_rdoc.html","","<p>ChunkyPNG benchmark suite\n<p>I would like the performance of this library as good as possible, and I\nwill …\n"],["CHANGELOG","","CHANGELOG_rdoc.html","","<p>Changelog\n<p>The file documents the changes to this library over the different versions.\n<p>ChunkyPNG uses semantic …\n"],["CONTRIBUTING","","CONTRIBUTING_rdoc.html","","<p>Contributing to ChunkyPNG\n<p>I will gladly accept any contributions from anybody to improve this\nlibrary. …\n"],["README","","README_rdoc.html","","<p>Chunky PNG <img src=“https://travis-ci.org/wvanbergen/chunky_png.png?branch=master” alt=“Build Status” …\n"]]}}