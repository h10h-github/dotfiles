var search_data = {"index":{"searchIndex":["currentprocess","daemonize","daemons","application","applicationgroup","cmdexception","controller","error","exception","monitor","optparse","pid","pidfile","pidmem","runtimeexception","systemerror","timeouterror","object","call()","call()","call_as_daemon()","call_as_daemon()","catch_exceptions()","change_privilege()","change_privilege()","cleanup()","cleanup()","close_io()","close_io()","controller()","controller()","create_monitor()","daemonize()","daemonize()","daemonize()","daemonize()","default_show_status()","dir()","exception_log()","exist?()","exist?()","existing()","existing()","filename()","find()","find_applications()","find_applications_by_app_name()","find_applications_by_pidfiles()","find_files()","group()","group()","groupname()","logdir()","logfile()","logfilename()","new()","new()","new()","new()","new()","new()","new()","new()","new_application()","output_logfile()","output_logfilename()","parse()","pid()","pid()","pid=()","pid=()","pidfile_dir()","pidfile_dir()","print_usage()","redirect_io()","redirect_io()","reload()","reload_all()","run()","run()","run()","run_proc()","run_proc()","running?()","running?()","running?()","running?()","safefork()","safefork()","script()","setup()","setup_app()","setup_options()","show_status()","show_status()","show_status_callback=()","simulate()","simulate()","split_argv()","start()","start()","start_all()","start_exec()","start_load()","start_none()","start_proc()","start_with_pidfile()","start_without_pidfile()","started()","stop()","stop()","stop_all()","username()","watch()","zap()","zap()","zap()","zap!()","zap_all()"],"longSearchIndex":["currentprocess","daemonize","daemons","daemons::application","daemons::applicationgroup","daemons::cmdexception","daemons::controller","daemons::error","daemons::exception","daemons::monitor","daemons::optparse","daemons::pid","daemons::pidfile","daemons::pidmem","daemons::runtimeexception","daemons::systemerror","daemons::timeouterror","object","daemons::call()","daemons#call()","daemonize::call_as_daemon()","daemonize#call_as_daemon()","daemons::controller#catch_exceptions()","currentprocess::change_privilege()","daemons::application#change_privilege()","daemons::pid#cleanup()","daemons::pidfile#cleanup()","daemonize#close_io()","daemonize::close_io()","daemons#controller()","daemons::controller()","daemons::applicationgroup#create_monitor()","daemonize#daemonize()","daemonize::daemonize()","daemons#daemonize()","daemons::daemonize()","daemons::application#default_show_status()","daemons::pid::dir()","daemons::application#exception_log()","daemons::pid#exist?()","daemons::pidfile#exist?()","daemons::pidfile::existing()","daemons::pidmem::existing()","daemons::pidfile#filename()","daemons::monitor::find()","daemons::applicationgroup#find_applications()","daemons::applicationgroup#find_applications_by_app_name()","daemons::applicationgroup#find_applications_by_pidfiles()","daemons::pidfile::find_files()","daemons::group()","daemons#group()","object#groupname()","daemons::application#logdir()","daemons::application#logfile()","daemons::application#logfilename()","daemons::application::new()","daemons::applicationgroup::new()","daemons::controller::new()","daemons::monitor::new()","daemons::optparse::new()","daemons::pid::new()","daemons::pidfile::new()","daemons::systemerror::new()","daemons::applicationgroup#new_application()","daemons::application#output_logfile()","daemons::application#output_logfilename()","daemons::optparse#parse()","daemons::pid#pid()","daemons::pidfile#pid()","daemons::pid#pid=()","daemons::pidfile#pid=()","daemons::application#pidfile_dir()","daemons::applicationgroup#pidfile_dir()","daemons::controller#print_usage()","daemonize#redirect_io()","daemonize::redirect_io()","daemons::application#reload()","daemons::applicationgroup#reload_all()","daemons::run()","daemons#run()","daemons::controller#run()","daemons::run_proc()","daemons#run_proc()","daemons::application#running?()","daemons::applicationgroup#running?()","daemons::pid::running?()","daemons::pid#running?()","daemonize#safefork()","daemonize::safefork()","daemons::application#script()","daemons::applicationgroup#setup()","daemons::applicationgroup#setup_app()","daemons::controller#setup_options()","daemons::application#show_status()","daemons::applicationgroup#show_status()","daemons::application#show_status_callback=()","daemonize#simulate()","daemonize::simulate()","daemons::controller::split_argv()","daemons::application#start()","daemons::monitor#start()","daemons::applicationgroup#start_all()","daemons::application#start_exec()","daemons::application#start_load()","daemons::application#start_none()","daemons::application#start_proc()","daemons::monitor#start_with_pidfile()","daemons::monitor#start_without_pidfile()","daemons::application#started()","daemons::application#stop()","daemons::monitor#stop()","daemons::applicationgroup#stop_all()","object#username()","daemons::monitor#watch()","daemons::application#zap()","daemons::pid#zap()","daemons::pidfile#zap()","daemons::application#zap!()","daemons::applicationgroup#zap_all()"],"info":[["CurrentProcess","","CurrentProcess.html","",""],["Daemonize","","Daemonize.html","",""],["Daemons","","Daemons.html","","<p>All functions and classes that Daemons provides reside in this module.\n<p>Daemons is normally invoked by …\n"],["Daemons::Application","","Daemons/Application.html","",""],["Daemons::ApplicationGroup","","Daemons/ApplicationGroup.html","",""],["Daemons::CmdException","","Daemons/CmdException.html","",""],["Daemons::Controller","","Daemons/Controller.html","",""],["Daemons::Error","","Daemons/Error.html","",""],["Daemons::Exception","","Daemons/Exception.html","",""],["Daemons::Monitor","","Daemons/Monitor.html","",""],["Daemons::Optparse","","Daemons/Optparse.html","",""],["Daemons::Pid","","Daemons/Pid.html","",""],["Daemons::PidFile","","Daemons/PidFile.html","","<p>What is a Pid-File?\n<p>A <em>Pid-File</em> is a file containing the <em>process identification\nnumber</em> (pid) that is stored …\n"],["Daemons::PidMem","","Daemons/PidMem.html","",""],["Daemons::RuntimeException","","Daemons/RuntimeException.html","",""],["Daemons::SystemError","","Daemons/SystemError.html","",""],["Daemons::TimeoutError","","Daemons/TimeoutError.html","",""],["Object","","Object.html","",""],["call","Daemons","Daemons.html#method-c-call","(options = {}, &block)","<p>Execute the block in a new daemon. <code>Daemons.call</code> will return\nimmediately after spawning the daemon with …\n"],["call","Daemons","Daemons.html#method-i-call","(options = {}, &block)","<p>Execute the block in a new daemon. <code>Daemons.call</code> will return\nimmediately after spawning the daemon with …\n"],["call_as_daemon","Daemonize","Daemonize.html#method-c-call_as_daemon","(block, logfile_name = nil, app_name = nil)","<p>Call a given block as a daemon\n"],["call_as_daemon","Daemonize","Daemonize.html#method-i-call_as_daemon","(block, logfile_name = nil, app_name = nil)","<p>Call a given block as a daemon\n"],["catch_exceptions","Daemons::Controller","Daemons/Controller.html#method-i-catch_exceptions","(&block)",""],["change_privilege","CurrentProcess","CurrentProcess.html#method-c-change_privilege","(user, group = user)",""],["change_privilege","Daemons::Application","Daemons/Application.html#method-i-change_privilege","()",""],["cleanup","Daemons::Pid","Daemons/Pid.html#method-i-cleanup","()","<p>Cleanup method\n"],["cleanup","Daemons::PidFile","Daemons/PidFile.html#method-i-cleanup","()",""],["close_io","Daemonize","Daemonize.html#method-i-close_io","()",""],["close_io","Daemonize","Daemonize.html#method-c-close_io","()",""],["controller","Daemons","Daemons.html#method-i-controller","()","<p>Return the internal Controller instance.\n"],["controller","Daemons","Daemons.html#method-c-controller","()","<p>Return the internal Controller instance.\n"],["create_monitor","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-create_monitor","(an_app)",""],["daemonize","Daemonize","Daemonize.html#method-i-daemonize","(logfile_name = nil, app_name = nil)","<p>Transform the current process into a daemon\n"],["daemonize","Daemonize","Daemonize.html#method-c-daemonize","(logfile_name = nil, app_name = nil)","<p>Transform the current process into a daemon\n"],["daemonize","Daemons","Daemons.html#method-i-daemonize","(options = {})","<p>Daemonize the currently runnig process, i.e. the calling process will\nbecome a daemon.\n<p>options &mdash; A hash …\n\n"],["daemonize","Daemons","Daemons.html#method-c-daemonize","(options = {})","<p>Daemonize the currently runnig process, i.e. the calling process will\nbecome a daemon.\n<p>options &mdash; A hash …\n\n"],["default_show_status","Daemons::Application","Daemons/Application.html#method-i-default_show_status","(daemon = self)",""],["dir","Daemons::Pid","Daemons/Pid.html#method-c-dir","(dir_mode, dir, script)","<p>Returns the directory that should be used to write the pid file to\ndepending on the given mode.\n<p>Some modes …\n"],["exception_log","Daemons::Application","Daemons/Application.html#method-i-exception_log","()","<p>This is a nice little function for debugging purposes: In case a\nmulti-threaded ruby script exits due …\n"],["exist?","Daemons::Pid","Daemons/Pid.html#method-i-exist-3F","()","<p>Exist? method\n"],["exist?","Daemons::PidFile","Daemons/PidFile.html#method-i-exist-3F","()",""],["existing","Daemons::PidFile","Daemons/PidFile.html#method-c-existing","(path)",""],["existing","Daemons::PidMem","Daemons/PidMem.html#method-c-existing","(numeric_pid)",""],["filename","Daemons::PidFile","Daemons/PidFile.html#method-i-filename","()",""],["find","Daemons::Monitor","Daemons/Monitor.html#method-c-find","(dir, app_name)",""],["find_applications","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-find_applications","(dir)",""],["find_applications_by_app_name","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-find_applications_by_app_name","(app_name)","<p>TODO: identifiy the monitor process\n"],["find_applications_by_pidfiles","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-find_applications_by_pidfiles","(dir)",""],["find_files","Daemons::PidFile","Daemons/PidFile.html#method-c-find_files","(dir, progname, delete = false)",""],["group","Daemons","Daemons.html#method-c-group","()","<p>Return the internal ApplicationGroup instance.\n"],["group","Daemons","Daemons.html#method-i-group","()","<p>Return the internal ApplicationGroup instance.\n"],["groupname","Object","Object.html#method-i-groupname","(gid)",""],["logdir","Daemons::Application","Daemons/Application.html#method-i-logdir","()",""],["logfile","Daemons::Application","Daemons/Application.html#method-i-logfile","()",""],["logfilename","Daemons::Application","Daemons/Application.html#method-i-logfilename","()",""],["new","Daemons::Application","Daemons/Application.html#method-c-new","(group, add_options = {}, pid = nil)",""],["new","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-c-new","(app_name, options = {})",""],["new","Daemons::Controller","Daemons/Controller.html#method-c-new","(options = {}, argv = [])",""],["new","Daemons::Monitor","Daemons/Monitor.html#method-c-new","(an_app)",""],["new","Daemons::Optparse","Daemons/Optparse.html#method-c-new","(controller)",""],["new","Daemons::Pid","Daemons/Pid.html#method-c-new","()","<p>Initialization method\n"],["new","Daemons::PidFile","Daemons/PidFile.html#method-c-new","(dir, progname, multiple = false)",""],["new","Daemons::SystemError","Daemons/SystemError.html#method-c-new","(msg, system_error)",""],["new_application","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-new_application","(add_options = {})",""],["output_logfile","Daemons::Application","Daemons/Application.html#method-i-output_logfile","()",""],["output_logfilename","Daemons::Application","Daemons/Application.html#method-i-output_logfilename","()",""],["parse","Daemons::Optparse","Daemons/Optparse.html#method-i-parse","(args)","<p>Return a hash describing the options.\n"],["pid","Daemons::Pid","Daemons/Pid.html#method-i-pid","()","<p>Get method\n"],["pid","Daemons::PidFile","Daemons/PidFile.html#method-i-pid","()",""],["pid=","Daemons::Pid","Daemons/Pid.html#method-i-pid-3D","(p)","<p>Set method\n"],["pid=","Daemons::PidFile","Daemons/PidFile.html#method-i-pid-3D","(p)",""],["pidfile_dir","Daemons::Application","Daemons/Application.html#method-i-pidfile_dir","()",""],["pidfile_dir","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-pidfile_dir","()",""],["print_usage","Daemons::Controller","Daemons/Controller.html#method-i-print_usage","()",""],["redirect_io","Daemonize","Daemonize.html#method-i-redirect_io","(logfile_name)","<p>Free STDIN/STDOUT/STDERR file descriptors and point them somewhere sensible\n"],["redirect_io","Daemonize","Daemonize.html#method-c-redirect_io","(logfile_name)","<p>Free STDIN/STDOUT/STDERR file descriptors and point them somewhere sensible\n"],["reload","Daemons::Application","Daemons/Application.html#method-i-reload","()",""],["reload_all","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-reload_all","()",""],["run","Daemons","Daemons.html#method-c-run","(script, options = {})","<p>Passes control to Daemons. This is used in wrapper-scripts that are\nsupposed to control other ruby scripts …\n"],["run","Daemons","Daemons.html#method-i-run","(script, options = {})","<p>Passes control to Daemons. This is used in wrapper-scripts that are\nsupposed to control other ruby scripts …\n"],["run","Daemons::Controller","Daemons/Controller.html#method-i-run","()",""],["run_proc","Daemons","Daemons.html#method-c-run_proc","(app_name, options = {}, &block)","<p>Passes control to Daemons. This function does the same as Daemons.run\nexcept that not a script but a …\n"],["run_proc","Daemons","Daemons.html#method-i-run_proc","(app_name, options = {}, &block)","<p>Passes control to Daemons. This function does the same as Daemons.run\nexcept that not a script but a …\n"],["running?","Daemons::Application","Daemons/Application.html#method-i-running-3F","()","<p>This function implements a (probably too simle) method to detect whether\nthe program with the pid found …\n"],["running?","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-running-3F","()","<p>Check whether at least one of the applications in the group is running. If\nyes, return true.\n"],["running?","Daemons::Pid","Daemons/Pid.html#method-c-running-3F","(pid)",""],["running?","Daemons::Pid","Daemons/Pid.html#method-i-running-3F","()","<p>Check whether the process is running\n"],["safefork","Daemonize","Daemonize.html#method-i-safefork","()","<p>Try to fork if at all possible retrying every 5 sec if the maximum process\nlimit for the system has been …\n"],["safefork","Daemonize","Daemonize.html#method-c-safefork","()","<p>Try to fork if at all possible retrying every 5 sec if the maximum process\nlimit for the system has been …\n"],["script","Daemons::Application","Daemons/Application.html#method-i-script","()",""],["setup","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-setup","()","<p>Setup the application group. Currently this functions calls\n<code>find_applications</code> which finds all running …\n"],["setup_app","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-setup_app","(app)",""],["setup_options","Daemons::Controller","Daemons/Controller.html#method-i-setup_options","()","<p>This function is used to do a final update of the options passed to the\napplication before they are really …\n"],["show_status","Daemons::Application","Daemons/Application.html#method-i-show_status","()",""],["show_status","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-show_status","()",""],["show_status_callback=","Daemons::Application","Daemons/Application.html#method-i-show_status_callback-3D","(function)",""],["simulate","Daemonize","Daemonize.html#method-i-simulate","(logfile_name = nil, app_name = nil)","<p>Simulate the daemonization process (:ontop mode) NOTE: STDOUT and STDERR\nwill not be redirected to the …\n"],["simulate","Daemonize","Daemonize.html#method-c-simulate","(logfile_name = nil, app_name = nil)","<p>Simulate the daemonization process (:ontop mode) NOTE: STDOUT and STDERR\nwill not be redirected to the …\n"],["split_argv","Daemons::Controller","Daemons/Controller.html#method-c-split_argv","(argv)","<p>Split an <em>argv</em> array. <code>argv</code> is assumed to be in the\nfollowing format:\n\n<pre>[&#39;command&#39;, &#39;controller option 1&#39;, ...</pre>\n"],["start","Daemons::Application","Daemons/Application.html#method-i-start","(restart = false)",""],["start","Daemons::Monitor","Daemons/Monitor.html#method-i-start","(application_group)",""],["start_all","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-start_all","()",""],["start_exec","Daemons::Application","Daemons/Application.html#method-i-start_exec","()",""],["start_load","Daemons::Application","Daemons/Application.html#method-i-start_load","()",""],["start_none","Daemons::Application","Daemons/Application.html#method-i-start_none","()","<p>this function is only used to daemonize the currently running process\n(Daemons.daemonize)\n"],["start_proc","Daemons::Application","Daemons/Application.html#method-i-start_proc","()",""],["start_with_pidfile","Daemons::Monitor","Daemons/Monitor.html#method-i-start_with_pidfile","(application_group)",""],["start_without_pidfile","Daemons::Monitor","Daemons/Monitor.html#method-i-start_without_pidfile","(application_group)",""],["started","Daemons::Application","Daemons/Application.html#method-i-started","()",""],["stop","Daemons::Application","Daemons/Application.html#method-i-stop","(no_wait = false)",""],["stop","Daemons::Monitor","Daemons/Monitor.html#method-i-stop","()",""],["stop_all","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-stop_all","(no_wait = false)",""],["username","Object","Object.html#method-i-username","(uid)",""],["watch","Daemons::Monitor","Daemons/Monitor.html#method-i-watch","(application_group)",""],["zap","Daemons::Application","Daemons/Application.html#method-i-zap","()",""],["zap","Daemons::Pid","Daemons/Pid.html#method-i-zap","()","<p>Zap method\n"],["zap","Daemons::PidFile","Daemons/PidFile.html#method-i-zap","()",""],["zap!","Daemons::Application","Daemons/Application.html#method-i-zap-21","()",""],["zap_all","Daemons::ApplicationGroup","Daemons/ApplicationGroup.html#method-i-zap_all","()",""]]}}