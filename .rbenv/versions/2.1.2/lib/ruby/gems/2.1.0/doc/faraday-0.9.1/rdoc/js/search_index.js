var search_data = {"index":{"searchIndex":["emhttpsslpatch","eventmachine","faraday","adapter","emhttp","manager","options","emsynchrony","parallelmanager","excon","httpclient","nethttp","net","openssl","ssl","nethttppersistent","proxy_uri;","parallelism","patron","request","rack","test","stub","stubs","notfound","typhoeus","autoloadhelper","clienterror","compositereadio","connection","connectionfailed","connectionoptions","env","utils","error","flatparamsencoder","middleware","middlewareregistry","missingdependency","nestedparamsencoder","options","parsingerror","proxyoptions","rackbuilder","handler","stacklocked","request","authorization","basicauthentication","instrumentation","options","multipart","retry","options","matcher;","tokenauthentication","urlencoded","requestoptions","resourcenotfound","response","logger","middleware","raiseerror","sslerror","ssloptions","timeouterror","utils","headers","paramshash","object","==()","==()","uri()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","adapter()","add()","add()","advance_io()","all_loaded_constants()","app()","apply_request()","assert_index()","attribute_options()","authorization()","autoload_all()","backoff_factor()","backtrace()","basic_auth()","body()","build()","build()","build_env()","build_exception_matcher()","build_exclusive_url()","build_hash()","build_nested_query()","build_query()","build_request()","build_response()","build_url()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","certificate_store()","check_finished()","clear()","clear_body()","client()","close()","configure()","configure_compression()","configure_proxy()","configure_proxy()","configure_proxy()","configure_socket()","configure_socket()","configure_socket()","configure_ssl()","configure_ssl()","configure_ssl()","configure_ssl()","configure_ssl()","configure_timeout()","configure_timeout()","configure_timeouts()","connection_config()","const_missing()","convert_key()","create()","create_multipart()","create_request()","create_session()","current_io()","custom_members()","decode()","decode()","deep_merge()","deep_merge!()","default_adapter=()","default_connection()","default_connection_options()","default_parallel_manager()","default_params_encoder()","default_uri_parser()","default_uri_parser=()","delete()","delete()","delete()","delete()","delete()","dependency()","disable?()","dump_body()","dump_headers()","dup()","dup()","each()","each_key()","each_value()","empty?()","empty?()","encode()","encode()","ensure_open_and_readable()","error_message()","escape()","exceptions()","execute_request()","fetch()","fetch()","fetch_error_class()","fetch_middleware()","finish()","finished?()","from()","from()","from()","from()","get()","has_key?()","has_key?()","has_key?()","has_multipart?()","has_value?()","head()","header()","header()","header()","headers()","headers=()","headers=()","headers_match?()","host()","in_member_set?()","in_parallel()","in_parallel?()","include?()","include?()","inherited()","inherited()","inherited()","insert()","insert_after()","insert_before()","inspect()","inspect()","inspect()","inspect()","instrumenter()","interval()","interval_randomness()","key?()","key?()","key?()","keys()","klass()","length()","load_autoloaded_constants()","load_middleware()","loaded?()","lock!()","locked?()","log_body?()","lookup_middleware()","marshal_dump()","marshal_load()","match()","match_content_type()","matches?()","matches?()","max()","member?()","member?()","member_set()","memoized()","memoized_attributes()","merge()","merge()","merge()","merge!()","merge!()","merge!()","merge_query()","method_missing()","methods()","middleware_mutex()","name()","needs_body?()","net_http_connection()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_builder()","new_stub()","normalize_params()","normalize_path()","on_complete()","on_complete()","on_complete()","on_complete()","options()","options()","options_for()","parallel?()","parallel?()","parallel?()","params=()","params=()","params_match?()","parse()","parse_body?()","parse_nested_query()","parse_query()","patch()","path_prefix=()","perform()","perform_request()","perform_request()","perform_request()","perform_request()","perform_request()","perform_single_request()","post()","pretty_inspect()","process_params()","process_request?()","process_request?()","proxy()","put()","queue()","raise_error()","raise_if_locked()","read()","read_body()","read_body()","read_body()","register_middleware()","replace()","replace()","request()","request()","request_config()","request_options()","request_options()","request_type()","require_lib()","require_libs()","reset()","response()","response_values()","retry_if()","retry_request?()","rewind()","run()","run()","run_request()","running?()","save_response()","set_authorization_header()","setup_parallel_manager()","setup_parallel_manager()","setup_parallel_manager()","sleep_amount()","sort_query_params()","ssl_cert_store()","ssl_handshake_completed()","ssl_verify_mode()","ssl_verify_mode()","ssl_verify_peer()","status()","success?()","success?()","supports_parallel?()","swap()","symbolized_key_set()","tap()","to_app()","to_env()","to_hash()","to_hash()","to_query()","to_s()","token_auth()","unescape()","update()","update()","update()","url()","url_prefix=()","use()","use_symbol()","value?()","values_at()","verify?()","verify_peer?()","verify_stubbed_calls()","with_net_http_connection()","with_net_http_connection()","with_uri_credentials()"],"longSearchIndex":["emhttpsslpatch","eventmachine","faraday","faraday::adapter","faraday::adapter::emhttp","faraday::adapter::emhttp::manager","faraday::adapter::emhttp::options","faraday::adapter::emsynchrony","faraday::adapter::emsynchrony::parallelmanager","faraday::adapter::excon","faraday::adapter::httpclient","faraday::adapter::nethttp","faraday::adapter::nethttp::net","faraday::adapter::nethttp::openssl","faraday::adapter::nethttp::openssl::ssl","faraday::adapter::nethttppersistent","faraday::adapter::nethttppersistent::proxy_uri;","faraday::adapter::parallelism","faraday::adapter::patron","faraday::adapter::patron::request","faraday::adapter::rack","faraday::adapter::test","faraday::adapter::test::stub","faraday::adapter::test::stubs","faraday::adapter::test::stubs::notfound","faraday::adapter::typhoeus","faraday::autoloadhelper","faraday::clienterror","faraday::compositereadio","faraday::connection","faraday::connectionfailed","faraday::connectionoptions","faraday::env","faraday::env::utils","faraday::error","faraday::flatparamsencoder","faraday::middleware","faraday::middlewareregistry","faraday::missingdependency","faraday::nestedparamsencoder","faraday::options","faraday::parsingerror","faraday::proxyoptions","faraday::rackbuilder","faraday::rackbuilder::handler","faraday::rackbuilder::stacklocked","faraday::request","faraday::request::authorization","faraday::request::basicauthentication","faraday::request::instrumentation","faraday::request::instrumentation::options","faraday::request::multipart","faraday::request::retry","faraday::request::retry::options","faraday::request::retry::matcher;","faraday::request::tokenauthentication","faraday::request::urlencoded","faraday::requestoptions","faraday::resourcenotfound","faraday::response","faraday::response::logger","faraday::response::middleware","faraday::response::raiseerror","faraday::sslerror","faraday::ssloptions","faraday::timeouterror","faraday::utils","faraday::utils::headers","faraday::utils::paramshash","object","faraday::rackbuilder#==()","faraday::rackbuilder::handler#==()","faraday::utils#uri()","faraday::env#[]()","faraday::options#[]()","faraday::rackbuilder#[]()","faraday::request#[]()","faraday::utils::headers#[]()","faraday::utils::paramshash#[]()","faraday::env#[]=()","faraday::request#[]=()","faraday::requestoptions#[]=()","faraday::utils::headers#[]=()","faraday::utils::paramshash#[]=()","faraday::rackbuilder#adapter()","faraday::adapter::emhttp::manager#add()","faraday::adapter::emsynchrony::parallelmanager#add()","faraday::compositereadio#advance_io()","faraday::autoloadhelper#all_loaded_constants()","faraday::rackbuilder#app()","faraday::response#apply_request()","faraday::rackbuilder#assert_index()","faraday::options::attribute_options()","faraday::connection#authorization()","faraday::autoloadhelper#autoload_all()","faraday::request::retry::options#backoff_factor()","faraday::clienterror#backtrace()","faraday::connection#basic_auth()","faraday::response#body()","faraday::rackbuilder#build()","faraday::rackbuilder::handler#build()","faraday::rackbuilder#build_env()","faraday::request::retry#build_exception_matcher()","faraday::connection#build_exclusive_url()","faraday::request::authorization::build_hash()","faraday::utils#build_nested_query()","faraday::utils#build_query()","faraday::connection#build_request()","faraday::rackbuilder#build_response()","faraday::connection#build_url()","faraday::adapter#call()","faraday::adapter::emhttp#call()","faraday::adapter::emsynchrony#call()","faraday::adapter::excon#call()","faraday::adapter::httpclient#call()","faraday::adapter::nethttp#call()","faraday::adapter::patron#call()","faraday::adapter::rack#call()","faraday::adapter::test#call()","faraday::adapter::typhoeus#call()","faraday::request::authorization#call()","faraday::request::instrumentation#call()","faraday::request::multipart#call()","faraday::request::retry#call()","faraday::request::urlencoded#call()","faraday::response::logger#call()","faraday::response::middleware#call()","emhttpsslpatch#certificate_store()","faraday::adapter::emhttp::manager#check_finished()","faraday::options#clear()","faraday::env#clear_body()","faraday::adapter::httpclient#client()","faraday::compositereadio#close()","faraday::adapter::test#configure()","faraday::adapter::emhttp::options#configure_compression()","faraday::adapter::emhttp::options#configure_proxy()","faraday::adapter::httpclient#configure_proxy()","faraday::adapter::typhoeus#configure_proxy()","faraday::adapter::emhttp::options#configure_socket()","faraday::adapter::httpclient#configure_socket()","faraday::adapter::typhoeus#configure_socket()","faraday::adapter::emhttp::options#configure_ssl()","faraday::adapter::httpclient#configure_ssl()","faraday::adapter::nethttp#configure_ssl()","faraday::adapter::nethttppersistent#configure_ssl()","faraday::adapter::typhoeus#configure_ssl()","faraday::adapter::emhttp::options#configure_timeout()","faraday::adapter::typhoeus#configure_timeout()","faraday::adapter::httpclient#configure_timeouts()","faraday::adapter::emhttp::options#connection_config()","faraday::const_missing()","faraday::utils::paramshash#convert_key()","faraday::request::create()","faraday::request::multipart#create_multipart()","faraday::adapter::nethttp#create_request()","faraday::adapter::patron#create_session()","faraday::compositereadio#current_io()","faraday::env#custom_members()","faraday::flatparamsencoder::decode()","faraday::nestedparamsencoder::decode()","faraday::utils#deep_merge()","faraday::utils#deep_merge!()","faraday::default_adapter=()","faraday::default_connection()","faraday::default_connection_options()","faraday::connection#default_parallel_manager()","faraday::utils#default_params_encoder()","faraday::utils#default_uri_parser()","faraday::utils#default_uri_parser=()","faraday::adapter::test::stubs#delete()","faraday::options#delete()","faraday::rackbuilder#delete()","faraday::utils::headers#delete()","faraday::utils::paramshash#delete()","faraday::middleware::dependency()","faraday::ssloptions#disable?()","faraday::response::logger#dump_body()","faraday::response::logger#dump_headers()","faraday::connection#dup()","faraday::rackbuilder#dup()","faraday::options#each()","faraday::options#each_key()","faraday::options#each_value()","faraday::adapter::test::stubs#empty?()","faraday::options#empty?()","faraday::flatparamsencoder::encode()","faraday::nestedparamsencoder::encode()","faraday::compositereadio#ensure_open_and_readable()","faraday::adapter::emhttp#error_message()","faraday::utils#escape()","faraday::request::retry::options#exceptions()","faraday::adapter::rack#execute_request()","faraday::options#fetch()","faraday::utils::headers#fetch()","faraday::options::fetch_error_class()","faraday::middlewareregistry#fetch_middleware()","faraday::response#finish()","faraday::response#finished?()","faraday::options::from()","faraday::proxyoptions::from()","faraday::request::retry::options::from()","faraday::utils::headers::from()","faraday::adapter::test::stubs#get()","faraday::options#has_key?()","faraday::utils::headers#has_key?()","faraday::utils::paramshash#has_key?()","faraday::request::multipart#has_multipart?()","faraday::options#has_value?()","faraday::adapter::test::stubs#head()","faraday::request::authorization::header()","faraday::request::basicauthentication::header()","faraday::request::tokenauthentication::header()","faraday::response#headers()","faraday::connection#headers=()","faraday::request#headers=()","faraday::adapter::test::stub#headers_match?()","emhttpsslpatch#host()","faraday::env#in_member_set?()","faraday::connection#in_parallel()","faraday::connection#in_parallel?()","faraday::utils::headers#include?()","faraday::utils::paramshash#include?()","faraday::adapter::parallelism#inherited()","faraday::middleware::inherited()","faraday::options::inherited()","faraday::rackbuilder#insert()","faraday::rackbuilder#insert_after()","faraday::rackbuilder#insert_before()","faraday::clienterror#inspect()","faraday::env#inspect()","faraday::options#inspect()","faraday::rackbuilder::handler#inspect()","faraday::request::instrumentation::options#instrumenter()","faraday::request::retry::options#interval()","faraday::request::retry::options#interval_randomness()","faraday::options#key?()","faraday::utils::headers#key?()","faraday::utils::paramshash#key?()","faraday::options#keys()","faraday::rackbuilder::handler#klass()","faraday::compositereadio#length()","faraday::autoloadhelper#load_autoloaded_constants()","faraday::middlewareregistry#load_middleware()","faraday::middleware::loaded?()","faraday::rackbuilder#lock!()","faraday::rackbuilder#locked?()","faraday::response::logger#log_body?()","faraday::middlewareregistry#lookup_middleware()","faraday::response#marshal_dump()","faraday::response#marshal_load()","faraday::adapter::test::stubs#match()","faraday::request::urlencoded#match_content_type()","faraday::adapter::test::stub#matches?()","faraday::adapter::test::stubs#matches?()","faraday::request::retry::options#max()","faraday::utils::headers#member?()","faraday::utils::paramshash#member?()","faraday::env::member_set()","faraday::options::memoized()","faraday::options::memoized_attributes()","faraday::options#merge()","faraday::utils::headers#merge()","faraday::utils::paramshash#merge()","faraday::options#merge!()","faraday::utils::headers#merge!()","faraday::utils::paramshash#merge!()","faraday::utils::paramshash#merge_query()","faraday::method_missing()","faraday::request::retry::options#methods()","faraday::middlewareregistry#middleware_mutex()","faraday::request::instrumentation::options#name()","faraday::env#needs_body?()","faraday::adapter::nethttp#net_http_connection()","faraday::new()","faraday::adapter::emhttp::manager::new()","faraday::adapter::excon::new()","faraday::adapter::patron::new()","faraday::adapter::rack::new()","faraday::adapter::test::new()","faraday::adapter::test::stub::new()","faraday::adapter::test::stubs::new()","faraday::clienterror::new()","faraday::compositereadio::new()","faraday::connection::new()","faraday::middleware::new()","faraday::middleware::new()","faraday::rackbuilder::new()","faraday::rackbuilder::handler::new()","faraday::request::authorization::new()","faraday::request::instrumentation::new()","faraday::request::retry::new()","faraday::request::tokenauthentication::new()","faraday::response::new()","faraday::response::logger::new()","faraday::timeouterror::new()","faraday::utils::headers::new()","faraday::connectionoptions#new_builder()","faraday::adapter::test::stubs#new_stub()","faraday::utils#normalize_params()","faraday::utils#normalize_path()","faraday::response#on_complete()","faraday::response::logger#on_complete()","faraday::response::middleware#on_complete()","faraday::response::raiseerror#on_complete()","faraday::adapter::test::stubs#options()","faraday::options::options()","faraday::options::options_for()","faraday::adapter::emhttp#parallel?()","faraday::adapter::typhoeus#parallel?()","faraday::env#parallel?()","faraday::connection#params=()","faraday::request#params=()","faraday::adapter::test::stub#params_match?()","faraday::utils::headers#parse()","faraday::env#parse_body?()","faraday::utils#parse_nested_query()","faraday::utils#parse_query()","faraday::adapter::test::stubs#patch()","faraday::connection#path_prefix=()","faraday::adapter::emsynchrony::parallelmanager#perform()","faraday::adapter::emhttp#perform_request()","faraday::adapter::emhttp::manager#perform_request()","faraday::adapter::nethttp#perform_request()","faraday::adapter::nethttppersistent#perform_request()","faraday::adapter::typhoeus#perform_request()","faraday::adapter::emhttp#perform_single_request()","faraday::adapter::test::stubs#post()","faraday::response::logger#pretty_inspect()","faraday::request::multipart#process_params()","faraday::request::multipart#process_request?()","faraday::request::urlencoded#process_request?()","faraday::connection#proxy()","faraday::adapter::test::stubs#put()","faraday::adapter::emsynchrony::parallelmanager#queue()","faraday::adapter::emhttp#raise_error()","faraday::rackbuilder#raise_if_locked()","faraday::compositereadio#read()","faraday::adapter::emhttp::options#read_body()","faraday::adapter::excon#read_body()","faraday::adapter::typhoeus#read_body()","faraday::middlewareregistry#register_middleware()","faraday::utils::headers#replace()","faraday::utils::paramshash#replace()","faraday::adapter::typhoeus#request()","faraday::rackbuilder#request()","faraday::adapter::emhttp::options#request_config()","faraday::adapter::emhttp::options#request_options()","faraday::adapter::typhoeus#request_options()","faraday::request::urlencoded#request_type()","faraday::require_lib()","faraday::require_libs()","faraday::adapter::emhttp::manager#reset()","faraday::rackbuilder#response()","faraday::response::raiseerror#response_values()","faraday::request::retry::options#retry_if()","faraday::request::retry#retry_request?()","faraday::compositereadio#rewind()","faraday::adapter::emhttp::manager#run()","faraday::adapter::emsynchrony::parallelmanager#run()","faraday::connection#run_request()","faraday::adapter::emhttp::manager#running?()","faraday::adapter#save_response()","faraday::connection#set_authorization_header()","faraday::adapter::emhttp::setup_parallel_manager()","faraday::adapter::emsynchrony::setup_parallel_manager()","faraday::adapter::typhoeus::setup_parallel_manager()","faraday::request::retry#sleep_amount()","faraday::utils#sort_query_params()","faraday::adapter::nethttp#ssl_cert_store()","emhttpsslpatch#ssl_handshake_completed()","faraday::adapter::httpclient#ssl_verify_mode()","faraday::adapter::nethttp#ssl_verify_mode()","emhttpsslpatch#ssl_verify_peer()","faraday::response#status()","faraday::env#success?()","faraday::response#success?()","faraday::adapter::parallelism#supports_parallel?()","faraday::rackbuilder#swap()","faraday::options#symbolized_key_set()","object#tap()","faraday::rackbuilder#to_app()","faraday::request#to_env()","faraday::options#to_hash()","faraday::utils::headers#to_hash()","faraday::utils::paramshash#to_query()","faraday::adapter::test::stub#to_s()","faraday::connection#token_auth()","faraday::utils#unescape()","faraday::options#update()","faraday::utils::headers#update()","faraday::utils::paramshash#update()","faraday::request#url()","faraday::connection#url_prefix=()","faraday::rackbuilder#use()","faraday::rackbuilder#use_symbol()","faraday::options#value?()","faraday::options#values_at()","faraday::ssloptions#verify?()","emhttpsslpatch#verify_peer?()","faraday::adapter::test::stubs#verify_stubbed_calls()","faraday::adapter::nethttp#with_net_http_connection()","faraday::adapter::nethttppersistent#with_net_http_connection()","faraday::connection#with_uri_credentials()"],"info":[["EmHttpSslPatch","","EmHttpSslPatch.html","",""],["EventMachine","","EventMachine.html","",""],["Faraday","","Faraday.html","","<p>Public: This is the main namespace for Faraday.  You can either use it to\ncreate Faraday::Connection …\n"],["Faraday::Adapter","","Faraday/Adapter.html","","<p>Public: This is a base class for all Faraday adapters.  Adapters are\nresponsible for fulfilling a Faraday …\n"],["Faraday::Adapter::EMHttp","","Faraday/Adapter/EMHttp.html","","<p>EventMachine adapter is useful for either asynchronous requests when in EM\nreactor loop or for making …\n"],["Faraday::Adapter::EMHttp::Manager","","Faraday/Adapter/EMHttp/Manager.html","","<p>The parallel manager is designed to start an EventMachine loop and block\nuntil all registered requests …\n"],["Faraday::Adapter::EMHttp::Options","","Faraday/Adapter/EMHttp/Options.html","",""],["Faraday::Adapter::EMSynchrony","","Faraday/Adapter/EMSynchrony.html","",""],["Faraday::Adapter::EMSynchrony::ParallelManager","","Faraday/Adapter/EMSynchrony/ParallelManager.html","",""],["Faraday::Adapter::Excon","","Faraday/Adapter/Excon.html","",""],["Faraday::Adapter::HTTPClient","","Faraday/Adapter/HTTPClient.html","",""],["Faraday::Adapter::NetHttp","","Faraday/Adapter/NetHttp.html","",""],["Faraday::Adapter::NetHttp::Net","","Faraday/Adapter/NetHttp/Net.html","",""],["Faraday::Adapter::NetHttp::OpenSSL","","Faraday/Adapter/NetHttp/OpenSSL.html","",""],["Faraday::Adapter::NetHttp::OpenSSL::SSL","","Faraday/Adapter/NetHttp/OpenSSL/SSL.html","",""],["Faraday::Adapter::NetHttpPersistent","","Faraday/Adapter/NetHttpPersistent.html","","<p>Experimental adapter for net-http-persistent\n"],["Faraday::Adapter::NetHttpPersistent::proxy_uri;","","Faraday/Adapter/NetHttpPersistent/proxy_uri;.html","",""],["Faraday::Adapter::Parallelism","","Faraday/Adapter/Parallelism.html","","<p>Public: This module marks an Adapter as supporting parallel requests.\n"],["Faraday::Adapter::Patron","","Faraday/Adapter/Patron.html","",""],["Faraday::Adapter::Patron::Request","","Faraday/Adapter/Patron/Request.html","",""],["Faraday::Adapter::Rack","","Faraday/Adapter/Rack.html","","<p>Sends requests to a Rack app.\n<p>Examples\n\n<pre>class MyRackApp\n  def call(env)\n    [200, {&#39;Content-Type&#39; =&gt; &#39;text/html&#39;}, ...</pre>\n"],["Faraday::Adapter::Test","","Faraday/Adapter/Test.html","","<p>test = Faraday::Connection.new do\n\n<pre>use Faraday::Adapter::Test do |stub|\n  stub.get &#39;/nigiri/sake.json&#39; ...</pre>\n"],["Faraday::Adapter::Test::Stub","","Faraday/Adapter/Test/Stub.html","",""],["Faraday::Adapter::Test::Stubs","","Faraday/Adapter/Test/Stubs.html","",""],["Faraday::Adapter::Test::Stubs::NotFound","","Faraday/Adapter/Test/Stubs/NotFound.html","",""],["Faraday::Adapter::Typhoeus","","Faraday/Adapter/Typhoeus.html","",""],["Faraday::AutoloadHelper","","Faraday/AutoloadHelper.html","","<p>Internal: Adds the ability for other modules to manage autoloadable\nconstants.\n"],["Faraday::ClientError","","Faraday/ClientError.html","",""],["Faraday::CompositeReadIO","","Faraday/CompositeReadIO.html","","<p>Similar but not compatible with ::CompositeReadIO provided by\nmultipart-post.\n"],["Faraday::Connection","","Faraday/Connection.html","","<p>Public: Connection objects manage the default properties and the middleware\nstack for fulfilling an  …\n"],["Faraday::ConnectionFailed","","Faraday/ConnectionFailed.html","",""],["Faraday::ConnectionOptions","","Faraday/ConnectionOptions.html","",""],["Faraday::Env","","Faraday/Env.html","",""],["Faraday::Env::Utils","","Faraday/Env/Utils.html","",""],["Faraday::Error","","Faraday/Error.html","",""],["Faraday::FlatParamsEncoder","","Faraday/FlatParamsEncoder.html","",""],["Faraday::Middleware","","Faraday/Middleware.html","",""],["Faraday::MiddlewareRegistry","","Faraday/MiddlewareRegistry.html","","<p>Public: Adds the ability for other modules to register and lookup\nmiddleware classes.\n"],["Faraday::MissingDependency","","Faraday/MissingDependency.html","",""],["Faraday::NestedParamsEncoder","","Faraday/NestedParamsEncoder.html","",""],["Faraday::Options","","Faraday/Options.html","","<p>Subclasses Struct with some special helpers for converting from a Hash to a\nStruct.\n"],["Faraday::ParsingError","","Faraday/ParsingError.html","",""],["Faraday::ProxyOptions","","Faraday/ProxyOptions.html","",""],["Faraday::RackBuilder","","Faraday/RackBuilder.html","","<p>A Builder that processes requests into responses by passing through an\ninner middleware stack (heavily …\n"],["Faraday::RackBuilder::Handler","","Faraday/RackBuilder/Handler.html","","<p>borrowed from ActiveSupport::Dependencies::Reference &amp;\nActionDispatch::MiddlewareStack::Middleware …\n"],["Faraday::RackBuilder::StackLocked","","Faraday/RackBuilder/StackLocked.html","","<p>Error raised when trying to modify the stack after calling `lock!`\n"],["Faraday::Request","","Faraday/Request.html","","<p>Used to setup urls, params, headers, and the request body in a sane manner.\n\n<pre>@connection.post do |req| ...</pre>\n"],["Faraday::Request::Authorization","","Faraday/Request/Authorization.html","",""],["Faraday::Request::BasicAuthentication","","Faraday/Request/BasicAuthentication.html","",""],["Faraday::Request::Instrumentation","","Faraday/Request/Instrumentation.html","",""],["Faraday::Request::Instrumentation::Options","","Faraday/Request/Instrumentation/Options.html","",""],["Faraday::Request::Multipart","","Faraday/Request/Multipart.html","",""],["Faraday::Request::Retry","","Faraday/Request/Retry.html","","<p>Catches exceptions and retries each request a limited number of times.\n<p>By default, it retries 2 times …\n"],["Faraday::Request::Retry::Options","","Faraday/Request/Retry/Options.html","",""],["Faraday::Request::Retry::matcher;","","Faraday/Request/Retry/matcher;.html","",""],["Faraday::Request::TokenAuthentication","","Faraday/Request/TokenAuthentication.html","",""],["Faraday::Request::UrlEncoded","","Faraday/Request/UrlEncoded.html","",""],["Faraday::RequestOptions","","Faraday/RequestOptions.html","",""],["Faraday::ResourceNotFound","","Faraday/ResourceNotFound.html","",""],["Faraday::Response","","Faraday/Response.html","",""],["Faraday::Response::Logger","","Faraday/Response/Logger.html","",""],["Faraday::Response::Middleware","","Faraday/Response/Middleware.html","","<p>Used for simple response middleware.\n"],["Faraday::Response::RaiseError","","Faraday/Response/RaiseError.html","",""],["Faraday::SSLError","","Faraday/SSLError.html","",""],["Faraday::SSLOptions","","Faraday/SSLOptions.html","",""],["Faraday::TimeoutError","","Faraday/TimeoutError.html","",""],["Faraday::Utils","","Faraday/Utils.html","",""],["Faraday::Utils::Headers","","Faraday/Utils/Headers.html","","<p>Adapted from Rack::Utils::HeaderHash\n"],["Faraday::Utils::ParamsHash","","Faraday/Utils/ParamsHash.html","","<p>hash with stringified keys\n"],["Object","","Object.html","","<p>not pulling in active-support JUST for this method.  And I love this\nmethod.\n"],["==","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-3D-3D","(other)",""],["==","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-i-3D-3D","(other)",""],["URI","Faraday::Utils","Faraday/Utils.html#method-i-URI","(url)","<p>Normalize URI() behavior across Ruby versions\n<p>url - A String or URI.\n<p>Returns a parsed URI.\n"],["[]","Faraday::Env","Faraday/Env.html#method-i-5B-5D","(key)","<p>Public\n"],["[]","Faraday::Options","Faraday/Options.html#method-i-5B-5D","(key)",""],["[]","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-5B-5D","(idx)",""],["[]","Faraday::Request","Faraday/Request.html#method-i-5B-5D","(key)",""],["[]","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-5B-5D","(k)",""],["[]","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-5B-5D","(key)",""],["[]=","Faraday::Env","Faraday/Env.html#method-i-5B-5D-3D","(key, value)","<p>Public\n"],["[]=","Faraday::Request","Faraday/Request.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Faraday::RequestOptions","Faraday/RequestOptions.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-5B-5D-3D","(k, v)",""],["[]=","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-5B-5D-3D","(key, value)",""],["adapter","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-adapter","(key, *args, &block)",""],["add","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-add","()",""],["add","Faraday::Adapter::EMSynchrony::ParallelManager","Faraday/Adapter/EMSynchrony/ParallelManager.html#method-i-add","(request, method, *args, &block)","<p>Add requests to queue. The `request` argument should be a `EM::HttpRequest`\nobject.\n"],["advance_io","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-advance_io","()",""],["all_loaded_constants","Faraday::AutoloadHelper","Faraday/AutoloadHelper.html#method-i-all_loaded_constants","()","<p>Internal: Filters the module&#39;s contents with those that have been\nalready autoloaded.\n<p>Returns an  …\n"],["app","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-app","()","<p>The “rack app” wrapped in middleware. All requests are sent here.\n<p>The builder is responsible …\n"],["apply_request","Faraday::Response","Faraday/Response.html#method-i-apply_request","(request_env)","<p>Expand the env with more properties, without overriding existing ones.\nUseful for applying request params …\n"],["assert_index","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-assert_index","(index)",""],["attribute_options","Faraday::Options","Faraday/Options.html#method-c-attribute_options","()","<p>Internal\n"],["authorization","Faraday::Connection","Faraday/Connection.html#method-i-authorization","(type, token)","<p>Public: Sets up a custom Authorization header.\n<p>type  - The String authorization type. token - The String …\n"],["autoload_all","Faraday::AutoloadHelper","Faraday/AutoloadHelper.html#method-i-autoload_all","(prefix, options)","<p>Internal: Registers the constants to be auto loaded.\n<p>prefix  - The String require prefix.  If the path …\n"],["backoff_factor","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-backoff_factor","()",""],["backtrace","Faraday::ClientError","Faraday/ClientError.html#method-i-backtrace","()",""],["basic_auth","Faraday::Connection","Faraday/Connection.html#method-i-basic_auth","(login, pass)","<p>Public: Sets up the Authorization header with these credentials, encoded\nwith base64.\n<p>login - The authentication …\n"],["body","Faraday::Response","Faraday/Response.html#method-i-body","()",""],["build","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-build","(options = {})",""],["build","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-i-build","(app)",""],["build_env","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-build_env","(connection, request)","<p>ENV Keys :method - a symbolized request method (:get, :post) :body   - the\nrequest body that will eventually …\n"],["build_exception_matcher","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-build_exception_matcher","(exceptions)","<p>Private: construct an exception matcher object.\n<p>An exception matcher for the rescue clause can usually …\n"],["build_exclusive_url","Faraday::Connection","Faraday/Connection.html#method-i-build_exclusive_url","(url = nil, params = nil)","<p>Internal: Build an absolute URL based on url_prefix.\n<p>url    - A String or URI-like object params - A  …\n"],["build_hash","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-c-build_hash","(type, hash)","<p>Internal\n"],["build_nested_query","Faraday::Utils","Faraday/Utils.html#method-i-build_nested_query","(params)",""],["build_query","Faraday::Utils","Faraday/Utils.html#method-i-build_query","(params)",""],["build_request","Faraday::Connection","Faraday/Connection.html#method-i-build_request","(method)","<p>Creates and configures the request object.\n<p>Returns the new Request.\n"],["build_response","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-build_response","(connection, request)","<p>Processes a Request into a Response by passing it through this\nBuilder&#39;s middleware stack.\n<p>connection …\n"],["build_url","Faraday::Connection","Faraday/Connection.html#method-i-build_url","(url = nil, extra_params = nil)","<p>Public: Takes a relative url for a request and combines it with the\ndefaults set on the connection instance. …\n"],["call","Faraday::Adapter","Faraday/Adapter.html#method-i-call","(env)",""],["call","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-call","(env)",""],["call","Faraday::Adapter::EMSynchrony","Faraday/Adapter/EMSynchrony.html#method-i-call","(env)",""],["call","Faraday::Adapter::Excon","Faraday/Adapter/Excon.html#method-i-call","(env)",""],["call","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-call","(env)",""],["call","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-call","(env)",""],["call","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-call","(env)",""],["call","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-i-call","(env)",""],["call","Faraday::Adapter::Test","Faraday/Adapter/Test.html#method-i-call","(env)",""],["call","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-call","(env)",""],["call","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-i-call","(env)","<p>Public\n"],["call","Faraday::Request::Instrumentation","Faraday/Request/Instrumentation.html#method-i-call","(env)",""],["call","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-call","(env)",""],["call","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-call","(env)",""],["call","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-call","(env)",""],["call","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-call","(env)",""],["call","Faraday::Response::Middleware","Faraday/Response/Middleware.html#method-i-call","(env)",""],["certificate_store","EmHttpSslPatch","EmHttpSslPatch.html#method-i-certificate_store","()",""],["check_finished","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-check_finished","()",""],["clear","Faraday::Options","Faraday/Options.html#method-i-clear","()","<p>Public\n"],["clear_body","Faraday::Env","Faraday/Env.html#method-i-clear_body","()","<p>Public\n"],["client","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-client","()",""],["close","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-close","()",""],["configure","Faraday::Adapter::Test","Faraday/Adapter/Test.html#method-i-configure","()",""],["configure_compression","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_compression","(options, env)",""],["configure_proxy","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_proxy","(options, env)",""],["configure_proxy","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-configure_proxy","(proxy)",""],["configure_proxy","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_proxy","(req, env)",""],["configure_socket","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_socket","(options, env)",""],["configure_socket","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-configure_socket","(bind)",""],["configure_socket","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_socket","(req, env)",""],["configure_ssl","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_ssl","(options, env)",""],["configure_ssl","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-configure_ssl","(ssl)",""],["configure_ssl","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-configure_ssl","(http, ssl)",""],["configure_ssl","Faraday::Adapter::NetHttpPersistent","Faraday/Adapter/NetHttpPersistent.html#method-i-configure_ssl","(http, ssl)",""],["configure_ssl","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_ssl","(req, env)",""],["configure_timeout","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_timeout","(options, env)",""],["configure_timeout","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_timeout","(req, env)",""],["configure_timeouts","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-configure_timeouts","(req)",""],["connection_config","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-connection_config","(env)",""],["const_missing","Faraday","Faraday.html#method-c-const_missing","(name)",""],["convert_key","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-convert_key","(key)",""],["create","Faraday::Request","Faraday/Request.html#method-c-create","(request_method)",""],["create_multipart","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-create_multipart","(env, params)",""],["create_request","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-create_request","(env)",""],["create_session","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-create_session","()",""],["current_io","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-current_io","()",""],["custom_members","Faraday::Env","Faraday/Env.html#method-i-custom_members","()","<p>Internal\n"],["decode","Faraday::FlatParamsEncoder","Faraday/FlatParamsEncoder.html#method-c-decode","(query)",""],["decode","Faraday::NestedParamsEncoder","Faraday/NestedParamsEncoder.html#method-c-decode","(query)",""],["deep_merge","Faraday::Utils","Faraday/Utils.html#method-i-deep_merge","(source, hash)","<p>Recursive hash merge\n"],["deep_merge!","Faraday::Utils","Faraday/Utils.html#method-i-deep_merge-21","(target, hash)","<p>Recursive hash update\n"],["default_adapter=","Faraday","Faraday.html#method-c-default_adapter-3D","(adapter)","<p>Public: Updates default adapter while resetting #default_connection.\n<p>Returns the new default_adapter. …\n"],["default_connection","Faraday","Faraday.html#method-c-default_connection","()","<p>Gets the default connection used for simple scripts.\n<p>Returns a Faraday::Connection, configured with the …\n"],["default_connection_options","Faraday","Faraday.html#method-c-default_connection_options","()","<p>Gets the default connection options used when calling Faraday#new.\n<p>Returns a Faraday::ConnectionOptions …\n"],["default_parallel_manager","Faraday::Connection","Faraday/Connection.html#method-i-default_parallel_manager","()","<p>Internal: Traverse the middleware stack in search of a parallel-capable\nadapter.\n<p>Yields in case of not …\n"],["default_params_encoder","Faraday::Utils","Faraday/Utils.html#method-i-default_params_encoder","()",""],["default_uri_parser","Faraday::Utils","Faraday/Utils.html#method-i-default_uri_parser","()",""],["default_uri_parser=","Faraday::Utils","Faraday/Utils.html#method-i-default_uri_parser-3D","(parser)",""],["delete","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-delete","(path, headers = {}, &block)",""],["delete","Faraday::Options","Faraday/Options.html#method-i-delete","(key)","<p>Public\n"],["delete","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-delete","(handler)",""],["delete","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-delete","(k)",""],["delete","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-delete","(key)",""],["dependency","Faraday::Middleware","Faraday/Middleware.html#method-c-dependency","(lib = nil)","<p>Executes a block which should try to require and reference dependent\nlibraries\n"],["disable?","Faraday::SSLOptions","Faraday/SSLOptions.html#method-i-disable-3F","()",""],["dump_body","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-dump_body","(body)",""],["dump_headers","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-dump_headers","(headers)",""],["dup","Faraday::Connection","Faraday/Connection.html#method-i-dup","()","<p>Internal: Creates a duplicate of this Faraday::Connection.\n<p>Returns a Faraday::Connection.\n"],["dup","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-dup","()",""],["each","Faraday::Options","Faraday/Options.html#method-i-each","()","<p>Public\n"],["each_key","Faraday::Options","Faraday/Options.html#method-i-each_key","()","<p>Public\n"],["each_value","Faraday::Options","Faraday/Options.html#method-i-each_value","()","<p>Public\n"],["empty?","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-empty-3F","()",""],["empty?","Faraday::Options","Faraday/Options.html#method-i-empty-3F","()","<p>Public\n"],["encode","Faraday::FlatParamsEncoder","Faraday/FlatParamsEncoder.html#method-c-encode","(params)",""],["encode","Faraday::NestedParamsEncoder","Faraday/NestedParamsEncoder.html#method-c-encode","(params)",""],["ensure_open_and_readable","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-ensure_open_and_readable","()",""],["error_message","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-error_message","(client)",""],["escape","Faraday::Utils","Faraday/Utils.html#method-i-escape","(s)",""],["exceptions","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-exceptions","()",""],["execute_request","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-i-execute_request","(env, rack_env)",""],["fetch","Faraday::Options","Faraday/Options.html#method-i-fetch","(key, *args)","<p>Public\n"],["fetch","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-fetch","(k, *args, &block)",""],["fetch_error_class","Faraday::Options","Faraday/Options.html#method-c-fetch_error_class","()",""],["fetch_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-fetch_middleware","(key)",""],["finish","Faraday::Response","Faraday/Response.html#method-i-finish","(env)",""],["finished?","Faraday::Response","Faraday/Response.html#method-i-finished-3F","()",""],["from","Faraday::Options","Faraday/Options.html#method-c-from","(value)","<p>Public\n"],["from","Faraday::ProxyOptions","Faraday/ProxyOptions.html#method-c-from","(value)",""],["from","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-c-from","(value)",""],["from","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-c-from","(value)",""],["get","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-get","(path, headers = {}, &block)",""],["has_key?","Faraday::Options","Faraday/Options.html#method-i-has_key-3F","(key)",""],["has_key?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-has_key-3F","(k)",""],["has_key?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-has_key-3F","(key)",""],["has_multipart?","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-has_multipart-3F","(obj)",""],["has_value?","Faraday::Options","Faraday/Options.html#method-i-has_value-3F","(value)",""],["head","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-head","(path, headers = {}, &block)",""],["header","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-c-header","(type, token)","<p>Public\n"],["header","Faraday::Request::BasicAuthentication","Faraday/Request/BasicAuthentication.html#method-c-header","(login, pass)",""],["header","Faraday::Request::TokenAuthentication","Faraday/Request/TokenAuthentication.html#method-c-header","(token, options = nil)",""],["headers","Faraday::Response","Faraday/Response.html#method-i-headers","()",""],["headers=","Faraday::Connection","Faraday/Connection.html#method-i-headers-3D","(hash)","<p>Public: Sets the Hash of unencoded HTTP header key/value pairs.\n"],["headers=","Faraday::Request","Faraday/Request.html#method-i-headers-3D","(hash)","<p>Public: Replace request headers, preserving the existing hash type\n"],["headers_match?","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-headers_match-3F","(request_headers)",""],["host","EmHttpSslPatch","EmHttpSslPatch.html#method-i-host","()",""],["in_member_set?","Faraday::Env","Faraday/Env.html#method-i-in_member_set-3F","(key)",""],["in_parallel","Faraday::Connection","Faraday/Connection.html#method-i-in_parallel","(manager = nil)","<p>Public: Sets up the parallel manager to make a set of requests.\n<p>manager - The parallel manager that this …\n"],["in_parallel?","Faraday::Connection","Faraday/Connection.html#method-i-in_parallel-3F","()","<p>Public: Determine if this Faraday::Connection can make parallel requests.\n<p>Returns true or false.\n"],["include?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-include-3F","(k)",""],["include?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-include-3F","(key)",""],["inherited","Faraday::Adapter::Parallelism","Faraday/Adapter/Parallelism.html#method-i-inherited","(subclass)",""],["inherited","Faraday::Middleware","Faraday/Middleware.html#method-c-inherited","(subclass)",""],["inherited","Faraday::Options","Faraday/Options.html#method-c-inherited","(subclass)",""],["insert","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-insert","(index, *args, &block)","<p>methods to push onto the various positions in the stack:\n"],["insert_after","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-insert_after","(index, *args, &block)",""],["insert_before","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-insert_before","(index, *args, &block)",""],["inspect","Faraday::ClientError","Faraday/ClientError.html#method-i-inspect","()",""],["inspect","Faraday::Env","Faraday/Env.html#method-i-inspect","()",""],["inspect","Faraday::Options","Faraday/Options.html#method-i-inspect","()","<p>Internal\n"],["inspect","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-i-inspect","()",""],["instrumenter","Faraday::Request::Instrumentation::Options","Faraday/Request/Instrumentation/Options.html#method-i-instrumenter","()",""],["interval","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-interval","()",""],["interval_randomness","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-interval_randomness","()",""],["key?","Faraday::Options","Faraday/Options.html#method-i-key-3F","(key)","<p>Public\n"],["key?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-key-3F","(k)",""],["key?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-key-3F","(key)",""],["keys","Faraday::Options","Faraday/Options.html#method-i-keys","()","<p>Public\n"],["klass","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-i-klass","()",""],["length","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-length","()",""],["load_autoloaded_constants","Faraday::AutoloadHelper","Faraday/AutoloadHelper.html#method-i-load_autoloaded_constants","()","<p>Internal: Loads each autoloaded constant.  If thread safety is a concern,\nwrap this in a Mutex.\n<p>Returns …\n"],["load_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-load_middleware","(key)",""],["loaded?","Faraday::Middleware","Faraday/Middleware.html#method-c-loaded-3F","()",""],["lock!","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-lock-21","()","<p>Locks the middleware stack to ensure no further modifications are possible.\n"],["locked?","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-locked-3F","()",""],["log_body?","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-log_body-3F","(type)",""],["lookup_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-lookup_middleware","(key)","<p>Public: Lookup middleware class with a registered Symbol shortcut.\n<p>key - The Symbol key for the registered …\n"],["marshal_dump","Faraday::Response","Faraday/Response.html#method-i-marshal_dump","()","<p>because @on_complete_callbacks cannot be marshalled\n"],["marshal_load","Faraday::Response","Faraday/Response.html#method-i-marshal_load","(env)",""],["match","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-match","(request_method, path, headers, body)",""],["match_content_type","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-match_content_type","(env)",""],["matches?","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-matches-3F","(request_uri, request_headers, request_body)",""],["matches?","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-matches-3F","(stack, path, headers, body)",""],["max","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-max","()",""],["member?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-member-3F","(k)",""],["member?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-member-3F","(key)",""],["member_set","Faraday::Env","Faraday/Env.html#method-c-member_set","()","<p>Internal\n"],["memoized","Faraday::Options","Faraday/Options.html#method-c-memoized","(key)",""],["memoized_attributes","Faraday::Options","Faraday/Options.html#method-c-memoized_attributes","()",""],["merge","Faraday::Options","Faraday/Options.html#method-i-merge","(value)","<p>Public\n"],["merge","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-merge","(other)",""],["merge","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-merge","(params)",""],["merge!","Faraday::Options","Faraday/Options.html#method-i-merge-21","(obj)",""],["merge!","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-merge-21","(other)",""],["merge!","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-merge-21","(params)",""],["merge_query","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-merge_query","(query, encoder = nil)",""],["method_missing","Faraday","Faraday.html#method-c-method_missing","(name, *args, &block)","<p>Internal: Proxies method calls on the Faraday constant to\n#default_connection.\n"],["methods","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-methods","()",""],["middleware_mutex","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-middleware_mutex","(&block)",""],["name","Faraday::Request::Instrumentation::Options","Faraday/Request/Instrumentation/Options.html#method-i-name","()",""],["needs_body?","Faraday::Env","Faraday/Env.html#method-i-needs_body-3F","()","<p>Public\n"],["net_http_connection","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-net_http_connection","(env)",""],["new","Faraday","Faraday.html#method-c-new","(url = nil, options = nil)","<p>Public: Initializes a new Faraday::Connection.\n<p>url     - The optional String base URL to use as a prefix …\n"],["new","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-c-new","()",""],["new","Faraday::Adapter::Excon","Faraday/Adapter/Excon.html#method-c-new","(app, connection_options = {})",""],["new","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-c-new","(app, &block)",""],["new","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-c-new","(faraday_app, rack_app)",""],["new","Faraday::Adapter::Test","Faraday/Adapter/Test.html#method-c-new","(app, stubs=nil, &block)",""],["new","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-c-new","(full, headers, body, block)",""],["new","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-c-new","()",""],["new","Faraday::ClientError","Faraday/ClientError.html#method-c-new","(ex, response = nil)",""],["new","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-c-new","(*parts)",""],["new","Faraday::Connection","Faraday/Connection.html#method-c-new","(url = nil, options = nil)","<p>Public: Initializes a new Faraday::Connection.\n<p>url     - URI or String base URL to use as a prefix for …\n"],["new","Faraday::Middleware","Faraday/Middleware.html#method-c-new","(*)",""],["new","Faraday::Middleware","Faraday/Middleware.html#method-c-new","(app = nil)",""],["new","Faraday::RackBuilder","Faraday/RackBuilder.html#method-c-new","(handlers = [])",""],["new","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-c-new","(klass, *args, &block)",""],["new","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-c-new","(app, type, token)",""],["new","Faraday::Request::Instrumentation","Faraday/Request/Instrumentation.html#method-c-new","(app, options = nil)","<p>Public: Instruments requests using Active Support.\n<p>Measures time spent only for synchronous requests. …\n"],["new","Faraday::Request::Retry","Faraday/Request/Retry.html#method-c-new","(app, options = nil)","<p>Public: Initialize middleware\n<p>Options: max                 - Maximum number of retries (default: 2)\ninterval …\n"],["new","Faraday::Request::TokenAuthentication","Faraday/Request/TokenAuthentication.html#method-c-new","(app, token, options = nil)",""],["new","Faraday::Response","Faraday/Response.html#method-c-new","(env = nil)",""],["new","Faraday::Response::Logger","Faraday/Response/Logger.html#method-c-new","(app, logger = nil, options = {})",""],["new","Faraday::TimeoutError","Faraday/TimeoutError.html#method-c-new","(ex = nil)",""],["new","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-c-new","(hash = nil)",""],["new_builder","Faraday::ConnectionOptions","Faraday/ConnectionOptions.html#method-i-new_builder","(block)",""],["new_stub","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-new_stub","(request_method, path, headers = {}, body=nil, &block)",""],["normalize_params","Faraday::Utils","Faraday/Utils.html#method-i-normalize_params","(params, name, v = nil)","<p>Stolen from Rack\n"],["normalize_path","Faraday::Utils","Faraday/Utils.html#method-i-normalize_path","(url)","<p>Receives a String or URI and returns just the path with the query string\nsorted.\n"],["on_complete","Faraday::Response","Faraday/Response.html#method-i-on_complete","()",""],["on_complete","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-on_complete","(env)",""],["on_complete","Faraday::Response::Middleware","Faraday/Response/Middleware.html#method-i-on_complete","(env)","<p>Override this to modify the environment after the response has finished.\nCalls the `parse` method if …\n"],["on_complete","Faraday::Response::RaiseError","Faraday/Response/RaiseError.html#method-i-on_complete","(env)",""],["options","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-options","(path, headers = {}, &block)",""],["options","Faraday::Options","Faraday/Options.html#method-c-options","(mapping)","<p>Internal\n"],["options_for","Faraday::Options","Faraday/Options.html#method-c-options_for","(key)","<p>Internal\n"],["parallel?","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-parallel-3F","(env)",""],["parallel?","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-parallel-3F","(env)",""],["parallel?","Faraday::Env","Faraday/Env.html#method-i-parallel-3F","()","<p>Public\n"],["params=","Faraday::Connection","Faraday/Connection.html#method-i-params-3D","(hash)","<p>Public: Sets the Hash of URI query unencoded key/value pairs.\n"],["params=","Faraday::Request","Faraday/Request.html#method-i-params-3D","(hash)","<p>Public: Replace params, preserving the existing hash type\n"],["params_match?","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-params_match-3F","(request_params)",""],["parse","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-parse","(header_string)",""],["parse_body?","Faraday::Env","Faraday/Env.html#method-i-parse_body-3F","()","<p>Public\n"],["parse_nested_query","Faraday::Utils","Faraday/Utils.html#method-i-parse_nested_query","(query)",""],["parse_query","Faraday::Utils","Faraday/Utils.html#method-i-parse_query","(query)","<p>Adapted from Rack\n"],["patch","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-patch","(path, body=nil, headers = {}, &block)",""],["path_prefix=","Faraday::Connection","Faraday/Connection.html#method-i-path_prefix-3D","(value)","<p>Public: Sets the path prefix and ensures that it always has a leading\nslash.\n<p>value - A String.\n<p>Returns …\n"],["perform","Faraday::Adapter::EMSynchrony::ParallelManager","Faraday/Adapter/EMSynchrony/ParallelManager.html#method-i-perform","()","<p>Main `EM::Synchrony::Multi` performer.\n"],["perform_request","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-perform_request","(env)",""],["perform_request","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-perform_request","()",""],["perform_request","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-perform_request","(http, env)",""],["perform_request","Faraday::Adapter::NetHttpPersistent","Faraday/Adapter/NetHttpPersistent.html#method-i-perform_request","(http, env)",""],["perform_request","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-perform_request","(env)",""],["perform_single_request","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-perform_single_request","(env)","<p>TODO: reuse the connection to support pipelining\n"],["post","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-post","(path, body=nil, headers = {}, &block)",""],["pretty_inspect","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-pretty_inspect","(body)",""],["process_params","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-process_params","(params, prefix = nil, pieces = nil, &block)",""],["process_request?","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-process_request-3F","(env)",""],["process_request?","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-process_request-3F","(env)",""],["proxy","Faraday::Connection","Faraday/Connection.html#method-i-proxy","(arg = nil)","<p>Public: Gets or Sets the Hash proxy options.\n"],["put","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-put","(path, body=nil, headers = {}, &block)",""],["queue","Faraday::Adapter::EMSynchrony::ParallelManager","Faraday/Adapter/EMSynchrony/ParallelManager.html#method-i-queue","()","<p>The request queue.\n"],["raise_error","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-raise_error","(msg)",""],["raise_if_locked","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-raise_if_locked","()",""],["read","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-read","(length = nil, outbuf = nil)","<p>Read from IOs in order until `length` bytes have been received.\n"],["read_body","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-read_body","(env)",""],["read_body","Faraday::Adapter::Excon","Faraday/Adapter/Excon.html#method-i-read_body","(env)","<p>TODO: support streaming requests\n"],["read_body","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-read_body","(env)","<p>TODO: support streaming requests\n"],["register_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-register_middleware","(autoload_path = nil, mapping = nil)","<p>Public: Register middleware class(es) on the current module.\n<p>mapping - A Hash mapping Symbol keys to classes. …\n"],["replace","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-replace","(other)",""],["replace","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-replace","(other)",""],["request","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-request","(env)",""],["request","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-request","(key, *args, &block)",""],["request_config","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-request_config","(env)",""],["request_options","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-request_options","(env)",""],["request_options","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-request_options","(env)",""],["request_type","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-request_type","(env)",""],["require_lib","Faraday","Faraday.html#method-c-require_lib","(*libs)",""],["require_libs","Faraday","Faraday.html#method-c-require_libs","(*libs)","<p>Internal: Requires internal Faraday libraries.\n<p>*libs - One or more relative String names to Faraday classes. …\n"],["reset","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-reset","()",""],["response","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-response","(key, *args, &block)",""],["response_values","Faraday::Response::RaiseError","Faraday/Response/RaiseError.html#method-i-response_values","(env)",""],["retry_if","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-retry_if","()",""],["retry_request?","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-retry_request-3F","(env, exception)",""],["rewind","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-rewind","()",""],["run","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-run","()",""],["run","Faraday::Adapter::EMSynchrony::ParallelManager","Faraday/Adapter/EMSynchrony/ParallelManager.html#method-i-run","()","<p>Run all requests on queue with `EM::Synchrony::Multi`, wrapping it in a\nreactor and fiber if needed. …\n"],["run_request","Faraday::Connection","Faraday/Connection.html#method-i-run_request","(method, url, body, headers)","<p>Builds and runs the Faraday::Request.\n<p>method  - The Symbol HTTP method. url     - The String or URI to …\n"],["running?","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-running-3F","()",""],["save_response","Faraday::Adapter","Faraday/Adapter.html#method-i-save_response","(env, status, body, headers = nil)",""],["set_authorization_header","Faraday::Connection","Faraday/Connection.html#method-i-set_authorization_header","(header_type, *args)",""],["setup_parallel_manager","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-c-setup_parallel_manager","(options = nil)",""],["setup_parallel_manager","Faraday::Adapter::EMSynchrony","Faraday/Adapter/EMSynchrony.html#method-c-setup_parallel_manager","(options = {})",""],["setup_parallel_manager","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-c-setup_parallel_manager","(options = {})",""],["sleep_amount","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-sleep_amount","(retries)",""],["sort_query_params","Faraday::Utils","Faraday/Utils.html#method-i-sort_query_params","(query)",""],["ssl_cert_store","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-ssl_cert_store","(ssl)",""],["ssl_handshake_completed","EmHttpSslPatch","EmHttpSslPatch.html#method-i-ssl_handshake_completed","()",""],["ssl_verify_mode","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-ssl_verify_mode","(ssl)",""],["ssl_verify_mode","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-ssl_verify_mode","(ssl)",""],["ssl_verify_peer","EmHttpSslPatch","EmHttpSslPatch.html#method-i-ssl_verify_peer","(cert_string)",""],["status","Faraday::Response","Faraday/Response.html#method-i-status","()",""],["success?","Faraday::Env","Faraday/Env.html#method-i-success-3F","()","<p>Public\n"],["success?","Faraday::Response","Faraday/Response.html#method-i-success-3F","()",""],["supports_parallel?","Faraday::Adapter::Parallelism","Faraday/Adapter/Parallelism.html#method-i-supports_parallel-3F","()",""],["swap","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-swap","(index, *args, &block)",""],["symbolized_key_set","Faraday::Options","Faraday/Options.html#method-i-symbolized_key_set","()",""],["tap","Object","Object.html#method-i-tap","()","<p>The primary purpose of this method is to “tap into” a method chain, in\norder to perform operations …\n"],["to_app","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-to_app","(inner_app)",""],["to_env","Faraday::Request","Faraday/Request.html#method-i-to_env","(connection)","<p>ENV Keys :method - a symbolized request method (:get, :post) :body   - the\nrequest body that will eventually …\n"],["to_hash","Faraday::Options","Faraday/Options.html#method-i-to_hash","()","<p>Public\n"],["to_hash","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-to_hash","()",""],["to_query","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-to_query","(encoder = nil)",""],["to_s","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-to_s","()",""],["token_auth","Faraday::Connection","Faraday/Connection.html#method-i-token_auth","(token, options = nil)","<p>Public: Sets up the Authorization header with the given token.\n<p>token   - The String token. options -  …\n"],["unescape","Faraday::Utils","Faraday/Utils.html#method-i-unescape","(s)",""],["update","Faraday::Options","Faraday/Options.html#method-i-update","(obj)","<p>Public\n"],["update","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-update","(other)",""],["update","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-update","(params)",""],["url","Faraday::Request","Faraday/Request.html#method-i-url","(path, params = nil)",""],["url_prefix=","Faraday::Connection","Faraday/Connection.html#method-i-url_prefix-3D","(url, encoder = nil)","<p>Public: Parses the giving url with URI and stores the individual components\nin this connection.  These …\n"],["use","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-use","(klass, *args, &block)",""],["use_symbol","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-use_symbol","(mod, key, *args, &block)",""],["value?","Faraday::Options","Faraday/Options.html#method-i-value-3F","(value)","<p>Public\n"],["values_at","Faraday::Options","Faraday/Options.html#method-i-values_at","(*keys)","<p>Public\n"],["verify?","Faraday::SSLOptions","Faraday/SSLOptions.html#method-i-verify-3F","()",""],["verify_peer?","EmHttpSslPatch","EmHttpSslPatch.html#method-i-verify_peer-3F","()",""],["verify_stubbed_calls","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-verify_stubbed_calls","()","<p>Raises an error if any of the stubbed calls have not been made.\n"],["with_net_http_connection","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-with_net_http_connection","(env)",""],["with_net_http_connection","Faraday::Adapter::NetHttpPersistent","Faraday/Adapter/NetHttpPersistent.html#method-i-with_net_http_connection","(env)",""],["with_uri_credentials","Faraday::Connection","Faraday/Connection.html#method-i-with_uri_credentials","(uri)","<p>Internal: Yields username and password extracted from a URI if they both\nexist.\n"]]}}