var search_data = {"index":{"searchIndex":["actionview","base","helpers","actionpack","version","capturehelper","formhelper","formtaghelper","hamlsupport","instancetag","taghelper","tags","textarea","texthelper","haml","buffer","compiler","engine","error","erubistemplatehandler","exec","generic","haml","filters","base","cdata","css","erb","escaped","javascript","plain","precompiledtiltfilter","preserve","ruby","sassrailstemplate","scssrailstemplate","tiltfilter","helpers","actionviewextensions","errorreturn","xssmods","options","parser","line","parsenode","plugin","actionpack","version","railtie","sass","safeerubistemplate","syntaxerror","template","util","staticconditionalcontext","object","rails","[]()","[]=()","action_view?()","active?()","adjust_tabs()","attr_wrapper=()","attributes()","av_template_class()","balance()","balance()","block_is_haml?()","block_keyword()","block_opened?()","buffer_option_keys()","build_attributes()","build_data_keys()","cache_fragment()","call()","caller_info()","capture()","capture_haml()","capture_haml_with_haml_xss()","capture_with_haml()","capture_without_haml()","check_encoding()","check_haml_encoding()","check_push_script_stack()","close()","close_filter()","close_haml_comment()","close_script()","close_silent_script()","closes_flat?()","color()","comment()","compile()","compile()","compile()","compile()","compile()","compile_comment()","compile_doctype()","compile_filter()","compile_haml_comment()","compile_plain()","compile_root()","compile_script()","compile_silent_script()","compile_tag()","concat()","concat_merged_text()","concat_with_haml_xss()","concat_without_haml_xss()","contains_interpolation?()","content_tag()","content_tag()","content_tag_with_haml()","content_tag_without_haml()","def_method()","def_static_method()","defaults()","defaults()","div()","doctype()","encoding=()","escape_once()","escape_once_with_haml_xss()","extended()","filter()","filter_and_join()","filter_opened?()","find_and_preserve()","find_and_preserve_with_haml_xss()","fix_textareas!()","flat?()","flat_script()","flatten()","flatten_data_attributes()","flush_merged_text()","for_buffer()","form_for()","form_for_with_haml()","form_for_with_haml_xss()","form_for_without_haml()","form_for_without_haml_xss()","form_tag()","form_tag_with_haml()","form_tag_with_haml_xss()","form_tag_without_haml()","form_tag_without_haml_xss()","format=()","generate_content_class_names()","get_line()","haml_bind_proc()","haml_buffer()","haml_buffer()","haml_comment()","haml_concat()","haml_concat_with_haml_xss()","haml_indent()","haml_indent_with_haml_xss()","haml_tag()","haml_tag_with_haml_xss()","haml_xss_html_escape()","handle_interpolation()","handle_load_error()","handle_multiline()","handle_ruby_multiline()","handles_encoding?()","html4?()","html4?()","html5?()","html5?()","html?()","html?()","html_attrs()","html_escape()","html_escape_with_haml_xss()","html_safe()","html_safe()","html_safe!()","html_safe?()","human_indentation()","included()","included()","init_haml_helpers()","init_rails()","initialize_encoding()","initialize_engine()","inspect()","inspect()","inspect_obj()","internal_compile()","is_haml?()","is_haml?()","is_haml?()","is_multiline?()","is_ruby_multiline?()","list_of()","list_of_with_haml_xss()","locals_code()","merge_attrs()","merge_name_and_attributes()","message()","method_missing()","mid_block_keyword?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_encoded_string()","next_line()","non_haml()","nuke_inner_whitespace?()","open_file()","options_for_buffer()","output_buffer()","output_buffer=()","output_buffer_with_haml()","output_buffer_without_haml()","page_class()","parse()","parse()","parse!()","parse_class_and_id()","parse_haml_magic_comment()","parse_new_attribute()","parse_new_attributes()","parse_object_ref()","parse_old_attributes()","parse_static_hash()","parse_tag()","plain()","powerset()","precede()","precede_with_haml_xss()","precompiled()","precompiled()","precompiled()","precompiled_method_return_value()","precompiled_method_return_value_with_haml_xss()","precompiled_method_return_value_without_haml_xss()","precompiled_postamble()","precompiled_preamble()","precompiled_with_ambles()","precompiled_with_return_value()","prepare()","prerender_tag()","preserve()","preserve_with_haml_xss()","prettify()","process_indent()","process_line()","process_result()","process_result()","push()","push_generated_script()","push_merged_text()","push_script()","push_silent()","push_text()","push_text()","puts()","puts_action()","rails_xss_safe?()","raw_next_line()","register_tilt_filter()","remove_filter()","remove_whitespace=()","render()","render()","render()","render()","render()","render()","render()","render()","render_proc()","render_with_haml()","render_with_options()","render_with_options()","render_with_options()","render_without_haml()","resolve_newlines()","rstrip!()","rstrip_buffer!()","safe_concat()","safe_concat_with_haml_xss()","safe_concat_without_haml_xss()","sass_options()","script()","set_locals()","set_opts()","set_opts()","set_output_buffer_with_haml()","set_output_buffer_without_haml()","silence_warnings()","silent_script()","static_method_name()","succeed()","succeed_with_haml_xss()","surround()","surround_with_haml_xss()","syntax()","tab_down()","tab_up()","tabs()","tabs()","tabulation()","tabulation=()","tag()","template_class()","text_for_doctype()","to_html()","to_s()","to_s()","toplevel?()","try_parse_haml_emacs_magic_comment()","un_next_line()","underscore()","unescape_interpolation()","valid_formats()","with_haml_buffer()","with_output_buffer()","with_output_buffer_with_haml_xss()","with_output_buffer_without_haml_xss()","with_raw_haml_concat()","with_tabs()","xhtml?()","xhtml?()"],"longSearchIndex":["actionview","actionview::base","actionview::helpers","actionview::helpers::actionpack","actionview::helpers::actionpack::version","actionview::helpers::capturehelper","actionview::helpers::formhelper","actionview::helpers::formtaghelper","actionview::helpers::hamlsupport","actionview::helpers::instancetag","actionview::helpers::taghelper","actionview::helpers::tags","actionview::helpers::tags::textarea","actionview::helpers::texthelper","haml","haml::buffer","haml::compiler","haml::engine","haml::error","haml::erubistemplatehandler","haml::exec","haml::exec::generic","haml::exec::haml","haml::filters","haml::filters::base","haml::filters::cdata","haml::filters::css","haml::filters::erb","haml::filters::escaped","haml::filters::javascript","haml::filters::plain","haml::filters::precompiledtiltfilter","haml::filters::preserve","haml::filters::ruby","haml::filters::sassrailstemplate","haml::filters::scssrailstemplate","haml::filters::tiltfilter","haml::helpers","haml::helpers::actionviewextensions","haml::helpers::errorreturn","haml::helpers::xssmods","haml::options","haml::parser","haml::parser::line","haml::parser::parsenode","haml::plugin","haml::plugin::actionpack","haml::plugin::actionpack::version","haml::railtie","haml::railtie::sass","haml::safeerubistemplate","haml::syntaxerror","haml::template","haml::util","haml::util::staticconditionalcontext","object","rails","haml::options#[]()","haml::options#[]=()","haml::helpers::action_view?()","haml::buffer#active?()","haml::buffer#adjust_tabs()","haml::options#attr_wrapper=()","haml::buffer#attributes()","haml::util#av_template_class()","haml::parser#balance()","haml::util#balance()","haml::helpers#block_is_haml?()","haml::parser#block_keyword()","haml::parser#block_opened?()","haml::options::buffer_option_keys()","haml::compiler::build_attributes()","haml::compiler::build_data_keys()","haml::plugin#cache_fragment()","haml::plugin::call()","haml::util#caller_info()","actionview::helpers::capturehelper#capture()","haml::helpers#capture_haml()","haml::helpers::xssmods#capture_haml_with_haml_xss()","actionview::helpers::capturehelper#capture_with_haml()","actionview::helpers::capturehelper#capture_without_haml()","haml::util#check_encoding()","haml::util#check_haml_encoding()","haml::parser#check_push_script_stack()","haml::parser#close()","haml::parser#close_filter()","haml::parser#close_haml_comment()","haml::parser#close_script()","haml::parser#close_silent_script()","haml::parser#closes_flat?()","haml::exec::generic#color()","haml::parser#comment()","haml::compiler#compile()","haml::filters::base#compile()","haml::filters::precompiledtiltfilter#compile()","haml::filters::ruby#compile()","haml::plugin#compile()","haml::compiler#compile_comment()","haml::compiler#compile_doctype()","haml::compiler#compile_filter()","haml::compiler#compile_haml_comment()","haml::compiler#compile_plain()","haml::compiler#compile_root()","haml::compiler#compile_script()","haml::compiler#compile_silent_script()","haml::compiler#compile_tag()","actionview::helpers::texthelper#concat()","haml::compiler#concat_merged_text()","actionview::helpers::texthelper#concat_with_haml_xss()","actionview::helpers::texthelper#concat_without_haml_xss()","haml::util#contains_interpolation?()","actionview::helpers::instancetag#content_tag()","actionview::helpers::taghelper#content_tag()","actionview::helpers::taghelper#content_tag_with_haml()","actionview::helpers::taghelper#content_tag_without_haml()","haml::engine#def_method()","haml::util#def_static_method()","haml::options::defaults()","haml::options#defaults()","haml::parser#div()","haml::parser#doctype()","haml::options#encoding=()","haml::helpers#escape_once()","haml::helpers::xssmods#escape_once_with_haml_xss()","haml::filters::tiltfilter::extended()","haml::parser#filter()","haml::compiler::filter_and_join()","haml::parser#filter_opened?()","haml::helpers#find_and_preserve()","haml::helpers::xssmods#find_and_preserve_with_haml_xss()","haml::buffer#fix_textareas!()","haml::parser#flat?()","haml::parser#flat_script()","haml::helpers#flatten()","haml::compiler::flatten_data_attributes()","haml::compiler#flush_merged_text()","haml::options#for_buffer()","actionview::helpers::formhelper#form_for()","actionview::helpers::formhelper#form_for_with_haml()","actionview::helpers::formhelper#form_for_with_haml_xss()","actionview::helpers::formhelper#form_for_without_haml()","actionview::helpers::formhelper#form_for_without_haml_xss()","actionview::helpers::formtaghelper#form_tag()","actionview::helpers::formtaghelper#form_tag_with_haml()","actionview::helpers::formtaghelper#form_tag_with_haml_xss()","actionview::helpers::formtaghelper#form_tag_without_haml()","actionview::helpers::formtaghelper#form_tag_without_haml_xss()","haml::options#format=()","haml::helpers::actionviewextensions#generate_content_class_names()","haml::exec::generic#get_line()","haml::helpers#haml_bind_proc()","actionview::helpers::hamlsupport#haml_buffer()","haml::helpers#haml_buffer()","haml::parser#haml_comment()","haml::helpers#haml_concat()","haml::helpers::xssmods#haml_concat_with_haml_xss()","haml::helpers#haml_indent()","haml::helpers::xssmods#haml_indent_with_haml_xss()","haml::helpers#haml_tag()","haml::helpers::xssmods#haml_tag_with_haml_xss()","haml::helpers::xssmods#haml_xss_html_escape()","haml::util#handle_interpolation()","haml::exec::generic#handle_load_error()","haml::parser#handle_multiline()","haml::parser#handle_ruby_multiline()","haml::plugin#handles_encoding?()","haml::buffer#html4?()","haml::options#html4?()","haml::buffer#html5?()","haml::options#html5?()","haml::buffer#html?()","haml::options#html?()","haml::helpers#html_attrs()","haml::helpers#html_escape()","haml::helpers::xssmods#html_escape_with_haml_xss()","haml::helpers::errorreturn#html_safe()","haml::util#html_safe()","haml::helpers::errorreturn#html_safe!()","haml::helpers::errorreturn#html_safe?()","haml::util#human_indentation()","haml::filters::base::included()","haml::helpers::xssmods::included()","haml::helpers#init_haml_helpers()","haml::init_rails()","haml::engine#initialize_encoding()","haml::safeerubistemplate#initialize_engine()","haml::helpers::errorreturn#inspect()","haml::parser::parsenode#inspect()","haml::util#inspect_obj()","haml::filters::base#internal_compile()","actionview::helpers::hamlsupport#is_haml?()","haml::helpers#is_haml?()","object#is_haml?()","haml::parser#is_multiline?()","haml::parser#is_ruby_multiline?()","haml::helpers#list_of()","haml::helpers::xssmods#list_of_with_haml_xss()","haml::compiler#locals_code()","haml::buffer::merge_attrs()","haml::helpers#merge_name_and_attributes()","haml::error::message()","haml::util::staticconditionalcontext#method_missing()","haml::parser#mid_block_keyword?()","haml::buffer::new()","haml::compiler::new()","haml::engine::new()","haml::error::new()","haml::erubistemplatehandler::new()","haml::exec::generic::new()","haml::exec::haml::new()","haml::helpers::errorreturn::new()","haml::options::new()","haml::parser::new()","haml::parser::parsenode::new()","haml::util::staticconditionalcontext::new()","haml::buffer#new_encoded_string()","haml::parser#next_line()","haml::helpers#non_haml()","haml::compiler#nuke_inner_whitespace?()","haml::exec::generic#open_file()","haml::engine#options_for_buffer()","actionview::base#output_buffer()","actionview::base#output_buffer=()","actionview::base#output_buffer_with_haml()","actionview::base#output_buffer_without_haml()","haml::helpers::actionviewextensions#page_class()","haml::exec::generic#parse()","haml::parser#parse()","haml::exec::generic#parse!()","haml::parser::parse_class_and_id()","haml::util#parse_haml_magic_comment()","haml::parser#parse_new_attribute()","haml::parser#parse_new_attributes()","haml::buffer#parse_object_ref()","haml::parser#parse_old_attributes()","haml::parser#parse_static_hash()","haml::parser#parse_tag()","haml::parser#plain()","haml::util#powerset()","haml::helpers#precede()","haml::helpers::xssmods#precede_with_haml_xss()","haml::compiler#precompiled()","haml::filters::erb::precompiled()","haml::filters::precompiledtiltfilter#precompiled()","haml::compiler#precompiled_method_return_value()","haml::compiler#precompiled_method_return_value_with_haml_xss()","haml::compiler#precompiled_method_return_value_without_haml_xss()","haml::safeerubistemplate#precompiled_postamble()","haml::safeerubistemplate#precompiled_preamble()","haml::compiler#precompiled_with_ambles()","haml::compiler#precompiled_with_return_value()","haml::safeerubistemplate#prepare()","haml::compiler#prerender_tag()","haml::helpers#preserve()","haml::helpers::xssmods#preserve_with_haml_xss()","haml::helpers#prettify()","haml::parser#process_indent()","haml::parser#process_line()","haml::exec::generic#process_result()","haml::exec::haml#process_result()","haml::parser#push()","haml::compiler#push_generated_script()","haml::compiler#push_merged_text()","haml::compiler#push_script()","haml::compiler#push_silent()","haml::buffer#push_text()","haml::compiler#push_text()","haml::exec::generic#puts()","haml::exec::generic#puts_action()","haml::util#rails_xss_safe?()","haml::parser#raw_next_line()","haml::filters#register_tilt_filter()","haml::filters#remove_filter()","haml::options#remove_whitespace=()","actionview::base#render()","haml::engine#render()","haml::filters::base#render()","haml::filters::cdata#render()","haml::filters::escaped#render()","haml::filters::plain#render()","haml::filters::preserve#render()","haml::filters::sassrailstemplate#render()","haml::engine#render_proc()","actionview::base#render_with_haml()","haml::filters::base#render_with_options()","haml::filters::css#render_with_options()","haml::filters::javascript#render_with_options()","actionview::base#render_without_haml()","haml::compiler#resolve_newlines()","haml::buffer#rstrip!()","haml::compiler#rstrip_buffer!()","actionview::helpers::texthelper#safe_concat()","actionview::helpers::texthelper#safe_concat_with_haml_xss()","actionview::helpers::texthelper#safe_concat_without_haml_xss()","haml::filters::sassrailstemplate#sass_options()","haml::parser#script()","haml::engine#set_locals()","haml::exec::generic#set_opts()","haml::exec::haml#set_opts()","actionview::base#set_output_buffer_with_haml()","actionview::base#set_output_buffer_without_haml()","haml::util#silence_warnings()","haml::parser#silent_script()","haml::util#static_method_name()","haml::helpers#succeed()","haml::helpers::xssmods#succeed_with_haml_xss()","haml::helpers#surround()","haml::helpers::xssmods#surround_with_haml_xss()","haml::filters::scssrailstemplate#syntax()","haml::helpers#tab_down()","haml::helpers#tab_up()","haml::buffer#tabs()","haml::parser::line#tabs()","haml::buffer#tabulation()","haml::buffer#tabulation=()","haml::parser#tag()","haml::filters::tiltfilter#template_class()","haml::compiler#text_for_doctype()","haml::engine#to_html()","haml::exec::generic#to_s()","haml::helpers::errorreturn#to_s()","haml::buffer#toplevel?()","haml::util#try_parse_haml_emacs_magic_comment()","haml::parser#un_next_line()","haml::buffer#underscore()","haml::util#unescape_interpolation()","haml::options::valid_formats()","haml::helpers#with_haml_buffer()","actionview::helpers::capturehelper#with_output_buffer()","actionview::helpers::capturehelper#with_output_buffer_with_haml_xss()","actionview::helpers::capturehelper#with_output_buffer_without_haml_xss()","haml::helpers::actionviewextensions#with_raw_haml_concat()","haml::helpers#with_tabs()","haml::buffer#xhtml?()","haml::options#xhtml?()"],"info":[["ActionView","","ActionView.html","",""],["ActionView::Base","","ActionView/Base.html","",""],["ActionView::Helpers","","ActionView/Helpers.html","",""],["ActionView::Helpers::ActionPack","","ActionView/Helpers/ActionPack.html","",""],["ActionView::Helpers::ActionPack::VERSION","","ActionView/Helpers/ActionPack/VERSION.html","",""],["ActionView::Helpers::CaptureHelper","","ActionView/Helpers/CaptureHelper.html","",""],["ActionView::Helpers::FormHelper","","ActionView/Helpers/FormHelper.html","",""],["ActionView::Helpers::FormTagHelper","","ActionView/Helpers/FormTagHelper.html","",""],["ActionView::Helpers::HamlSupport","","ActionView/Helpers/HamlSupport.html","",""],["ActionView::Helpers::InstanceTag","","ActionView/Helpers/InstanceTag.html","",""],["ActionView::Helpers::TagHelper","","ActionView/Helpers/TagHelper.html","",""],["ActionView::Helpers::Tags","","ActionView/Helpers/Tags.html","",""],["ActionView::Helpers::Tags::TextArea","","ActionView/Helpers/Tags/TextArea.html","",""],["ActionView::Helpers::TextHelper","","ActionView/Helpers/TextHelper.html","",""],["Haml","","Haml.html","","<p>The module that contains everything Haml-related:\n<p>{Haml::Parser} is Haml&#39;s parser.\n<p>{Haml::Compiler} …\n"],["Haml::Buffer","","Haml/Buffer.html","","<p>This class is used only internally. It holds the buffer of HTML that is\neventually output as the resulting …\n"],["Haml::Compiler","","Haml/Compiler.html","",""],["Haml::Engine","","Haml/Engine.html","","<p>This is the frontend for using Haml programmatically. It can be directly\nused by the user by creating …\n"],["Haml::Error","","Haml/Error.html","","<p>An exception raised by Haml code.\n"],["Haml::ErubisTemplateHandler","","Haml/ErubisTemplateHandler.html","",""],["Haml::Exec","","Haml/Exec.html","","<p>This module handles the various Haml executables (`haml` and\n`haml-convert`).\n"],["Haml::Exec::Generic","","Haml/Exec/Generic.html","","<p>An abstract class that encapsulates the executable code for all three\nexecutables.\n"],["Haml::Exec::Haml","","Haml/Exec/Haml.html","","<p>The `haml` executable.\n"],["Haml::Filters","","Haml/Filters.html","","<p>The module containing the default Haml filters, as well as the base module,\n{Haml::Filters::Base}.\n<p>@see …\n"],["Haml::Filters::Base","","Haml/Filters/Base.html","","<p>The base module for Haml filters. User-defined filters should be modules\nincluding this module. The name …\n"],["Haml::Filters::Cdata","","Haml/Filters/Cdata.html","","<p>Surrounds the filtered text with CDATA tags.\n"],["Haml::Filters::Css","","Haml/Filters/Css.html","","<p>Surrounds the filtered text with `&lt;style&gt;` and CDATA tags. Useful for\nincluding inline CSS.\n"],["Haml::Filters::Erb","","Haml/Filters/Erb.html","","<p>Parses the filtered text with ERB. Not available if the\n{file:REFERENCE.md#suppress_eval-option `:suppress_eval`} …\n"],["Haml::Filters::Escaped","","Haml/Filters/Escaped.html","","<p>Works the same as {Plain}, but HTML-escapes the text before placing it in\nthe document.\n"],["Haml::Filters::Javascript","","Haml/Filters/Javascript.html","","<p>Surrounds the filtered text with `&lt;script&gt;` and CDATA tags. Useful\nfor including inline Javascript …\n"],["Haml::Filters::Plain","","Haml/Filters/Plain.html","","<p>Does not parse the filtered text. This is useful for large blocks of text\nwithout HTML tags, when you …\n"],["Haml::Filters::PrecompiledTiltFilter","","Haml/Filters/PrecompiledTiltFilter.html","","<p>@private\n"],["Haml::Filters::Preserve","","Haml/Filters/Preserve.html","","<p>Inserts the filtered text into the template with whitespace preserved.\n`preserve`d blocks of text aren&#39;t …\n"],["Haml::Filters::Ruby","","Haml/Filters/Ruby.html","","<p>Parses the filtered text with the normal Ruby interpreter. Creates an IO\nobject named `haml_io`, anything …\n"],["Haml::Filters::SassRailsTemplate","","Haml/Filters/SassRailsTemplate.html","","<p>This is an extension of Sass::Rails&#39;s SassTemplate class that allows\nRails&#39;s asset helpers to …\n"],["Haml::Filters::ScssRailsTemplate","","Haml/Filters/ScssRailsTemplate.html","","<p>This is an extension of Sass::Rails&#39;s SassTemplate class that allows\nRails&#39;s asset helpers to …\n"],["Haml::Filters::TiltFilter","","Haml/Filters/TiltFilter.html","","<p>@private\n"],["Haml::Helpers","","Haml/Helpers.html","","<p>This module contains various helpful methods to make it easier to do\nvarious tasks. {Haml::Helpers} is …\n"],["Haml::Helpers::ActionViewExtensions","","Haml/Helpers/ActionViewExtensions.html","","<p>This module contains various useful helper methods that either tie into\nActionView or the rest of the …\n"],["Haml::Helpers::ErrorReturn","","Haml/Helpers/ErrorReturn.html","","<p>An object that raises an error when {#to_s} is called. It&#39;s used to\nraise an error when the return …\n"],["Haml::Helpers::XssMods","","Haml/Helpers/XssMods.html","","<p>This module overrides Haml helpers to work properly in the context of\nActionView. Currently it&#39;s …\n"],["Haml::Options","","Haml/Options.html","","<p>This class encapsulates all of the configuration options that Haml\nunderstands. Please see the {file:REFERENCE.md#options …\n"],["Haml::Parser","","Haml/Parser.html","",""],["Haml::Parser::Line","","Haml/Parser/Line.html","","<p>@private\n"],["Haml::Parser::ParseNode","","Haml/Parser/ParseNode.html","","<p>@private\n"],["Haml::Plugin","","Haml/Plugin.html","","<p>This module makes Haml work with Rails using the template handler API.\n"],["Haml::Plugin::ActionPack","","Haml/Plugin/ActionPack.html","",""],["Haml::Plugin::ActionPack::VERSION","","Haml/Plugin/ActionPack/VERSION.html","",""],["Haml::Railtie","","Haml/Railtie.html","",""],["Haml::Railtie::Sass","","Haml/Railtie/Sass.html","",""],["Haml::SafeErubisTemplate","","Haml/SafeErubisTemplate.html","",""],["Haml::SyntaxError","","Haml/SyntaxError.html","","<p>SyntaxError is the type of exception raised when Haml encounters an\nill-formatted document. It&#39;s …\n"],["Haml::Template","","Haml/Template.html","",""],["Haml::Util","","Haml/Util.html","","<p>A module containing various useful functions.\n"],["Haml::Util::StaticConditionalContext","","Haml/Util/StaticConditionalContext.html","","<p>The context in which the ERB for {#def_static_method} will be run.\n"],["Object","","Object.html","","<p>@private\n"],["Rails","","Rails.html","",""],["[]","Haml::Options","Haml/Options.html#method-i-5B-5D","(key)","<p>Retrieve an option value. @param key The value to retrieve.\n"],["[]=","Haml::Options","Haml/Options.html#method-i-5B-5D-3D","(key, value)","<p>Set an option value. @param key The key to set. @param value The value to\nset for the key.\n"],["action_view?","Haml::Helpers","Haml/Helpers.html#method-c-action_view-3F","()","<p>@return [Boolean] Whether or not ActionView is loaded\n"],["active?","Haml::Buffer","Haml/Buffer.html#method-i-active-3F","()","<p>Whether or not this buffer is currently being used to render a Haml\ntemplate. Returns `false` if a subtemplate …\n"],["adjust_tabs","Haml::Buffer","Haml/Buffer.html#method-i-adjust_tabs","(tab_change)","<p>Modifies the indentation of the document.\n<p>@param tab_change [Fixnum] The number of tabs by which to increase …\n"],["attr_wrapper=","Haml::Options","Haml/Options.html#method-i-attr_wrapper-3D","(value)",""],["attributes","Haml::Buffer","Haml/Buffer.html#method-i-attributes","(class_id, obj_ref, *attributes_hashes)",""],["av_template_class","Haml::Util","Haml/Util.html#method-i-av_template_class","(name)","<p>Returns an ActionView::Template* class. In pre-3.0 versions of Rails, most\nof these classes were of the …\n"],["balance","Haml::Parser","Haml/Parser.html#method-i-balance","(*args)",""],["balance","Haml::Util","Haml/Util.html#method-i-balance","(scanner, start, finish, count = 0)","<p>Moves a scanner through a balanced pair of characters. For example:\n\n<pre>Foo (Bar (Baz bang) bop) (Bang (bop ...</pre>\n"],["block_is_haml?","Haml::Helpers","Haml/Helpers.html#method-i-block_is_haml-3F","(block)","<p>Returns whether or not `block` is defined directly in a Haml template.\n<p>@param block [Proc] A Ruby block …\n"],["block_keyword","Haml::Parser","Haml/Parser.html#method-i-block_keyword","(text)",""],["block_opened?","Haml::Parser","Haml/Parser.html#method-i-block_opened-3F","()",""],["buffer_option_keys","Haml::Options","Haml/Options.html#method-c-buffer_option_keys","()","<p>An array of keys that will be used to provide a hash of options to\n{Haml::Buffer}. @return Hash\n"],["build_attributes","Haml::Compiler","Haml/Compiler.html#method-c-build_attributes","(is_html, attr_wrapper, escape_attrs, hyphenate_data_attrs, attributes = {})","<p>This is a class method so it can be accessed from Buffer.\n"],["build_data_keys","Haml::Compiler","Haml/Compiler.html#method-c-build_data_keys","(data_hash, hyphenate, attr_name=\"data\")",""],["cache_fragment","Haml::Plugin","Haml/Plugin.html#method-i-cache_fragment","(block, name = {}, options = nil)",""],["call","Haml::Plugin","Haml/Plugin.html#method-c-call","(template)","<p>In Rails 3.1+, #call takes the place of #compile\n"],["caller_info","Haml::Util","Haml/Util.html#method-i-caller_info","(entry = caller[1])","<p>Returns information about the caller of the previous method.\n<p>@param entry [String] An entry in the `#caller` …\n"],["capture","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-capture","(*args, &block)",""],["capture_haml","Haml::Helpers","Haml/Helpers.html#method-i-capture_haml","(*args, &block)","<p>Captures the result of a block of Haml code, gets rid of the excess\nindentation, and returns it as a …\n"],["capture_haml_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-capture_haml_with_haml_xss","(*args, &block)","<p>Output is always HTML safe\n"],["capture_with_haml","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-capture_with_haml","(*args, &block)",""],["capture_without_haml","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-capture_without_haml","(*args, &block)",""],["check_encoding","Haml::Util","Haml/Util.html#method-i-check_encoding","(str)",""],["check_haml_encoding","Haml::Util","Haml/Util.html#method-i-check_haml_encoding","(str, &block)","<p>Like {#check_encoding}, but also checks for a Ruby-style `-# coding:`\ncomment at the beginning of the …\n"],["check_push_script_stack","Haml::Parser","Haml/Parser.html#method-i-check_push_script_stack","(keyword)",""],["close","Haml::Parser","Haml/Parser.html#method-i-close","()",""],["close_filter","Haml::Parser","Haml/Parser.html#method-i-close_filter","(_)",""],["close_haml_comment","Haml::Parser","Haml/Parser.html#method-i-close_haml_comment","(_)",""],["close_script","Haml::Parser","Haml/Parser.html#method-i-close_script","(node)",""],["close_silent_script","Haml::Parser","Haml/Parser.html#method-i-close_silent_script","(node)",""],["closes_flat?","Haml::Parser","Haml/Parser.html#method-i-closes_flat-3F","(line)",""],["color","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-color","(color, str)","<p>Wraps the given string in terminal escapes causing it to have the given\ncolor. If terminal esapes aren&#39;t …\n"],["comment","Haml::Parser","Haml/Parser.html#method-i-comment","(line)","<p>Renders an XHTML comment.\n"],["compile","Haml::Compiler","Haml/Compiler.html#method-i-compile","(node)",""],["compile","Haml::Filters::Base","Haml/Filters/Base.html#method-i-compile","(compiler, text)","<p>This should be overridden when a filter needs to have access to the Haml\nevaluation context. Rather than …\n"],["compile","Haml::Filters::PrecompiledTiltFilter","Haml/Filters/PrecompiledTiltFilter.html#method-i-compile","(compiler, text)",""],["compile","Haml::Filters::Ruby","Haml/Filters/Ruby.html#method-i-compile","(compiler, text)","<p>@see Base#compile\n"],["compile","Haml::Plugin","Haml/Plugin.html#method-i-compile","(template)",""],["compile_comment","Haml::Compiler","Haml/Compiler.html#method-i-compile_comment","()",""],["compile_doctype","Haml::Compiler","Haml/Compiler.html#method-i-compile_doctype","()",""],["compile_filter","Haml::Compiler","Haml/Compiler.html#method-i-compile_filter","()",""],["compile_haml_comment","Haml::Compiler","Haml/Compiler.html#method-i-compile_haml_comment","()",""],["compile_plain","Haml::Compiler","Haml/Compiler.html#method-i-compile_plain","()",""],["compile_root","Haml::Compiler","Haml/Compiler.html#method-i-compile_root","()",""],["compile_script","Haml::Compiler","Haml/Compiler.html#method-i-compile_script","(&block)",""],["compile_silent_script","Haml::Compiler","Haml/Compiler.html#method-i-compile_silent_script","()",""],["compile_tag","Haml::Compiler","Haml/Compiler.html#method-i-compile_tag","()",""],["concat","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-concat","(string)",""],["concat_merged_text","Haml::Compiler","Haml/Compiler.html#method-i-concat_merged_text","(text)","<p>Concatenate `text` to `@buffer` without tabulation.\n"],["concat_with_haml_xss","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-concat_with_haml_xss","(string)",""],["concat_without_haml_xss","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-concat_without_haml_xss","(string)",""],["contains_interpolation?","Haml::Util","Haml/Util.html#method-i-contains_interpolation-3F","(str)",""],["content_tag","ActionView::Helpers::InstanceTag","ActionView/Helpers/InstanceTag.html#method-i-content_tag","(*args, &block)",""],["content_tag","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, *args, &block)",""],["content_tag_with_haml","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-content_tag_with_haml","(name, *args, &block)",""],["content_tag_without_haml","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-content_tag_without_haml","(name, *args, &block)",""],["def_method","Haml::Engine","Haml/Engine.html#method-i-def_method","(object, name, *local_names)","<p>Defines a method on `object` with the given name that renders the template\nand returns the result as …\n"],["def_static_method","Haml::Util","Haml/Util.html#method-i-def_static_method","(klass, name, args, *vars)","<p>This is used for methods in {Haml::Buffer} that need to be very fast, and\ntake a lot of boolean parameters …\n"],["defaults","Haml::Options","Haml/Options.html#method-c-defaults","()","<p>The default option values. @return Hash\n"],["defaults","Haml::Options","Haml/Options.html#method-i-defaults","()",""],["div","Haml::Parser","Haml/Parser.html#method-i-div","(line)","<p>Renders a line that creates an XHTML tag and has an implicit div because of\n`.` or `#`.\n"],["doctype","Haml::Parser","Haml/Parser.html#method-i-doctype","(line)","<p>Renders an XHTML doctype or XML shebang.\n"],["encoding=","Haml::Options","Haml/Options.html#method-i-encoding-3D","(value)",""],["escape_once","Haml::Helpers","Haml/Helpers.html#method-i-escape_once","(text)","<p>Escapes HTML entities in `text`, but without escaping an ampersand that is\nalready part of an escaped …\n"],["escape_once_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-escape_once_with_haml_xss","(*args)","<p>Output is always HTML safe\n"],["extended","Haml::Filters::TiltFilter","Haml/Filters/TiltFilter.html#method-c-extended","(base)",""],["filter","Haml::Parser","Haml/Parser.html#method-i-filter","(name)",""],["filter_and_join","Haml::Compiler","Haml/Compiler.html#method-c-filter_and_join","(value, separator)",""],["filter_opened?","Haml::Parser","Haml/Parser.html#method-i-filter_opened-3F","()","<p>Same semantics as block_opened?, except that block_opened? uses Line#tabs,\nwhich doesn&#39;t interact …\n"],["find_and_preserve","Haml::Helpers","Haml/Helpers.html#method-i-find_and_preserve","(input = nil, tags = haml_buffer.options[:preserve], &block)","<p>Uses {#preserve} to convert any newlines inside whitespace-sensitive tags\ninto the HTML entities for …\n"],["find_and_preserve_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-find_and_preserve_with_haml_xss","(*args, &block)","<p>Output is always HTML safe\n"],["fix_textareas!","Haml::Buffer","Haml/Buffer.html#method-i-fix_textareas-21","(input)","<p>Works like #{find_and_preserve}, but allows the first newline after a\npreserved opening tag to remain …\n"],["flat?","Haml::Parser","Haml/Parser.html#method-i-flat-3F","()",""],["flat_script","Haml::Parser","Haml/Parser.html#method-i-flat_script","(text, escape_html = nil)",""],["flatten","Haml::Helpers","Haml/Helpers.html#method-i-flatten","(input = nil, &block)",""],["flatten_data_attributes","Haml::Compiler","Haml/Compiler.html#method-c-flatten_data_attributes","(data, key, join_char, seen = [])",""],["flush_merged_text","Haml::Compiler","Haml/Compiler.html#method-i-flush_merged_text","()",""],["for_buffer","Haml::Options","Haml/Options.html#method-i-for_buffer","()","<p>Returns a subset of options: those that {Haml::Buffer} cares about. All of\nthe values here are such that …\n"],["form_for","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-form_for","(object_name, *args, &proc)",""],["form_for_with_haml","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-form_for_with_haml","(object_name, *args, &proc)",""],["form_for_with_haml_xss","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-form_for_with_haml_xss","(*args, &block)",""],["form_for_without_haml","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-form_for_without_haml","(object_name, *args, &proc)",""],["form_for_without_haml_xss","ActionView::Helpers::FormHelper","ActionView/Helpers/FormHelper.html#method-i-form_for_without_haml_xss","(object_name, *args, &proc)",""],["form_tag","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-form_tag","(url_for_options = {}, options = {}, *parameters_for_url, &proc)",""],["form_tag_with_haml","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-form_tag_with_haml","(url_for_options = {}, options = {}, *parameters_for_url, &proc)",""],["form_tag_with_haml_xss","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-form_tag_with_haml_xss","(*args, &block)",""],["form_tag_without_haml","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-form_tag_without_haml","(url_for_options = {}, options = {}, *parameters_for_url, &proc)",""],["form_tag_without_haml_xss","ActionView::Helpers::FormTagHelper","ActionView/Helpers/FormTagHelper.html#method-i-form_tag_without_haml_xss","(url_for_options = {}, options = {}, *parameters_for_url, &proc)",""],["format=","Haml::Options","Haml/Options.html#method-i-format-3D","(value)",""],["generate_content_class_names","Haml::Helpers::ActionViewExtensions","Haml/Helpers/ActionViewExtensions.html#method-i-generate_content_class_names","()",""],["get_line","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-get_line","(exception)","<p>Finds the line of the source template on which an exception was raised.\n<p>@param exception [Exception]  …\n"],["haml_bind_proc","Haml::Helpers","Haml/Helpers.html#method-i-haml_bind_proc","(&proc)","<p>Gives a proc the same local `_hamlout` and `_erbout` variables that the\ncurrent template has.\n<p>@param proc …\n"],["haml_buffer","ActionView::Helpers::HamlSupport","ActionView/Helpers/HamlSupport.html#method-i-haml_buffer","()",""],["haml_buffer","Haml::Helpers","Haml/Helpers.html#method-i-haml_buffer","()","<p>The current {Haml::Buffer} object.\n<p>@return [Haml::Buffer]\n"],["haml_comment","Haml::Parser","Haml/Parser.html#method-i-haml_comment","(text)",""],["haml_concat","Haml::Helpers","Haml/Helpers.html#method-i-haml_concat","(text = \"\")","<p>Outputs text directly to the Haml buffer, with the proper indentation.\n<p>@param text [#to_s] The text to …\n"],["haml_concat_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-haml_concat_with_haml_xss","(text = \"\")","<p>Input is escaped\n"],["haml_indent","Haml::Helpers","Haml/Helpers.html#method-i-haml_indent","()","<p>@return [String] The indentation string for the current line\n"],["haml_indent_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-haml_indent_with_haml_xss","()","<p>Output is always HTML safe\n"],["haml_tag","Haml::Helpers","Haml/Helpers.html#method-i-haml_tag","(name, *rest, &block)","<p>Creates an HTML tag with the given name and optionally text and attributes.\nCan take a block that will …\n"],["haml_tag_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-haml_tag_with_haml_xss","(name, *rest, &block)","<p>Input is escaped, haml_concat&#39;ed output is always HTML safe\n"],["haml_xss_html_escape","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-haml_xss_html_escape","(text)","<p>Escapes the HTML in the text if and only if Rails XSS protection is enabled\n<strong>and</strong> the `:escape_html` option …\n"],["handle_interpolation","Haml::Util","Haml/Util.html#method-i-handle_interpolation","(str)","<p>Scans through a string looking for the interoplation-opening `#{` and, when\nit&#39;s found, yields the …\n"],["handle_load_error","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-handle_load_error","(err)",""],["handle_multiline","Haml::Parser","Haml/Parser.html#method-i-handle_multiline","(line)",""],["handle_ruby_multiline","Haml::Parser","Haml/Parser.html#method-i-handle_ruby_multiline","(text)",""],["handles_encoding?","Haml::Plugin","Haml/Plugin.html#method-i-handles_encoding-3F","()",""],["html4?","Haml::Buffer","Haml/Buffer.html#method-i-html4-3F","()","<p>@return [Boolean] Whether or not the format is HTML4\n"],["html4?","Haml::Options","Haml/Options.html#method-i-html4-3F","()","<p>@return [Boolean] Whether or not the format is HTML4.\n"],["html5?","Haml::Buffer","Haml/Buffer.html#method-i-html5-3F","()","<p>@return [Boolean] Whether or not the format is HTML5.\n"],["html5?","Haml::Options","Haml/Options.html#method-i-html5-3F","()","<p>@return [Boolean] Whether or not the format is HTML5.\n"],["html?","Haml::Buffer","Haml/Buffer.html#method-i-html-3F","()","<p>@return [Boolean] Whether or not the format is any flavor of HTML\n"],["html?","Haml::Options","Haml/Options.html#method-i-html-3F","()","<p>@return [Boolean] Whether or not the format is any flavor of HTML.\n"],["html_attrs","Haml::Helpers","Haml/Helpers.html#method-i-html_attrs","(lang = 'en-US')","<p>Returns a hash containing default assignments for the `xmlns`, `lang`, and\n`xml:lang` attributes of the …\n"],["html_escape","Haml::Helpers","Haml/Helpers.html#method-i-html_escape","(text)","<p>Returns a copy of `text` with ampersands, angle brackets and quotes escaped\ninto HTML entities.\n<p>Note that …\n"],["html_escape_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-html_escape_with_haml_xss","(text)","<p>Don&#39;t escape text that&#39;s already safe, output is always HTML safe\n"],["html_safe","Haml::Helpers::ErrorReturn","Haml/Helpers/ErrorReturn.html#method-i-html_safe","()","<p>Any attempt to treat ErrorReturn as a string should cause it to blow up.\n"],["html_safe","Haml::Util","Haml/Util.html#method-i-html_safe","(text)","<p>Returns the given text, marked as being HTML-safe. With older versions of\nthe Rails XSS-safety mechanism, …\n"],["html_safe!","Haml::Helpers::ErrorReturn","Haml/Helpers/ErrorReturn.html#method-i-html_safe-21","()",""],["html_safe?","Haml::Helpers::ErrorReturn","Haml/Helpers/ErrorReturn.html#method-i-html_safe-3F","()",""],["human_indentation","Haml::Util","Haml/Util.html#method-i-human_indentation","(indentation)","<p>Formats a string for use in error messages about indentation.\n<p>@param indentation [String] The string used …\n"],["included","Haml::Filters::Base","Haml/Filters/Base.html#method-c-included","(base)","<p>This method is automatically called when {Base} is included in a module. It\nautomatically defines a filter …\n"],["included","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-c-included","(base)",""],["init_haml_helpers","Haml::Helpers","Haml/Helpers.html#method-i-init_haml_helpers","()","<p>Note: this does *<strong>not</strong>* need to be called when using Haml\nhelpers normally in Rails.\n<p>Initializes the current …\n"],["init_rails","Haml","Haml.html#method-c-init_rails","(*args)",""],["initialize_encoding","Haml::Engine","Haml/Engine.html#method-i-initialize_encoding","(given_value)",""],["initialize_engine","Haml::SafeErubisTemplate","Haml/SafeErubisTemplate.html#method-i-initialize_engine","()",""],["inspect","Haml::Helpers::ErrorReturn","Haml/Helpers/ErrorReturn.html#method-i-inspect","()","<p>@return [String] A human-readable string representation\n"],["inspect","Haml::Parser::ParseNode","Haml/Parser/ParseNode.html#method-i-inspect","()",""],["inspect_obj","Haml::Util","Haml/Util.html#method-i-inspect_obj","(obj)",""],["internal_compile","Haml::Filters::Base","Haml/Filters/Base.html#method-i-internal_compile","(*args)","<p>Same as {#compile}, but requires the necessary files first. *This is used\nby {Haml::Engine} and is not …\n"],["is_haml?","ActionView::Helpers::HamlSupport","ActionView/Helpers/HamlSupport.html#method-i-is_haml-3F","()",""],["is_haml?","Haml::Helpers","Haml/Helpers.html#method-i-is_haml-3F","()","<p>Returns whether or not the current template is a Haml template.\n<p>This function, unlike other {Haml::Helpers} …\n"],["is_haml?","Object","Object.html#method-i-is_haml-3F","()","<p>Haml overrides various `ActionView` helpers, which call an {#is_haml?}\nmethod to determine whether or …\n"],["is_multiline?","Haml::Parser","Haml/Parser.html#method-i-is_multiline-3F","(text)","<p>Checks whether or not `line` is in a multiline sequence.\n"],["is_ruby_multiline?","Haml::Parser","Haml/Parser.html#method-i-is_ruby_multiline-3F","(text)","<p>`text&#39; is a Ruby multiline block if it:\n<p>ends with a comma\n<p>but not “?,” which is a character …\n"],["list_of","Haml::Helpers","Haml/Helpers.html#method-i-list_of","(enum, opts={}, &block)","<p>Takes an `Enumerable` object and a block and iterates over the enum,\nyielding each element to a Haml …\n"],["list_of_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-list_of_with_haml_xss","(*args, &block)","<p>Output is always HTML safe\n"],["locals_code","Haml::Compiler","Haml/Compiler.html#method-i-locals_code","(names)",""],["merge_attrs","Haml::Buffer","Haml/Buffer.html#method-c-merge_attrs","(to, from)","<p>Merges two attribute hashes. This is the same as `to.merge!(from)`, except\nthat it merges id, class, …\n"],["merge_name_and_attributes","Haml::Helpers","Haml/Helpers.html#method-i-merge_name_and_attributes","(name, attributes_hash = {})","<p>Parses the tag name used for {#haml_tag} and merges it with the Ruby\nattributes hash.\n"],["message","Haml::Error","Haml/Error.html#method-c-message","(key, *args)",""],["method_missing","Haml::Util::StaticConditionalContext","Haml/Util/StaticConditionalContext.html#method-i-method_missing","(name, *args, &block)","<p>Checks whether or not a variable is defined for this context.\n<p>@param name [Symbol] The name of the variable …\n"],["mid_block_keyword?","Haml::Parser","Haml/Parser.html#method-i-mid_block_keyword-3F","(text)",""],["new","Haml::Buffer","Haml/Buffer.html#method-c-new","(upper = nil, options = {})","<p>@param upper [Buffer] The parent buffer @param options [{Symbol =&gt;\nObject}] An options hash.\n\n<pre>See {Haml::Engine#options\\_for\\_buffer}</pre>\n"],["new","Haml::Compiler","Haml/Compiler.html#method-c-new","(options)",""],["new","Haml::Engine","Haml/Engine.html#method-c-new","(template, options = {})","<p>Precompiles the Haml template.\n<p>@param template [String] The Haml template @param options [{Symbol =&gt; …\n"],["new","Haml::Error","Haml/Error.html#method-c-new","(message = nil, line = nil)","<p>@param message [String] The error message @param line [Fixnum] See {#line}\n"],["new","Haml::ErubisTemplateHandler","Haml/ErubisTemplateHandler.html#method-c-new","(*args, &blk)",""],["new","Haml::Exec::Generic","Haml/Exec/Generic.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] The command-line arguments\n"],["new","Haml::Exec::Haml","Haml/Exec/Haml.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] The command-line arguments\n"],["new","Haml::Helpers::ErrorReturn","Haml/Helpers/ErrorReturn.html#method-c-new","(method)",""],["new","Haml::Options","Haml/Options.html#method-c-new","(values = {}, &block)",""],["new","Haml::Parser","Haml/Parser.html#method-c-new","(template, options)",""],["new","Haml::Parser::ParseNode","Haml/Parser/ParseNode.html#method-c-new","(*args)",""],["new","Haml::Util::StaticConditionalContext","Haml/Util/StaticConditionalContext.html#method-c-new","(set)","<p>@param set [#include?] The set of variables that are defined for this\ncontext.\n"],["new_encoded_string","Haml::Buffer","Haml/Buffer.html#method-i-new_encoded_string","()",""],["next_line","Haml::Parser","Haml/Parser.html#method-i-next_line","()",""],["non_haml","Haml::Helpers","Haml/Helpers.html#method-i-non_haml","()","<p>Runs a block of code in a non-Haml context (i.e. {#is_haml?} will return\nfalse).\n<p>This is mainly useful …\n"],["nuke_inner_whitespace?","Haml::Compiler","Haml/Compiler.html#method-i-nuke_inner_whitespace-3F","(node)",""],["open_file","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-open_file","(filename, flag = 'r')",""],["options_for_buffer","Haml::Engine","Haml/Engine.html#method-i-options_for_buffer","()",""],["output_buffer","ActionView::Base","ActionView/Base.html#method-i-output_buffer","()",""],["output_buffer=","ActionView::Base","ActionView/Base.html#method-i-output_buffer-3D","(new_buffer)",""],["output_buffer_with_haml","ActionView::Base","ActionView/Base.html#method-i-output_buffer_with_haml","()",""],["output_buffer_without_haml","ActionView::Base","ActionView/Base.html#method-i-output_buffer_without_haml","()",""],["page_class","Haml::Helpers::ActionViewExtensions","Haml/Helpers/ActionViewExtensions.html#method-i-page_class","()","<p>Returns a value for the “class” attribute unique to this controller/action\npair. This can be …\n"],["parse","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-parse","()","<p>Parses the command-line arguments and runs the executable. This does not\nhandle exceptions or exit the …\n"],["parse","Haml::Parser","Haml/Parser.html#method-i-parse","()",""],["parse!","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-parse-21","()","<p>Parses the command-line arguments and runs the executable. Calls\n`Kernel#exit` at the end, so it never …\n"],["parse_class_and_id","Haml::Parser","Haml/Parser.html#method-c-parse_class_and_id","(list)","<p>This is a class method so it can be accessed from {Haml::Helpers}.\n<p>Iterates through the classes and ids …\n"],["parse_haml_magic_comment","Haml::Util","Haml/Util.html#method-i-parse_haml_magic_comment","(str)","<p>Parses a magic comment at the beginning of a Haml file. The parsing rules\nare basically the same as Ruby&#39;s. …\n"],["parse_new_attribute","Haml::Parser","Haml/Parser.html#method-i-parse_new_attribute","(scanner)",""],["parse_new_attributes","Haml::Parser","Haml/Parser.html#method-i-parse_new_attributes","(line)",""],["parse_object_ref","Haml::Buffer","Haml/Buffer.html#method-i-parse_object_ref","(ref)","<p>Takes an array of objects and uses the class and id of the first one to\ncreate an attributes hash. The …\n"],["parse_old_attributes","Haml::Parser","Haml/Parser.html#method-i-parse_old_attributes","(line)",""],["parse_static_hash","Haml::Parser","Haml/Parser.html#method-i-parse_static_hash","(text)",""],["parse_tag","Haml::Parser","Haml/Parser.html#method-i-parse_tag","(line)","<p>Parses a line into tag_name, attributes, attributes_hash, object_ref,\naction, value\n"],["plain","Haml::Parser","Haml/Parser.html#method-i-plain","(text, escape_html = nil)",""],["powerset","Haml::Util","Haml/Util.html#method-i-powerset","(arr)","<p>Computes the powerset of the given array. This is the set of all subsets of\nthe array.\n<p>@example\n\n<pre>powerset([1, ...</pre>\n"],["precede","Haml::Helpers","Haml/Helpers.html#method-i-precede","(str, &block)","<p>Prepends a string to the beginning of a Haml block, with no whitespace\nbetween. For example:\n\n<pre>= precede ...</pre>\n"],["precede_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-precede_with_haml_xss","(str, &block)","<p>Input is escaped, output is always HTML safe\n"],["precompiled","Haml::Compiler","Haml/Compiler.html#method-i-precompiled","()","<p>The source code that is evaluated to produce the Haml document.\n<p>In Ruby 1.9, this is automatically converted …\n"],["precompiled","Haml::Filters::Erb","Haml/Filters/Erb.html#method-c-precompiled","(text)",""],["precompiled","Haml::Filters::PrecompiledTiltFilter","Haml/Filters/PrecompiledTiltFilter.html#method-i-precompiled","(text)",""],["precompiled_method_return_value","Haml::Compiler","Haml/Compiler.html#method-i-precompiled_method_return_value","()","<p>Returns the string used as the return value of the precompiled method. This\nmethod exists so it can be …\n"],["precompiled_method_return_value_with_haml_xss","Haml::Compiler","Haml/Compiler.html#method-i-precompiled_method_return_value_with_haml_xss","()",""],["precompiled_method_return_value_without_haml_xss","Haml::Compiler","Haml/Compiler.html#method-i-precompiled_method_return_value_without_haml_xss","()",""],["precompiled_postamble","Haml::SafeErubisTemplate","Haml/SafeErubisTemplate.html#method-i-precompiled_postamble","(locals)",""],["precompiled_preamble","Haml::SafeErubisTemplate","Haml/SafeErubisTemplate.html#method-i-precompiled_preamble","(locals)",""],["precompiled_with_ambles","Haml::Compiler","Haml/Compiler.html#method-i-precompiled_with_ambles","(local_names)","<p>Returns the precompiled string with the preamble and postamble.\n<p>Initializes to ActionView::OutputBuffer …\n"],["precompiled_with_return_value","Haml::Compiler","Haml/Compiler.html#method-i-precompiled_with_return_value","()",""],["prepare","Haml::SafeErubisTemplate","Haml/SafeErubisTemplate.html#method-i-prepare","()",""],["prerender_tag","Haml::Compiler","Haml/Compiler.html#method-i-prerender_tag","(name, self_close, attributes)",""],["preserve","Haml::Helpers","Haml/Helpers.html#method-i-preserve","(input = nil, &block)","<p>Takes any string, finds all the newlines, and converts them to HTML\nentities so they&#39;ll render correctly …\n"],["preserve_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-preserve_with_haml_xss","(*args, &block)","<p>Output is always HTML safe\n"],["prettify","Haml::Helpers","Haml/Helpers.html#method-i-prettify","(text)",""],["process_indent","Haml::Parser","Haml/Parser.html#method-i-process_indent","(line)","<p>Processes and deals with lowering indentation.\n"],["process_line","Haml::Parser","Haml/Parser.html#method-i-process_line","(text, index)","<p>Processes a single line of Haml.\n<p>This method doesn&#39;t return anything; it simply processes the line …\n"],["process_result","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-process_result","()","<p>Processes the options set by the command-line arguments. In particular,\nsets `@options` and `@options …\n"],["process_result","Haml::Exec::Haml","Haml/Exec/Haml.html#method-i-process_result","()","<p>Processes the options set by the command-line arguments, and runs the Haml\ncompiler appropriately.\n"],["push","Haml::Parser","Haml/Parser.html#method-i-push","(node)",""],["push_generated_script","Haml::Compiler","Haml/Compiler.html#method-i-push_generated_script","(text)",""],["push_merged_text","Haml::Compiler","Haml/Compiler.html#method-i-push_merged_text","(text, tab_change = 0, indent = true)","<p>Adds `text` to `@buffer` with appropriate tabulation without parsing it.\n"],["push_script","Haml::Compiler","Haml/Compiler.html#method-i-push_script","(text, opts = {})","<p>Causes `text` to be evaluated in the context of the scope object and the\nresult to be added to `@buffer`. …\n"],["push_silent","Haml::Compiler","Haml/Compiler.html#method-i-push_silent","(text, can_suppress = false)","<p>Evaluates `text` in the context of the scope object, but does not output\nthe result.\n"],["push_text","Haml::Buffer","Haml/Buffer.html#method-i-push_text","(text, tab_change, dont_tab_up)","<p>Appends text to the buffer, properly tabulated. Also modifies the\ndocument&#39;s indentation.\n<p>@param text …\n"],["push_text","Haml::Compiler","Haml/Compiler.html#method-i-push_text","(text, tab_change = 0)",""],["puts","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-puts","(*args)","<p>Same as `Kernel.puts`, but doesn&#39;t print anything if the `–quiet`\noption is set.\n<p>@param args [Array] …\n"],["puts_action","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-puts_action","(name, color, arg)","<p>Prints a status message about performing the given action, colored using\nthe given color (via terminal …\n"],["rails_xss_safe?","Haml::Util","Haml/Util.html#method-i-rails_xss_safe-3F","()",""],["raw_next_line","Haml::Parser","Haml/Parser.html#method-i-raw_next_line","()",""],["register_tilt_filter","Haml::Filters","Haml/Filters.html#method-i-register_tilt_filter","(name, options = {})","<p>Loads an external template engine from [Tilt](github.com/rtomayko/tilt) as\na filter. This method is used …\n"],["remove_filter","Haml::Filters","Haml/Filters.html#method-i-remove_filter","(name)","<p>Removes a filter from Haml. If the filter was removed, it returns the that\nwas remove Module upon success, …\n"],["remove_whitespace=","Haml::Options","Haml/Options.html#method-i-remove_whitespace-3D","(value)",""],["render","ActionView::Base","ActionView/Base.html#method-i-render","(*args, &block)",""],["render","Haml::Engine","Haml/Engine.html#method-i-render","(scope = Object.new, locals = {}, &block)","<p>Processes the template and returns the result as a string.\n<p>`scope` is the context in which the template …\n"],["render","Haml::Filters::Base","Haml/Filters/Base.html#method-i-render","(text)","<p>Takes the source text that should be passed to the filter and returns the\nresult of running the filter …\n"],["render","Haml::Filters::Cdata","Haml/Filters/Cdata.html#method-i-render","(text)","<p>@see Base#render\n"],["render","Haml::Filters::Escaped","Haml/Filters/Escaped.html#method-i-render","(text)","<p>@see Base#render\n"],["render","Haml::Filters::Plain","Haml/Filters/Plain.html#method-i-render","(text)","<p>@see Base#render\n"],["render","Haml::Filters::Preserve","Haml/Filters/Preserve.html#method-i-render","(text)","<p>@see Base#render\n"],["render","Haml::Filters::SassRailsTemplate","Haml/Filters/SassRailsTemplate.html#method-i-render","(scope=Object.new, locals={}, &block)",""],["render_proc","Haml::Engine","Haml/Engine.html#method-i-render_proc","(scope = Object.new, *local_names)","<p>Returns a proc that, when called, renders the template and returns the\nresult as a string.\n<p>`scope` works …\n"],["render_with_haml","ActionView::Base","ActionView/Base.html#method-i-render_with_haml","(*args, &block)",""],["render_with_options","Haml::Filters::Base","Haml/Filters/Base.html#method-i-render_with_options","(text, options)","<p>Same as {#render}, but takes a {Haml::Engine} options hash as well.\nIt&#39;s only safe to rely on options …\n"],["render_with_options","Haml::Filters::Css","Haml/Filters/Css.html#method-i-render_with_options","(text, options)","<p>@see Base#render_with_options\n"],["render_with_options","Haml::Filters::Javascript","Haml/Filters/Javascript.html#method-i-render_with_options","(text, options)","<p>@see Base#render_with_options\n"],["render_without_haml","ActionView::Base","ActionView/Base.html#method-i-render_without_haml","(*args, &block)",""],["resolve_newlines","Haml::Compiler","Haml/Compiler.html#method-i-resolve_newlines","()",""],["rstrip!","Haml::Buffer","Haml/Buffer.html#method-i-rstrip-21","()","<p>Remove the whitespace from the right side of the buffer string. Doesn&#39;t\ndo anything if we&#39;re …\n"],["rstrip_buffer!","Haml::Compiler","Haml/Compiler.html#method-i-rstrip_buffer-21","(index = -1)","<p>Get rid of and whitespace at the end of the buffer or the merged text\n"],["safe_concat","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-safe_concat","(string)",""],["safe_concat_with_haml_xss","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-safe_concat_with_haml_xss","(string)",""],["safe_concat_without_haml_xss","ActionView::Helpers::TextHelper","ActionView/Helpers/TextHelper.html#method-i-safe_concat_without_haml_xss","(string)",""],["sass_options","Haml::Filters::SassRailsTemplate","Haml/Filters/SassRailsTemplate.html#method-i-sass_options","(scope)",""],["script","Haml::Parser","Haml/Parser.html#method-i-script","(text, escape_html = nil, preserve = false)",""],["set_locals","Haml::Engine","Haml/Engine.html#method-i-set_locals","(locals, scope, scope_object)",""],["set_opts","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-set_opts","(opts)","<p>Tells optparse how to parse the arguments available for all executables.\n<p>This is meant to be overridden …\n"],["set_opts","Haml::Exec::Haml","Haml/Exec/Haml.html#method-i-set_opts","(opts)","<p>Tells optparse how to parse the arguments.\n<p>@param opts [OptionParser]\n"],["set_output_buffer_with_haml","ActionView::Base","ActionView/Base.html#method-i-set_output_buffer_with_haml","(new_buffer)",""],["set_output_buffer_without_haml","ActionView::Base","ActionView/Base.html#method-i-set_output_buffer_without_haml","(new_buffer)",""],["silence_warnings","Haml::Util","Haml/Util.html#method-i-silence_warnings","()","<p>Silence all output to STDERR within a block.\n<p>@yield A block in which no output will be printed to STDERR …\n"],["silent_script","Haml::Parser","Haml/Parser.html#method-i-silent_script","(text)",""],["static_method_name","Haml::Util","Haml/Util.html#method-i-static_method_name","(name, *vars)","<p>Computes the name for a method defined via {#def_static_method}.\n<p>@param name [String] The base name of …\n"],["succeed","Haml::Helpers","Haml/Helpers.html#method-i-succeed","(str, &block)","<p>Appends a string to the end of a Haml block, with no whitespace between.\nFor example:\n\n<pre>click\n= succeed ...</pre>\n"],["succeed_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-succeed_with_haml_xss","(str, &block)","<p>Input is escaped, output is always HTML safe\n"],["surround","Haml::Helpers","Haml/Helpers.html#method-i-surround","(front, back = front, &block)","<p>Surrounds a block of Haml code with strings, with no whitespace in between.\nFor example:\n\n<pre>= surround &#39;(&#39;, ...</pre>\n"],["surround_with_haml_xss","Haml::Helpers::XssMods","Haml/Helpers/XssMods.html#method-i-surround_with_haml_xss","(front, back = front, &block)","<p>Input is escaped, output is always HTML safe\n"],["syntax","Haml::Filters::ScssRailsTemplate","Haml/Filters/ScssRailsTemplate.html#method-i-syntax","()",""],["tab_down","Haml::Helpers","Haml/Helpers.html#method-i-tab_down","(i = 1)","<p>Decrements the number of tabs the buffer automatically adds to the lines of\nthe template.\n<p>@param i [Fixnum] …\n"],["tab_up","Haml::Helpers","Haml/Helpers.html#method-i-tab_up","(i = 1)","<p>Increments the number of tabs the buffer automatically adds to the lines of\nthe template. For example: …\n"],["tabs","Haml::Buffer","Haml/Buffer.html#method-i-tabs","(count = 0)","<p>Gets `count` tabs. Mostly for internal use.\n"],["tabs","Haml::Parser::Line","Haml/Parser/Line.html#method-i-tabs","()","<p>@private\n"],["tabulation","Haml::Buffer","Haml/Buffer.html#method-i-tabulation","()","<p>@return [Fixnum] The current indentation level of the document\n"],["tabulation=","Haml::Buffer","Haml/Buffer.html#method-i-tabulation-3D","(val)","<p>Sets the current tabulation of the document.\n<p>@param val [Fixnum] The new tabulation\n"],["tag","Haml::Parser","Haml/Parser.html#method-i-tag","(line)",""],["template_class","Haml::Filters::TiltFilter","Haml/Filters/TiltFilter.html#method-i-template_class","()",""],["text_for_doctype","Haml::Compiler","Haml/Compiler.html#method-i-text_for_doctype","()",""],["to_html","Haml::Engine","Haml/Engine.html#method-i-to_html","(scope = Object.new, locals = {}, &block)",""],["to_s","Haml::Exec::Generic","Haml/Exec/Generic.html#method-i-to_s","()","<p>@return [String] A description of the executable\n"],["to_s","Haml::Helpers::ErrorReturn","Haml/Helpers/ErrorReturn.html#method-i-to_s","()","<p>Raises an error.\n<p>@raise [Haml::Error] The error\n"],["toplevel?","Haml::Buffer","Haml/Buffer.html#method-i-toplevel-3F","()","<p>@return [Boolean] Whether or not this buffer is a top-level template,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">as</span> <span class=\"ruby-identifier\">opposed</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">nested</span> <span class=\"ruby-identifier\">partial</span>\n</pre>\n"],["try_parse_haml_emacs_magic_comment","Haml::Util","Haml/Util.html#method-i-try_parse_haml_emacs_magic_comment","(scanner)",""],["un_next_line","Haml::Parser","Haml/Parser.html#method-i-un_next_line","(line)",""],["underscore","Haml::Buffer","Haml/Buffer.html#method-i-underscore","(camel_cased_word)","<p>Changes a word from camel case to underscores. Based on the method of the\nsame name in Rails&#39; Inflector …\n"],["unescape_interpolation","Haml::Util","Haml/Util.html#method-i-unescape_interpolation","(str, escape_html = nil)",""],["valid_formats","Haml::Options","Haml/Options.html#method-c-valid_formats","()","<p>An array of valid values for the `:format` option. @return Array\n"],["with_haml_buffer","Haml::Helpers","Haml/Helpers.html#method-i-with_haml_buffer","(buffer)","<p>Runs a block of code with the given buffer as the currently active buffer.\n<p>@param buffer [Haml::Buffer] …\n"],["with_output_buffer","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-with_output_buffer","(*args, &block)",""],["with_output_buffer_with_haml_xss","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-with_output_buffer_with_haml_xss","(*args, &block)",""],["with_output_buffer_without_haml_xss","ActionView::Helpers::CaptureHelper","ActionView/Helpers/CaptureHelper.html#method-i-with_output_buffer_without_haml_xss","(*args, &block)",""],["with_raw_haml_concat","Haml::Helpers::ActionViewExtensions","Haml/Helpers/ActionViewExtensions.html#method-i-with_raw_haml_concat","()","<p>Treats all input to {Haml::Helpers#haml_concat} within the block as being\nHTML safe for Rails&#39; XSS …\n"],["with_tabs","Haml::Helpers","Haml/Helpers.html#method-i-with_tabs","(i)","<p>Sets the number of tabs the buffer automatically adds to the lines of the\ntemplate, but only for the …\n"],["xhtml?","Haml::Buffer","Haml/Buffer.html#method-i-xhtml-3F","()","<p>@return [Boolean] Whether or not the format is XHTML\n"],["xhtml?","Haml::Options","Haml/Options.html#method-i-xhtml-3F","()","<p>@return [Boolean] Whether or not the format is XHTML.\n"]]}}