var search_data = {"index":{"searchIndex":["html2haml","exec","generic","html2haml","html","erb","nokogiri","xml","cdata","comment","dtd","document","documentfragment","element","node","nodeset","processinginstruction","object","add_expr_debug()","add_expr_escaped()","add_expr_literal()","add_postamble()","add_preamble()","add_stmt()","add_text()","attr_hash()","attribute_value_can_be_bare_ruby?()","block_closer?()","block_opener?()","color()","compile()","content_without_cdata_tokens()","decode_entities()","detect_proper_parser()","dynamic_attribute?()","dynamic_attributes()","erb_to_interpolation()","get_line()","h()","haml_attribute_pair()","haml_attributes()","haml_css_attr?()","handle_load_error()","has_code?()","mid_block?()","new()","new()","new()","open_file()","parse()","parse!()","parse_text()","parse_text_with_interpolation()","process_inline_nodes()","process_result()","process_result()","puts()","puts_action()","render()","render_children()","set_opts()","set_opts()","static_attribute?()","static_classname?()","static_id?()","tabulate()","to_haml()","to_haml()","to_haml()","to_haml()","to_haml()","to_haml()","to_haml()","to_haml()","to_haml()","to_haml()","to_haml_filter()","to_s()","uninterp()","valid_ruby?()"],"longSearchIndex":["html2haml","html2haml::exec","html2haml::exec::generic","html2haml::exec::html2haml","html2haml::html","html2haml::html::erb","nokogiri","nokogiri::xml","nokogiri::xml::cdata","nokogiri::xml::comment","nokogiri::xml::dtd","nokogiri::xml::document","nokogiri::xml::documentfragment","nokogiri::xml::element","nokogiri::xml::node","nokogiri::xml::nodeset","nokogiri::xml::processinginstruction","object","html2haml::html::erb#add_expr_debug()","html2haml::html::erb#add_expr_escaped()","html2haml::html::erb#add_expr_literal()","html2haml::html::erb#add_postamble()","html2haml::html::erb#add_preamble()","html2haml::html::erb#add_stmt()","html2haml::html::erb#add_text()","nokogiri::xml::node#attr_hash()","nokogiri::xml::element#attribute_value_can_be_bare_ruby?()","html2haml::html::erb#block_closer?()","html2haml::html::erb#block_opener?()","html2haml::exec::generic#color()","html2haml::html::erb::compile()","nokogiri::xml::cdata#content_without_cdata_tokens()","nokogiri::xml::element#decode_entities()","html2haml::html#detect_proper_parser()","nokogiri::xml::element#dynamic_attribute?()","nokogiri::xml::element#dynamic_attributes()","nokogiri::xml::node#erb_to_interpolation()","html2haml::exec::generic#get_line()","html2haml::html::erb#h()","nokogiri::xml::element#haml_attribute_pair()","nokogiri::xml::element#haml_attributes()","nokogiri::xml::element#haml_css_attr?()","html2haml::exec::generic#handle_load_error()","html2haml::html::erb#has_code?()","html2haml::html::erb#mid_block?()","html2haml::exec::generic::new()","html2haml::exec::html2haml::new()","html2haml::html::new()","html2haml::exec::generic#open_file()","html2haml::exec::generic#parse()","html2haml::exec::generic#parse!()","nokogiri::xml::node#parse_text()","nokogiri::xml::node#parse_text_with_interpolation()","nokogiri::xml::node#process_inline_nodes()","html2haml::exec::generic#process_result()","html2haml::exec::html2haml#process_result()","html2haml::exec::generic#puts()","html2haml::exec::generic#puts_action()","html2haml::html#render()","nokogiri::xml::element#render_children()","html2haml::exec::generic#set_opts()","html2haml::exec::html2haml#set_opts()","nokogiri::xml::element#static_attribute?()","nokogiri::xml::element#static_classname?()","nokogiri::xml::element#static_id?()","nokogiri::xml::node#tabulate()","html2haml::html#to_haml()","nokogiri::xml::cdata#to_haml()","nokogiri::xml::comment#to_haml()","nokogiri::xml::dtd#to_haml()","nokogiri::xml::document#to_haml()","nokogiri::xml::documentfragment#to_haml()","nokogiri::xml::element#to_haml()","nokogiri::xml::node#to_haml()","nokogiri::xml::nodeset#to_haml()","nokogiri::xml::processinginstruction#to_haml()","nokogiri::xml::element#to_haml_filter()","html2haml::exec::generic#to_s()","nokogiri::xml::node#uninterp()","html2haml::html::erb#valid_ruby?()"],"info":[["Html2haml","","Html2haml.html","","<p>HAML_TAGS.each do |t|\n\n<pre>Nokogiri::XML::ElementContent[t] = {}\nNokogiri::XML::ElementContent.keys.each do ...</pre>\n"],["Html2haml::Exec","","Html2haml/Exec.html","","<p>This module handles the Html2haml executable.\n"],["Html2haml::Exec::Generic","","Html2haml/Exec/Generic.html","","<p>An abstract class that encapsulates the executable code for the Html2haml\nexecutable. It&#39;s split …\n"],["Html2haml::Exec::HTML2Haml","","Html2haml/Exec/HTML2Haml.html","","<p>The `html2haml` executable.\n"],["Html2haml::HTML","","Html2haml/HTML.html","","<p>Converts HTML documents into Haml templates. Depends on\n[Nokogiri](nokogiri.org/) for HTML parsing.  …\n"],["Html2haml::HTML::ERB","","Html2haml/HTML/ERB.html","","<p>A class for converting ERB code into a format that&#39;s easier for the\n{Html2haml::HTML} Nokogiri-based …\n"],["Nokogiri","","Nokogiri.html","","<p>Haml monkeypatches various Nokogiri classes to add methods for conversion\nto Haml. @private\n"],["Nokogiri::XML","","Nokogiri/XML.html","",""],["Nokogiri::XML::CDATA","","Nokogiri/XML/CDATA.html","","<p>@see Nokogiri @private\n"],["Nokogiri::XML::Comment","","Nokogiri/XML/Comment.html","","<p>@see Nokogiri @private\n"],["Nokogiri::XML::DTD","","Nokogiri/XML/DTD.html","","<p>@see Nokogiri @private\n"],["Nokogiri::XML::Document","","Nokogiri/XML/Document.html","","<p>@see Nokogiri @private\n"],["Nokogiri::XML::DocumentFragment","","Nokogiri/XML/DocumentFragment.html","",""],["Nokogiri::XML::Element","","Nokogiri/XML/Element.html","","<p>@see Nokogiri @private\n"],["Nokogiri::XML::Node","","Nokogiri/XML/Node.html","","<p>@see Nokogiri\n"],["Nokogiri::XML::NodeSet","","Nokogiri/XML/NodeSet.html","",""],["Nokogiri::XML::ProcessingInstruction","","Nokogiri/XML/ProcessingInstruction.html","","<p>@see Nokogiri @private\n"],["Object","","Object.html","",""],["add_expr_debug","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-add_expr_debug","(src, code)","<p>`html2haml` doesn&#39;t support debugging expressions.\n"],["add_expr_escaped","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-add_expr_escaped","(src, code)",""],["add_expr_literal","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-add_expr_literal","(src, code)","<p>Concatenates a Ruby expression that&#39;s printed to the document onto the\nsource buffer. This uses the …\n"],["add_postamble","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-add_postamble","(src)","<p>The ERB-to-Hamlized-HTML conversion has no postamble.\n"],["add_preamble","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-add_preamble","(src)","<p>The ERB-to-Hamlized-HTML conversion has no preamble.\n"],["add_stmt","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-add_stmt","(src, code)","<p>Concatenates a silent Ruby statement onto the source buffer. This uses the\n`&lt;haml_silent&gt;` tag, …\n"],["add_text","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-add_text","(src, text)","<p>Concatenates the text onto the source buffer.\n<p>@param src [String] The source buffer @param text [String] …\n"],["attr_hash","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-attr_hash","()",""],["attribute_value_can_be_bare_ruby?","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-attribute_value_can_be_bare_ruby-3F","(value)",""],["block_closer?","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-block_closer-3F","(code)","<p>Checks if a string of Ruby code closes a block. This is always `end`\nfollowed optionally by some method …\n"],["block_opener?","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-block_opener-3F","(code)","<p>Checks if a string of Ruby code opens a block. This could either be\nsomething like `foo do |a|` or a …\n"],["color","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-color","(color, str)","<p>Wraps the given string in terminal escapes causing it to have the given\ncolor. If terminal esapes aren&#39;t …\n"],["compile","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-c-compile","(template)","<p>Compiles an ERB template into a HTML document containing `haml_*` tags.\n<p>@param template [String] The  …\n"],["content_without_cdata_tokens","Nokogiri::XML::CDATA","Nokogiri/XML/CDATA.html#method-i-content_without_cdata_tokens","()","<p>removes the start and stop markers for cdata\n"],["decode_entities","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-decode_entities","(str)","<p>TODO: this method is utterly awful, find a better way to decode HTML\nentities.\n"],["detect_proper_parser","Html2haml::HTML","Html2haml/HTML.html#method-i-detect_proper_parser","(template)",""],["dynamic_attribute?","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-dynamic_attribute-3F","(name, options)",""],["dynamic_attributes","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-dynamic_attributes","()",""],["erb_to_interpolation","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-erb_to_interpolation","(text, options)",""],["get_line","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-get_line","(exception)","<p>Finds the line of the source template on which an exception was raised.\n<p>@param exception [Exception]  …\n"],["h","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-h","(text)","<p>HTML-escaped some text (in practice, always Ruby code). A utility method.\n<p>@param text [String] The text …\n"],["haml_attribute_pair","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-haml_attribute_pair","(name, value, options)","<p>Returns the string representation of a single attribute key value pair\n"],["haml_attributes","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-haml_attributes","(options)","<p>Returns a string representation of an attributes hash that&#39;s prettier\nthan that produced by Hash#inspect …\n"],["haml_css_attr?","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-haml_css_attr-3F","(attr)",""],["handle_load_error","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-handle_load_error","(err)",""],["has_code?","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-has_code-3F","(code)","<p>Returns whether the code has any content This is used to test whether lines\nhave been removed by erubis, …\n"],["mid_block?","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-mid_block-3F","(code)","<p>Checks if a string of Ruby code comes in the middle of a block. This could\nbe a keyword like `else`, …\n"],["new","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] The command-line arguments\n"],["new","Html2haml::Exec::HTML2Haml","Html2haml/Exec/HTML2Haml.html#method-c-new","(args)","<p>@param args [Array&lt;String&gt;] The command-line arguments\n"],["new","Html2haml::HTML","Html2haml/HTML.html#method-c-new","(template, options = {})","<p>@param template [String, Nokogiri::Node] The HTML template to convert\n@option options :erb [Boolean] …\n"],["open_file","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-open_file","(filename, flag = 'r')",""],["parse","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-parse","()","<p>Parses the command-line arguments and runs the executable. This does not\nhandle exceptions or exit the …\n"],["parse!","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-parse-21","()","<p>Parses the command-line arguments and runs the executable. Calls\n`Kernel#exit` at the end, so it never …\n"],["parse_text","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parse_text","(text, tabs)",""],["parse_text_with_interpolation","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-parse_text_with_interpolation","(text, tabs)",""],["process_inline_nodes","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-process_inline_nodes","(node)",""],["process_result","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-process_result","()","<p>Processes the options set by the command-line arguments. In particular,\nsets `@options` and `@options …\n"],["process_result","Html2haml::Exec::HTML2Haml","Html2haml/Exec/HTML2Haml.html#method-i-process_result","()","<p>Processes the options set by the command-line arguments, and runs the HTML\ncompiler appropriately.\n"],["puts","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-puts","(*args)","<p>Same as `Kernel.puts`, but doesn&#39;t print anything if the `–quiet`\noption is set.\n<p>@param args [Array] …\n"],["puts_action","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-puts_action","(name, color, arg)","<p>Prints a status message about performing the given action, colored using\nthe given color (via terminal …\n"],["render","Html2haml::HTML","Html2haml/HTML.html#method-i-render","()","<p>Processes the document and returns the result as a string containing the\nHaml template.\n"],["render_children","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-render_children","(so_far, tabs, options)",""],["set_opts","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-set_opts","(opts)","<p>Tells optparse how to parse the arguments available for all executables.\n<p>This is meant to be overridden …\n"],["set_opts","Html2haml::Exec::HTML2Haml","Html2haml/Exec/HTML2Haml.html#method-i-set_opts","(opts)","<p>Tells optparse how to parse the arguments.\n<p>@param opts [OptionParser]\n"],["static_attribute?","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-static_attribute-3F","(name, options)",""],["static_classname?","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-static_classname-3F","(options)",""],["static_id?","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-static_id-3F","(options)",""],["tabulate","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-tabulate","(tabs)",""],["to_haml","Html2haml::HTML","Html2haml/HTML.html#method-i-to_haml","()",""],["to_haml","Nokogiri::XML::CDATA","Nokogiri/XML/CDATA.html#method-i-to_haml","(tabs, options)","<p>@see Html2haml::HTML::Node#to_haml\n"],["to_haml","Nokogiri::XML::Comment","Nokogiri/XML/Comment.html#method-i-to_haml","(tabs, options)","<p>@see Html2haml::HTML::Node#to_haml\n"],["to_haml","Nokogiri::XML::DTD","Nokogiri/XML/DTD.html#method-i-to_haml","(tabs, options)","<p>@see Html2haml::HTML::Node#to_haml\n"],["to_haml","Nokogiri::XML::Document","Nokogiri/XML/Document.html#method-i-to_haml","(tabs, options)","<p>@see Html2haml::HTML::Node#to_haml\n"],["to_haml","Nokogiri::XML::DocumentFragment","Nokogiri/XML/DocumentFragment.html#method-i-to_haml","(tabs, options)","<p>@see Html2haml::HTML::Node#to_haml\n"],["to_haml","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-to_haml","(tabs, options)","<p>@see Html2haml::HTML::Node#to_haml\n"],["to_haml","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-to_haml","(tabs, options)","<p>Returns the Haml representation of the given node.\n<p>@param tabs [Fixnum] The indentation level of the resulting …\n"],["to_haml","Nokogiri::XML::NodeSet","Nokogiri/XML/NodeSet.html#method-i-to_haml","(tabs, options)","<p>@see Html2haml::HTML::Node#to_haml\n"],["to_haml","Nokogiri::XML::ProcessingInstruction","Nokogiri/XML/ProcessingInstruction.html#method-i-to_haml","(tabs, options)","<p>@see Html2haml::HTML::Node#to_haml\n"],["to_haml_filter","Nokogiri::XML::Element","Nokogiri/XML/Element.html#method-i-to_haml_filter","(filter, tabs, options)",""],["to_s","Html2haml::Exec::Generic","Html2haml/Exec/Generic.html#method-i-to_s","()","<p>@return [String] A description of the executable\n"],["uninterp","Nokogiri::XML::Node","Nokogiri/XML/Node.html#method-i-uninterp","(text)",""],["valid_ruby?","Html2haml::HTML::ERB","Html2haml/HTML/ERB.html#method-i-valid_ruby-3F","(code)","<p>Returns whether the code is valid Ruby code on its own.\n<p>@param code [String] Ruby code to check @return …\n"]]}}