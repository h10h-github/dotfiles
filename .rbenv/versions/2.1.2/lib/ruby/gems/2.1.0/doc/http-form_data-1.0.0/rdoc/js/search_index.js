var search_data = {"index":{"searchIndex":["http","formdata","error","file","multipart","param","urlencoded","coerce()","content_length()","content_length()","content_type()","content_type()","create()","ensure_hash()","file?()","glue()","head()","multipart?()","new()","new()","new()","new()","size()","size()","tail()","to_s()","to_s()","to_s()","to_s()","with_io()"],"longSearchIndex":["http","http::formdata","http::formdata::error","http::formdata::file","http::formdata::multipart","http::formdata::multipart::param","http::formdata::urlencoded","http::formdata::multipart::param::coerce()","http::formdata::multipart#content_length()","http::formdata::urlencoded#content_length()","http::formdata::multipart#content_type()","http::formdata::urlencoded#content_type()","http::formdata::create()","http::formdata::ensure_hash()","http::formdata::multipart::param#file?()","http::formdata::multipart#glue()","http::formdata::multipart#head()","http::formdata::multipart?()","http::formdata::file::new()","http::formdata::multipart::new()","http::formdata::multipart::param::new()","http::formdata::urlencoded::new()","http::formdata::file#size()","http::formdata::multipart::param#size()","http::formdata::multipart#tail()","http::formdata::file#to_s()","http::formdata::multipart#to_s()","http::formdata::multipart::param#to_s()","http::formdata::urlencoded#to_s()","http::formdata::file#with_io()"],"info":[["HTTP","","HTTP.html","","<p>http.rb namespace. @see github.com/httprb/http.rb\n"],["HTTP::FormData","","HTTP/FormData.html","","<p>Utility-belt to build form data request bodies. Provides support for\n`application/x-www-form-urlencoded` …\n"],["HTTP::FormData::Error","","HTTP/FormData/Error.html","","<p>Generic FormData error.\n"],["HTTP::FormData::File","","HTTP/FormData/File.html","","<p>Represents file form param.\n<p>@example Usage with StringIO\n\n<pre>io = StringIO.new &quot;foo bar baz&quot;\nFormData::File.new ...</pre>\n"],["HTTP::FormData::Multipart","","HTTP/FormData/Multipart.html","","<p>`multipart/form-data` form data.\n"],["HTTP::FormData::Multipart::Param","","HTTP/FormData/Multipart/Param.html","","<p>Utility class to represent multi-part chunks\n"],["HTTP::FormData::Urlencoded","","HTTP/FormData/Urlencoded.html","","<p>`application/x-www-form-urlencoded` form data.\n"],["coerce","HTTP::FormData::Multipart::Param","HTTP/FormData/Multipart/Param.html#method-c-coerce","(data)","<p>Flattens given `data` Hash into an array of `Param`&#39;s. Nested array are\nunwinded. Behavior is similar …\n"],["content_length","HTTP::FormData::Multipart","HTTP/FormData/Multipart.html#method-i-content_length","()","<p>Returns form data content size to be used for HTTP request `Content-Length`\nheader.\n<p>@return [Fixnum]\n"],["content_length","HTTP::FormData::Urlencoded","HTTP/FormData/Urlencoded.html#method-i-content_length","()","<p>Returns form data content size to be used for HTTP request `Content-Length`\nheader.\n<p>@return [Fixnum]\n"],["content_type","HTTP::FormData::Multipart","HTTP/FormData/Multipart.html#method-i-content_type","()","<p>Returns MIME type to be used for HTTP request `Content-Type` header.\n<p>@return [String]\n"],["content_type","HTTP::FormData::Urlencoded","HTTP/FormData/Urlencoded.html#method-i-content_type","()","<p>Returns MIME type to be used for HTTP request `Content-Type` header.\n<p>@return [String]\n"],["create","HTTP::FormData","HTTP/FormData.html#method-c-create","(data)","<p>FormData factory. Automatically selects best type depending on given `data`\nHash.\n<p>@param [#to_h, Hash] …\n"],["ensure_hash","HTTP::FormData","HTTP/FormData.html#method-c-ensure_hash","(obj)","<p>Coerce `obj` to Hash.\n<p>@note Internal usage helper, to workaround lack of `#to_h` on Ruby &lt; 2.1\n@raise …\n"],["file?","HTTP::FormData::Multipart::Param","HTTP/FormData/Multipart/Param.html#method-i-file-3F","()","<p>Tells whenever value is a {FormData::File} or not.\n<p>@return [Boolean]\n"],["glue","HTTP::FormData::Multipart","HTTP/FormData/Multipart.html#method-i-glue","()","<p>@return [String]\n"],["head","HTTP::FormData::Multipart","HTTP/FormData/Multipart.html#method-i-head","()","<p>@return [String]\n"],["multipart?","HTTP::FormData","HTTP/FormData.html#method-c-multipart-3F","(data)","<p>Tells whenever data contains multipart data or not.\n<p>@param [Hash] data @return [Boolean]\n"],["new","HTTP::FormData::File","HTTP/FormData/File.html#method-c-new","(file_or_io, opts = {})","<p>@see DEFAULT_MIME @param [String, StringIO, File] file_or_io Filename or IO\ninstance. @param [#to_h] …\n"],["new","HTTP::FormData::Multipart","HTTP/FormData/Multipart.html#method-c-new","(data)","<p>@param [#to_h, Hash] data form data key-value Hash\n"],["new","HTTP::FormData::Multipart::Param","HTTP/FormData/Multipart/Param.html#method-c-new","(name, value)","<p>@param [#to_s] name @param [FormData::File, #to_s] value\n"],["new","HTTP::FormData::Urlencoded","HTTP/FormData/Urlencoded.html#method-c-new","(data)","<p>@param [#to_h, Hash] data form data key-value Hash\n"],["size","HTTP::FormData::File","HTTP/FormData/File.html#method-i-size","()","<p>Returns content size.\n<p>@return [Fixnum]\n"],["size","HTTP::FormData::Multipart::Param","HTTP/FormData/Multipart/Param.html#method-i-size","()","<p>Calculates size of a part (headers + body).\n<p>@return [Fixnum]\n"],["tail","HTTP::FormData::Multipart","HTTP/FormData/Multipart.html#method-i-tail","()","<p>@return [String]\n"],["to_s","HTTP::FormData::File","HTTP/FormData/File.html#method-i-to_s","()","<p>Returns content of a file of IO.\n<p>@return [String]\n"],["to_s","HTTP::FormData::Multipart","HTTP/FormData/Multipart.html#method-i-to_s","()","<p>Returns content to be used for HTTP request body.\n<p>@return [String]\n"],["to_s","HTTP::FormData::Multipart::Param","HTTP/FormData/Multipart/Param.html#method-i-to_s","()","<p>Returns body part with headers and data.\n<p>@example With {FormData::File} value\n\n<pre>Content-Disposition: form-data; ...</pre>\n"],["to_s","HTTP::FormData::Urlencoded","HTTP/FormData/Urlencoded.html#method-i-to_s","()","<p>Returns content to be used for HTTP request body.\n<p>@return [String]\n"],["with_io","HTTP::FormData::File","HTTP/FormData/File.html#method-i-with_io","()","<p>@yield [io] Gives IO instance to the block @return result of yielded block\n"]]}}