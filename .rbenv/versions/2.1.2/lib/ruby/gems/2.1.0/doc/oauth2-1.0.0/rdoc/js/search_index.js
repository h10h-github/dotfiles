var search_data = {"index":{"searchIndex":["oauth2","accesstoken","client","error","mactoken","response","strategy","assertion","authcode","base","clientcredentials","implicit","password","version","[]()","algorithm=()","assertion()","auth_code()","authorization()","authorize_params()","authorize_params()","authorize_url()","authorize_url()","authorize_url()","authorize_url()","authorize_url()","authorize_url()","body()","build_assertion()","build_request()","client_credentials()","client_params()","connection()","content_type()","delete()","expired?()","expires?()","from_access_token()","from_hash()","from_kvform()","get()","get_token()","get_token()","get_token()","get_token()","get_token()","get_token()","header()","headers()","headers()","headers()","implicit()","new()","new()","new()","new()","new()","new()","parsed()","parser()","password()","patch()","post()","put()","refresh!()","register_parser()","request()","request()","request()","signature()","site=()","status()","strict_encode64()","to_hash()","to_s()","token=()","token=()","token_url()"],"longSearchIndex":["oauth2","oauth2::accesstoken","oauth2::client","oauth2::error","oauth2::mactoken","oauth2::response","oauth2::strategy","oauth2::strategy::assertion","oauth2::strategy::authcode","oauth2::strategy::base","oauth2::strategy::clientcredentials","oauth2::strategy::implicit","oauth2::strategy::password","oauth2::version","oauth2::accesstoken#[]()","oauth2::mactoken#algorithm=()","oauth2::client#assertion()","oauth2::client#auth_code()","oauth2::strategy::clientcredentials#authorization()","oauth2::strategy::authcode#authorize_params()","oauth2::strategy::implicit#authorize_params()","oauth2::client#authorize_url()","oauth2::strategy::assertion#authorize_url()","oauth2::strategy::authcode#authorize_url()","oauth2::strategy::clientcredentials#authorize_url()","oauth2::strategy::implicit#authorize_url()","oauth2::strategy::password#authorize_url()","oauth2::response#body()","oauth2::strategy::assertion#build_assertion()","oauth2::strategy::assertion#build_request()","oauth2::client#client_credentials()","oauth2::strategy::base#client_params()","oauth2::client#connection()","oauth2::response#content_type()","oauth2::accesstoken#delete()","oauth2::accesstoken#expired?()","oauth2::accesstoken#expires?()","oauth2::mactoken::from_access_token()","oauth2::accesstoken::from_hash()","oauth2::accesstoken::from_kvform()","oauth2::accesstoken#get()","oauth2::client#get_token()","oauth2::strategy::assertion#get_token()","oauth2::strategy::authcode#get_token()","oauth2::strategy::clientcredentials#get_token()","oauth2::strategy::implicit#get_token()","oauth2::strategy::password#get_token()","oauth2::mactoken#header()","oauth2::accesstoken#headers()","oauth2::mactoken#headers()","oauth2::response#headers()","oauth2::client#implicit()","oauth2::accesstoken::new()","oauth2::client::new()","oauth2::error::new()","oauth2::mactoken::new()","oauth2::response::new()","oauth2::strategy::base::new()","oauth2::response#parsed()","oauth2::response#parser()","oauth2::client#password()","oauth2::accesstoken#patch()","oauth2::accesstoken#post()","oauth2::accesstoken#put()","oauth2::accesstoken#refresh!()","oauth2::response::register_parser()","oauth2::accesstoken#request()","oauth2::client#request()","oauth2::mactoken#request()","oauth2::mactoken#signature()","oauth2::client#site=()","oauth2::response#status()","oauth2::mactoken#strict_encode64()","oauth2::accesstoken#to_hash()","oauth2::version::to_s()","oauth2::accesstoken#token=()","oauth2::mactoken#token=()","oauth2::client#token_url()"],"info":[["OAuth2","","OAuth2.html","",""],["OAuth2::AccessToken","","OAuth2/AccessToken.html","",""],["OAuth2::Client","","OAuth2/Client.html","","<p>The OAuth2::Client class\n"],["OAuth2::Error","","OAuth2/Error.html","",""],["OAuth2::MACToken","","OAuth2/MACToken.html","",""],["OAuth2::Response","","OAuth2/Response.html","","<p>OAuth2::Response class\n"],["OAuth2::Strategy","","OAuth2/Strategy.html","",""],["OAuth2::Strategy::Assertion","","OAuth2/Strategy/Assertion.html","","<p>The Client Assertion Strategy\n<p>@see tools.ietf.org/html/draft-ietf-oauth-v2-10#section-4.1.3\n<p>Sample usage: …\n"],["OAuth2::Strategy::AuthCode","","OAuth2/Strategy/AuthCode.html","","<p>The Authorization Code Strategy\n<p>@see tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.1\n"],["OAuth2::Strategy::Base","","OAuth2/Strategy/Base.html","",""],["OAuth2::Strategy::ClientCredentials","","OAuth2/Strategy/ClientCredentials.html","","<p>The Client Credentials Strategy\n<p>@see tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.4\n"],["OAuth2::Strategy::Implicit","","OAuth2/Strategy/Implicit.html","","<p>The Implicit Strategy\n<p>@see tools.ietf.org/html/draft-ietf-oauth-v2-26#section-4.2\n"],["OAuth2::Strategy::Password","","OAuth2/Strategy/Password.html","","<p>The Resource Owner Password Credentials Authorization Strategy\n<p>@see tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.3 …\n"],["OAuth2::Version","","OAuth2/Version.html","",""],["[]","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-5B-5D","(key)","<p>Indexer to additional params present in token response\n<p>@param [String] key entry key to Hash\n"],["algorithm=","OAuth2::MACToken","OAuth2/MACToken.html#method-i-algorithm-3D","(alg)","<p>Set the HMAC algorithm\n<p>@param [String] alg the algorithm to use (one of &#39;hmac-sha-1&#39;,\n&#39;hmac-sha-256&#39;) …\n"],["assertion","OAuth2::Client","OAuth2/Client.html#method-i-assertion","()",""],["auth_code","OAuth2::Client","OAuth2/Client.html#method-i-auth_code","()","<p>The Authorization Code strategy\n<p>@see tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.1\n"],["authorization","OAuth2::Strategy::ClientCredentials","OAuth2/Strategy/ClientCredentials.html#method-i-authorization","(client_id, client_secret)","<p>Returns the Authorization header value for Basic Authentication\n<p>@param [String] The client ID @param [String] …\n"],["authorize_params","OAuth2::Strategy::AuthCode","OAuth2/Strategy/AuthCode.html#method-i-authorize_params","(params = {})","<p>The required query parameters for the authorize URL\n<p>@param [Hash] params additional query parameters\n"],["authorize_params","OAuth2::Strategy::Implicit","OAuth2/Strategy/Implicit.html#method-i-authorize_params","(params = {})","<p>The required query parameters for the authorize URL\n<p>@param [Hash] params additional query parameters\n"],["authorize_url","OAuth2::Client","OAuth2/Client.html#method-i-authorize_url","(params = nil)","<p>The authorize endpoint URL of the OAuth2 provider\n<p>@param [Hash] params additional query parameters\n"],["authorize_url","OAuth2::Strategy::Assertion","OAuth2/Strategy/Assertion.html#method-i-authorize_url","()","<p>Not used for this strategy\n<p>@raise [NotImplementedError]\n"],["authorize_url","OAuth2::Strategy::AuthCode","OAuth2/Strategy/AuthCode.html#method-i-authorize_url","(params = {})","<p>The authorization URL endpoint of the provider\n<p>@param [Hash] params additional query parameters for the …\n"],["authorize_url","OAuth2::Strategy::ClientCredentials","OAuth2/Strategy/ClientCredentials.html#method-i-authorize_url","()","<p>Not used for this strategy\n<p>@raise [NotImplementedError]\n"],["authorize_url","OAuth2::Strategy::Implicit","OAuth2/Strategy/Implicit.html#method-i-authorize_url","(params = {})","<p>The authorization URL endpoint of the provider\n<p>@param [Hash] params additional query parameters for the …\n"],["authorize_url","OAuth2::Strategy::Password","OAuth2/Strategy/Password.html#method-i-authorize_url","()","<p>Not used for this strategy\n<p>@raise [NotImplementedError]\n"],["body","OAuth2::Response","OAuth2/Response.html#method-i-body","()","<p>The HTTP response body\n"],["build_assertion","OAuth2::Strategy::Assertion","OAuth2/Strategy/Assertion.html#method-i-build_assertion","(params)",""],["build_request","OAuth2::Strategy::Assertion","OAuth2/Strategy/Assertion.html#method-i-build_request","(params)",""],["client_credentials","OAuth2::Client","OAuth2/Client.html#method-i-client_credentials","()","<p>The Client Credentials strategy\n<p>@see tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.4\n"],["client_params","OAuth2::Strategy::Base","OAuth2/Strategy/Base.html#method-i-client_params","()","<p>The OAuth client_id and client_secret\n<p>@return [Hash]\n"],["connection","OAuth2::Client","OAuth2/Client.html#method-i-connection","()","<p>The Faraday connection object\n"],["content_type","OAuth2::Response","OAuth2/Response.html#method-i-content_type","()","<p>Attempts to determine the content type of the response.\n"],["delete","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-delete","(path, opts = {}, &block)","<p>Make a DELETE request with the Access Token\n<p>@see AccessToken#request\n"],["expired?","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-expired-3F","()","<p>Whether or not the token is expired\n<p>@return [Boolean]\n"],["expires?","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-expires-3F","()","<p>Whether or not the token expires\n<p>@return [Boolean]\n"],["from_access_token","OAuth2::MACToken","OAuth2/MACToken.html#method-c-from_access_token","(token, secret, options = {})","<p>Generates a MACToken from an AccessToken and secret\n<p>@param [AccessToken] token the OAuth2::Token instance …\n"],["from_hash","OAuth2::AccessToken","OAuth2/AccessToken.html#method-c-from_hash","(client, hash)","<p>Initializes an AccessToken from a Hash\n<p>@param [Client] the OAuth2::Client instance @param [Hash] a hash …\n"],["from_kvform","OAuth2::AccessToken","OAuth2/AccessToken.html#method-c-from_kvform","(client, kvform)","<p>Initializes an AccessToken from a key/value\napplication/x-www-form-urlencoded string\n<p>@param [Client] client …\n"],["get","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-get","(path, opts = {}, &block)","<p>Make a GET request with the Access Token\n<p>@see AccessToken#request\n"],["get_token","OAuth2::Client","OAuth2/Client.html#method-i-get_token","(params, access_token_opts = {}, access_token_class = AccessToken)","<p>Initializes an AccessToken by making a request to the token endpoint\n<p>@param [Hash] params a Hash of params …\n"],["get_token","OAuth2::Strategy::Assertion","OAuth2/Strategy/Assertion.html#method-i-get_token","(params = {}, opts = {})","<p>Retrieve an access token given the specified client.\n<p>@param [Hash] params assertion params pass either …\n"],["get_token","OAuth2::Strategy::AuthCode","OAuth2/Strategy/AuthCode.html#method-i-get_token","(code, params = {}, opts = {})","<p>Retrieve an access token given the specified validation code.\n<p>@param [String] code The Authorization  …\n"],["get_token","OAuth2::Strategy::ClientCredentials","OAuth2/Strategy/ClientCredentials.html#method-i-get_token","(params = {}, opts = {})","<p>Retrieve an access token given the specified client.\n<p>@param [Hash] params additional params @param [Hash] …\n"],["get_token","OAuth2::Strategy::Implicit","OAuth2/Strategy/Implicit.html#method-i-get_token","(*)","<p>Not used for this strategy\n<p>@raise [NotImplementedError]\n"],["get_token","OAuth2::Strategy::Password","OAuth2/Strategy/Password.html#method-i-get_token","(username, password, params = {}, opts = {})","<p>Retrieve an access token given the specified End User username and\npassword.\n<p>@param [String] username …\n"],["header","OAuth2::MACToken","OAuth2/MACToken.html#method-i-header","(verb, url)","<p>Generate the MAC header\n<p>@param [Symbol] verb the HTTP request method @param [String] url the HTTP\nURL …\n"],["headers","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-headers","()","<p>Get the headers hash (includes Authorization token)\n"],["headers","OAuth2::MACToken","OAuth2/MACToken.html#method-i-headers","()","<p>Get the headers hash (always an empty hash)\n"],["headers","OAuth2::Response","OAuth2/Response.html#method-i-headers","()","<p>The HTTP response headers\n"],["implicit","OAuth2::Client","OAuth2/Client.html#method-i-implicit","()","<p>The Implicit strategy\n<p>@see tools.ietf.org/html/draft-ietf-oauth-v2-26#section-4.2\n"],["new","OAuth2::AccessToken","OAuth2/AccessToken.html#method-c-new","(client, token, opts = {})","<p>Initalize an AccessToken\n<p>@param [Client] client the OAuth2::Client instance @param [String] token\nthe …\n"],["new","OAuth2::Client","OAuth2/Client.html#method-c-new","(client_id, client_secret, options = {}, &block)","<p>Instantiate a new OAuth 2.0 client using the Client ID and Client Secret\nregistered to your application. …\n"],["new","OAuth2::Error","OAuth2/Error.html#method-c-new","(response)","<p>standard error values include: :invalid_request, :invalid_client,\n:invalid_token, :invalid_grant, :unsupported_grant_type, …\n"],["new","OAuth2::MACToken","OAuth2/MACToken.html#method-c-new","(client, token, secret, opts = {})","<p>Initalize a MACToken\n<p>@param [Client] client the OAuth2::Client instance @param [String] token\nthe Access …\n"],["new","OAuth2::Response","OAuth2/Response.html#method-c-new","(response, opts = {})","<p>Initializes a Response instance\n<p>@param [Faraday::Response] response The Faraday response instance @param …\n"],["new","OAuth2::Strategy::Base","OAuth2/Strategy/Base.html#method-c-new","(client)",""],["parsed","OAuth2::Response","OAuth2/Response.html#method-i-parsed","()","<p>The parsed response body.\n\n<pre>Will attempt to parse application/x-www-form-urlencoded and\napplication/json ...</pre>\n"],["parser","OAuth2::Response","OAuth2/Response.html#method-i-parser","()","<p>Determines the parser that will be used to supply the content of #parsed\n"],["password","OAuth2::Client","OAuth2/Client.html#method-i-password","()","<p>The Resource Owner Password Credentials strategy\n<p>@see tools.ietf.org/html/draft-ietf-oauth-v2-15#section-4.3 …\n"],["patch","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-patch","(path, opts = {}, &block)","<p>Make a PATCH request with the Access Token\n<p>@see AccessToken#request\n"],["post","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-post","(path, opts = {}, &block)","<p>Make a POST request with the Access Token\n<p>@see AccessToken#request\n"],["put","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-put","(path, opts = {}, &block)","<p>Make a PUT request with the Access Token\n<p>@see AccessToken#request\n"],["refresh!","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-refresh-21","(params = {})","<p>Refreshes the current Access Token\n<p>@return [AccessToken] a new AccessToken @note options should be carried …\n"],["register_parser","OAuth2::Response","OAuth2/Response.html#method-c-register_parser","(key, mime_types, &block)","<p>Adds a new content type parser.\n<p>@param [Symbol] key A descriptive symbol key such as :json or :query. …\n"],["request","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-request","(verb, path, opts = {}, &block)","<p>Make a request with the Access Token\n<p>@param [Symbol] verb the HTTP request method @param [String] path …\n"],["request","OAuth2::Client","OAuth2/Client.html#method-i-request","(verb, url, opts = {})","<p>Makes a request relative to the specified site root.\n<p>@param [Symbol] verb one of :get, :post, :put, :delete …\n"],["request","OAuth2::MACToken","OAuth2/MACToken.html#method-i-request","(verb, path, opts = {}, &block)","<p>Make a request with the MAC Token\n<p>@param [Symbol] verb the HTTP request method @param [String] path the …\n"],["signature","OAuth2::MACToken","OAuth2/MACToken.html#method-i-signature","(timestamp, nonce, verb, uri)","<p>Generate the Base64-encoded HMAC digest signature\n<p>@param [Fixnum] timestamp the timestamp of the request …\n"],["site=","OAuth2::Client","OAuth2/Client.html#method-i-site-3D","(value)","<p>Set the site host\n<p>@param [String] the OAuth2 provider site host\n"],["status","OAuth2::Response","OAuth2/Response.html#method-i-status","()","<p>The HTTP response status code\n"],["strict_encode64","OAuth2::MACToken","OAuth2/MACToken.html#method-i-strict_encode64","(str)","<p>Base64.strict_encode64 is not available on Ruby 1.8.7\n"],["to_hash","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-to_hash","()","<p>Convert AccessToken to a hash which can be used to rebuild itself with\nAccessToken.from_hash\n<p>@return [Hash] …\n"],["to_s","OAuth2::Version","OAuth2/Version.html#method-c-to_s","()","<p>@return [String]\n"],["token=","OAuth2::AccessToken","OAuth2/AccessToken.html#method-i-token-3D","(opts)",""],["token=","OAuth2::MACToken","OAuth2/MACToken.html#method-i-token-3D","(_)","<p>No-op since we need the verb and path and the MAC always goes in a header\n"],["token_url","OAuth2::Client","OAuth2/Client.html#method-i-token_url","(params = nil)","<p>The token endpoint URL of the OAuth2 provider\n<p>@param [Hash] params additional query parameters\n"]]}}