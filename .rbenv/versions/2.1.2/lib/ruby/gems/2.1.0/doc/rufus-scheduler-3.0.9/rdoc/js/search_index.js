var search_data = {"index":{"searchIndex":["rufus","scheduler","atjob","cronjob","cronline","d","error","evinjob","everyjob","filelock","injob","intervaljob","job","killsignal","jobarray","notrunningerror","nulllock","onetimejob","repeatjob","timeouterror","[]()","[]()","[]=()","array()","at()","at_jobs()","brute_frequency()","brute_frequency()","call()","callback()","compute_timeout()","confirm_lock()","cron()","cron_jobs()","date_match?()","delete_unscheduled()","determine_id()","determine_id()","do_call()","do_schedule()","do_trigger()","do_trigger_in_thread()","down?()","each()","every()","every_jobs()","fetch()","first_at=()","first_at=()","frequency()","frequency()","global_time()","h_to_s()","h_to_s()","in()","in_jobs()","interval()","interval_jobs()","job()","jobs()","join()","join_all_work_threads()","key?()","keys()","kill()","kill_all_work_threads()","last_at=()","local_time()","lock()","lock()","lock()","locked?()","locked?()","matches?()","monthday_match?()","mutex()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_time()","next_time_from()","next_time_from()","next_time_from()","occurrences()","occurrences()","occurrences()","on_error()","parse()","parse_at()","parse_cron()","parse_duration()","parse_duration_string()","parse_in()","parse_item()","parse_range()","parse_time_string()","parse_to_time()","parse_weekdays()","pause()","pause()","paused?()","paused?()","post_trigger()","previous_time()","push()","repeat()","resume()","resume()","round_to_seconds()","running?()","running_jobs()","s()","schedule()","schedule_at()","schedule_cron()","schedule_every()","schedule_in()","schedule_interval()","scheduled?()","scheduled?()","set_next_time()","set_next_time()","set_next_time()","set_next_time()","shutdown()","singleton()","size()","start()","start_new()","start_work_thread()","stop()","sub_match?()","terminate_all_jobs()","threads()","threads()","timeline()","timeout_jobs()","to_a()","to_array()","to_duration()","to_duration_hash()","to_duration_string()","to_time_string()","trigger()","trigger()","trigger_jobs()","unlock()","unlock()","unlock()","unschedule()","unschedule()","unschedule_jobs()","up?()","uptime()","uptime_s()","utc_to_s()","work_threads()"],"longSearchIndex":["rufus","rufus::scheduler","rufus::scheduler::atjob","rufus::scheduler::cronjob","rufus::scheduler::cronline","rufus::scheduler::d","rufus::scheduler::error","rufus::scheduler::evinjob","rufus::scheduler::everyjob","rufus::scheduler::filelock","rufus::scheduler::injob","rufus::scheduler::intervaljob","rufus::scheduler::job","rufus::scheduler::job::killsignal","rufus::scheduler::jobarray","rufus::scheduler::notrunningerror","rufus::scheduler::nulllock","rufus::scheduler::onetimejob","rufus::scheduler::repeatjob","rufus::scheduler::timeouterror","rufus::scheduler::job#[]()","rufus::scheduler::jobarray#[]()","rufus::scheduler::job#[]=()","rufus::scheduler::jobarray#array()","rufus::scheduler#at()","rufus::scheduler#at_jobs()","rufus::scheduler::cronjob#brute_frequency()","rufus::scheduler::cronline#brute_frequency()","rufus::scheduler::job#call()","rufus::scheduler::job#callback()","rufus::scheduler::job#compute_timeout()","rufus::scheduler#confirm_lock()","rufus::scheduler#cron()","rufus::scheduler#cron_jobs()","rufus::scheduler::cronline#date_match?()","rufus::scheduler::jobarray#delete_unscheduled()","rufus::scheduler::onetimejob#determine_id()","rufus::scheduler::repeatjob#determine_id()","rufus::scheduler::job#do_call()","rufus::scheduler#do_schedule()","rufus::scheduler::job#do_trigger()","rufus::scheduler::job#do_trigger_in_thread()","rufus::scheduler#down?()","rufus::scheduler::jobarray#each()","rufus::scheduler#every()","rufus::scheduler#every_jobs()","rufus::scheduler#fetch()","rufus::scheduler::evinjob#first_at=()","rufus::scheduler::repeatjob#first_at=()","rufus::scheduler::cronjob#frequency()","rufus::scheduler::cronline#frequency()","rufus::scheduler::cronline#global_time()","rufus::scheduler::h_to_s()","rufus::scheduler::d::h_to_s()","rufus::scheduler#in()","rufus::scheduler#in_jobs()","rufus::scheduler#interval()","rufus::scheduler#interval_jobs()","rufus::scheduler#job()","rufus::scheduler#jobs()","rufus::scheduler#join()","rufus::scheduler#join_all_work_threads()","rufus::scheduler::job#key?()","rufus::scheduler::job#keys()","rufus::scheduler::job#kill()","rufus::scheduler#kill_all_work_threads()","rufus::scheduler::repeatjob#last_at=()","rufus::scheduler::cronline#local_time()","rufus::scheduler#lock()","rufus::scheduler::filelock#lock()","rufus::scheduler::nulllock#lock()","rufus::scheduler::filelock#locked?()","rufus::scheduler::nulllock#locked?()","rufus::scheduler::cronline#matches?()","rufus::scheduler::cronline#monthday_match?()","rufus::scheduler::job#mutex()","rufus::scheduler::new()","rufus::scheduler::atjob::new()","rufus::scheduler::cronjob::new()","rufus::scheduler::cronline::new()","rufus::scheduler::everyjob::new()","rufus::scheduler::filelock::new()","rufus::scheduler::injob::new()","rufus::scheduler::intervaljob::new()","rufus::scheduler::job::new()","rufus::scheduler::jobarray::new()","rufus::scheduler::repeatjob::new()","rufus::scheduler::cronline#next_time()","rufus::scheduler::cronjob#next_time_from()","rufus::scheduler::everyjob#next_time_from()","rufus::scheduler::intervaljob#next_time_from()","rufus::scheduler#occurrences()","rufus::scheduler::onetimejob#occurrences()","rufus::scheduler::repeatjob#occurrences()","rufus::scheduler#on_error()","rufus::scheduler::parse()","rufus::scheduler::parse_at()","rufus::scheduler::parse_cron()","rufus::scheduler::parse_duration()","rufus::scheduler::parse_duration_string()","rufus::scheduler::parse_in()","rufus::scheduler::cronline#parse_item()","rufus::scheduler::cronline#parse_range()","rufus::scheduler::parse_time_string()","rufus::scheduler::parse_to_time()","rufus::scheduler::cronline#parse_weekdays()","rufus::scheduler#pause()","rufus::scheduler::repeatjob#pause()","rufus::scheduler#paused?()","rufus::scheduler::repeatjob#paused?()","rufus::scheduler::job#post_trigger()","rufus::scheduler::cronline#previous_time()","rufus::scheduler::jobarray#push()","rufus::scheduler#repeat()","rufus::scheduler#resume()","rufus::scheduler::repeatjob#resume()","rufus::scheduler::cronline#round_to_seconds()","rufus::scheduler::job#running?()","rufus::scheduler#running_jobs()","rufus::scheduler::s()","rufus::scheduler#schedule()","rufus::scheduler#schedule_at()","rufus::scheduler#schedule_cron()","rufus::scheduler#schedule_every()","rufus::scheduler#schedule_in()","rufus::scheduler#schedule_interval()","rufus::scheduler#scheduled?()","rufus::scheduler::job#scheduled?()","rufus::scheduler::cronjob#set_next_time()","rufus::scheduler::everyjob#set_next_time()","rufus::scheduler::intervaljob#set_next_time()","rufus::scheduler::onetimejob#set_next_time()","rufus::scheduler#shutdown()","rufus::scheduler::singleton()","rufus::scheduler::jobarray#size()","rufus::scheduler#start()","rufus::scheduler::start_new()","rufus::scheduler::job#start_work_thread()","rufus::scheduler#stop()","rufus::scheduler::cronline#sub_match?()","rufus::scheduler#terminate_all_jobs()","rufus::scheduler#threads()","rufus::scheduler::job#threads()","rufus::scheduler#timeline()","rufus::scheduler#timeout_jobs()","rufus::scheduler::jobarray#to_a()","rufus::scheduler::cronline#to_array()","rufus::scheduler::to_duration()","rufus::scheduler::to_duration_hash()","rufus::scheduler::to_duration_string()","rufus::scheduler::to_time_string()","rufus::scheduler::job#trigger()","rufus::scheduler::repeatjob#trigger()","rufus::scheduler#trigger_jobs()","rufus::scheduler#unlock()","rufus::scheduler::filelock#unlock()","rufus::scheduler::nulllock#unlock()","rufus::scheduler#unschedule()","rufus::scheduler::job#unschedule()","rufus::scheduler#unschedule_jobs()","rufus::scheduler#up?()","rufus::scheduler#uptime()","rufus::scheduler#uptime_s()","rufus::scheduler::utc_to_s()","rufus::scheduler#work_threads()"],"info":[["Rufus","","Rufus.html","",""],["Rufus::Scheduler","","Rufus/Scheduler.html","",""],["Rufus::Scheduler::AtJob","","Rufus/Scheduler/AtJob.html","",""],["Rufus::Scheduler::CronJob","","Rufus/Scheduler/CronJob.html","",""],["Rufus::Scheduler::CronLine","","Rufus/Scheduler/CronLine.html","","<p>A &#39;cron line&#39; is a line in the sense of a crontab (man 5 crontab)\nfile line.\n"],["Rufus::Scheduler::D","","Rufus/Scheduler/D.html","","<p>Debugging tools…\n"],["Rufus::Scheduler::Error","","Rufus/Scheduler/Error.html","","<p>A common error class for rufus-scheduler\n"],["Rufus::Scheduler::EvInJob","","Rufus/Scheduler/EvInJob.html","","<p>A parent class of EveryJob and IntervalJob\n"],["Rufus::Scheduler::EveryJob","","Rufus/Scheduler/EveryJob.html","",""],["Rufus::Scheduler::FileLock","","Rufus/Scheduler/FileLock.html","","<p>The standard flock mecha, with its own class thanks to @ecin\n"],["Rufus::Scheduler::InJob","","Rufus/Scheduler/InJob.html","",""],["Rufus::Scheduler::IntervalJob","","Rufus/Scheduler/IntervalJob.html","",""],["Rufus::Scheduler::Job","","Rufus/Scheduler/Job.html","",""],["Rufus::Scheduler::Job::KillSignal","","Rufus/Scheduler/Job/KillSignal.html","","<p>Used by Job#kill\n"],["Rufus::Scheduler::JobArray","","Rufus/Scheduler/JobArray.html","","<p>The array rufus-scheduler uses to keep jobs in order (next to trigger\nfirst).\n"],["Rufus::Scheduler::NotRunningError","","Rufus/Scheduler/NotRunningError.html","","<p>For when the scheduler is not running (it got shut down or didn&#39;t start\nbecause of a lock)\n"],["Rufus::Scheduler::NullLock","","Rufus/Scheduler/NullLock.html","","<p>A lock that can always be acquired\n"],["Rufus::Scheduler::OneTimeJob","","Rufus/Scheduler/OneTimeJob.html","",""],["Rufus::Scheduler::RepeatJob","","Rufus/Scheduler/RepeatJob.html","",""],["Rufus::Scheduler::TimeoutError","","Rufus/Scheduler/TimeoutError.html","","<p>This error is thrown when the :timeout attribute triggers\n"],["[]","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-5B-5D","(key)",""],["[]","Rufus::Scheduler::JobArray","Rufus/Scheduler/JobArray.html#method-i-5B-5D","(job_id)",""],["[]=","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-5B-5D-3D","(key, value)",""],["array","Rufus::Scheduler::JobArray","Rufus/Scheduler/JobArray.html#method-i-array","()","<p>Only used when shutting down, directly yields the underlying array.\n"],["at","Rufus::Scheduler","Rufus/Scheduler.html#method-i-at","(time, callable=nil, opts={}, &block)",""],["at_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-at_jobs","(opts={})",""],["brute_frequency","Rufus::Scheduler::CronJob","Rufus/Scheduler/CronJob.html#method-i-brute_frequency","()",""],["brute_frequency","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-brute_frequency","()","<p>Returns the shortest delta between two potential occurences of the schedule\ndescribed by this cronline. …\n"],["call","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-call","(do_rescue=false)","<p>Calls the callable (usually a block) wrapped in this Job instance.\n<p>Warning: error rescueing is the responsibity …\n"],["callback","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-callback","(meth, time)",""],["compute_timeout","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-compute_timeout","()",""],["confirm_lock","Rufus::Scheduler","Rufus/Scheduler.html#method-i-confirm_lock","()","<p>Callback called when a job is triggered. If the lock cannot be acquired,\nthe job won&#39;t run (though …\n"],["cron","Rufus::Scheduler","Rufus/Scheduler.html#method-i-cron","(cronline, callable=nil, opts={}, &block)",""],["cron_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-cron_jobs","(opts={})",""],["date_match?","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-date_match-3F","(date)",""],["delete_unscheduled","Rufus::Scheduler::JobArray","Rufus/Scheduler/JobArray.html#method-i-delete_unscheduled","()",""],["determine_id","Rufus::Scheduler::OneTimeJob","Rufus/Scheduler/OneTimeJob.html#method-i-determine_id","()",""],["determine_id","Rufus::Scheduler::RepeatJob","Rufus/Scheduler/RepeatJob.html#method-i-determine_id","()",""],["do_call","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-do_call","(time, do_rescue)",""],["do_schedule","Rufus::Scheduler","Rufus/Scheduler.html#method-i-do_schedule","(job_type, t, callable, opts, return_job_instance, block)",""],["do_trigger","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-do_trigger","(time)",""],["do_trigger_in_thread","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-do_trigger_in_thread","(time)",""],["down?","Rufus::Scheduler","Rufus/Scheduler.html#method-i-down-3F","()",""],["each","Rufus::Scheduler::JobArray","Rufus/Scheduler/JobArray.html#method-i-each","(now, &block)",""],["every","Rufus::Scheduler","Rufus/Scheduler.html#method-i-every","(duration, callable=nil, opts={}, &block)",""],["every_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-every_jobs","(opts={})",""],["fetch","Rufus::Scheduler","Rufus/Scheduler.html#method-i-fetch","(job_or_job_id)","<p>Returns [ job, job_id ]\n"],["first_at=","Rufus::Scheduler::EvInJob","Rufus/Scheduler/EvInJob.html#method-i-first_at-3D","(first)",""],["first_at=","Rufus::Scheduler::RepeatJob","Rufus/Scheduler/RepeatJob.html#method-i-first_at-3D","(first)",""],["frequency","Rufus::Scheduler::CronJob","Rufus/Scheduler/CronJob.html#method-i-frequency","()",""],["frequency","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-frequency","()","<p>Returns a quickly computed approximation of the frequency for this cron\nline.\n<p>#brute_frequency, on the …\n"],["global_time","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-global_time","(time, from_in_utc)",""],["h_to_s","Rufus::Scheduler","Rufus/Scheduler.html#method-c-h_to_s","(t=Time.now)","<p>Produces a hour/min/sec/milli string representation of Time instance\n"],["h_to_s","Rufus::Scheduler::D","Rufus/Scheduler/D.html#method-c-h_to_s","(t=Time.now)",""],["in","Rufus::Scheduler","Rufus/Scheduler.html#method-i-in","(duration, callable=nil, opts={}, &block)",""],["in_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-in_jobs","(opts={})",""],["interval","Rufus::Scheduler","Rufus/Scheduler.html#method-i-interval","(duration, callable=nil, opts={}, &block)",""],["interval_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-interval_jobs","(opts={})",""],["job","Rufus::Scheduler","Rufus/Scheduler.html#method-i-job","(job_id)",""],["jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-jobs","(opts={})","<p>Returns all the scheduled jobs (even those right before re-schedule).\n"],["join","Rufus::Scheduler","Rufus/Scheduler.html#method-i-join","()",""],["join_all_work_threads","Rufus::Scheduler","Rufus/Scheduler.html#method-i-join_all_work_threads","()",""],["key?","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-key-3F","(key)",""],["keys","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-keys","()",""],["kill","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-kill","()","<p>Kills all the threads this Job currently has going on.\n"],["kill_all_work_threads","Rufus::Scheduler","Rufus/Scheduler.html#method-i-kill_all_work_threads","()",""],["last_at=","Rufus::Scheduler::RepeatJob","Rufus/Scheduler/RepeatJob.html#method-i-last_at-3D","(last)",""],["local_time","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-local_time","(time)",""],["lock","Rufus::Scheduler","Rufus/Scheduler.html#method-i-lock","()","<p>Returns true if the scheduler has acquired the [exclusive] lock and thus\nmay run.\n<p>Most of the time, a …\n"],["lock","Rufus::Scheduler::FileLock","Rufus/Scheduler/FileLock.html#method-i-lock","()","<p>Locking is successful if this Ruby process can create and lock its lockfile\n(at the given path).\n"],["lock","Rufus::Scheduler::NullLock","Rufus/Scheduler/NullLock.html#method-i-lock","()","<p>Locking is always successful.\n"],["locked?","Rufus::Scheduler::FileLock","Rufus/Scheduler/FileLock.html#method-i-locked-3F","()",""],["locked?","Rufus::Scheduler::NullLock","Rufus/Scheduler/NullLock.html#method-i-locked-3F","()",""],["matches?","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-matches-3F","(time)","<p>Returns true if the given time matches this cron line.\n"],["monthday_match?","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-monthday_match-3F","(date, values)",""],["mutex","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-mutex","(m)",""],["new","Rufus::Scheduler","Rufus/Scheduler.html#method-c-new","(opts={})",""],["new","Rufus::Scheduler::AtJob","Rufus/Scheduler/AtJob.html#method-c-new","(scheduler, time, opts, block)",""],["new","Rufus::Scheduler::CronJob","Rufus/Scheduler/CronJob.html#method-c-new","(scheduler, cronline, opts, block)",""],["new","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-c-new","(line)",""],["new","Rufus::Scheduler::EveryJob","Rufus/Scheduler/EveryJob.html#method-c-new","(scheduler, duration, opts, block)",""],["new","Rufus::Scheduler::FileLock","Rufus/Scheduler/FileLock.html#method-c-new","(path)",""],["new","Rufus::Scheduler::InJob","Rufus/Scheduler/InJob.html#method-c-new","(scheduler, duration, opts, block)",""],["new","Rufus::Scheduler::IntervalJob","Rufus/Scheduler/IntervalJob.html#method-c-new","(scheduler, interval, opts, block)",""],["new","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-c-new","(scheduler, original, opts, block)",""],["new","Rufus::Scheduler::JobArray","Rufus/Scheduler/JobArray.html#method-c-new","()",""],["new","Rufus::Scheduler::RepeatJob","Rufus/Scheduler/RepeatJob.html#method-c-new","(scheduler, duration, opts, block)",""],["next_time","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-next_time","(from=Time.now)","<p>Returns the next time that this cron line is supposed to &#39;fire&#39;\n<p>This is raw, 3 secs to iterate …\n"],["next_time_from","Rufus::Scheduler::CronJob","Rufus/Scheduler/CronJob.html#method-i-next_time_from","(time)",""],["next_time_from","Rufus::Scheduler::EveryJob","Rufus/Scheduler/EveryJob.html#method-i-next_time_from","(time)",""],["next_time_from","Rufus::Scheduler::IntervalJob","Rufus/Scheduler/IntervalJob.html#method-i-next_time_from","(time)",""],["occurrences","Rufus::Scheduler","Rufus/Scheduler.html#method-i-occurrences","(time0, time1, format=:per_job)",""],["occurrences","Rufus::Scheduler::OneTimeJob","Rufus/Scheduler/OneTimeJob.html#method-i-occurrences","(time0, time1)",""],["occurrences","Rufus::Scheduler::RepeatJob","Rufus/Scheduler/RepeatJob.html#method-i-occurrences","(time0, time1)",""],["on_error","Rufus::Scheduler","Rufus/Scheduler.html#method-i-on_error","(job, err)",""],["parse","Rufus::Scheduler","Rufus/Scheduler.html#method-c-parse","(o, opts={})",""],["parse_at","Rufus::Scheduler","Rufus/Scheduler.html#method-c-parse_at","(o, opts={})",""],["parse_cron","Rufus::Scheduler","Rufus/Scheduler.html#method-c-parse_cron","(o, opts)",""],["parse_duration","Rufus::Scheduler","Rufus/Scheduler.html#method-c-parse_duration","(string, opts={})","<p>Turns a string like &#39;1m10s&#39; into a float like &#39;70.0&#39;, more\nformally, turns a time duration …\n"],["parse_duration_string","Rufus::Scheduler","Rufus/Scheduler.html#method-c-parse_duration_string","(string, opts={})","<p>-\n\n<pre>for compatibility with rufus-scheduler 2.x</pre>\n<p>+\n"],["parse_in","Rufus::Scheduler","Rufus/Scheduler.html#method-c-parse_in","(o, opts={})",""],["parse_item","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-parse_item","(item, min, max)",""],["parse_range","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-parse_range","(item, min, max)",""],["parse_time_string","Rufus::Scheduler","Rufus/Scheduler.html#method-c-parse_time_string","(string, opts={})",""],["parse_to_time","Rufus::Scheduler","Rufus/Scheduler.html#method-c-parse_to_time","(o)",""],["parse_weekdays","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-parse_weekdays","(item)",""],["pause","Rufus::Scheduler","Rufus/Scheduler.html#method-i-pause","()",""],["pause","Rufus::Scheduler::RepeatJob","Rufus/Scheduler/RepeatJob.html#method-i-pause","()",""],["paused?","Rufus::Scheduler","Rufus/Scheduler.html#method-i-paused-3F","()",""],["paused?","Rufus::Scheduler::RepeatJob","Rufus/Scheduler/RepeatJob.html#method-i-paused-3F","()",""],["post_trigger","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-post_trigger","(time)",""],["previous_time","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-previous_time","(from=Time.now)","<p>Returns the previous time the cronline matched. It&#39;s like next_time,\nbut for the past.\n"],["push","Rufus::Scheduler::JobArray","Rufus/Scheduler/JobArray.html#method-i-push","(job)",""],["repeat","Rufus::Scheduler","Rufus/Scheduler.html#method-i-repeat","(arg, callable=nil, opts={}, &block)",""],["resume","Rufus::Scheduler","Rufus/Scheduler.html#method-i-resume","()",""],["resume","Rufus::Scheduler::RepeatJob","Rufus/Scheduler/RepeatJob.html#method-i-resume","()",""],["round_to_seconds","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-round_to_seconds","(time)",""],["running?","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-running-3F","()",""],["running_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-running_jobs","(opts={})",""],["s","Rufus::Scheduler","Rufus/Scheduler.html#method-c-s","(opts={})","<p>Alias for Rufus::Scheduler.singleton\n"],["schedule","Rufus::Scheduler","Rufus/Scheduler.html#method-i-schedule","(arg, callable=nil, opts={}, &block)",""],["schedule_at","Rufus::Scheduler","Rufus/Scheduler.html#method-i-schedule_at","(time, callable=nil, opts={}, &block)",""],["schedule_cron","Rufus::Scheduler","Rufus/Scheduler.html#method-i-schedule_cron","(cronline, callable=nil, opts={}, &block)",""],["schedule_every","Rufus::Scheduler","Rufus/Scheduler.html#method-i-schedule_every","(duration, callable=nil, opts={}, &block)",""],["schedule_in","Rufus::Scheduler","Rufus/Scheduler.html#method-i-schedule_in","(duration, callable=nil, opts={}, &block)",""],["schedule_interval","Rufus::Scheduler","Rufus/Scheduler.html#method-i-schedule_interval","(duration, callable=nil, opts={}, &block)",""],["scheduled?","Rufus::Scheduler","Rufus/Scheduler.html#method-i-scheduled-3F","(job_or_job_id)","<p>Returns true if this job is currently scheduled.\n<p>Takes extra care to answer true if the job is a repeat …\n"],["scheduled?","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-scheduled-3F","()",""],["set_next_time","Rufus::Scheduler::CronJob","Rufus/Scheduler/CronJob.html#method-i-set_next_time","(trigger_time, is_post=false)",""],["set_next_time","Rufus::Scheduler::EveryJob","Rufus/Scheduler/EveryJob.html#method-i-set_next_time","(trigger_time, is_post=false)",""],["set_next_time","Rufus::Scheduler::IntervalJob","Rufus/Scheduler/IntervalJob.html#method-i-set_next_time","(trigger_time, is_post=false)",""],["set_next_time","Rufus::Scheduler::OneTimeJob","Rufus/Scheduler/OneTimeJob.html#method-i-set_next_time","(trigger_time, is_post=false)","<p>There is no next_time for one time jobs, hence the false.\n"],["shutdown","Rufus::Scheduler","Rufus/Scheduler.html#method-i-shutdown","(opt=nil)",""],["singleton","Rufus::Scheduler","Rufus/Scheduler.html#method-c-singleton","(opts={})","<p>Returns a singleton Rufus::Scheduler instance\n"],["size","Rufus::Scheduler::JobArray","Rufus/Scheduler/JobArray.html#method-i-size","()",""],["start","Rufus::Scheduler","Rufus/Scheduler.html#method-i-start","()","<p>def free_all_work_threads\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">work_threads</span>.<span class=\"ruby-identifier\">each</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">t</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">t</span>.<span class=\"ruby-identifier\">raise</span>(<span class=\"ruby-constant\">KillSignal</span>) }\n</pre>\n<p>end\n"],["start_new","Rufus::Scheduler","Rufus/Scheduler.html#method-c-start_new","()","<p>Releasing the gem would probably require redirecting .start_new to .new and\nemit a simple deprecation …\n"],["start_work_thread","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-start_work_thread","()",""],["stop","Rufus::Scheduler","Rufus/Scheduler.html#method-i-stop","(opt=nil)",""],["sub_match?","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-sub_match-3F","(time, accessor, values)",""],["terminate_all_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-terminate_all_jobs","()",""],["threads","Rufus::Scheduler","Rufus/Scheduler.html#method-i-threads","()","<p>Lists all the threads associated with this scheduler.\n"],["threads","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-threads","()",""],["timeline","Rufus::Scheduler","Rufus/Scheduler.html#method-i-timeline","(time0, time1)",""],["timeout_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-timeout_jobs","()",""],["to_a","Rufus::Scheduler::JobArray","Rufus/Scheduler/JobArray.html#method-i-to_a","()",""],["to_array","Rufus::Scheduler::CronLine","Rufus/Scheduler/CronLine.html#method-i-to_array","()","<p>Returns an array of 6 arrays (seconds, minutes, hours, days, months,\nweekdays). This method is used by …\n"],["to_duration","Rufus::Scheduler","Rufus/Scheduler.html#method-c-to_duration","(seconds, options={})","<p>Turns a number of seconds into a a time string\n\n<pre>Rufus.to_duration 0                    # =&gt; &#39;0s&#39;\nRufus.to_duration ...</pre>\n"],["to_duration_hash","Rufus::Scheduler","Rufus/Scheduler.html#method-c-to_duration_hash","(seconds, options={})","<p>Turns a number of seconds (integer or Float) into a hash like in :\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Rufus</span>.<span class=\"ruby-identifier\">to_duration_hash</span> <span class=\"ruby-value\">0.051</span>\n  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_duration_string","Rufus::Scheduler","Rufus/Scheduler.html#method-c-to_duration_string","(seconds, options={})","<p>-\n\n<pre>for compatibility with rufus-scheduler 2.x</pre>\n<p>+\n"],["to_time_string","Rufus::Scheduler","Rufus/Scheduler.html#method-c-to_time_string","(seconds, options={})",""],["trigger","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-trigger","(time)",""],["trigger","Rufus::Scheduler::RepeatJob","Rufus/Scheduler/RepeatJob.html#method-i-trigger","(time)",""],["trigger_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-trigger_jobs","()",""],["unlock","Rufus::Scheduler","Rufus/Scheduler.html#method-i-unlock","()","<p>Sister method to #lock, is called when the scheduler shuts down.\n"],["unlock","Rufus::Scheduler::FileLock","Rufus/Scheduler/FileLock.html#method-i-unlock","()",""],["unlock","Rufus::Scheduler::NullLock","Rufus/Scheduler/NullLock.html#method-i-unlock","()",""],["unschedule","Rufus::Scheduler","Rufus/Scheduler.html#method-i-unschedule","(job_or_job_id)",""],["unschedule","Rufus::Scheduler::Job","Rufus/Scheduler/Job.html#method-i-unschedule","()",""],["unschedule_jobs","Rufus::Scheduler","Rufus/Scheduler.html#method-i-unschedule_jobs","()",""],["up?","Rufus::Scheduler","Rufus/Scheduler.html#method-i-up-3F","()",""],["uptime","Rufus::Scheduler","Rufus/Scheduler.html#method-i-uptime","()",""],["uptime_s","Rufus::Scheduler","Rufus/Scheduler.html#method-i-uptime_s","()",""],["utc_to_s","Rufus::Scheduler","Rufus/Scheduler.html#method-c-utc_to_s","(t=Time.now)","<p>Produces the UTC string representation of a Time instance\n<p>like “2009/11/23 11:11:50.947109 UTC” …\n"],["work_threads","Rufus::Scheduler","Rufus/Scheduler.html#method-i-work_threads","(query=:all)","<p>Lists all the work threads (the ones actually running the scheduled block\ncode)\n<p>Accepts a query option, …\n"]]}}