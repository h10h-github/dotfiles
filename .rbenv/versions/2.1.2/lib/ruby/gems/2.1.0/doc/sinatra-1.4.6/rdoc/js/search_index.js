var search_data = {"index":{"searchIndex":["rack","builder","sinatra","application","commonlogger","extendedrack","helpers","stream","application","base","delegator","templates","contenttyped","wrapper","notfound","request","acceptentry","response","showexceptions","<<()","<=>()","accept()","accept?()","add_filter()","after()","after_response()","agent()","asciidoc()","async?()","attachment()","back()","before()","body()","body=()","build()","builder()","cache_control()","calculate_content_length?()","call()","call()","call()","call()","call()","call()","call_without_check()","callback()","caller_files()","caller_locations()","cleaned_caller()","client_error?()","close()","closed?()","coffee()","compile()","compile!()","compile_template()","condition()","configure()","content_type()","creole()","defer()","define_singleton()","delete()","detect_rack_handler()","development?()","disable()","dispatch!()","drop_body?()","drop_content_info?()","dump_errors!()","each()","each()","enable()","encoded()","erb()","error()","error()","error_block!()","erubis()","escaped()","etag()","etag_matches?()","expires()","extensions()","filter!()","find_template()","finish()","force_encoding()","force_encoding()","forward()","forwarded?()","frame_class()","generate_method()","get()","halt()","haml()","handle_exception!()","head()","headers()","helpers()","helpers()","helpers()","host_name()","idempotent?()","indifferent_hash()","indifferent_params()","informational?()","inherited()","inline_templates=()","inspect()","invoke()","invoke_hook()","last_modified()","layout()","less()","link()","link?()","liquid()","logger()","markaby()","markdown()","mediawiki()","method_missing()","middleware()","mime_type()","mime_type()","mime_types()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new!()","nokogiri()","not_found()","not_found()","not_found?()","options()","options()","pass()","patch()","post()","preferred_type()","prefers_plain_text?()","priority()","process_route()","production?()","prototype()","provides()","public=()","public_dir()","public_dir=()","put()","quit!()","rabl()","radius()","rdoc()","redirect()","redirect?()","register()","register()","render()","render_ruby()","reset!()","respond_to?()","route()","route!()","route_eval()","route_missing()","run!()","running?()","safe?()","safe_ignore()","sass()","schedule()","scss()","send_file()","server_error?()","session()","set()","settings()","settings()","settings()","setup_close()","setup_common_logger()","setup_custom_logger()","setup_default_middleware()","setup_logging()","setup_middleware()","setup_null_logger()","setup_protection()","setup_sessions()","setup_traps()","slim()","start!()","start_server()","static!()","status()","stop!()","stream()","stylus()","success?()","synchronize()","template()","test?()","textile()","time_for()","to()","to_s()","to_str()","unlink()","unlink?()","uri()","url()","use()","use()","user_agent()","warn()","with_params()","wlang()","yajl()","license","readme.de","readme.es","readme.fr","readme.hu","readme.ja","readme.ko","readme","readme.pt-br","readme.pt-pt","readme.ru","readme.zh"],"longSearchIndex":["rack","rack::builder","sinatra","sinatra::application","sinatra::commonlogger","sinatra::extendedrack","sinatra::helpers","sinatra::helpers::stream","sinatra::helpers::stream::application","sinatra::helpers::stream::base","sinatra::helpers::stream::delegator","sinatra::helpers::stream::templates","sinatra::helpers::stream::templates::contenttyped","sinatra::helpers::stream::wrapper","sinatra::notfound","sinatra::request","sinatra::request::acceptentry","sinatra::response","sinatra::showexceptions","sinatra::helpers::stream#<<()","sinatra::request::acceptentry#<=>()","sinatra::request#accept()","sinatra::request#accept?()","sinatra::helpers::stream::base::add_filter()","sinatra::helpers::stream::base::after()","sinatra::extendedrack#after_response()","sinatra::helpers::stream::base::agent()","sinatra::helpers::stream::templates#asciidoc()","sinatra::extendedrack#async?()","sinatra::helpers#attachment()","sinatra::helpers::stream#back()","sinatra::helpers::stream::base::before()","sinatra::helpers#body()","sinatra::response#body=()","sinatra::helpers::stream::base::build()","sinatra::helpers::stream::templates#builder()","sinatra::helpers::stream#cache_control()","sinatra::response#calculate_content_length?()","sinatra::commonlogger#call()","sinatra::extendedrack#call()","sinatra::helpers::stream::base#call()","sinatra::helpers::stream::base::call()","sinatra::helpers::stream::wrapper#call()","sinatra::showexceptions#call()","sinatra::commonlogger#call_without_check()","sinatra::helpers::stream#callback()","sinatra::helpers::stream::base::caller_files()","sinatra::helpers::stream::base::caller_locations()","sinatra::helpers::stream::base::cleaned_caller()","sinatra::helpers::stream#client_error?()","sinatra::helpers::stream#close()","sinatra::helpers::stream#closed?()","sinatra::helpers::stream::templates#coffee()","sinatra::helpers::stream::base::compile()","sinatra::helpers::stream::base::compile!()","sinatra::helpers::stream::templates#compile_template()","sinatra::helpers::stream::base::condition()","sinatra::helpers::stream::base::configure()","sinatra::helpers#content_type()","sinatra::helpers::stream::templates#creole()","sinatra::helpers::stream::defer()","sinatra::helpers::stream::base::define_singleton()","sinatra::helpers::stream::base::delete()","sinatra::helpers::stream::base::detect_rack_handler()","sinatra::helpers::stream::base::development?()","sinatra::helpers::stream::base::disable()","sinatra::helpers::stream::base#dispatch!()","sinatra::response#drop_body?()","sinatra::response#drop_content_info?()","sinatra::helpers::stream::base#dump_errors!()","sinatra::helpers::stream#each()","sinatra::response#each()","sinatra::helpers::stream::base::enable()","sinatra::helpers::stream::base::encoded()","sinatra::helpers::stream::templates#erb()","sinatra::helpers#error()","sinatra::helpers::stream::base::error()","sinatra::helpers::stream::base#error_block!()","sinatra::helpers::stream::templates#erubis()","sinatra::helpers::stream::base::escaped()","sinatra::helpers::stream#etag()","sinatra::helpers::stream#etag_matches?()","sinatra::helpers::stream#expires()","sinatra::helpers::stream::base::extensions()","sinatra::helpers::stream::base#filter!()","sinatra::helpers::stream::templates#find_template()","sinatra::response#finish()","sinatra::helpers::stream::base::force_encoding()","sinatra::helpers::stream::base#force_encoding()","sinatra::helpers::stream::base#forward()","sinatra::request#forwarded?()","sinatra::showexceptions#frame_class()","sinatra::helpers::stream::base::generate_method()","sinatra::helpers::stream::base::get()","sinatra::helpers::stream::base#halt()","sinatra::helpers::stream::templates#haml()","sinatra::helpers::stream::base#handle_exception!()","sinatra::helpers::stream::base::head()","sinatra::helpers#headers()","sinatra::helpers::stream::helpers()","sinatra::helpers::stream::base::helpers()","sinatra::helpers::stream::wrapper#helpers()","sinatra::helpers::stream::base::host_name()","sinatra::request#idempotent?()","sinatra::helpers::stream::base#indifferent_hash()","sinatra::helpers::stream::base#indifferent_params()","sinatra::helpers::stream#informational?()","sinatra::helpers::stream::base::inherited()","sinatra::helpers::stream::base::inline_templates=()","sinatra::helpers::stream::wrapper#inspect()","sinatra::helpers::stream::base#invoke()","sinatra::helpers::stream::base::invoke_hook()","sinatra::helpers::stream#last_modified()","sinatra::helpers::stream::base::layout()","sinatra::helpers::stream::templates#less()","sinatra::helpers::stream::base::link()","sinatra::request#link?()","sinatra::helpers::stream::templates#liquid()","sinatra::helpers#logger()","sinatra::helpers::stream::templates#markaby()","sinatra::helpers::stream::templates#markdown()","sinatra::helpers::stream::templates#mediawiki()","sinatra::request::acceptentry#method_missing()","sinatra::helpers::stream::base::middleware()","sinatra::helpers#mime_type()","sinatra::helpers::stream::base::mime_type()","sinatra::helpers::stream::base::mime_types()","sinatra::helpers::stream::new()","sinatra::helpers::stream::new()","sinatra::helpers::stream::base::new()","sinatra::helpers::stream::base::new()","sinatra::helpers::stream::templates::new()","sinatra::helpers::stream::wrapper::new()","sinatra::request::acceptentry::new()","sinatra::response::new()","sinatra::showexceptions::new()","sinatra::helpers::stream::base::new!()","sinatra::helpers::stream::templates#nokogiri()","sinatra::helpers#not_found()","sinatra::helpers::stream::base::not_found()","sinatra::helpers::stream#not_found?()","sinatra::helpers::stream::base#options()","sinatra::helpers::stream::base::options()","sinatra::helpers::stream::base#pass()","sinatra::helpers::stream::base::patch()","sinatra::helpers::stream::base::post()","sinatra::request#preferred_type()","sinatra::showexceptions#prefers_plain_text?()","sinatra::request::acceptentry#priority()","sinatra::helpers::stream::base#process_route()","sinatra::helpers::stream::base::production?()","sinatra::helpers::stream::base::prototype()","sinatra::helpers::stream::base::provides()","sinatra::helpers::stream::base::public=()","sinatra::helpers::stream::base::public_dir()","sinatra::helpers::stream::base::public_dir=()","sinatra::helpers::stream::base::put()","sinatra::helpers::stream::base::quit!()","sinatra::helpers::stream::templates#rabl()","sinatra::helpers::stream::templates#radius()","sinatra::helpers::stream::templates#rdoc()","sinatra::helpers#redirect()","sinatra::helpers::stream#redirect?()","sinatra::helpers::stream::register()","sinatra::helpers::stream::base::register()","sinatra::helpers::stream::templates#render()","sinatra::helpers::stream::templates#render_ruby()","sinatra::helpers::stream::base::reset!()","sinatra::request::acceptentry#respond_to?()","sinatra::helpers::stream::base::route()","sinatra::helpers::stream::base#route!()","sinatra::helpers::stream::base#route_eval()","sinatra::helpers::stream::base#route_missing()","sinatra::helpers::stream::base::run!()","sinatra::helpers::stream::base::running?()","sinatra::request#safe?()","sinatra::helpers::stream::base::safe_ignore()","sinatra::helpers::stream::templates#sass()","sinatra::helpers::stream::schedule()","sinatra::helpers::stream::templates#scss()","sinatra::helpers#send_file()","sinatra::helpers::stream#server_error?()","sinatra::helpers#session()","sinatra::helpers::stream::base::set()","sinatra::helpers::stream::base#settings()","sinatra::helpers::stream::base::settings()","sinatra::helpers::stream::wrapper#settings()","sinatra::extendedrack#setup_close()","sinatra::helpers::stream::base::setup_common_logger()","sinatra::helpers::stream::base::setup_custom_logger()","sinatra::helpers::stream::base::setup_default_middleware()","sinatra::helpers::stream::base::setup_logging()","sinatra::helpers::stream::base::setup_middleware()","sinatra::helpers::stream::base::setup_null_logger()","sinatra::helpers::stream::base::setup_protection()","sinatra::helpers::stream::base::setup_sessions()","sinatra::helpers::stream::base::setup_traps()","sinatra::helpers::stream::templates#slim()","sinatra::helpers::stream::base::start!()","sinatra::helpers::stream::base::start_server()","sinatra::helpers::stream::base#static!()","sinatra::helpers#status()","sinatra::helpers::stream::base::stop!()","sinatra::helpers::stream#stream()","sinatra::helpers::stream::templates#stylus()","sinatra::helpers::stream#success?()","sinatra::helpers::stream::base::synchronize()","sinatra::helpers::stream::base::template()","sinatra::helpers::stream::base::test?()","sinatra::helpers::stream::templates#textile()","sinatra::helpers::stream#time_for()","sinatra::helpers#to()","sinatra::request::acceptentry#to_s()","sinatra::request::acceptentry#to_str()","sinatra::helpers::stream::base::unlink()","sinatra::request#unlink?()","sinatra::helpers#uri()","sinatra::helpers#url()","sinatra::helpers::stream::use()","sinatra::helpers::stream::base::use()","sinatra::helpers::stream::base::user_agent()","sinatra::helpers::stream::base::warn()","sinatra::helpers::stream#with_params()","sinatra::helpers::stream::templates#wlang()","sinatra::helpers::stream::templates#yajl()","","","","","","","","","","","",""],"info":[["Rack","","Rack.html","",""],["Rack::Builder","","Rack/Builder.html","",""],["Sinatra","","Sinatra.html","",""],["Sinatra::Application","","Sinatra/Application.html","",""],["Sinatra::CommonLogger","","Sinatra/CommonLogger.html","","<p>Behaves exactly like Rack::CommonLogger with the notable exception that it\ndoes nothing, if another  …\n"],["Sinatra::ExtendedRack","","Sinatra/ExtendedRack.html","","<p>Some Rack handlers (Thin, Rainbows!) implement an extended body object\nprotocol, however, some middleware …\n"],["Sinatra::Helpers","","Sinatra/Helpers.html","","<p>Methods available to routes, before/after filters, and views.\n"],["Sinatra::Helpers::Stream","","Sinatra/Helpers/Stream.html","","<p>Class of the response body in case you use #stream.\n<p>Three things really matter: The front and back block …\n"],["Sinatra::Helpers::Stream::Application","","Sinatra/Helpers/Stream/Application.html","","<p>Execution context for classic style (top-level) applications. All DSL\nmethods executed on main are delegated …\n"],["Sinatra::Helpers::Stream::Base","","Sinatra/Helpers/Stream/Base.html","","<p>Base class for all Sinatra applications and middleware.\n"],["Sinatra::Helpers::Stream::Delegator","","Sinatra/Helpers/Stream/Delegator.html","",""],["Sinatra::Helpers::Stream::Templates","","Sinatra/Helpers/Stream/Templates.html","","<p>Template rendering methods. Each method takes the name of a template to\nrender as a Symbol and returns …\n"],["Sinatra::Helpers::Stream::Templates::ContentTyped","","Sinatra/Helpers/Stream/Templates/ContentTyped.html","",""],["Sinatra::Helpers::Stream::Wrapper","","Sinatra/Helpers/Stream/Wrapper.html","",""],["Sinatra::NotFound","","Sinatra/NotFound.html","",""],["Sinatra::Request","","Sinatra/Request.html","","<p>The request object. See Rack::Request for more info:\nrubydoc.info/github/rack/rack/master/Rack/Request …\n"],["Sinatra::Request::AcceptEntry","","Sinatra/Request/AcceptEntry.html","",""],["Sinatra::Response","","Sinatra/Response.html","","<p>The response object. See Rack::Response and Rack::Response::Helpers for\nmore info: rubydoc.info/github/rack/rack/master/Rack/Response …\n"],["Sinatra::ShowExceptions","","Sinatra/ShowExceptions.html","","<p>Sinatra::ShowExceptions catches all exceptions raised from the app it\nwraps. It shows a useful backtrace …\n"],["<<","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-3C-3C","(data)",""],["<=>","Sinatra::Request::AcceptEntry","Sinatra/Request/AcceptEntry.html#method-i-3C-3D-3E","(other)",""],["accept","Sinatra::Request","Sinatra/Request.html#method-i-accept","()","<p>Returns an array of acceptable media types for the response\n"],["accept?","Sinatra::Request","Sinatra/Request.html#method-i-accept-3F","(type)",""],["add_filter","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-add_filter","(type, path = nil, options = {}, &block)","<p>add a filter\n"],["after","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-after","(path = nil, options = {}, &block)","<p>Define an after filter; runs after all requests within the same context as\nroute handlers and may access/modify …\n"],["after_response","Sinatra::ExtendedRack","Sinatra/ExtendedRack.html#method-i-after_response","(&block)",""],["agent","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-agent","(pattern)",""],["asciidoc","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-asciidoc","(template, options = {}, locals = {})",""],["async?","Sinatra::ExtendedRack","Sinatra/ExtendedRack.html#method-i-async-3F","(status, headers, body)",""],["attachment","Sinatra::Helpers","Sinatra/Helpers.html#method-i-attachment","(filename = nil, disposition = 'attachment')","<p>Set the Content-Disposition to “attachment” with the specified filename,\ninstructing the user …\n"],["back","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-back","()","<p>Sugar for redirect (example:  redirect back)\n"],["before","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-before","(path = nil, options = {}, &block)","<p>Define a before filter; runs before all requests within the same context as\nroute handlers and may access/modify …\n"],["body","Sinatra::Helpers","Sinatra/Helpers.html#method-i-body","(value = nil, &block)","<p>Set or retrieve the response body. When a block is given, evaluation is\ndeferred until the body is read …\n"],["body=","Sinatra::Response","Sinatra/Response.html#method-i-body-3D","(value)",""],["build","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-build","(app)","<p>Creates a Rack::Builder instance with all the middleware set up and the\ngiven <code>app</code> as end point.\n"],["builder","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-builder","(template = nil, options = {}, locals = {}, &block)",""],["cache_control","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-cache_control","(*values)","<p>Specify response freshness policy for HTTP caches (Cache-Control header).\nAny number of non-value directives …\n"],["calculate_content_length?","Sinatra::Response","Sinatra/Response.html#method-i-calculate_content_length-3F","()",""],["call","Sinatra::CommonLogger","Sinatra/CommonLogger.html#method-i-call","(env)",""],["call","Sinatra::ExtendedRack","Sinatra/ExtendedRack.html#method-i-call","(env)",""],["call","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-call","(env)","<p>Rack call interface.\n"],["call","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-call","(env)",""],["call","Sinatra::Helpers::Stream::Wrapper","Sinatra/Helpers/Stream/Wrapper.html#method-i-call","(env)",""],["call","Sinatra::ShowExceptions","Sinatra/ShowExceptions.html#method-i-call","(env)",""],["call_without_check","Sinatra::CommonLogger","Sinatra/CommonLogger.html#method-i-call_without_check","(env)",""],["callback","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-callback","(&block)",""],["caller_files","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-caller_files","()","<p>Like Kernel#caller but excluding certain magic entries and without line /\nmethod information; the resulting …\n"],["caller_locations","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-caller_locations","()","<p>Like caller_files, but containing Arrays rather than strings with the first\nelement being the file, and …\n"],["cleaned_caller","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-cleaned_caller","(keep = 3)","<p>Like Kernel#caller but excluding certain magic entries\n"],["client_error?","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-client_error-3F","()","<p>whether or not the status is set to 4xx\n"],["close","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-close","()",""],["closed?","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-closed-3F","()",""],["coffee","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-coffee","(template, options = {}, locals = {})",""],["compile","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-compile","(path)",""],["compile!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-compile-21","(verb, path, block, options = {})",""],["compile_template","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-compile_template","(engine, data, options, views)",""],["condition","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-condition","(name = \"#{caller.first[/`.*'/]} condition\", &block)","<p>Add a route condition. The route is considered non-matching when the block\nreturns false.\n"],["configure","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-configure","(*envs)","<p>Set configuration options for Sinatra and/or the app. Allows scoping of\nsettings for certain environments. …\n"],["content_type","Sinatra::Helpers","Sinatra/Helpers.html#method-i-content_type","(type = nil, params = {})","<p>Set the Content-Type of the response body given a media type or file\nextension.\n"],["creole","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-creole","(template, options = {}, locals = {})",""],["defer","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-c-defer","(*)",""],["define_singleton","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-define_singleton","(name, content = Proc.new)","<p>Dynamically defines a method on settings.\n"],["delete","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-delete","(path, opts = {}, &bk)",""],["detect_rack_handler","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-detect_rack_handler","()",""],["development?","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-development-3F","()",""],["disable","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-disable","(*opts)","<p>Same as calling `set :option, false` for each of the given options.\n"],["dispatch!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-dispatch-21","()","<p>Dispatch a request with error handling.\n"],["drop_body?","Sinatra::Response","Sinatra/Response.html#method-i-drop_body-3F","()",""],["drop_content_info?","Sinatra::Response","Sinatra/Response.html#method-i-drop_content_info-3F","()",""],["dump_errors!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-dump_errors-21","(boom)",""],["each","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-each","(&front)",""],["each","Sinatra::Response","Sinatra/Response.html#method-i-each","()",""],["enable","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-enable","(*opts)","<p>Same as calling `set :option, true` for each of the given options.\n"],["encoded","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-encoded","(char)",""],["erb","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-erb","(template, options = {}, locals = {}, &block)",""],["error","Sinatra::Helpers","Sinatra/Helpers.html#method-i-error","(code, body = nil)","<p>Halt processing and return the error status provided.\n"],["error","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-error","(*codes, &block)","<p>Define a custom error handler. Optionally takes either an Exception class,\nor an HTTP status code to …\n"],["error_block!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-error_block-21","(key, *block_params)","<p>Find an custom error block for the key(s) specified.\n"],["erubis","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-erubis","(template, options = {}, locals = {})",""],["escaped","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-escaped","(char, enc = URI_INSTANCE.escape(char))",""],["etag","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-etag","(value, options = {})","<p>Set the response entity tag (HTTP &#39;ETag&#39; header) and halt if\nconditional GET matches. The <code>value</code> …\n"],["etag_matches?","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-etag_matches-3F","(list, new_resource = request.post?)","<p>Helper method checking if a ETag value list includes the current ETag.\n"],["expires","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-expires","(amount, *values)","<p>Set the Expires header and Cache-Control/max-age directive. Amount can be\nan integer number of seconds …\n"],["extensions","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-extensions","()","<p>Extension modules registered on this class and all superclasses.\n"],["filter!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-filter-21","(type, base = settings)","<p>Run filters defined on the class and all superclasses.\n"],["find_template","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-find_template","(views, name, engine)","<p>Calls the given block for every possible template file in views, named\nname.ext, where ext is registered …\n"],["finish","Sinatra::Response","Sinatra/Response.html#method-i-finish","()",""],["force_encoding","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-force_encoding","(data, encoding = default_encoding)",""],["force_encoding","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-force_encoding","(*args)","<p>Fixes encoding issues by\n<p>defaulting to UTF-8\n<p>casting params to Encoding.default_external\n"],["forward","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-forward","()","<p>Forward the request to the downstream app – middleware only.\n"],["forwarded?","Sinatra::Request","Sinatra/Request.html#method-i-forwarded-3F","()",""],["frame_class","Sinatra::ShowExceptions","Sinatra/ShowExceptions.html#method-i-frame_class","(frame)",""],["generate_method","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-generate_method","(method_name, &block)",""],["get","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-get","(path, opts = {}, &block)","<p>Defining a `GET` handler also automatically defines a `HEAD` handler.\n"],["halt","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-halt","(*response)","<p>Exit the current block, halts any further processing of the request, and\nreturns the specified response. …\n"],["haml","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-haml","(template, options = {}, locals = {}, &block)",""],["handle_exception!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-handle_exception-21","(boom)","<p>Error handling during requests.\n"],["head","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-head","(path, opts = {}, &bk)",""],["headers","Sinatra::Helpers","Sinatra/Helpers.html#method-i-headers","(hash = nil)","<p>Set multiple response headers with Hash.\n"],["helpers","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-c-helpers","(*extensions, &block)","<p>Include the helper modules provided in Sinatra&#39;s request context.\n"],["helpers","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-helpers","(*extensions, &block)","<p>Makes the methods defined in the block and in the Modules given in\n`extensions` available to the handlers …\n"],["helpers","Sinatra::Helpers::Stream::Wrapper","Sinatra/Helpers/Stream/Wrapper.html#method-i-helpers","()",""],["host_name","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-host_name","(pattern)","<p>Condition for matching host name. Parameter might be String or Regexp.\n"],["idempotent?","Sinatra::Request","Sinatra/Request.html#method-i-idempotent-3F","()",""],["indifferent_hash","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-indifferent_hash","()","<p>Creates a Hash with indifferent access.\n"],["indifferent_params","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-indifferent_params","(object)","<p>Enable string or symbol key access to the nested params hash.\n"],["informational?","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-informational-3F","()","<p>whether or not the status is set to 1xx\n"],["inherited","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-inherited","(subclass)",""],["inline_templates=","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-inline_templates-3D","(file = nil)","<p>Load embedded templates from the file; uses the caller&#39;s __FILE__ when\nno file is specified.\n"],["inspect","Sinatra::Helpers::Stream::Wrapper","Sinatra/Helpers/Stream/Wrapper.html#method-i-inspect","()",""],["invoke","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-invoke","()","<p>Run the block with &#39;throw :halt&#39; support and apply result to the\nresponse.\n"],["invoke_hook","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-invoke_hook","(name, *args)",""],["last_modified","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-last_modified","(time)","<p>Set the last modified time of the resource (HTTP &#39;Last-Modified&#39;\nheader) and halt if conditional …\n"],["layout","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-layout","(name = :layout, &block)","<p>Define the layout template. The block must return the template source.\n"],["less","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-less","(template, options = {}, locals = {})",""],["link","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-link","(path, opts = {}, &bk)",""],["link?","Sinatra::Request","Sinatra/Request.html#method-i-link-3F","()",""],["liquid","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-liquid","(template, options = {}, locals = {}, &block)",""],["logger","Sinatra::Helpers","Sinatra/Helpers.html#method-i-logger","()","<p>Access shared logger object.\n"],["markaby","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-markaby","(template = nil, options = {}, locals = {}, &block)",""],["markdown","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-markdown","(template, options = {}, locals = {})",""],["mediawiki","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-mediawiki","(template, options = {}, locals = {})",""],["method_missing","Sinatra::Request::AcceptEntry","Sinatra/Request/AcceptEntry.html#method-i-method_missing","(*args, &block)",""],["middleware","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-middleware","()","<p>Middleware used in this class and all superclasses.\n"],["mime_type","Sinatra::Helpers","Sinatra/Helpers.html#method-i-mime_type","(type)","<p>Look up a media type by file extension in Rack&#39;s mime registry.\n"],["mime_type","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-mime_type","(type, value = nil)","<p>Lookup or register a mime type in Rack&#39;s mime registry.\n"],["mime_types","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-mime_types","(type)","<p>provides all mime types matching type, including deprecated types:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mime_types</span> :<span class=\"ruby-identifier\">html</span> <span class=\"ruby-comment\"># =&gt; [&#39;text/html&#39;] ...</span>\n</pre>\n"],["new","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-c-new","(scheduler = self.class, keep_open = false, &back)",""],["new","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-c-new","(base = Base, &block)","<p>Create a new Sinatra application; the block is evaluated in the class\nscope.\n"],["new","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-new","(*args, &bk)","<p>Create a new instance of the class fronted by its middleware pipeline. The\nobject is guaranteed to respond …\n"],["new","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-new","(app = nil)",""],["new","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-c-new","()",""],["new","Sinatra::Helpers::Stream::Wrapper","Sinatra/Helpers/Stream/Wrapper.html#method-c-new","(stack, instance)",""],["new","Sinatra::Request::AcceptEntry","Sinatra/Request/AcceptEntry.html#method-c-new","(entry)",""],["new","Sinatra::Response","Sinatra/Response.html#method-c-new","(*)",""],["new","Sinatra::ShowExceptions","Sinatra/ShowExceptions.html#method-c-new","(app)",""],["new!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-new-21","(app = nil)","<p>Create a new instance without middleware in front of it.\n"],["nokogiri","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-nokogiri","(template = nil, options = {}, locals = {}, &block)",""],["not_found","Sinatra::Helpers","Sinatra/Helpers.html#method-i-not_found","(body = nil)","<p>Halt processing and return a 404 Not Found.\n"],["not_found","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-not_found","(&block)","<p>Sugar for `error(404) { … }`\n"],["not_found?","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-not_found-3F","()","<p>whether or not the status is set to 404\n"],["options","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-options","()",""],["options","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-options","(path, opts = {}, &bk)",""],["pass","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-pass","(&block)","<p>Pass control to the next matching route. If there are no more matching\nroutes, Sinatra will return a …\n"],["patch","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-patch","(path, opts = {}, &bk)",""],["post","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-post","(path, opts = {}, &bk)",""],["preferred_type","Sinatra::Request","Sinatra/Request.html#method-i-preferred_type","(*types)",""],["prefers_plain_text?","Sinatra::ShowExceptions","Sinatra/ShowExceptions.html#method-i-prefers_plain_text-3F","(env)",""],["priority","Sinatra::Request::AcceptEntry","Sinatra/Request/AcceptEntry.html#method-i-priority","()",""],["process_route","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-process_route","(pattern, keys, conditions, block = nil, values = [])","<p>If the current request matches pattern and conditions, fill params with\nkeys and call the given block. …\n"],["production?","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-production-3F","()",""],["prototype","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-prototype","()","<p>The prototype instance used to process requests.\n"],["provides","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-provides","(*types)","<p>Condition for matching mimetypes. Accepts file extensions.\n"],["public=","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-public-3D","(value)",""],["public_dir","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-public_dir","()",""],["public_dir=","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-public_dir-3D","(value)",""],["put","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-put","(path, opts = {}, &bk)",""],["quit!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-quit-21","()","<p>Stop the self-hosted server if running.\n"],["rabl","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-rabl","(template, options = {}, locals = {})",""],["radius","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-radius","(template, options = {}, locals = {})",""],["rdoc","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-rdoc","(template, options = {}, locals = {})",""],["redirect","Sinatra::Helpers","Sinatra/Helpers.html#method-i-redirect","(uri, *args)","<p>Halt processing and redirect to the URI provided.\n"],["redirect?","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-redirect-3F","()","<p>whether or not the status is set to 3xx\n"],["register","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-c-register","(*extensions, &block)","<p>Extend the top-level DSL with the modules provided.\n"],["register","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-register","(*extensions, &block)","<p>Register an extension. Alternatively take a block from which an extension\nwill be created and registered …\n"],["render","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-render","(engine, data, options = {}, locals = {}, &block)",""],["render_ruby","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-render_ruby","(engine, template, options = {}, locals = {}, &block)","<p>logic shared between builder and nokogiri\n"],["reset!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-reset-21","()","<p>Removes all routes, filters, middleware and extension hooks from the\ncurrent class (not routes/filters/… …\n"],["respond_to?","Sinatra::Request::AcceptEntry","Sinatra/Request/AcceptEntry.html#method-i-respond_to-3F","(*args)",""],["route","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-route","(verb, path, options = {}, &block)",""],["route!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-route-21","(base = settings, pass_block = nil)","<p>Run routes defined on the class and all superclasses.\n"],["route_eval","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-route_eval","()","<p>Run a route block and throw :halt with the result.\n"],["route_missing","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-route_missing","()","<p>No matching route was found or all routes passed. The default\nimplementation is to forward the request …\n"],["run!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-run-21","(options = {}, &block)","<p>Run the Sinatra app as a self-hosted server using Thin, Puma, Mongrel, or\nWEBrick (in that order). If …\n"],["running?","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-running-3F","()","<p>Check whether the self-hosted server is running or not.\n"],["safe?","Sinatra::Request","Sinatra/Request.html#method-i-safe-3F","()",""],["safe_ignore","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-safe_ignore","(ignore)",""],["sass","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-sass","(template, options = {}, locals = {})",""],["schedule","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-c-schedule","(*)",""],["scss","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-scss","(template, options = {}, locals = {})",""],["send_file","Sinatra::Helpers","Sinatra/Helpers.html#method-i-send_file","(path, opts = {})","<p>Use the contents of the file at <code>path</code> as the response body.\n"],["server_error?","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-server_error-3F","()","<p>whether or not the status is set to 5xx\n"],["session","Sinatra::Helpers","Sinatra/Helpers.html#method-i-session","()","<p>Access the underlying Rack session.\n"],["set","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-set","(option, value = (not_set = true), ignore_setter = false, &block)","<p>Sets an option to the given value.  If the value is a proc, the proc will\nbe called every time the option …\n"],["settings","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-settings","()","<p>Access settings defined with Base.set.\n"],["settings","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-settings","()","<p>Access settings defined with Base.set.\n"],["settings","Sinatra::Helpers::Stream::Wrapper","Sinatra/Helpers/Stream/Wrapper.html#method-i-settings","()",""],["setup_close","Sinatra::ExtendedRack","Sinatra/ExtendedRack.html#method-i-setup_close","(env, status, headers, body)",""],["setup_common_logger","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-setup_common_logger","(builder)",""],["setup_custom_logger","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-setup_custom_logger","(builder)",""],["setup_default_middleware","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-setup_default_middleware","(builder)",""],["setup_logging","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-setup_logging","(builder)",""],["setup_middleware","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-setup_middleware","(builder)",""],["setup_null_logger","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-setup_null_logger","(builder)",""],["setup_protection","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-setup_protection","(builder)",""],["setup_sessions","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-setup_sessions","(builder)",""],["setup_traps","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-setup_traps","()",""],["slim","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-slim","(template, options = {}, locals = {}, &block)",""],["start!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-start-21","(options = {}, &block)",""],["start_server","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-start_server","(handler, server_settings, handler_name)","<p>Starts the server by running the Rack Handler.\n"],["static!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-i-static-21","(options = {})","<p>Attempt to serve static files from public directory. Throws :halt when a\nmatching file is found, returns …\n"],["status","Sinatra::Helpers","Sinatra/Helpers.html#method-i-status","(value = nil)","<p>Set or retrieve the response status code.\n"],["stop!","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-stop-21","()",""],["stream","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-stream","(keep_open = false)","<p>Allows to start sending data to the client even though later parts of the\nresponse body have not yet …\n"],["stylus","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-stylus","(template, options={}, locals={})",""],["success?","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-success-3F","()","<p>whether or not the status is set to 2xx\n"],["synchronize","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-synchronize","(&block)",""],["template","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-template","(name, &block)","<p>Define a named template. The block must return the template source.\n"],["test?","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-test-3F","()",""],["textile","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-textile","(template, options = {}, locals = {})",""],["time_for","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-time_for","(value)","<p>Generates a Time object from the given value. Used by #expires and\n#last_modified.\n"],["to","Sinatra::Helpers","Sinatra/Helpers.html#method-i-to","(addr = nil, absolute = true, add_script_name = true)",""],["to_s","Sinatra::Request::AcceptEntry","Sinatra/Request/AcceptEntry.html#method-i-to_s","(full = false)",""],["to_str","Sinatra::Request::AcceptEntry","Sinatra/Request/AcceptEntry.html#method-i-to_str","()",""],["unlink","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-unlink","(path, opts = {}, &bk)",""],["unlink?","Sinatra::Request","Sinatra/Request.html#method-i-unlink-3F","()",""],["uri","Sinatra::Helpers","Sinatra/Helpers.html#method-i-uri","(addr = nil, absolute = true, add_script_name = true)","<p>Generates the absolute URI for a given path in the app. Takes Rack routers\nand reverse proxies into account. …\n"],["url","Sinatra::Helpers","Sinatra/Helpers.html#method-i-url","(addr = nil, absolute = true, add_script_name = true)",""],["use","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-c-use","(*args, &block)","<p>Use the middleware for classic applications.\n"],["use","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-use","(middleware, *args, &block)","<p>Use the specified Rack middleware\n"],["user_agent","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-user_agent","(pattern)","<p>Condition for matching user agent. Parameter should be Regexp. Will set\nparams.\n"],["warn","Sinatra::Helpers::Stream::Base","Sinatra/Helpers/Stream/Base.html#method-c-warn","(message)","<p>used for deprecation warnings\n"],["with_params","Sinatra::Helpers::Stream","Sinatra/Helpers/Stream.html#method-i-with_params","(temp_params)",""],["wlang","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-wlang","(template, options = {}, locals = {}, &block)",""],["yajl","Sinatra::Helpers::Stream::Templates","Sinatra/Helpers/Stream/Templates.html#method-i-yajl","(template, options = {}, locals = {})",""],["LICENSE","","LICENSE.html","","<p>Copyright © 2007, 2008, 2009 Blake Mizerany Copyright © 2010, 2011, 2012,\n2013, 2014 Konstantin  …\n"],["README.de","","README_de_md.html","","<p>Sinatra\n<p>Wichtig: Dieses Dokument ist eine Übersetzung aus dem Englischen und\nunter\nUmständen nicht auf ...\n"],["README.es","","README_es_md.html","","<p>Sinatra\n<p>Atención: Este documento es una traducción de la versión en inglés y puede\nestar desactualizado.* …\n"],["README.fr","","README_fr_md.html","","<p>Sinatra\n<p>Attention : Ce document correspond à la traduction de la version anglaise\net\nil n&#39;est peut ...\n"],["README.hu","","README_hu_md.html","","<p>Sinatra\n<p>&lt;em&gt;Fontos megjegyzés: Ez a dokumentum csak egy fordítása az angol\nnyelvű\nváltozatnak, és ...\n"],["README.ja","","README_ja_md.html","","<p>Sinatra\n<p>注）\n本文書は英語から翻訳したものであり、その内容が最新でない場合もあります。最新の情報はオリジナルの英語版を参照して下さい。*\n<p>Sinatraは最小の労力でRubyによるWebアプリケーションを手早く作るための …\n"],["README.ko","","README_ko_md.html","","<p>Sinatra\n<p>주의: 이 문서는 영문판의 번역본이며 최신판 문서와 다를 수 있습니다.*\n<p>Sinatra는 최소한의 노력으로 루비 기반 웹 애플리케이션을 신속하게 만들 수 있게\n해 주는  ...\n"],["README","","README_md.html","","<p>Sinatra\n<p>Sinatra is a DSL for\nquickly creating web applications in Ruby with minimal\neffort:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># myapp.rb ...</span>\n</pre>\n"],["README.pt-br","","README_pt-br_md.html","","<p>Sinatra\n<p>&lt;em&gt;Atenção: Este documento é apenas uma tradução da versão em inglês\ne\npode estar desatualizado.&lt;/em&gt; ...\n"],["README.pt-pt","","README_pt-pt_md.html","","<p>Sinatra\n<p>&lt;em&gt;Atenção: Este documento é apenas uma tradução da versão em inglês\ne\npode estar desatualizado.&lt;/em&gt; ...\n"],["README.ru","","README_ru_md.html","","<p>Sinatra\n<p>Внимание: Этот документ является переводом английской версии и может\nбыть\nустаревшим*\n<p>Sinatra — …\n"],["README.zh","","README_zh_md.html","","<p>Sinatra\n<p>&lt;em&gt;注：本文档是英文版的翻译，内容更新有可能不及时。\n如有不一致的地方，请以英文版为准。&lt;/em&gt;\n<p>Sinatra是一个基于Ruby语言的DSL（\n领域专属语言），可以轻松、快速的创建web应用。 ...\n"]]}}