var search_data = {"index":{"searchIndex":["hash","sorcery","activerecord","adapters","activerecordadapter","baseadapter","datamapperadapter","wrapper","classmethods","mongomapperadapter","wrapper","classmethods","mongoidadapter","controller","config","instancemethods","submodules","activitylogging","instancemethods","bruteforceprotection","instancemethods","external","instancemethods","httpbasicauth","instancemethods","rememberme","instancemethods","sessiontimeout","instancemethods","cryptoproviders","aes256","bcrypt","common","md5","sha1","sha256","sha512","datamapper","engine","actioncontroller","generators","helpers","installgenerator","model","classmethods","config","instancemethods","submodules","activitylogging","classmethods","instancemethods","bruteforceprotection","classmethods","instancemethods","external","classmethods","instancemethods","rememberme","classmethods","instancemethods","resetpassword","classmethods","instancemethods","useractivation","classmethods","instancemethods","temporarytoken","classmethods","mongomapper","mongoid","document","protocols","oauth","oauth2","providers","base","facebook","github","google","heroku","jira","linkedin","liveid","salesforce","twitter","vk","xing","testhelpers","internal","rails","rails","controller","integration","sorceryactivitylogging","sorcerybruteforceprotection","sorcerycore","sorceryexternal","sorceryrememberme","sorceryresetpassword","sorceryuseractivation","access_token()","activate!()","add_config_inheritance()","add_provider_to_user()","add_provider_to_user()","aes()","after_failed_login!()","after_login!()","after_logout!()","auth_hash()","authenticate()","authenticates_with_sorcery!()","authorize_url()","authorize_url()","authorize_url()","auto_login()","auto_login()","before_logout!()","build_client()","build_new_user()","change()","change()","change()","change()","change()","change()","change()","change_password!()","check_deprecated_options()","clear_reset_password_token()","clear_user_without_logout()","clear_virtual_password()","configure()","configure!()","configure_initializer_file()","configure_model()","copy_initializer_file()","copy_migration_files()","cost()","cost()","cost_matches?()","create_and_validate_from()","create_and_validate_from_provider()","create_from()","create_from_provider()","create_new_external_user()","create_new_user()","credential_regex()","credential_regex()","current_user()","current_user=()","current_users()","current_users()","custom_create_new_external_user()","custom_encryption_provider=()","decrypt()","define_activity_logging_fields()","define_base_fields()","define_brute_force_protection_fields()","define_callback()","define_callback()","define_callback()","define_callback()","define_field()","define_field()","define_field()","define_field()","define_remember_me_fields()","define_reset_password_fields()","define_user_activation_fields()","delete_all()","delete_all()","deliver_reset_password_instructions!()","descendants()","destroy()","encrypt()","encrypt()","encrypt()","encrypt()","encrypt()","encrypt_password()","encryption_algorithm=()","external?()","external_providers=()","file_path()","find()","find()","find_authentication_by_oauth_credentials()","find_by_activation_token()","find_by_activation_token()","find_by_activation_token()","find_by_activation_token()","find_by_credentials()","find_by_credentials()","find_by_credentials()","find_by_credentials()","find_by_email()","find_by_email()","find_by_email()","find_by_email()","find_by_id()","find_by_id()","find_by_id()","find_by_id()","find_by_oauth_credentials()","find_by_oauth_credentials()","find_by_oauth_credentials()","find_by_oauth_credentials()","find_by_remember_me_token()","find_by_remember_me_token()","find_by_remember_me_token()","find_by_sorcery_token()","find_by_sorcery_token()","find_by_token()","find_by_token()","find_by_token()","find_by_token()","find_by_username()","find_by_username()","find_by_username()","find_by_username()","forget_me!()","forget_me!()","from()","generate_random_token()","generate_reset_password_token!()","generic_send_email()","get_access_token()","get_access_token()","get_consumer()","get_consumer()","get_consumer()","get_consumer()","get_consumer()","get_current_users()","get_current_users()","get_current_users()","get_current_users()","get_request_token()","get_user_hash()","get_user_hash()","get_user_hash()","get_user_hash()","get_user_hash()","get_user_hash()","get_user_hash()","get_user_hash()","get_user_hash()","get_user_hash()","get_user_hash()","handle_unverified_request()","has_callback?()","has_remember_me_token?()","include_required_submodules!()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","increment()","increment()","increment()","increment()","increment()","inherited()","init!()","init_orm_hooks!()","inject_sorcery_to_model()","join_token()","join_tokens()","load_from_activation_token()","load_from_provider()","load_from_reset_password_token()","load_from_token()","load_from_unlock_token()","lock!()","locked?()","logged_in?()","logged_in?()","login()","login_at()","login_from()","login_from_basic_auth()","login_from_cookie()","login_from_other_sources()","login_from_session()","login_url()","login_url()","login_url()","login_url()","login_url()","login_url()","login_url()","login_url()","login_url()","login_url()","login_url()","login_user()","login_user()","logout()","logout_user()","logout_user()","matches?()","matches?()","matches?()","merge_activity_logging_defaults!()","merge_external_defaults!()","merge_http_basic_auth_defaults!()","merge_remember_me_defaults!()","merge_session_timeout_defaults!()","model_class_name()","model_name()","model_path()","mongoid_4?()","name()","namespace()","namespaced?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_from_hash()","next_migration_number()","not_authenticated()","oauth_version()","oauth_version()","only_submodules?()","prevent_locked_user_login()","prevent_non_active_login()","process_callback()","process_callback()","process_callback()","process_callback()","process_callback()","process_callback()","process_callback()","process_callback()","process_callback()","process_callback()","process_callback()","realm_name_by_controller()","redirect_back_or_to()","register_failed_login!()","register_last_activity_time_to_db()","register_last_ip_address()","register_login_time()","register_login_time_to_db()","register_logout_time_to_db()","reload_user_class()","remember_me!()","remember_me!()","remember_me_if_asked_to()","require_login()","require_login_from_http_basic()","reset!()","reset!()","reset!()","reset!()","reset_failed_logins_count!()","reset_sorcery_session()","save()","save()","save()","save()","secure_digest()","secure_digest()","secure_digest()","secure_digest()","send_activation_needed_email!()","send_activation_needed_email?()","send_activation_success_email!()","send_activation_success_email?()","send_reset_password_email!()","send_unlock_token_email!()","set_encryption_attributes()","set_last_activity_at()","set_last_ip_addess()","set_last_login_at()","set_last_logout_at()","set_remember_me_cookie!()","setup_activation()","sorcery_adapter()","sorcery_adapter()","sorcery_adapter()","sorcery_adapter()","sorcery_config()","sorcery_config()","sorcery_config_path()","sorcery_controller_external_property_set()","sorcery_controller_property_set()","sorcery_fetch_user_hash()","sorcery_fixup_callback_url()","sorcery_get_provider()","sorcery_login_url()","sorcery_model_property_set()","sorcery_reload!()","sorcery_session_expired?()","stretches()","stretches()","transaction()","transaction()","transaction()","transaction()","unlock!()","unlocked?()","update!()","update_attribute()","update_attribute()","update_attribute()","update_attributes()","update_attributes()","update_attributes()","update_attributes()","update_failed_logins_count!()","update_model()","user_attrs()","user_class()","user_config()","username_attribute_names=()","valid_password?()","validate_mailer_defined()","validate_mailer_defined()","validate_session()","verify_submodules_compatibility!()","usage","ca-bundle.crt","tasks.rake"],"longSearchIndex":["hash","sorcery","sorcery::activerecord","sorcery::adapters","sorcery::adapters::activerecordadapter","sorcery::adapters::baseadapter","sorcery::adapters::datamapperadapter","sorcery::adapters::datamapperadapter::wrapper","sorcery::adapters::datamapperadapter::wrapper::classmethods","sorcery::adapters::mongomapperadapter","sorcery::adapters::mongomapperadapter::wrapper","sorcery::adapters::mongomapperadapter::wrapper::classmethods","sorcery::adapters::mongoidadapter","sorcery::controller","sorcery::controller::config","sorcery::controller::instancemethods","sorcery::controller::submodules","sorcery::controller::submodules::activitylogging","sorcery::controller::submodules::activitylogging::instancemethods","sorcery::controller::submodules::bruteforceprotection","sorcery::controller::submodules::bruteforceprotection::instancemethods","sorcery::controller::submodules::external","sorcery::controller::submodules::external::instancemethods","sorcery::controller::submodules::httpbasicauth","sorcery::controller::submodules::httpbasicauth::instancemethods","sorcery::controller::submodules::rememberme","sorcery::controller::submodules::rememberme::instancemethods","sorcery::controller::submodules::sessiontimeout","sorcery::controller::submodules::sessiontimeout::instancemethods","sorcery::cryptoproviders","sorcery::cryptoproviders::aes256","sorcery::cryptoproviders::bcrypt","sorcery::cryptoproviders::common","sorcery::cryptoproviders::md5","sorcery::cryptoproviders::sha1","sorcery::cryptoproviders::sha256","sorcery::cryptoproviders::sha512","sorcery::datamapper","sorcery::engine","sorcery::engine::actioncontroller","sorcery::generators","sorcery::generators::helpers","sorcery::generators::installgenerator","sorcery::model","sorcery::model::classmethods","sorcery::model::config","sorcery::model::instancemethods","sorcery::model::submodules","sorcery::model::submodules::activitylogging","sorcery::model::submodules::activitylogging::classmethods","sorcery::model::submodules::activitylogging::instancemethods","sorcery::model::submodules::bruteforceprotection","sorcery::model::submodules::bruteforceprotection::classmethods","sorcery::model::submodules::bruteforceprotection::instancemethods","sorcery::model::submodules::external","sorcery::model::submodules::external::classmethods","sorcery::model::submodules::external::instancemethods","sorcery::model::submodules::rememberme","sorcery::model::submodules::rememberme::classmethods","sorcery::model::submodules::rememberme::instancemethods","sorcery::model::submodules::resetpassword","sorcery::model::submodules::resetpassword::classmethods","sorcery::model::submodules::resetpassword::instancemethods","sorcery::model::submodules::useractivation","sorcery::model::submodules::useractivation::classmethods","sorcery::model::submodules::useractivation::instancemethods","sorcery::model::temporarytoken","sorcery::model::temporarytoken::classmethods","sorcery::mongomapper","sorcery::mongoid","sorcery::mongoid::document","sorcery::protocols","sorcery::protocols::oauth","sorcery::protocols::oauth2","sorcery::providers","sorcery::providers::base","sorcery::providers::facebook","sorcery::providers::github","sorcery::providers::google","sorcery::providers::heroku","sorcery::providers::jira","sorcery::providers::linkedin","sorcery::providers::liveid","sorcery::providers::salesforce","sorcery::providers::twitter","sorcery::providers::vk","sorcery::providers::xing","sorcery::testhelpers","sorcery::testhelpers::internal","sorcery::testhelpers::internal::rails","sorcery::testhelpers::rails","sorcery::testhelpers::rails::controller","sorcery::testhelpers::rails::integration","sorceryactivitylogging","sorcerybruteforceprotection","sorcerycore","sorceryexternal","sorceryrememberme","sorceryresetpassword","sorceryuseractivation","sorcery::controller::submodules::external::instancemethods#access_token()","sorcery::model::submodules::useractivation::instancemethods#activate!()","sorcery::model::classmethods#add_config_inheritance()","sorcery::controller::submodules::external::instancemethods#add_provider_to_user()","sorcery::model::submodules::external::instancemethods#add_provider_to_user()","sorcery::cryptoproviders::aes256::aes()","sorcery::controller::instancemethods#after_failed_login!()","sorcery::controller::instancemethods#after_login!()","sorcery::controller::instancemethods#after_logout!()","sorcery::providers::base#auth_hash()","sorcery::model::classmethods#authenticate()","sorcery::model#authenticates_with_sorcery!()","sorcery::protocols::oauth#authorize_url()","sorcery::protocols::oauth2#authorize_url()","sorcery::providers::facebook#authorize_url()","sorcery::controller::instancemethods#auto_login()","sorcery::controller::submodules::rememberme::instancemethods#auto_login()","sorcery::controller::instancemethods#before_logout!()","sorcery::protocols::oauth2#build_client()","sorcery::testhelpers::internal#build_new_user()","sorceryactivitylogging#change()","sorcerybruteforceprotection#change()","sorcerycore#change()","sorceryexternal#change()","sorceryrememberme#change()","sorceryresetpassword#change()","sorceryuseractivation#change()","sorcery::model::submodules::resetpassword::instancemethods#change_password!()","sorcery::generators::installgenerator#check_deprecated_options()","sorcery::model::submodules::resetpassword::instancemethods#clear_reset_password_token()","sorcery::testhelpers::internal::rails#clear_user_without_logout()","sorcery::model::instancemethods#clear_virtual_password()","sorcery::controller::config::configure()","sorcery::controller::config::configure!()","sorcery::generators::installgenerator#configure_initializer_file()","sorcery::generators::installgenerator#configure_model()","sorcery::generators::installgenerator#copy_initializer_file()","sorcery::generators::installgenerator#copy_migration_files()","sorcery::cryptoproviders::bcrypt::cost()","sorcery::testhelpers::internal::cost()","sorcery::cryptoproviders::bcrypt::cost_matches?()","sorcery::controller::submodules::external::instancemethods#create_and_validate_from()","sorcery::model::submodules::external::classmethods#create_and_validate_from_provider()","sorcery::controller::submodules::external::instancemethods#create_from()","sorcery::model::submodules::external::classmethods#create_from_provider()","sorcery::testhelpers::internal#create_new_external_user()","sorcery::testhelpers::internal#create_new_user()","sorcery::adapters::mongomapperadapter::credential_regex()","sorcery::adapters::mongoidadapter::credential_regex()","sorcery::controller::instancemethods#current_user()","sorcery::controller::instancemethods#current_user=()","sorcery::controller::submodules::activitylogging::instancemethods#current_users()","sorcery::model::submodules::activitylogging::classmethods#current_users()","sorcery::testhelpers::internal#custom_create_new_external_user()","sorcery::model::config#custom_encryption_provider=()","sorcery::cryptoproviders::aes256::decrypt()","sorcery::model::submodules::activitylogging::classmethods#define_activity_logging_fields()","sorcery::model#define_base_fields()","sorcery::model::submodules::bruteforceprotection::classmethods#define_brute_force_protection_fields()","sorcery::adapters::activerecordadapter::define_callback()","sorcery::adapters::datamapperadapter::define_callback()","sorcery::adapters::mongomapperadapter::define_callback()","sorcery::adapters::mongoidadapter::define_callback()","sorcery::adapters::activerecordadapter::define_field()","sorcery::adapters::datamapperadapter::define_field()","sorcery::adapters::mongomapperadapter::define_field()","sorcery::adapters::mongoidadapter::define_field()","sorcery::model::submodules::rememberme::classmethods#define_remember_me_fields()","sorcery::model::submodules::resetpassword::classmethods#define_reset_password_fields()","sorcery::model::submodules::useractivation::classmethods#define_user_activation_fields()","sorcery::adapters::baseadapter::delete_all()","sorcery::adapters::datamapperadapter::delete_all()","sorcery::model::submodules::resetpassword::instancemethods#deliver_reset_password_instructions!()","sorcery::providers::base::descendants()","hash#destroy()","sorcery::cryptoproviders::aes256::encrypt()","sorcery::cryptoproviders::bcrypt::encrypt()","sorcery::cryptoproviders::common::encrypt()","sorcery::cryptoproviders::sha1::encrypt()","sorcery::model::classmethods#encrypt()","sorcery::model::instancemethods#encrypt_password()","sorcery::model::config#encryption_algorithm=()","sorcery::model::instancemethods#external?()","sorcery::controller::submodules::external::external_providers=()","sorcery::generators::helpers#file_path()","sorcery::adapters::baseadapter::find()","sorcery::adapters::datamapperadapter::find()","sorcery::adapters::activerecordadapter#find_authentication_by_oauth_credentials()","sorcery::adapters::activerecordadapter::find_by_activation_token()","sorcery::adapters::datamapperadapter::find_by_activation_token()","sorcery::adapters::mongomapperadapter::find_by_activation_token()","sorcery::adapters::mongoidadapter::find_by_activation_token()","sorcery::adapters::activerecordadapter::find_by_credentials()","sorcery::adapters::datamapperadapter::find_by_credentials()","sorcery::adapters::mongomapperadapter::find_by_credentials()","sorcery::adapters::mongoidadapter::find_by_credentials()","sorcery::adapters::activerecordadapter::find_by_email()","sorcery::adapters::datamapperadapter::find_by_email()","sorcery::adapters::mongomapperadapter::find_by_email()","sorcery::adapters::mongoidadapter::find_by_email()","sorcery::adapters::activerecordadapter::find_by_id()","sorcery::adapters::datamapperadapter::find_by_id()","sorcery::adapters::mongomapperadapter::find_by_id()","sorcery::adapters::mongoidadapter::find_by_id()","sorcery::adapters::activerecordadapter::find_by_oauth_credentials()","sorcery::adapters::datamapperadapter::find_by_oauth_credentials()","sorcery::adapters::mongomapperadapter::find_by_oauth_credentials()","sorcery::adapters::mongoidadapter::find_by_oauth_credentials()","sorcery::adapters::activerecordadapter::find_by_remember_me_token()","sorcery::adapters::datamapperadapter::find_by_remember_me_token()","sorcery::adapters::mongoidadapter::find_by_remember_me_token()","sorcery::adapters::datamapperadapter::find_by_sorcery_token()","sorcery::adapters::mongomapperadapter::find_by_sorcery_token()","sorcery::adapters::activerecordadapter::find_by_token()","sorcery::adapters::datamapperadapter::find_by_token()","sorcery::adapters::mongomapperadapter::find_by_token()","sorcery::adapters::mongoidadapter::find_by_token()","sorcery::adapters::activerecordadapter::find_by_username()","sorcery::adapters::datamapperadapter::find_by_username()","sorcery::adapters::mongomapperadapter::find_by_username()","sorcery::adapters::mongoidadapter::find_by_username()","sorcery::controller::submodules::rememberme::instancemethods#forget_me!()","sorcery::model::submodules::rememberme::instancemethods#forget_me!()","sorcery::adapters::baseadapter::from()","sorcery::model::temporarytoken::generate_random_token()","sorcery::model::submodules::resetpassword::instancemethods#generate_reset_password_token!()","sorcery::model::instancemethods#generic_send_email()","sorcery::protocols::oauth#get_access_token()","sorcery::protocols::oauth2#get_access_token()","sorcery::protocols::oauth#get_consumer()","sorcery::providers::jira#get_consumer()","sorcery::providers::linkedin#get_consumer()","sorcery::providers::twitter#get_consumer()","sorcery::providers::xing#get_consumer()","sorcery::adapters::activerecordadapter::get_current_users()","sorcery::adapters::datamapperadapter::get_current_users()","sorcery::adapters::mongomapperadapter::get_current_users()","sorcery::adapters::mongoidadapter::get_current_users()","sorcery::protocols::oauth#get_request_token()","sorcery::providers::facebook#get_user_hash()","sorcery::providers::github#get_user_hash()","sorcery::providers::google#get_user_hash()","sorcery::providers::heroku#get_user_hash()","sorcery::providers::jira#get_user_hash()","sorcery::providers::linkedin#get_user_hash()","sorcery::providers::liveid#get_user_hash()","sorcery::providers::salesforce#get_user_hash()","sorcery::providers::twitter#get_user_hash()","sorcery::providers::vk#get_user_hash()","sorcery::providers::xing#get_user_hash()","sorcery::controller::instancemethods#handle_unverified_request()","sorcery::providers::base#has_callback?()","sorcery::model::submodules::rememberme::instancemethods#has_remember_me_token?()","sorcery::model#include_required_submodules!()","sorcery::controller::included()","sorcery::controller::submodules::activitylogging::included()","sorcery::controller::submodules::bruteforceprotection::included()","sorcery::controller::submodules::external::included()","sorcery::controller::submodules::httpbasicauth::included()","sorcery::controller::submodules::rememberme::included()","sorcery::controller::submodules::sessiontimeout::included()","sorcery::cryptoproviders::common::included()","sorcery::model::submodules::activitylogging::included()","sorcery::model::submodules::bruteforceprotection::included()","sorcery::model::submodules::external::included()","sorcery::model::submodules::rememberme::included()","sorcery::model::submodules::resetpassword::included()","sorcery::model::submodules::useractivation::included()","sorcery::model::temporarytoken::included()","sorcery::testhelpers::internal::included()","sorcery::adapters::activerecordadapter#increment()","sorcery::adapters::baseadapter#increment()","sorcery::adapters::datamapperadapter#increment()","sorcery::adapters::mongomapperadapter#increment()","sorcery::adapters::mongoidadapter#increment()","sorcery::model::classmethods::inherited()","sorcery::controller::config::init!()","sorcery::model#init_orm_hooks!()","sorcery::generators::installgenerator#inject_sorcery_to_model()","sorcery::cryptoproviders::sha1::join_token()","sorcery::cryptoproviders::bcrypt::join_tokens()","sorcery::model::submodules::useractivation::classmethods#load_from_activation_token()","sorcery::model::submodules::external::classmethods#load_from_provider()","sorcery::model::submodules::resetpassword::classmethods#load_from_reset_password_token()","sorcery::model::temporarytoken::classmethods#load_from_token()","sorcery::model::submodules::bruteforceprotection::classmethods#load_from_unlock_token()","sorcery::model::submodules::bruteforceprotection::instancemethods#lock!()","sorcery::model::submodules::bruteforceprotection::instancemethods#locked?()","sorcery::controller::instancemethods#logged_in?()","sorcery::testhelpers::rails::controller#logged_in?()","sorcery::controller::instancemethods#login()","sorcery::controller::submodules::external::instancemethods#login_at()","sorcery::controller::submodules::external::instancemethods#login_from()","sorcery::controller::submodules::httpbasicauth::instancemethods#login_from_basic_auth()","sorcery::controller::submodules::rememberme::instancemethods#login_from_cookie()","sorcery::controller::instancemethods#login_from_other_sources()","sorcery::controller::instancemethods#login_from_session()","sorcery::providers::facebook#login_url()","sorcery::providers::github#login_url()","sorcery::providers::google#login_url()","sorcery::providers::heroku#login_url()","sorcery::providers::jira#login_url()","sorcery::providers::linkedin#login_url()","sorcery::providers::liveid#login_url()","sorcery::providers::salesforce#login_url()","sorcery::providers::twitter#login_url()","sorcery::providers::vk#login_url()","sorcery::providers::xing#login_url()","sorcery::testhelpers::rails::controller#login_user()","sorcery::testhelpers::rails::integration#login_user()","sorcery::controller::instancemethods#logout()","sorcery::testhelpers::rails::controller#logout_user()","sorcery::testhelpers::rails::integration#logout_user()","sorcery::cryptoproviders::aes256::matches?()","sorcery::cryptoproviders::bcrypt::matches?()","sorcery::cryptoproviders::common::matches?()","sorcery::controller::submodules::activitylogging::merge_activity_logging_defaults!()","sorcery::controller::submodules::external::merge_external_defaults!()","sorcery::controller::submodules::httpbasicauth::merge_http_basic_auth_defaults!()","sorcery::controller::submodules::rememberme::merge_remember_me_defaults!()","sorcery::controller::submodules::sessiontimeout::merge_session_timeout_defaults!()","sorcery::generators::helpers#model_class_name()","sorcery::generators::helpers#model_name()","sorcery::generators::helpers#model_path()","sorcery::adapters::mongoidadapter#mongoid_4?()","sorcery::providers::base::name()","sorcery::generators::helpers#namespace()","sorcery::generators::helpers#namespaced?()","sorcery::adapters::baseadapter::new()","sorcery::model::config::new()","sorcery::providers::base::new()","sorcery::providers::facebook::new()","sorcery::providers::github::new()","sorcery::providers::google::new()","sorcery::providers::heroku::new()","sorcery::providers::jira::new()","sorcery::providers::linkedin::new()","sorcery::providers::liveid::new()","sorcery::providers::salesforce::new()","sorcery::providers::twitter::new()","sorcery::providers::vk::new()","sorcery::providers::xing::new()","sorcery::cryptoproviders::bcrypt::new_from_hash()","sorcery::generators::installgenerator::next_migration_number()","sorcery::controller::instancemethods#not_authenticated()","sorcery::protocols::oauth#oauth_version()","sorcery::protocols::oauth2#oauth_version()","sorcery::generators::installgenerator#only_submodules?()","sorcery::model::submodules::bruteforceprotection::instancemethods#prevent_locked_user_login()","sorcery::model::submodules::useractivation::instancemethods#prevent_non_active_login()","sorcery::providers::facebook#process_callback()","sorcery::providers::github#process_callback()","sorcery::providers::google#process_callback()","sorcery::providers::heroku#process_callback()","sorcery::providers::jira#process_callback()","sorcery::providers::linkedin#process_callback()","sorcery::providers::liveid#process_callback()","sorcery::providers::salesforce#process_callback()","sorcery::providers::twitter#process_callback()","sorcery::providers::vk#process_callback()","sorcery::providers::xing#process_callback()","sorcery::controller::submodules::httpbasicauth::instancemethods#realm_name_by_controller()","sorcery::controller::instancemethods#redirect_back_or_to()","sorcery::model::submodules::bruteforceprotection::instancemethods#register_failed_login!()","sorcery::controller::submodules::activitylogging::instancemethods#register_last_activity_time_to_db()","sorcery::controller::submodules::activitylogging::instancemethods#register_last_ip_address()","sorcery::controller::submodules::sessiontimeout::instancemethods#register_login_time()","sorcery::controller::submodules::activitylogging::instancemethods#register_login_time_to_db()","sorcery::controller::submodules::activitylogging::instancemethods#register_logout_time_to_db()","sorcery::testhelpers::internal#reload_user_class()","sorcery::controller::submodules::rememberme::instancemethods#remember_me!()","sorcery::model::submodules::rememberme::instancemethods#remember_me!()","sorcery::controller::submodules::rememberme::instancemethods#remember_me_if_asked_to()","sorcery::controller::instancemethods#require_login()","sorcery::controller::submodules::httpbasicauth::instancemethods#require_login_from_http_basic()","sorcery::controller::config::reset!()","sorcery::cryptoproviders::bcrypt::reset!()","sorcery::cryptoproviders::common::reset!()","sorcery::model::config#reset!()","sorcery::controller::submodules::bruteforceprotection::instancemethods#reset_failed_logins_count!()","sorcery::controller::instancemethods#reset_sorcery_session()","sorcery::adapters::activerecordadapter#save()","sorcery::adapters::datamapperadapter#save()","sorcery::adapters::mongomapperadapter#save()","sorcery::adapters::mongoidadapter#save()","sorcery::cryptoproviders::md5::secure_digest()","sorcery::cryptoproviders::sha1::secure_digest()","sorcery::cryptoproviders::sha256::secure_digest()","sorcery::cryptoproviders::sha512::secure_digest()","sorcery::model::submodules::useractivation::instancemethods#send_activation_needed_email!()","sorcery::model::submodules::useractivation::instancemethods#send_activation_needed_email?()","sorcery::model::submodules::useractivation::instancemethods#send_activation_success_email!()","sorcery::model::submodules::useractivation::instancemethods#send_activation_success_email?()","sorcery::model::submodules::resetpassword::instancemethods#send_reset_password_email!()","sorcery::model::submodules::bruteforceprotection::instancemethods#send_unlock_token_email!()","sorcery::model::classmethods#set_encryption_attributes()","sorcery::model::submodules::activitylogging::instancemethods#set_last_activity_at()","sorcery::model::submodules::activitylogging::instancemethods#set_last_ip_addess()","sorcery::model::submodules::activitylogging::instancemethods#set_last_login_at()","sorcery::model::submodules::activitylogging::instancemethods#set_last_logout_at()","sorcery::controller::submodules::rememberme::instancemethods#set_remember_me_cookie!()","sorcery::model::submodules::useractivation::instancemethods#setup_activation()","sorcery::adapters::datamapperadapter::wrapper#sorcery_adapter()","sorcery::adapters::datamapperadapter::wrapper::classmethods#sorcery_adapter()","sorcery::adapters::mongomapperadapter::wrapper#sorcery_adapter()","sorcery::adapters::mongomapperadapter::wrapper::classmethods#sorcery_adapter()","sorcery::model::classmethods#sorcery_config()","sorcery::model::instancemethods#sorcery_config()","sorcery::generators::helpers#sorcery_config_path()","sorcery::testhelpers::internal::rails#sorcery_controller_external_property_set()","sorcery::testhelpers::internal::rails#sorcery_controller_property_set()","sorcery::controller::submodules::external::instancemethods#sorcery_fetch_user_hash()","sorcery::controller::submodules::external::instancemethods#sorcery_fixup_callback_url()","sorcery::controller::submodules::external::instancemethods#sorcery_get_provider()","sorcery::controller::submodules::external::instancemethods#sorcery_login_url()","sorcery::testhelpers::internal#sorcery_model_property_set()","sorcery::testhelpers::internal::rails#sorcery_reload!()","sorcery::controller::submodules::sessiontimeout::instancemethods#sorcery_session_expired?()","sorcery::cryptoproviders::bcrypt::stretches()","sorcery::cryptoproviders::common::stretches()","sorcery::adapters::activerecordadapter::transaction()","sorcery::adapters::datamapperadapter::transaction()","sorcery::adapters::mongomapperadapter::transaction()","sorcery::adapters::mongoidadapter::transaction()","sorcery::model::submodules::bruteforceprotection::instancemethods#unlock!()","sorcery::model::submodules::bruteforceprotection::instancemethods#unlocked?()","sorcery::controller::config::update!()","sorcery::adapters::baseadapter#update_attribute()","sorcery::adapters::datamapperadapter#update_attribute()","sorcery::adapters::mongoidadapter#update_attribute()","sorcery::adapters::activerecordadapter#update_attributes()","sorcery::adapters::datamapperadapter#update_attributes()","sorcery::adapters::mongomapperadapter#update_attributes()","sorcery::adapters::mongoidadapter#update_attributes()","sorcery::controller::submodules::bruteforceprotection::instancemethods#update_failed_logins_count!()","sorcery::testhelpers::internal#update_model()","sorcery::controller::submodules::external::instancemethods#user_attrs()","sorcery::controller::instancemethods#user_class()","sorcery::controller::config::user_config()","sorcery::model::config#username_attribute_names=()","sorcery::model::instancemethods#valid_password?()","sorcery::model::submodules::resetpassword::classmethods#validate_mailer_defined()","sorcery::model::submodules::useractivation::classmethods#validate_mailer_defined()","sorcery::controller::submodules::sessiontimeout::instancemethods#validate_session()","sorcery::adapters::datamapperadapter::verify_submodules_compatibility!()","","",""],"info":[["Hash","","Hash.html","","<p>a patch to fix a bug in testing that happens when you &#39;destroy&#39; a\nsession twice. After the first …\n"],["Sorcery","","Sorcery.html","","<p>Each class which calls &#39;activate_sorcery!&#39; receives an instance of\nthis class. Every submodule …\n"],["Sorcery::ActiveRecord","","Sorcery/ActiveRecord.html","",""],["Sorcery::Adapters","","Sorcery/Adapters.html","",""],["Sorcery::Adapters::ActiveRecordAdapter","","Sorcery/Adapters/ActiveRecordAdapter.html","",""],["Sorcery::Adapters::BaseAdapter","","Sorcery/Adapters/BaseAdapter.html","",""],["Sorcery::Adapters::DataMapperAdapter","","Sorcery/Adapters/DataMapperAdapter.html","",""],["Sorcery::Adapters::DataMapperAdapter::Wrapper","","Sorcery/Adapters/DataMapperAdapter/Wrapper.html","",""],["Sorcery::Adapters::DataMapperAdapter::Wrapper::ClassMethods","","Sorcery/Adapters/DataMapperAdapter/Wrapper/ClassMethods.html","",""],["Sorcery::Adapters::MongoMapperAdapter","","Sorcery/Adapters/MongoMapperAdapter.html","",""],["Sorcery::Adapters::MongoMapperAdapter::Wrapper","","Sorcery/Adapters/MongoMapperAdapter/Wrapper.html","",""],["Sorcery::Adapters::MongoMapperAdapter::Wrapper::ClassMethods","","Sorcery/Adapters/MongoMapperAdapter/Wrapper/ClassMethods.html","",""],["Sorcery::Adapters::MongoidAdapter","","Sorcery/Adapters/MongoidAdapter.html","",""],["Sorcery::Controller","","Sorcery/Controller.html","",""],["Sorcery::Controller::Config","","Sorcery/Controller/Config.html","",""],["Sorcery::Controller::InstanceMethods","","Sorcery/Controller/InstanceMethods.html","",""],["Sorcery::Controller::Submodules","","Sorcery/Controller/Submodules.html","",""],["Sorcery::Controller::Submodules::ActivityLogging","","Sorcery/Controller/Submodules/ActivityLogging.html","","<p>This submodule keeps track of events such as login, logout, and last\nactivity time, per user. It helps …\n"],["Sorcery::Controller::Submodules::ActivityLogging::InstanceMethods","","Sorcery/Controller/Submodules/ActivityLogging/InstanceMethods.html","",""],["Sorcery::Controller::Submodules::BruteForceProtection","","Sorcery/Controller/Submodules/BruteForceProtection.html","","<p>This module helps protect user accounts by locking them down after too many\nfailed attemps to login were …\n"],["Sorcery::Controller::Submodules::BruteForceProtection::InstanceMethods","","Sorcery/Controller/Submodules/BruteForceProtection/InstanceMethods.html","",""],["Sorcery::Controller::Submodules::External","","Sorcery/Controller/Submodules/External.html","","<p>This submodule helps you login users from external auth providers such as\nTwitter. This is the controller …\n"],["Sorcery::Controller::Submodules::External::InstanceMethods","","Sorcery/Controller/Submodules/External/InstanceMethods.html","",""],["Sorcery::Controller::Submodules::HttpBasicAuth","","Sorcery/Controller/Submodules/HttpBasicAuth.html","","<p>This submodule integrates HTTP Basic authentication into sorcery. You are\nprovided with a before filter, …\n"],["Sorcery::Controller::Submodules::HttpBasicAuth::InstanceMethods","","Sorcery/Controller/Submodules/HttpBasicAuth/InstanceMethods.html","",""],["Sorcery::Controller::Submodules::RememberMe","","Sorcery/Controller/Submodules/RememberMe.html","","<p>The Remember Me submodule takes care of setting the user&#39;s cookie so\nthat he will be automatically …\n"],["Sorcery::Controller::Submodules::RememberMe::InstanceMethods","","Sorcery/Controller/Submodules/RememberMe/InstanceMethods.html","",""],["Sorcery::Controller::Submodules::SessionTimeout","","Sorcery/Controller/Submodules/SessionTimeout.html","","<p>This submodule helps you set a timeout to all user sessions. The timeout\ncan be configured and also you …\n"],["Sorcery::Controller::Submodules::SessionTimeout::InstanceMethods","","Sorcery/Controller/Submodules/SessionTimeout/InstanceMethods.html","",""],["Sorcery::CryptoProviders","","Sorcery/CryptoProviders.html","","<p>The activate_sorcery method has a custom_crypto_provider configuration\noption.  This allows you to use …\n"],["Sorcery::CryptoProviders::AES256","","Sorcery/CryptoProviders/AES256.html","","<p>This encryption method is reversible if you have the supplied key.  So in\norder to use this encryption …\n"],["Sorcery::CryptoProviders::BCrypt","","Sorcery/CryptoProviders/BCrypt.html","","<p>For most apps Sha512 is plenty secure, but if you are building an app that\nstores nuclear  launch codes …\n"],["Sorcery::CryptoProviders::Common","","Sorcery/CryptoProviders/Common.html","",""],["Sorcery::CryptoProviders::MD5","","Sorcery/CryptoProviders/MD5.html","","<p>This class was made for the users transitioning from md5 based systems.  I\nhighly discourage using this …\n"],["Sorcery::CryptoProviders::SHA1","","Sorcery/CryptoProviders/SHA1.html","","<p>This class was made for the users transitioning from\nrestful_authentication. I highly discourage using …\n"],["Sorcery::CryptoProviders::SHA256","","Sorcery/CryptoProviders/SHA256.html","","<p>Sha256\n<p>Uses the Sha256 hash algorithm to encrypt passwords.\n"],["Sorcery::CryptoProviders::SHA512","","Sorcery/CryptoProviders/SHA512.html","","<p>Sha512\n<p>Uses the Sha512 hash algorithm to encrypt passwords.\n"],["Sorcery::DataMapper","","Sorcery/DataMapper.html","",""],["Sorcery::Engine","","Sorcery/Engine.html","","<p>The Sorcery engine takes care of extending ActiveRecord (if used) and\nActionController, With the plugin …\n"],["Sorcery::Engine::ActionController","","Sorcery/Engine/ActionController.html","",""],["Sorcery::Generators","","Sorcery/Generators.html","",""],["Sorcery::Generators::Helpers","","Sorcery/Generators/Helpers.html","",""],["Sorcery::Generators::InstallGenerator","","Sorcery/Generators/InstallGenerator.html","",""],["Sorcery::Model","","Sorcery/Model.html","","<p>This module handles all plugin operations which are related to the Model\nlayer in the MVC pattern. It …\n"],["Sorcery::Model::ClassMethods","","Sorcery/Model/ClassMethods.html","",""],["Sorcery::Model::Config","","Sorcery/Model/Config.html","",""],["Sorcery::Model::InstanceMethods","","Sorcery/Model/InstanceMethods.html","",""],["Sorcery::Model::Submodules","","Sorcery/Model/Submodules.html","",""],["Sorcery::Model::Submodules::ActivityLogging","","Sorcery/Model/Submodules/ActivityLogging.html","","<p>This submodule keeps track of events such as login, logout, and last\nactivity time, per user. It helps …\n"],["Sorcery::Model::Submodules::ActivityLogging::ClassMethods","","Sorcery/Model/Submodules/ActivityLogging/ClassMethods.html","",""],["Sorcery::Model::Submodules::ActivityLogging::InstanceMethods","","Sorcery/Model/Submodules/ActivityLogging/InstanceMethods.html","",""],["Sorcery::Model::Submodules::BruteForceProtection","","Sorcery/Model/Submodules/BruteForceProtection.html","","<p>This module helps protect user accounts by locking them down after too many\nfailed attemps to login were …\n"],["Sorcery::Model::Submodules::BruteForceProtection::ClassMethods","","Sorcery/Model/Submodules/BruteForceProtection/ClassMethods.html","",""],["Sorcery::Model::Submodules::BruteForceProtection::InstanceMethods","","Sorcery/Model/Submodules/BruteForceProtection/InstanceMethods.html","",""],["Sorcery::Model::Submodules::External","","Sorcery/Model/Submodules/External.html","","<p>This submodule helps you login users from external providers such as\nTwitter. This is the model part …\n"],["Sorcery::Model::Submodules::External::ClassMethods","","Sorcery/Model/Submodules/External/ClassMethods.html","",""],["Sorcery::Model::Submodules::External::InstanceMethods","","Sorcery/Model/Submodules/External/InstanceMethods.html","",""],["Sorcery::Model::Submodules::RememberMe","","Sorcery/Model/Submodules/RememberMe.html","","<p>The Remember Me submodule takes care of setting the user&#39;s cookie so\nthat he will be automatically …\n"],["Sorcery::Model::Submodules::RememberMe::ClassMethods","","Sorcery/Model/Submodules/RememberMe/ClassMethods.html","",""],["Sorcery::Model::Submodules::RememberMe::InstanceMethods","","Sorcery/Model/Submodules/RememberMe/InstanceMethods.html","",""],["Sorcery::Model::Submodules::ResetPassword","","Sorcery/Model/Submodules/ResetPassword.html","","<p>This submodule adds the ability to reset password via email confirmation.\nWhen the user requests an email …\n"],["Sorcery::Model::Submodules::ResetPassword::ClassMethods","","Sorcery/Model/Submodules/ResetPassword/ClassMethods.html","",""],["Sorcery::Model::Submodules::ResetPassword::InstanceMethods","","Sorcery/Model/Submodules/ResetPassword/InstanceMethods.html","",""],["Sorcery::Model::Submodules::UserActivation","","Sorcery/Model/Submodules/UserActivation.html","","<p>This submodule adds the ability to make the user activate his account via\nemail or any other way in which …\n"],["Sorcery::Model::Submodules::UserActivation::ClassMethods","","Sorcery/Model/Submodules/UserActivation/ClassMethods.html","",""],["Sorcery::Model::Submodules::UserActivation::InstanceMethods","","Sorcery/Model/Submodules/UserActivation/InstanceMethods.html","",""],["Sorcery::Model::TemporaryToken","","Sorcery/Model/TemporaryToken.html","","<p>This module encapsulates the logic for temporary token. A temporary token\nis created to identify a user …\n"],["Sorcery::Model::TemporaryToken::ClassMethods","","Sorcery/Model/TemporaryToken/ClassMethods.html","",""],["Sorcery::MongoMapper","","Sorcery/MongoMapper.html","",""],["Sorcery::Mongoid","","Sorcery/Mongoid.html","",""],["Sorcery::Mongoid::Document","","Sorcery/Mongoid/Document.html","",""],["Sorcery::Protocols","","Sorcery/Protocols.html","",""],["Sorcery::Protocols::Oauth","","Sorcery/Protocols/Oauth.html","",""],["Sorcery::Protocols::Oauth2","","Sorcery/Protocols/Oauth2.html","",""],["Sorcery::Providers","","Sorcery/Providers.html","",""],["Sorcery::Providers::Base","","Sorcery/Providers/Base.html","",""],["Sorcery::Providers::Facebook","","Sorcery/Providers/Facebook.html","","<p>This class adds support for OAuth with facebook.com.\n\n<pre>config.facebook.key = &lt;key&gt;\nconfig.facebook.secret ...</pre>\n"],["Sorcery::Providers::Github","","Sorcery/Providers/Github.html","","<p>This class adds support for OAuth with github.com.\n\n<pre>config.github.key = &lt;key&gt;\nconfig.github.secret = &lt;secret&gt; ...</pre>\n"],["Sorcery::Providers::Google","","Sorcery/Providers/Google.html","","<p>This class adds support for OAuth with google.com.\n\n<pre>config.google.key = &lt;key&gt;\nconfig.google.secret = &lt;secret&gt; ...</pre>\n"],["Sorcery::Providers::Heroku","","Sorcery/Providers/Heroku.html","","<p>NOTE: The full path must be set for OAuth Callback URL when configuring the\nAPI Client Information on …\n"],["Sorcery::Providers::Jira","","Sorcery/Providers/Jira.html","","<p>This class adds support for OAuth with Jira\n\n<pre>config.jira.key = &lt;key&gt;\nconfig.jira.secret = &lt;secret&gt;\n...</pre>\n"],["Sorcery::Providers::Linkedin","","Sorcery/Providers/Linkedin.html","","<p>This class adds support for OAuth with Linkedin.com.\n\n<pre>config.linkedin.key = &lt;key&gt;\nconfig.linkedin.secret ...</pre>\n"],["Sorcery::Providers::Liveid","","Sorcery/Providers/Liveid.html","","<p>This class adds support for OAuth with microsoft liveid.\n\n<pre>config.liveid.key = &lt;key&gt;\nconfig.liveid.secret ...</pre>\n"],["Sorcery::Providers::Salesforce","","Sorcery/Providers/Salesforce.html","","<p>This class adds support for OAuth with salesforce.com.\n\n<pre>config.salesforce.key = &lt;key&gt;\nconfig.salesforce.secret ...</pre>\n"],["Sorcery::Providers::Twitter","","Sorcery/Providers/Twitter.html","","<p>This class adds support for OAuth with Twitter.com.\n\n<pre>config.twitter.key = &lt;key&gt;\nconfig.twitter.secret = ...</pre>\n"],["Sorcery::Providers::Vk","","Sorcery/Providers/Vk.html","","<p>This class adds support for OAuth with vk.com.\n\n<pre>config.vk.key = &lt;key&gt;\nconfig.vk.secret = &lt;secret&gt;\n...</pre>\n"],["Sorcery::Providers::Xing","","Sorcery/Providers/Xing.html","","<p>This class adds support for OAuth with xing.com.\n\n<pre>config.xing.key = &lt;key&gt;\nconfig.xing.secret = &lt;secret&gt; ...</pre>\n"],["Sorcery::TestHelpers","","Sorcery/TestHelpers.html","",""],["Sorcery::TestHelpers::Internal","","Sorcery/TestHelpers/Internal.html","","<p>Internal TestHelpers are used to test the gem, internally, and should not\nbe used to test apps <strong>using</strong> …\n"],["Sorcery::TestHelpers::Internal::Rails","","Sorcery/TestHelpers/Internal/Rails.html","",""],["Sorcery::TestHelpers::Rails","","Sorcery/TestHelpers/Rails.html","",""],["Sorcery::TestHelpers::Rails::Controller","","Sorcery/TestHelpers/Rails/Controller.html","",""],["Sorcery::TestHelpers::Rails::Integration","","Sorcery/TestHelpers/Rails/Integration.html","",""],["SorceryActivityLogging","","SorceryActivityLogging.html","",""],["SorceryBruteForceProtection","","SorceryBruteForceProtection.html","",""],["SorceryCore","","SorceryCore.html","",""],["SorceryExternal","","SorceryExternal.html","",""],["SorceryRememberMe","","SorceryRememberMe.html","",""],["SorceryResetPassword","","SorceryResetPassword.html","",""],["SorceryUserActivation","","SorceryUserActivation.html","",""],["access_token","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-access_token","(*args)","<p>for backwards compatibility\n"],["activate!","Sorcery::Model::Submodules::UserActivation::InstanceMethods","Sorcery/Model/Submodules/UserActivation/InstanceMethods.html#method-i-activate-21","()","<p>clears activation code, sets the user as &#39;active&#39; and optionaly\nsends a success email.\n"],["add_config_inheritance","Sorcery::Model::ClassMethods","Sorcery/Model/ClassMethods.html#method-i-add_config_inheritance","()",""],["add_provider_to_user","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-add_provider_to_user","(provider_name)","<p>If user is logged, he can add all available providers into his account\n"],["add_provider_to_user","Sorcery::Model::Submodules::External::InstanceMethods","Sorcery/Model/Submodules/External/InstanceMethods.html#method-i-add_provider_to_user","(provider, uid)",""],["aes","Sorcery::CryptoProviders::AES256","Sorcery/CryptoProviders/AES256.html#method-c-aes","()",""],["after_failed_login!","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-after_failed_login-21","(credentials)",""],["after_login!","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-after_login-21","(user, credentials = [])",""],["after_logout!","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-after_logout-21","()",""],["auth_hash","Sorcery::Providers::Base","Sorcery/Providers/Base.html#method-i-auth_hash","(access_token, hash={})",""],["authenticate","Sorcery::Model::ClassMethods","Sorcery/Model/ClassMethods.html#method-i-authenticate","(*credentials)","<p>The default authentication method. Takes a username and password, Finds the\nuser by the username and …\n"],["authenticates_with_sorcery!","Sorcery::Model","Sorcery/Model.html#method-i-authenticates_with_sorcery-21","()",""],["authorize_url","Sorcery::Protocols::Oauth","Sorcery/Protocols/Oauth.html#method-i-authorize_url","(args)",""],["authorize_url","Sorcery::Protocols::Oauth2","Sorcery/Protocols/Oauth2.html#method-i-authorize_url","(options = {})",""],["authorize_url","Sorcery::Providers::Facebook","Sorcery/Providers/Facebook.html#method-i-authorize_url","()","<p>overrides oauth2#authorize_url to allow customized scope.\n"],["auto_login","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-auto_login","(user, should_remember = false)","<p>login a user instance\n<p>@param [&lt;User-Model&gt;] user the user instance. @return - do not depend\non the …\n"],["auto_login","Sorcery::Controller::Submodules::RememberMe::InstanceMethods","Sorcery/Controller/Submodules/RememberMe/InstanceMethods.html#method-i-auto_login","(user, should_remember = false)","<p>Override. logins a user instance, and optionally remembers him.\n"],["before_logout!","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-before_logout-21","(user)",""],["build_client","Sorcery::Protocols::Oauth2","Sorcery/Protocols/Oauth2.html#method-i-build_client","(options = {})",""],["build_new_user","Sorcery::TestHelpers::Internal","Sorcery/TestHelpers/Internal.html#method-i-build_new_user","(attributes_hash = nil)",""],["change","SorceryActivityLogging","SorceryActivityLogging.html#method-i-change","()",""],["change","SorceryBruteForceProtection","SorceryBruteForceProtection.html#method-i-change","()",""],["change","SorceryCore","SorceryCore.html#method-i-change","()",""],["change","SorceryExternal","SorceryExternal.html#method-i-change","()",""],["change","SorceryRememberMe","SorceryRememberMe.html#method-i-change","()",""],["change","SorceryResetPassword","SorceryResetPassword.html#method-i-change","()",""],["change","SorceryUserActivation","SorceryUserActivation.html#method-i-change","()",""],["change_password!","Sorcery::Model::Submodules::ResetPassword::InstanceMethods","Sorcery/Model/Submodules/ResetPassword/InstanceMethods.html#method-i-change_password-21","(new_password)","<p>Clears token and tries to update the new password for the user.\n"],["check_deprecated_options","Sorcery::Generators::InstallGenerator","Sorcery/Generators/InstallGenerator.html#method-i-check_deprecated_options","()",""],["clear_reset_password_token","Sorcery::Model::Submodules::ResetPassword::InstanceMethods","Sorcery/Model/Submodules/ResetPassword/InstanceMethods.html#method-i-clear_reset_password_token","()","<p>Clears the token.\n"],["clear_user_without_logout","Sorcery::TestHelpers::Internal::Rails","Sorcery/TestHelpers/Internal/Rails.html#method-i-clear_user_without_logout","()","<p>This helper is used to fake multiple users signing in in tests. It does so\nby clearing @current_user, …\n"],["clear_virtual_password","Sorcery::Model::InstanceMethods","Sorcery/Model/InstanceMethods.html#method-i-clear_virtual_password","()",""],["configure","Sorcery::Controller::Config","Sorcery/Controller/Config.html#method-c-configure","(&blk)",""],["configure!","Sorcery::Controller::Config","Sorcery/Controller/Config.html#method-c-configure-21","()",""],["configure_initializer_file","Sorcery::Generators::InstallGenerator","Sorcery/Generators/InstallGenerator.html#method-i-configure_initializer_file","()",""],["configure_model","Sorcery::Generators::InstallGenerator","Sorcery/Generators/InstallGenerator.html#method-i-configure_model","()",""],["copy_initializer_file","Sorcery::Generators::InstallGenerator","Sorcery/Generators/InstallGenerator.html#method-i-copy_initializer_file","()","<p>Copy the initializer file to config/initializers folder.\n"],["copy_migration_files","Sorcery::Generators::InstallGenerator","Sorcery/Generators/InstallGenerator.html#method-i-copy_migration_files","()","<p>Copy the migrations files to db/migrate folder\n"],["cost","Sorcery::CryptoProviders::BCrypt","Sorcery/CryptoProviders/BCrypt.html#method-c-cost","()","<p>This is the :cost option for the BCrpyt library.  The higher the cost the\nmore secure it is and the longer …\n"],["cost","Sorcery::TestHelpers::Internal","Sorcery/TestHelpers/Internal.html#method-c-cost","()",""],["cost_matches?","Sorcery::CryptoProviders::BCrypt","Sorcery/CryptoProviders/BCrypt.html#method-c-cost_matches-3F","(hash)","<p>This method is used as a flag to tell Sorcery to “resave” the password \nupon a successful login, …\n"],["create_and_validate_from","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-create_and_validate_from","(provider_name)","<p> Initialize new user from provider informations.\n\n<pre>If a provider doesn&#39;t give required informations or username/email ...</pre>\n"],["create_and_validate_from_provider","Sorcery::Model::Submodules::External::ClassMethods","Sorcery/Model/Submodules/External/ClassMethods.html#method-i-create_and_validate_from_provider","(provider, uid, attrs)",""],["create_from","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-create_from","(provider_name, &block)","<p>this method automatically creates a new user from the data in the external\nuser hash. The mappings from …\n"],["create_from_provider","Sorcery::Model::Submodules::External::ClassMethods","Sorcery/Model/Submodules/External/ClassMethods.html#method-i-create_from_provider","(provider, uid, attrs)",""],["create_new_external_user","Sorcery::TestHelpers::Internal","Sorcery/TestHelpers/Internal.html#method-i-create_new_external_user","(provider, attributes_hash = nil)",""],["create_new_user","Sorcery::TestHelpers::Internal","Sorcery/TestHelpers/Internal.html#method-i-create_new_user","(attributes_hash = nil)",""],["credential_regex","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-credential_regex","(credential)",""],["credential_regex","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-credential_regex","(credential)",""],["current_user","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-current_user","()","<p>attempts to auto-login from the sources defined (session, basic_auth,\ncookie, etc.) returns the logged …\n"],["current_user=","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-current_user-3D","(user)",""],["current_users","Sorcery::Controller::Submodules::ActivityLogging::InstanceMethods","Sorcery/Controller/Submodules/ActivityLogging/InstanceMethods.html#method-i-current_users","()","<p>Returns an array of the active users.\n"],["current_users","Sorcery::Model::Submodules::ActivityLogging::ClassMethods","Sorcery/Model/Submodules/ActivityLogging/ClassMethods.html#method-i-current_users","()","<p>get all users with last_activity within timeout\n"],["custom_create_new_external_user","Sorcery::TestHelpers::Internal","Sorcery/TestHelpers/Internal.html#method-i-custom_create_new_external_user","(provider, authentication_class, attributes_hash = nil)",""],["custom_encryption_provider=","Sorcery::Model::Config","Sorcery/Model/Config.html#method-i-custom_encryption_provider-3D","(provider)",""],["decrypt","Sorcery::CryptoProviders::AES256","Sorcery/CryptoProviders/AES256.html#method-c-decrypt","(crypted)",""],["define_activity_logging_fields","Sorcery::Model::Submodules::ActivityLogging::ClassMethods","Sorcery/Model/Submodules/ActivityLogging/ClassMethods.html#method-i-define_activity_logging_fields","()",""],["define_base_fields","Sorcery::Model","Sorcery/Model.html#method-i-define_base_fields","()",""],["define_brute_force_protection_fields","Sorcery::Model::Submodules::BruteForceProtection::ClassMethods","Sorcery/Model/Submodules/BruteForceProtection/ClassMethods.html#method-i-define_brute_force_protection_fields","()",""],["define_callback","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-define_callback","(time, event, method_name, options={})",""],["define_callback","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-define_callback","(time, event, method_name, options={})",""],["define_callback","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-define_callback","(time, event, method_name, options={})",""],["define_callback","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-define_callback","(time, event, method_name, options={})",""],["define_field","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-define_field","(name, type, options={})",""],["define_field","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-define_field","(name, type, options={})",""],["define_field","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-define_field","(name, type, options={})",""],["define_field","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-define_field","(name, type, options={})",""],["define_remember_me_fields","Sorcery::Model::Submodules::RememberMe::ClassMethods","Sorcery/Model/Submodules/RememberMe/ClassMethods.html#method-i-define_remember_me_fields","()",""],["define_reset_password_fields","Sorcery::Model::Submodules::ResetPassword::ClassMethods","Sorcery/Model/Submodules/ResetPassword/ClassMethods.html#method-i-define_reset_password_fields","()",""],["define_user_activation_fields","Sorcery::Model::Submodules::UserActivation::ClassMethods","Sorcery/Model/Submodules/UserActivation/ClassMethods.html#method-i-define_user_activation_fields","()",""],["delete_all","Sorcery::Adapters::BaseAdapter","Sorcery/Adapters/BaseAdapter.html#method-c-delete_all","()",""],["delete_all","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-delete_all","()",""],["deliver_reset_password_instructions!","Sorcery::Model::Submodules::ResetPassword::InstanceMethods","Sorcery/Model/Submodules/ResetPassword/InstanceMethods.html#method-i-deliver_reset_password_instructions-21","()","<p>generates a reset code with expiration and sends an email to the user.\n"],["descendants","Sorcery::Providers::Base","Sorcery/Providers/Base.html#method-c-descendants","()","<p>Ensure that all descendant classes are loaded before run this\n"],["destroy","Hash","Hash.html#method-i-destroy","()",""],["encrypt","Sorcery::CryptoProviders::AES256","Sorcery/CryptoProviders/AES256.html#method-c-encrypt","(*tokens)",""],["encrypt","Sorcery::CryptoProviders::BCrypt","Sorcery/CryptoProviders/BCrypt.html#method-c-encrypt","(*tokens)","<p>Creates a BCrypt hash for the password passed.\n"],["encrypt","Sorcery::CryptoProviders::Common","Sorcery/CryptoProviders/Common.html#method-c-encrypt","(*tokens)",""],["encrypt","Sorcery::CryptoProviders::SHA1","Sorcery/CryptoProviders/SHA1.html#method-c-encrypt","(*tokens)","<p>Turns your raw password into a Sha1 hash.\n"],["encrypt","Sorcery::Model::ClassMethods","Sorcery/Model/ClassMethods.html#method-i-encrypt","(*tokens)","<p>encrypt tokens using current encryption_provider.\n"],["encrypt_password","Sorcery::Model::InstanceMethods","Sorcery/Model/InstanceMethods.html#method-i-encrypt_password","()","<p>creates new salt and saves it. encrypts password with salt and saves it.\n"],["encryption_algorithm=","Sorcery::Model::Config","Sorcery/Model/Config.html#method-i-encryption_algorithm-3D","(algo)",""],["external?","Sorcery::Model::InstanceMethods","Sorcery/Model/InstanceMethods.html#method-i-external-3F","()","<p>identifies whether this user is regular, i.e. we hold his credentials in\nour db, or that he is external, …\n"],["external_providers=","Sorcery::Controller::Submodules::External","Sorcery/Controller/Submodules/External.html#method-c-external_providers-3D","(providers)",""],["file_path","Sorcery::Generators::Helpers","Sorcery/Generators/Helpers.html#method-i-file_path","()",""],["find","Sorcery::Adapters::BaseAdapter","Sorcery/Adapters/BaseAdapter.html#method-c-find","(id)",""],["find","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find","(id)",""],["find_authentication_by_oauth_credentials","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-i-find_authentication_by_oauth_credentials","(relation_name, provider, uid)",""],["find_by_activation_token","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-find_by_activation_token","(token)",""],["find_by_activation_token","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find_by_activation_token","(token)",""],["find_by_activation_token","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-find_by_activation_token","(token)",""],["find_by_activation_token","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-find_by_activation_token","(token)",""],["find_by_credentials","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-find_by_credentials","(credentials)",""],["find_by_credentials","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find_by_credentials","(credentials)","<p>NOTE DM Adapter dependent DM creates MySQL tables case insensitive by\ndefault datamapper.lighthouseapp.com/projects/20609-datamapper/tickets/1105\n…\n"],["find_by_credentials","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-find_by_credentials","(credentials)",""],["find_by_credentials","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-find_by_credentials","(credentials)",""],["find_by_email","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-find_by_email","(email)",""],["find_by_email","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find_by_email","(email)",""],["find_by_email","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-find_by_email","(email)",""],["find_by_email","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-find_by_email","(email)",""],["find_by_id","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-find_by_id","(id)",""],["find_by_id","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find_by_id","(id)",""],["find_by_id","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-find_by_id","(id)",""],["find_by_id","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-find_by_id","(id)",""],["find_by_oauth_credentials","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-find_by_oauth_credentials","(provider, uid)",""],["find_by_oauth_credentials","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find_by_oauth_credentials","(provider, uid)",""],["find_by_oauth_credentials","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-find_by_oauth_credentials","(provider, uid)",""],["find_by_oauth_credentials","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-find_by_oauth_credentials","(provider, uid)",""],["find_by_remember_me_token","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-find_by_remember_me_token","(token)",""],["find_by_remember_me_token","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find_by_remember_me_token","(token)",""],["find_by_remember_me_token","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-find_by_remember_me_token","(token)",""],["find_by_sorcery_token","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find_by_sorcery_token","(token_attr_name, token)",""],["find_by_sorcery_token","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-find_by_sorcery_token","(token_attr_name, token)",""],["find_by_token","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-find_by_token","(token_attr_name, token)",""],["find_by_token","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find_by_token","(token_attr_name, token)",""],["find_by_token","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-find_by_token","(token_attr_name, token)",""],["find_by_token","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-find_by_token","(token_attr_name, token)",""],["find_by_username","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-find_by_username","(username)",""],["find_by_username","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-find_by_username","(username)",""],["find_by_username","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-find_by_username","(username)",""],["find_by_username","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-find_by_username","(username)",""],["forget_me!","Sorcery::Controller::Submodules::RememberMe::InstanceMethods","Sorcery/Controller/Submodules/RememberMe/InstanceMethods.html#method-i-forget_me-21","()","<p>Clears the cookie and clears the token from the db.\n"],["forget_me!","Sorcery::Model::Submodules::RememberMe::InstanceMethods","Sorcery/Model/Submodules/RememberMe/InstanceMethods.html#method-i-forget_me-21","()","<p>You shouldn&#39;t really use this one yourself - it&#39;s called by the\ncontroller&#39;s &#39;forget_me!&#39; …\n"],["from","Sorcery::Adapters::BaseAdapter","Sorcery/Adapters/BaseAdapter.html#method-c-from","(klass)",""],["generate_random_token","Sorcery::Model::TemporaryToken","Sorcery/Model/TemporaryToken.html#method-c-generate_random_token","()","<p>Random code, used for salt and temporary tokens.\n"],["generate_reset_password_token!","Sorcery::Model::Submodules::ResetPassword::InstanceMethods","Sorcery/Model/Submodules/ResetPassword/InstanceMethods.html#method-i-generate_reset_password_token-21","()","<p>generates a reset code with expiration\n"],["generic_send_email","Sorcery::Model::InstanceMethods","Sorcery/Model/InstanceMethods.html#method-i-generic_send_email","(method, mailer)","<p>calls the requested email method on the configured mailer supports both the\nActionMailer 3 way of calling, …\n"],["get_access_token","Sorcery::Protocols::Oauth","Sorcery/Protocols/Oauth.html#method-i-get_access_token","(args)",""],["get_access_token","Sorcery::Protocols::Oauth2","Sorcery/Protocols/Oauth2.html#method-i-get_access_token","(args, options = {})",""],["get_consumer","Sorcery::Protocols::Oauth","Sorcery/Protocols/Oauth.html#method-i-get_consumer","()",""],["get_consumer","Sorcery::Providers::Jira","Sorcery/Providers/Jira.html#method-i-get_consumer","()","\n<pre class=\"ruby\"><span class=\"ruby-constant\">Override</span> <span class=\"ruby-identifier\">included</span> <span class=\"ruby-identifier\">get_consumer</span> <span class=\"ruby-identifier\">method</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">provide</span> <span class=\"ruby-identifier\">authorize_path</span>\n</pre>\n<p>read extra configurations\n"],["get_consumer","Sorcery::Providers::Linkedin","Sorcery/Providers/Linkedin.html#method-i-get_consumer","()","<p>Override included get_consumer method to provide authorize_path\n"],["get_consumer","Sorcery::Providers::Twitter","Sorcery/Providers/Twitter.html#method-i-get_consumer","()","<p>Override included get_consumer method to provide authorize_path\n"],["get_consumer","Sorcery::Providers::Xing","Sorcery/Providers/Xing.html#method-i-get_consumer","()","<p>Override included get_consumer method to provide authorize_path\n"],["get_current_users","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-get_current_users","()",""],["get_current_users","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-get_current_users","()","<p>NOTE DM Adapter dependent\n"],["get_current_users","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-get_current_users","()",""],["get_current_users","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-get_current_users","()",""],["get_request_token","Sorcery::Protocols::Oauth","Sorcery/Protocols/Oauth.html#method-i-get_request_token","(token=nil,secret=nil)",""],["get_user_hash","Sorcery::Providers::Facebook","Sorcery/Providers/Facebook.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Github","Sorcery/Providers/Github.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Google","Sorcery/Providers/Google.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Heroku","Sorcery/Providers/Heroku.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Jira","Sorcery/Providers/Jira.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Linkedin","Sorcery/Providers/Linkedin.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Liveid","Sorcery/Providers/Liveid.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Salesforce","Sorcery/Providers/Salesforce.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Twitter","Sorcery/Providers/Twitter.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Vk","Sorcery/Providers/Vk.html#method-i-get_user_hash","(access_token)",""],["get_user_hash","Sorcery::Providers::Xing","Sorcery/Providers/Xing.html#method-i-get_user_hash","(access_token)",""],["handle_unverified_request","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-handle_unverified_request","()","<p>Overwrite Rails&#39; handle unverified request\n"],["has_callback?","Sorcery::Providers::Base","Sorcery/Providers/Base.html#method-i-has_callback-3F","()",""],["has_remember_me_token?","Sorcery::Model::Submodules::RememberMe::InstanceMethods","Sorcery/Model/Submodules/RememberMe/InstanceMethods.html#method-i-has_remember_me_token-3F","()",""],["include_required_submodules!","Sorcery::Model","Sorcery/Model.html#method-i-include_required_submodules-21","()","<p>includes required submodules into the model class, which usually is called\nUser.\n"],["included","Sorcery::Controller","Sorcery/Controller.html#method-c-included","(klass)",""],["included","Sorcery::Controller::Submodules::ActivityLogging","Sorcery/Controller/Submodules/ActivityLogging.html#method-c-included","(base)",""],["included","Sorcery::Controller::Submodules::BruteForceProtection","Sorcery/Controller/Submodules/BruteForceProtection.html#method-c-included","(base)",""],["included","Sorcery::Controller::Submodules::External","Sorcery/Controller/Submodules/External.html#method-c-included","(base)",""],["included","Sorcery::Controller::Submodules::HttpBasicAuth","Sorcery/Controller/Submodules/HttpBasicAuth.html#method-c-included","(base)",""],["included","Sorcery::Controller::Submodules::RememberMe","Sorcery/Controller/Submodules/RememberMe.html#method-c-included","(base)",""],["included","Sorcery::Controller::Submodules::SessionTimeout","Sorcery/Controller/Submodules/SessionTimeout.html#method-c-included","(base)",""],["included","Sorcery::CryptoProviders::Common","Sorcery/CryptoProviders/Common.html#method-c-included","(base)",""],["included","Sorcery::Model::Submodules::ActivityLogging","Sorcery/Model/Submodules/ActivityLogging.html#method-c-included","(base)",""],["included","Sorcery::Model::Submodules::BruteForceProtection","Sorcery/Model/Submodules/BruteForceProtection.html#method-c-included","(base)",""],["included","Sorcery::Model::Submodules::External","Sorcery/Model/Submodules/External.html#method-c-included","(base)",""],["included","Sorcery::Model::Submodules::RememberMe","Sorcery/Model/Submodules/RememberMe.html#method-c-included","(base)",""],["included","Sorcery::Model::Submodules::ResetPassword","Sorcery/Model/Submodules/ResetPassword.html#method-c-included","(base)",""],["included","Sorcery::Model::Submodules::UserActivation","Sorcery/Model/Submodules/UserActivation.html#method-c-included","(base)",""],["included","Sorcery::Model::TemporaryToken","Sorcery/Model/TemporaryToken.html#method-c-included","(base)",""],["included","Sorcery::TestHelpers::Internal","Sorcery/TestHelpers/Internal.html#method-c-included","(base)",""],["increment","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-i-increment","(field)",""],["increment","Sorcery::Adapters::BaseAdapter","Sorcery/Adapters/BaseAdapter.html#method-i-increment","(field)",""],["increment","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-i-increment","(attr)",""],["increment","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-i-increment","(attr)",""],["increment","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-i-increment","(attr)",""],["inherited","Sorcery::Model::ClassMethods","Sorcery/Model/ClassMethods.html#method-c-inherited","(subclass)",""],["init!","Sorcery::Controller::Config","Sorcery/Controller/Config.html#method-c-init-21","()",""],["init_orm_hooks!","Sorcery::Model","Sorcery/Model.html#method-i-init_orm_hooks-21","()","<p>add virtual password accessor and ORM callbacks.\n"],["inject_sorcery_to_model","Sorcery::Generators::InstallGenerator","Sorcery/Generators/InstallGenerator.html#method-i-inject_sorcery_to_model","()",""],["join_token","Sorcery::CryptoProviders::SHA1","Sorcery/CryptoProviders/SHA1.html#method-c-join_token","()",""],["join_tokens","Sorcery::CryptoProviders::BCrypt","Sorcery/CryptoProviders/BCrypt.html#method-c-join_tokens","(tokens)",""],["load_from_activation_token","Sorcery::Model::Submodules::UserActivation::ClassMethods","Sorcery/Model/Submodules/UserActivation/ClassMethods.html#method-i-load_from_activation_token","(token)","<p>Find user by token, also checks for expiration. Returns the user if token\nfound and is valid.\n"],["load_from_provider","Sorcery::Model::Submodules::External::ClassMethods","Sorcery/Model/Submodules/External/ClassMethods.html#method-i-load_from_provider","(provider,uid)","<p>takes a provider and uid and finds a user by them.\n"],["load_from_reset_password_token","Sorcery::Model::Submodules::ResetPassword::ClassMethods","Sorcery/Model/Submodules/ResetPassword/ClassMethods.html#method-i-load_from_reset_password_token","(token)","<p>Find user by token, also checks for expiration. Returns the user if token\nfound and is valid.\n"],["load_from_token","Sorcery::Model::TemporaryToken::ClassMethods","Sorcery/Model/TemporaryToken/ClassMethods.html#method-i-load_from_token","(token, token_attr_name, token_expiration_date_attr)",""],["load_from_unlock_token","Sorcery::Model::Submodules::BruteForceProtection::ClassMethods","Sorcery/Model/Submodules/BruteForceProtection/ClassMethods.html#method-i-load_from_unlock_token","(token)",""],["lock!","Sorcery::Model::Submodules::BruteForceProtection::InstanceMethods","Sorcery/Model/Submodules/BruteForceProtection/InstanceMethods.html#method-i-lock-21","()",""],["locked?","Sorcery::Model::Submodules::BruteForceProtection::InstanceMethods","Sorcery/Model/Submodules/BruteForceProtection/InstanceMethods.html#method-i-locked-3F","()",""],["logged_in?","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-logged_in-3F","()",""],["logged_in?","Sorcery::TestHelpers::Rails::Controller","Sorcery/TestHelpers/Rails/Controller.html#method-i-logged_in-3F","()",""],["login","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-login","(*credentials)","<p>Takes credentials and returns a user on successful authentication. Runs\nhooks after login or failed login. …\n"],["login_at","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-login_at","(provider_name, args = {})","<p>sends user to authenticate at the provider&#39;s website. after\nauthentication the user is redirected …\n"],["login_from","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-login_from","(provider_name, should_remember = false)","<p>tries to login the user from provider&#39;s callback\n"],["login_from_basic_auth","Sorcery::Controller::Submodules::HttpBasicAuth::InstanceMethods","Sorcery/Controller/Submodules/HttpBasicAuth/InstanceMethods.html#method-i-login_from_basic_auth","()","<p>given to main controller module as a login source callback\n"],["login_from_cookie","Sorcery::Controller::Submodules::RememberMe::InstanceMethods","Sorcery/Controller/Submodules/RememberMe/InstanceMethods.html#method-i-login_from_cookie","()","<p>Checks the cookie for a remember me token, tried to find a user with that\ntoken and logs the user in …\n"],["login_from_other_sources","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-login_from_other_sources","()","<p>Tries all available sources (methods) until one doesn&#39;t return false.\n"],["login_from_session","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-login_from_session","()",""],["login_url","Sorcery::Providers::Facebook","Sorcery/Providers/Facebook.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_url","Sorcery::Providers::Github","Sorcery/Providers/Github.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_url","Sorcery::Providers::Google","Sorcery/Providers/Google.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_url","Sorcery::Providers::Heroku","Sorcery/Providers/Heroku.html#method-i-login_url","(params, session)",""],["login_url","Sorcery::Providers::Jira","Sorcery/Providers/Jira.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_url","Sorcery::Providers::Linkedin","Sorcery/Providers/Linkedin.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_url","Sorcery::Providers::Liveid","Sorcery/Providers/Liveid.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_url","Sorcery::Providers::Salesforce","Sorcery/Providers/Salesforce.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_url","Sorcery::Providers::Twitter","Sorcery/Providers/Twitter.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_url","Sorcery::Providers::Vk","Sorcery/Providers/Vk.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_url","Sorcery::Providers::Xing","Sorcery/Providers/Xing.html#method-i-login_url","(params, session)","<p>calculates and returns the url to which the user should be redirected, to\nget authenticated at the external …\n"],["login_user","Sorcery::TestHelpers::Rails::Controller","Sorcery/TestHelpers/Rails/Controller.html#method-i-login_user","(user = nil, test_context = {})",""],["login_user","Sorcery::TestHelpers::Rails::Integration","Sorcery/TestHelpers/Rails/Integration.html#method-i-login_user","(user = nil, route = nil, http_method = :post)","<p>Accepts arguments for user to login, route to use and HTTP method Defaults\n- @user, &#39;sessions_url&#39; …\n"],["logout","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-logout","()","<p>Resets the session and runs hooks before and after.\n"],["logout_user","Sorcery::TestHelpers::Rails::Controller","Sorcery/TestHelpers/Rails/Controller.html#method-i-logout_user","()",""],["logout_user","Sorcery::TestHelpers::Rails::Integration","Sorcery/TestHelpers/Rails/Integration.html#method-i-logout_user","(route = nil, http_method = :get)","<p>Accepts route and HTTP method arguments Default - &#39;logout_url&#39; and\nGET\n"],["matches?","Sorcery::CryptoProviders::AES256","Sorcery/CryptoProviders/AES256.html#method-c-matches-3F","(crypted, *tokens)",""],["matches?","Sorcery::CryptoProviders::BCrypt","Sorcery/CryptoProviders/BCrypt.html#method-c-matches-3F","(hash, *tokens)","<p>Does the hash match the tokens? Uses the same tokens that were used to\nencrypt.\n"],["matches?","Sorcery::CryptoProviders::Common","Sorcery/CryptoProviders/Common.html#method-c-matches-3F","(crypted, *tokens)","<p>Does the crypted password match the tokens? Uses the same tokens that were\nused to encrypt.\n"],["merge_activity_logging_defaults!","Sorcery::Controller::Submodules::ActivityLogging","Sorcery/Controller/Submodules/ActivityLogging.html#method-c-merge_activity_logging_defaults-21","()",""],["merge_external_defaults!","Sorcery::Controller::Submodules::External","Sorcery/Controller/Submodules/External.html#method-c-merge_external_defaults-21","()",""],["merge_http_basic_auth_defaults!","Sorcery::Controller::Submodules::HttpBasicAuth","Sorcery/Controller/Submodules/HttpBasicAuth.html#method-c-merge_http_basic_auth_defaults-21","()",""],["merge_remember_me_defaults!","Sorcery::Controller::Submodules::RememberMe","Sorcery/Controller/Submodules/RememberMe.html#method-c-merge_remember_me_defaults-21","()",""],["merge_session_timeout_defaults!","Sorcery::Controller::Submodules::SessionTimeout","Sorcery/Controller/Submodules/SessionTimeout.html#method-c-merge_session_timeout_defaults-21","()","<p>timeout.\n"],["model_class_name","Sorcery::Generators::Helpers","Sorcery/Generators/Helpers.html#method-i-model_class_name","()","<p>Either return the model passed in a classified form or return the default\n“User”.\n"],["model_name","Sorcery::Generators::Helpers","Sorcery/Generators/Helpers.html#method-i-model_name","()",""],["model_path","Sorcery::Generators::Helpers","Sorcery/Generators/Helpers.html#method-i-model_path","()",""],["mongoid_4?","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-i-mongoid_4-3F","()",""],["name","Sorcery::Providers::Base","Sorcery/Providers/Base.html#method-c-name","()",""],["namespace","Sorcery::Generators::Helpers","Sorcery/Generators/Helpers.html#method-i-namespace","()",""],["namespaced?","Sorcery::Generators::Helpers","Sorcery/Generators/Helpers.html#method-i-namespaced-3F","()",""],["new","Sorcery::Adapters::BaseAdapter","Sorcery/Adapters/BaseAdapter.html#method-c-new","(model)",""],["new","Sorcery::Model::Config","Sorcery/Model/Config.html#method-c-new","()","<p>for available options.\n"],["new","Sorcery::Providers::Base","Sorcery/Providers/Base.html#method-c-new","()",""],["new","Sorcery::Providers::Facebook","Sorcery/Providers/Facebook.html#method-c-new","()",""],["new","Sorcery::Providers::Github","Sorcery/Providers/Github.html#method-c-new","()",""],["new","Sorcery::Providers::Google","Sorcery/Providers/Google.html#method-c-new","()",""],["new","Sorcery::Providers::Heroku","Sorcery/Providers/Heroku.html#method-c-new","()",""],["new","Sorcery::Providers::Jira","Sorcery/Providers/Jira.html#method-c-new","()",""],["new","Sorcery::Providers::Linkedin","Sorcery/Providers/Linkedin.html#method-c-new","()",""],["new","Sorcery::Providers::Liveid","Sorcery/Providers/Liveid.html#method-c-new","()",""],["new","Sorcery::Providers::Salesforce","Sorcery/Providers/Salesforce.html#method-c-new","()",""],["new","Sorcery::Providers::Twitter","Sorcery/Providers/Twitter.html#method-c-new","()",""],["new","Sorcery::Providers::Vk","Sorcery/Providers/Vk.html#method-c-new","()",""],["new","Sorcery::Providers::Xing","Sorcery/Providers/Xing.html#method-c-new","()",""],["new_from_hash","Sorcery::CryptoProviders::BCrypt","Sorcery/CryptoProviders/BCrypt.html#method-c-new_from_hash","(hash)",""],["next_migration_number","Sorcery::Generators::InstallGenerator","Sorcery/Generators/InstallGenerator.html#method-c-next_migration_number","(dirname)","<p>Define the next_migration_number method (necessary for the\nmigration_template method to work)\n"],["not_authenticated","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-not_authenticated","()","<p>The default action for denying non-authenticated users. You can override\nthis method in your controllers, …\n"],["oauth_version","Sorcery::Protocols::Oauth","Sorcery/Protocols/Oauth.html#method-i-oauth_version","()",""],["oauth_version","Sorcery::Protocols::Oauth2","Sorcery/Protocols/Oauth2.html#method-i-oauth_version","()",""],["only_submodules?","Sorcery::Generators::InstallGenerator","Sorcery/Generators/InstallGenerator.html#method-i-only_submodules-3F","()",""],["prevent_locked_user_login","Sorcery::Model::Submodules::BruteForceProtection::InstanceMethods","Sorcery/Model/Submodules/BruteForceProtection/InstanceMethods.html#method-i-prevent_locked_user_login","()","<p>Prevents a locked user from logging in, and unlocks users that expired\ntheir lock time. Runs as a hook …\n"],["prevent_non_active_login","Sorcery::Model::Submodules::UserActivation::InstanceMethods","Sorcery/Model/Submodules/UserActivation/InstanceMethods.html#method-i-prevent_non_active_login","()",""],["process_callback","Sorcery::Providers::Facebook","Sorcery/Providers/Facebook.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Github","Sorcery/Providers/Github.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Google","Sorcery/Providers/Google.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Heroku","Sorcery/Providers/Heroku.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Jira","Sorcery/Providers/Jira.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Linkedin","Sorcery/Providers/Linkedin.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Liveid","Sorcery/Providers/Liveid.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Salesforce","Sorcery/Providers/Salesforce.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Twitter","Sorcery/Providers/Twitter.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Vk","Sorcery/Providers/Vk.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["process_callback","Sorcery::Providers::Xing","Sorcery/Providers/Xing.html#method-i-process_callback","(params, session)","<p>tries to login the user from access token\n"],["realm_name_by_controller","Sorcery::Controller::Submodules::HttpBasicAuth::InstanceMethods","Sorcery/Controller/Submodules/HttpBasicAuth/InstanceMethods.html#method-i-realm_name_by_controller","()","<p>Sets the realm name by searching the controller name in the hash given at\nconfiguration time.\n"],["redirect_back_or_to","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-redirect_back_or_to","(url, flash_hash = {})","<p>used when a user tries to access a page while logged out, is asked to\nlogin, and we want to return him …\n"],["register_failed_login!","Sorcery::Model::Submodules::BruteForceProtection::InstanceMethods","Sorcery/Model/Submodules/BruteForceProtection/InstanceMethods.html#method-i-register_failed_login-21","()","<p>Called by the controller to increment the failed logins counter. Calls\n&#39;lock!&#39; if login retries …\n"],["register_last_activity_time_to_db","Sorcery::Controller::Submodules::ActivityLogging::InstanceMethods","Sorcery/Controller/Submodules/ActivityLogging/InstanceMethods.html#method-i-register_last_activity_time_to_db","()","<p>Updates last activity time on every request. The only exception is logout -\nwe do not update activity …\n"],["register_last_ip_address","Sorcery::Controller::Submodules::ActivityLogging::InstanceMethods","Sorcery/Controller/Submodules/ActivityLogging/InstanceMethods.html#method-i-register_last_ip_address","(user, credentials)","<p>Updates IP address on every login. This runs as a hook just after a\nsuccessful login.\n"],["register_login_time","Sorcery::Controller::Submodules::SessionTimeout::InstanceMethods","Sorcery/Controller/Submodules/SessionTimeout/InstanceMethods.html#method-i-register_login_time","(user, credentials)","<p>Registers last login to be used as the timeout starting point. Runs as a\nhook after a successful login. …\n"],["register_login_time_to_db","Sorcery::Controller::Submodules::ActivityLogging::InstanceMethods","Sorcery/Controller/Submodules/ActivityLogging/InstanceMethods.html#method-i-register_login_time_to_db","(user, credentials)","<p>registers last login time on every login. This runs as a hook just after a\nsuccessful login.\n"],["register_logout_time_to_db","Sorcery::Controller::Submodules::ActivityLogging::InstanceMethods","Sorcery/Controller/Submodules/ActivityLogging/InstanceMethods.html#method-i-register_logout_time_to_db","(user)","<p>registers last logout time on every logout. This runs as a hook just before\na logout.\n"],["reload_user_class","Sorcery::TestHelpers::Internal","Sorcery/TestHelpers/Internal.html#method-i-reload_user_class","()","<p>reload user class between specs so it will be possible to test the\ndifferent submodules in isolation …\n"],["remember_me!","Sorcery::Controller::Submodules::RememberMe::InstanceMethods","Sorcery/Controller/Submodules/RememberMe/InstanceMethods.html#method-i-remember_me-21","()","<p>This method sets the cookie and calls the user to save the token and the\nexpiration to db.\n"],["remember_me!","Sorcery::Model::Submodules::RememberMe::InstanceMethods","Sorcery/Model/Submodules/RememberMe/InstanceMethods.html#method-i-remember_me-21","()","<p>You shouldn&#39;t really use this one yourself - it&#39;s called by the\ncontroller&#39;s &#39;remember_me!&#39; …\n"],["remember_me_if_asked_to","Sorcery::Controller::Submodules::RememberMe::InstanceMethods","Sorcery/Controller/Submodules/RememberMe/InstanceMethods.html#method-i-remember_me_if_asked_to","(user, credentials)","<p>calls remember_me! if a third credential was passed to the login method.\nRuns as a hook after login. …\n"],["require_login","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-require_login","()","<p>To be used as before_filter. Will trigger auto-login attempts via the call\nto logged_in? If all attempts …\n"],["require_login_from_http_basic","Sorcery::Controller::Submodules::HttpBasicAuth::InstanceMethods","Sorcery/Controller/Submodules/HttpBasicAuth/InstanceMethods.html#method-i-require_login_from_http_basic","()","<p>to be used as a before_filter. The method sets a session when requesting\nthe user&#39;s credentials. …\n"],["reset!","Sorcery::Controller::Config","Sorcery/Controller/Config.html#method-c-reset-21","()","<p>Resets all configuration options to their default values.\n"],["reset!","Sorcery::CryptoProviders::BCrypt","Sorcery/CryptoProviders/BCrypt.html#method-c-reset-21","()",""],["reset!","Sorcery::CryptoProviders::Common","Sorcery/CryptoProviders/Common.html#method-c-reset-21","()",""],["reset!","Sorcery::Model::Config","Sorcery/Model/Config.html#method-i-reset-21","()","<p>Resets all configuration options to their default values.\n"],["reset_failed_logins_count!","Sorcery::Controller::Submodules::BruteForceProtection::InstanceMethods","Sorcery/Controller/Submodules/BruteForceProtection/InstanceMethods.html#method-i-reset_failed_logins_count-21","(user, credentials)","<p>Resets the failed logins counter. Runs as a hook after a successful login.\n"],["reset_sorcery_session","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-reset_sorcery_session","()","<p>put this into the catch block to rescue undefined method\n`destroy_session&#39; hotfix for github.com/NoamB/sorcery/issues/464 …\n"],["save","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-i-save","(options = {})",""],["save","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-i-save","(options = {})",""],["save","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-i-save","(options = {})",""],["save","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-i-save","(options = {})",""],["secure_digest","Sorcery::CryptoProviders::MD5","Sorcery/CryptoProviders/MD5.html#method-c-secure_digest","(digest)",""],["secure_digest","Sorcery::CryptoProviders::SHA1","Sorcery/CryptoProviders/SHA1.html#method-c-secure_digest","(digest)",""],["secure_digest","Sorcery::CryptoProviders::SHA256","Sorcery/CryptoProviders/SHA256.html#method-c-secure_digest","(digest)",""],["secure_digest","Sorcery::CryptoProviders::SHA512","Sorcery/CryptoProviders/SHA512.html#method-c-secure_digest","(digest)",""],["send_activation_needed_email!","Sorcery::Model::Submodules::UserActivation::InstanceMethods","Sorcery/Model/Submodules/UserActivation/InstanceMethods.html#method-i-send_activation_needed_email-21","()","<p>called automatically after user initial creation.\n"],["send_activation_needed_email?","Sorcery::Model::Submodules::UserActivation::InstanceMethods","Sorcery/Model/Submodules/UserActivation/InstanceMethods.html#method-i-send_activation_needed_email-3F","()",""],["send_activation_success_email!","Sorcery::Model::Submodules::UserActivation::InstanceMethods","Sorcery/Model/Submodules/UserActivation/InstanceMethods.html#method-i-send_activation_success_email-21","()",""],["send_activation_success_email?","Sorcery::Model::Submodules::UserActivation::InstanceMethods","Sorcery/Model/Submodules/UserActivation/InstanceMethods.html#method-i-send_activation_success_email-3F","()",""],["send_reset_password_email!","Sorcery::Model::Submodules::ResetPassword::InstanceMethods","Sorcery/Model/Submodules/ResetPassword/InstanceMethods.html#method-i-send_reset_password_email-21","()",""],["send_unlock_token_email!","Sorcery::Model::Submodules::BruteForceProtection::InstanceMethods","Sorcery/Model/Submodules/BruteForceProtection/InstanceMethods.html#method-i-send_unlock_token_email-21","()",""],["set_encryption_attributes","Sorcery::Model::ClassMethods","Sorcery/Model/ClassMethods.html#method-i-set_encryption_attributes","()",""],["set_last_activity_at","Sorcery::Model::Submodules::ActivityLogging::InstanceMethods","Sorcery/Model/Submodules/ActivityLogging/InstanceMethods.html#method-i-set_last_activity_at","(time)",""],["set_last_ip_addess","Sorcery::Model::Submodules::ActivityLogging::InstanceMethods","Sorcery/Model/Submodules/ActivityLogging/InstanceMethods.html#method-i-set_last_ip_addess","(ip_address)",""],["set_last_login_at","Sorcery::Model::Submodules::ActivityLogging::InstanceMethods","Sorcery/Model/Submodules/ActivityLogging/InstanceMethods.html#method-i-set_last_login_at","(time)",""],["set_last_logout_at","Sorcery::Model::Submodules::ActivityLogging::InstanceMethods","Sorcery/Model/Submodules/ActivityLogging/InstanceMethods.html#method-i-set_last_logout_at","(time)",""],["set_remember_me_cookie!","Sorcery::Controller::Submodules::RememberMe::InstanceMethods","Sorcery/Controller/Submodules/RememberMe/InstanceMethods.html#method-i-set_remember_me_cookie-21","(user)",""],["setup_activation","Sorcery::Model::Submodules::UserActivation::InstanceMethods","Sorcery/Model/Submodules/UserActivation/InstanceMethods.html#method-i-setup_activation","()",""],["sorcery_adapter","Sorcery::Adapters::DataMapperAdapter::Wrapper","Sorcery/Adapters/DataMapperAdapter/Wrapper.html#method-i-sorcery_adapter","()",""],["sorcery_adapter","Sorcery::Adapters::DataMapperAdapter::Wrapper::ClassMethods","Sorcery/Adapters/DataMapperAdapter/Wrapper/ClassMethods.html#method-i-sorcery_adapter","()",""],["sorcery_adapter","Sorcery::Adapters::MongoMapperAdapter::Wrapper","Sorcery/Adapters/MongoMapperAdapter/Wrapper.html#method-i-sorcery_adapter","()",""],["sorcery_adapter","Sorcery::Adapters::MongoMapperAdapter::Wrapper::ClassMethods","Sorcery/Adapters/MongoMapperAdapter/Wrapper/ClassMethods.html#method-i-sorcery_adapter","()",""],["sorcery_config","Sorcery::Model::ClassMethods","Sorcery/Model/ClassMethods.html#method-i-sorcery_config","()","<p>Returns the class instance variable for configuration, when called by the\nclass itself.\n"],["sorcery_config","Sorcery::Model::InstanceMethods","Sorcery/Model/InstanceMethods.html#method-i-sorcery_config","()","<p>Returns the class instance variable for configuration, when called by an\ninstance.\n"],["sorcery_config_path","Sorcery::Generators::Helpers","Sorcery/Generators/Helpers.html#method-i-sorcery_config_path","()",""],["sorcery_controller_external_property_set","Sorcery::TestHelpers::Internal::Rails","Sorcery/TestHelpers/Internal/Rails.html#method-i-sorcery_controller_external_property_set","(provider, property, value)",""],["sorcery_controller_property_set","Sorcery::TestHelpers::Internal::Rails","Sorcery/TestHelpers/Internal/Rails.html#method-i-sorcery_controller_property_set","(property, value)",""],["sorcery_fetch_user_hash","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-sorcery_fetch_user_hash","(provider_name)","<p>get the user hash from a provider using information from the params and\nsession.\n"],["sorcery_fixup_callback_url","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-sorcery_fixup_callback_url","(provider)","<p>this method should be somewhere else.  It only does something once per\napplication per provider.\n"],["sorcery_get_provider","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-sorcery_get_provider","(provider_name)","<p>save the singleton ProviderClient instance into @provider\n"],["sorcery_login_url","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-sorcery_login_url","(provider_name, args = {})","<p>get the login URL from the provider, if applicable.  Returns nil if the\nprovider does not provide a login …\n"],["sorcery_model_property_set","Sorcery::TestHelpers::Internal","Sorcery/TestHelpers/Internal.html#method-i-sorcery_model_property_set","(property, *values)",""],["sorcery_reload!","Sorcery::TestHelpers::Internal::Rails","Sorcery/TestHelpers/Internal/Rails.html#method-i-sorcery_reload-21","(submodules = [], options = {})",""],["sorcery_session_expired?","Sorcery::Controller::Submodules::SessionTimeout::InstanceMethods","Sorcery/Controller/Submodules/SessionTimeout/InstanceMethods.html#method-i-sorcery_session_expired-3F","(time)",""],["stretches","Sorcery::CryptoProviders::BCrypt","Sorcery/CryptoProviders/BCrypt.html#method-c-stretches","()",""],["stretches","Sorcery::CryptoProviders::Common","Sorcery/CryptoProviders/Common.html#method-c-stretches","()","<p>The number of times to loop through the encryption.\n"],["transaction","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-c-transaction","(&blk)",""],["transaction","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-transaction","(&blk)",""],["transaction","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-c-transaction","(&blk)",""],["transaction","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-c-transaction","(&blk)",""],["unlock!","Sorcery::Model::Submodules::BruteForceProtection::InstanceMethods","Sorcery/Model/Submodules/BruteForceProtection/InstanceMethods.html#method-i-unlock-21","()","<p>/!\\ Moved out of protected for use like activate! in controller /!\\\n"],["unlocked?","Sorcery::Model::Submodules::BruteForceProtection::InstanceMethods","Sorcery/Model/Submodules/BruteForceProtection/InstanceMethods.html#method-i-unlocked-3F","()",""],["update!","Sorcery::Controller::Config","Sorcery/Controller/Config.html#method-c-update-21","()",""],["update_attribute","Sorcery::Adapters::BaseAdapter","Sorcery/Adapters/BaseAdapter.html#method-i-update_attribute","(name, value)",""],["update_attribute","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-i-update_attribute","(name, value)",""],["update_attribute","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-i-update_attribute","(name, value)",""],["update_attributes","Sorcery::Adapters::ActiveRecordAdapter","Sorcery/Adapters/ActiveRecordAdapter.html#method-i-update_attributes","(attrs)",""],["update_attributes","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-i-update_attributes","(attrs)",""],["update_attributes","Sorcery::Adapters::MongoMapperAdapter","Sorcery/Adapters/MongoMapperAdapter.html#method-i-update_attributes","(attrs)",""],["update_attributes","Sorcery::Adapters::MongoidAdapter","Sorcery/Adapters/MongoidAdapter.html#method-i-update_attributes","(attrs)",""],["update_failed_logins_count!","Sorcery::Controller::Submodules::BruteForceProtection::InstanceMethods","Sorcery/Controller/Submodules/BruteForceProtection/InstanceMethods.html#method-i-update_failed_logins_count-21","(credentials)","<p>Increments the failed logins counter on every failed login. Runs as a hook\nafter a failed login.\n"],["update_model","Sorcery::TestHelpers::Internal","Sorcery/TestHelpers/Internal.html#method-i-update_model","(&block)",""],["user_attrs","Sorcery::Controller::Submodules::External::InstanceMethods","Sorcery/Controller/Submodules/External/InstanceMethods.html#method-i-user_attrs","(user_info_mapping, user_hash)",""],["user_class","Sorcery::Controller::InstanceMethods","Sorcery/Controller/InstanceMethods.html#method-i-user_class","()",""],["user_config","Sorcery::Controller::Config","Sorcery/Controller/Config.html#method-c-user_config","(&blk)",""],["username_attribute_names=","Sorcery::Model::Config","Sorcery/Model/Config.html#method-i-username_attribute_names-3D","(fields)",""],["valid_password?","Sorcery::Model::InstanceMethods","Sorcery/Model/InstanceMethods.html#method-i-valid_password-3F","(pass)","<p>Calls the configured encryption provider to compare the supplied password\nwith the encrypted one.\n"],["validate_mailer_defined","Sorcery::Model::Submodules::ResetPassword::ClassMethods","Sorcery/Model/Submodules/ResetPassword/ClassMethods.html#method-i-validate_mailer_defined","()","<p>This submodule requires the developer to define his own mailer class to be\nused by it when reset_password_mailer_disabled …\n"],["validate_mailer_defined","Sorcery::Model::Submodules::UserActivation::ClassMethods","Sorcery/Model/Submodules/UserActivation/ClassMethods.html#method-i-validate_mailer_defined","()","<p>This submodule requires the developer to define his own mailer class to be\nused by it when activation_mailer_disabled …\n"],["validate_session","Sorcery::Controller::Submodules::SessionTimeout::InstanceMethods","Sorcery/Controller/Submodules/SessionTimeout/InstanceMethods.html#method-i-validate_session","()","<p>Checks if session timeout was reached and expires the current session if\nso. To be used as a before_filter …\n"],["verify_submodules_compatibility!","Sorcery::Adapters::DataMapperAdapter","Sorcery/Adapters/DataMapperAdapter.html#method-c-verify_submodules_compatibility-21","()",""],["USAGE","","lib/generators/sorcery/USAGE.html","","<p>Description:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Generates</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">necessary</span> <span class=\"ruby-identifier\">files</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">get</span> <span class=\"ruby-identifier\">you</span> <span class=\"ruby-identifier\">up</span> <span class=\"ruby-keyword\">and</span> <span class=\"ruby-identifier\">running</span> <span class=\"ruby-identifier\">with</span> <span class=\"ruby-constant\">Sorcery</span> <span class=\"ruby-identifier\">gem</span>\n</pre>\n<p>Examples:\n"],["ca-bundle.crt","","lib/sorcery/protocols/certs/ca-bundle_crt.html","","<p>## ##  ca-bundle.crt – Bundle of CA Root Certificates ## ##  This is a\nbundle of X.509 certificates …\n"],["tasks.rake","","lib/sorcery/railties/tasks_rake.html","","<p>namespace :sorcery do\n\n<pre>desc &quot;Adds sorcery&#39;s initializer file&quot;\ntask :bootstrap do\n  warn &quot;This task is obsolete.\\nUse ...</pre>\n"]]}}