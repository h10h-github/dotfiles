var search_data = {"index":{"searchIndex":["synchronizeddelegator","threadsafe","threadsafe","array","atomicreferencecachebackend","node","util","table","cache","hash","mricachebackend","nonconcurrentcachebackend","synchronizedcachebackend","util","adder","cheaplockable","poweroftwotuple","striped64","cell","volatile","volatiletuple","xorshiftrandom","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","_get()","_mon_initialize()","_mon_initialize()","_set()","add()","allocate()","allocate()","attempt_compute()","attempt_get_and_set()","attempt_internal_compute_if_absent()","attempt_internal_replace()","attr_volatile()","cas()","cas_base_computed()","cas_computed()","cas_new_node()","cheap_broadcast()","cheap_synchronize()","cheap_wait()","check_for_resize()","clear()","clear()","clear()","clear()","compare_and_set()","compute()","compute()","compute()","compute()","compute_if_absent()","compute_if_absent()","compute_if_absent()","compute_if_absent()","compute_if_present()","compute_if_present()","compute_if_present()","compute_if_present()","const_missing()","decrement()","decrement_size()","decrement_size()","delete()","delete()","delete()","delete()","delete_node_at()","delete_pair()","delete_pair()","delete_pair()","delete_pair()","dupped_backend()","dupped_backend()","each()","each_key()","each_pair()","each_pair()","each_value()","empty?()","empty?()","expand_table_unless_stale()","fetch()","fetch_or_store()","find_value_in_node_list()","force_aquire_lock()","free?()","get()","get()","get_and_set()","get_and_set()","get_and_set()","get_and_set()","get_or_default()","get_or_default()","get_or_default()","hash_code()","hash_code=()","hash_to_index()","increment()","increment_size()","increment_size()","index()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_table()","internal_compute()","internal_replace()","internal_reset()","key()","key?()","key?()","key?()","key?()","key_hash()","keys()","lock_and_clean_up_reverse_forwarders()","lock_and_clean_up_reverse_forwarders()","locked?()","locked_hash?()","marshal_dump()","marshal_load()","matches?()","merge_pair()","merge_pair()","merge_pair()","merge_pair()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","next_in_size_table()","pair?()","populate_from()","pure_hash()","put_if_absent()","raise_fetch_no_key()","rebuild()","rebuild()","replace_if_exists()","replace_if_exists()","replace_if_exists()","replace_if_exists()","replace_pair()","replace_pair()","replace_pair()","replace_pair()","reset()","retry_update()","setup()","size()","size()","size()","size()","size()","split_bin()","split_bin()","split_old_bin()","split_old_bin()","store_computed_value()","sum()","table_size_for()","teardown()","try_await_lock()","try_await_lock()","try_in_busy()","try_in_resize_lock()","try_in_resize_lock()","try_initialize_cells()","try_lock_via_hash()","try_lock_via_hash()","try_to_cas_in_computed()","try_to_install_new_cell()","unlock_via_hash()","validate_options_hash!()","value?()","value?()","value?()","values()","volatile_get()","volatile_get_by_hash()","volatile_set()","volatile_set_by_hash()","xorshift()"],"longSearchIndex":["synchronizeddelegator","threadsafe","threadsafe","threadsafe::array","threadsafe::atomicreferencecachebackend","threadsafe::atomicreferencecachebackend::node","threadsafe::atomicreferencecachebackend::node::util","threadsafe::atomicreferencecachebackend::table","threadsafe::cache","threadsafe::hash","threadsafe::mricachebackend","threadsafe::nonconcurrentcachebackend","threadsafe::synchronizedcachebackend","threadsafe::util","threadsafe::util::adder","threadsafe::util::cheaplockable","threadsafe::util::poweroftwotuple","threadsafe::util::striped64","threadsafe::util::striped64::cell","threadsafe::util::volatile","threadsafe::util::volatiletuple","threadsafe::util::xorshiftrandom","threadsafe::atomicreferencecachebackend#[]()","threadsafe::cache#[]()","threadsafe::nonconcurrentcachebackend#[]()","threadsafe::synchronizedcachebackend#[]()","threadsafe::atomicreferencecachebackend#[]=()","threadsafe::mricachebackend#[]=()","threadsafe::nonconcurrentcachebackend#[]=()","threadsafe::synchronizedcachebackend#[]=()","threadsafe::nonconcurrentcachebackend#_get()","threadsafe#_mon_initialize()","threadsafe#_mon_initialize()","threadsafe::nonconcurrentcachebackend#_set()","threadsafe::util::adder#add()","threadsafe::allocate()","threadsafe::allocate()","threadsafe::atomicreferencecachebackend#attempt_compute()","threadsafe::atomicreferencecachebackend#attempt_get_and_set()","threadsafe::atomicreferencecachebackend#attempt_internal_compute_if_absent()","threadsafe::atomicreferencecachebackend#attempt_internal_replace()","threadsafe::util::volatile#attr_volatile()","threadsafe::util::volatiletuple#cas()","threadsafe::util::striped64#cas_base_computed()","threadsafe::util::striped64::cell#cas_computed()","threadsafe::atomicreferencecachebackend::table#cas_new_node()","threadsafe::util::cheaplockable#cheap_broadcast()","threadsafe::util::cheaplockable#cheap_synchronize()","threadsafe::util::cheaplockable#cheap_wait()","threadsafe::atomicreferencecachebackend#check_for_resize()","threadsafe::atomicreferencecachebackend#clear()","threadsafe::mricachebackend#clear()","threadsafe::nonconcurrentcachebackend#clear()","threadsafe::synchronizedcachebackend#clear()","threadsafe::util::volatiletuple#compare_and_set()","threadsafe::atomicreferencecachebackend#compute()","threadsafe::mricachebackend#compute()","threadsafe::nonconcurrentcachebackend#compute()","threadsafe::synchronizedcachebackend#compute()","threadsafe::atomicreferencecachebackend#compute_if_absent()","threadsafe::mricachebackend#compute_if_absent()","threadsafe::nonconcurrentcachebackend#compute_if_absent()","threadsafe::synchronizedcachebackend#compute_if_absent()","threadsafe::atomicreferencecachebackend#compute_if_present()","threadsafe::mricachebackend#compute_if_present()","threadsafe::nonconcurrentcachebackend#compute_if_present()","threadsafe::synchronizedcachebackend#compute_if_present()","threadsafe::const_missing()","threadsafe::util::adder#decrement()","threadsafe#decrement_size()","threadsafe#decrement_size()","threadsafe::atomicreferencecachebackend#delete()","threadsafe::mricachebackend#delete()","threadsafe::nonconcurrentcachebackend#delete()","threadsafe::synchronizedcachebackend#delete()","threadsafe::atomicreferencecachebackend::table#delete_node_at()","threadsafe::atomicreferencecachebackend#delete_pair()","threadsafe::mricachebackend#delete_pair()","threadsafe::nonconcurrentcachebackend#delete_pair()","threadsafe::synchronizedcachebackend#delete_pair()","threadsafe::nonconcurrentcachebackend#dupped_backend()","threadsafe::synchronizedcachebackend#dupped_backend()","threadsafe::util::volatiletuple#each()","threadsafe::cache#each_key()","threadsafe::atomicreferencecachebackend#each_pair()","threadsafe::nonconcurrentcachebackend#each_pair()","threadsafe::cache#each_value()","threadsafe::atomicreferencecachebackend#empty?()","threadsafe::cache#empty?()","threadsafe::util::striped64#expand_table_unless_stale()","threadsafe::cache#fetch()","threadsafe::cache#fetch_or_store()","threadsafe::atomicreferencecachebackend#find_value_in_node_list()","threadsafe::atomicreferencecachebackend::node#force_aquire_lock()","threadsafe::util::striped64#free?()","threadsafe::cache#get()","threadsafe::util::xorshiftrandom#get()","threadsafe::atomicreferencecachebackend#get_and_set()","threadsafe::mricachebackend#get_and_set()","threadsafe::nonconcurrentcachebackend#get_and_set()","threadsafe::synchronizedcachebackend#get_and_set()","threadsafe::atomicreferencecachebackend#get_or_default()","threadsafe::nonconcurrentcachebackend#get_or_default()","threadsafe::synchronizedcachebackend#get_or_default()","threadsafe::util::striped64#hash_code()","threadsafe::util::striped64#hash_code=()","threadsafe::util::poweroftwotuple#hash_to_index()","threadsafe::util::adder#increment()","threadsafe#increment_size()","threadsafe#increment_size()","threadsafe::cache#index()","threadsafe::atomicreferencecachebackend#initialize_copy()","threadsafe::cache#initialize_copy()","threadsafe::nonconcurrentcachebackend#initialize_copy()","threadsafe::atomicreferencecachebackend#initialize_table()","threadsafe::atomicreferencecachebackend#internal_compute()","threadsafe::atomicreferencecachebackend#internal_replace()","threadsafe::util::striped64#internal_reset()","threadsafe::cache#key()","threadsafe::atomicreferencecachebackend#key?()","threadsafe::atomicreferencecachebackend::node#key?()","threadsafe::nonconcurrentcachebackend#key?()","threadsafe::synchronizedcachebackend#key?()","threadsafe::atomicreferencecachebackend#key_hash()","threadsafe::cache#keys()","threadsafe#lock_and_clean_up_reverse_forwarders()","threadsafe#lock_and_clean_up_reverse_forwarders()","threadsafe::atomicreferencecachebackend::node#locked?()","threadsafe::atomicreferencecachebackend::node::locked_hash?()","threadsafe::cache#marshal_dump()","threadsafe::cache#marshal_load()","threadsafe::atomicreferencecachebackend::node#matches?()","threadsafe::atomicreferencecachebackend#merge_pair()","threadsafe::mricachebackend#merge_pair()","threadsafe::nonconcurrentcachebackend#merge_pair()","threadsafe::synchronizedcachebackend#merge_pair()","synchronizeddelegator#method_missing()","synchronizeddelegator::new()","threadsafe::atomicreferencecachebackend::new()","threadsafe::atomicreferencecachebackend::node::new()","threadsafe::cache::new()","threadsafe::nonconcurrentcachebackend::new()","threadsafe::util::poweroftwotuple::new()","threadsafe::util::striped64::new()","threadsafe::util::volatiletuple::new()","threadsafe::util::poweroftwotuple#next_in_size_table()","threadsafe::nonconcurrentcachebackend#pair?()","threadsafe::cache#populate_from()","threadsafe::atomicreferencecachebackend::node#pure_hash()","threadsafe::cache#put_if_absent()","threadsafe::cache#raise_fetch_no_key()","threadsafe#rebuild()","threadsafe#rebuild()","threadsafe::atomicreferencecachebackend#replace_if_exists()","threadsafe::mricachebackend#replace_if_exists()","threadsafe::nonconcurrentcachebackend#replace_if_exists()","threadsafe::synchronizedcachebackend#replace_if_exists()","threadsafe::atomicreferencecachebackend#replace_pair()","threadsafe::mricachebackend#replace_pair()","threadsafe::nonconcurrentcachebackend#replace_pair()","threadsafe::synchronizedcachebackend#replace_pair()","threadsafe::util::adder#reset()","threadsafe::util::striped64#retry_update()","synchronizeddelegator#setup()","threadsafe::atomicreferencecachebackend#size()","threadsafe::cache#size()","threadsafe::nonconcurrentcachebackend#size()","threadsafe::synchronizedcachebackend#size()","threadsafe::util::volatiletuple#size()","threadsafe#split_bin()","threadsafe#split_bin()","threadsafe#split_old_bin()","threadsafe#split_old_bin()","threadsafe::nonconcurrentcachebackend#store_computed_value()","threadsafe::util::adder#sum()","threadsafe::atomicreferencecachebackend#table_size_for()","synchronizeddelegator#teardown()","threadsafe::atomicreferencecachebackend#try_await_lock()","threadsafe::atomicreferencecachebackend::node#try_await_lock()","threadsafe::util::striped64#try_in_busy()","threadsafe#try_in_resize_lock()","threadsafe#try_in_resize_lock()","threadsafe::util::striped64#try_initialize_cells()","threadsafe::atomicreferencecachebackend::node#try_lock_via_hash()","threadsafe::atomicreferencecachebackend::table#try_lock_via_hash()","threadsafe::atomicreferencecachebackend::table#try_to_cas_in_computed()","threadsafe::util::striped64#try_to_install_new_cell()","threadsafe::atomicreferencecachebackend::node#unlock_via_hash()","threadsafe::cache#validate_options_hash!()","threadsafe::cache#value?()","threadsafe::nonconcurrentcachebackend#value?()","threadsafe::synchronizedcachebackend#value?()","threadsafe::cache#values()","threadsafe::util::volatiletuple#volatile_get()","threadsafe::util::poweroftwotuple#volatile_get_by_hash()","threadsafe::util::volatiletuple#volatile_set()","threadsafe::util::poweroftwotuple#volatile_set_by_hash()","threadsafe::util::xorshiftrandom#xorshift()"],"info":[["SynchronizedDelegator","","SynchronizedDelegator.html","","<p>This class provides a trivial way to synchronize all calls to a given\nobject by wrapping it with a `Delegator` …\n"],["ThreadSafe","","ThreadSafe.html","",""],["ThreadSafe","","ThreadSafe.html","","<p>NOTE: &lt;= 0.2.0 used Threadsafe::VERSION @private\n"],["ThreadSafe::Array","","ThreadSafe/Array.html","",""],["ThreadSafe::AtomicReferenceCacheBackend","","ThreadSafe/AtomicReferenceCacheBackend.html","","<p>A Ruby port of the Doug Lea&#39;s jsr166e.ConcurrentHashMapV8 class version\n1.59 available in public …\n"],["ThreadSafe::AtomicReferenceCacheBackend::Node","","ThreadSafe/AtomicReferenceCacheBackend/Node.html","","<p>Key-value entry. Nodes with a hash field of <code>MOVED</code> are special,\nand do not contain user keys or values. …\n"],["ThreadSafe::AtomicReferenceCacheBackend::Node::Util","","ThreadSafe/AtomicReferenceCacheBackend/Node/Util.html","",""],["ThreadSafe::AtomicReferenceCacheBackend::Table","","ThreadSafe/AtomicReferenceCacheBackend/Table.html","",""],["ThreadSafe::Cache","","ThreadSafe/Cache.html","",""],["ThreadSafe::Hash","","ThreadSafe/Hash.html","",""],["ThreadSafe::MriCacheBackend","","ThreadSafe/MriCacheBackend.html","",""],["ThreadSafe::NonConcurrentCacheBackend","","ThreadSafe/NonConcurrentCacheBackend.html","",""],["ThreadSafe::SynchronizedCacheBackend","","ThreadSafe/SynchronizedCacheBackend.html","",""],["ThreadSafe::Util","","ThreadSafe/Util.html","",""],["ThreadSafe::Util::Adder","","ThreadSafe/Util/Adder.html","","<p>A Ruby port of the Doug Lea&#39;s jsr166e.LondAdder class version 1.8\navailable in public domain.\n<p>Original …\n"],["ThreadSafe::Util::CheapLockable","","ThreadSafe/Util/CheapLockable.html","","<p>Provides a cheapest possible (mainly in terms of memory usage)\n<code>Mutex</code> with the <code>ConditionVariable</code> bundled …\n"],["ThreadSafe::Util::PowerOfTwoTuple","","ThreadSafe/Util/PowerOfTwoTuple.html","",""],["ThreadSafe::Util::Striped64","","ThreadSafe/Util/Striped64.html","","<p>A Ruby port of the Doug Lea&#39;s jsr166e.Striped64 class version 1.6\navailable in public domain.\n<p>Original …\n"],["ThreadSafe::Util::Striped64::Cell","","ThreadSafe/Util/Striped64/Cell.html","","<p>Padded variant of AtomicLong supporting only raw accesses plus CAS. The\n<code>value</code> field is placed between …\n"],["ThreadSafe::Util::Volatile","","ThreadSafe/Util/Volatile.html","",""],["ThreadSafe::Util::VolatileTuple","","ThreadSafe/Util/VolatileTuple.html","","<p>A fixed size array with volatile volatile getters/setters. Usage:\n\n<pre>arr = VolatileTuple.new(16)\narr.volatile_set(0, ...</pre>\n"],["ThreadSafe::Util::XorShiftRandom","","ThreadSafe/Util/XorShiftRandom.html","","<p>A xorshift random number (positive +Fixnum+s) generator, provides\nreasonably cheap way to generate thread …\n"],["[]","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-5B-5D","(key)",""],["[]","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-5B-5D","(key)",""],["[]","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-5B-5D","(key)",""],["[]","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-5B-5D","(key)","<p>WARNING: Mutex_m is a non-reentrant lock, so the synchronized methods are\nnot allowed to call each other. …\n"],["[]=","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-5B-5D-3D","(key, value)",""],["_get","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-_get","(key)",""],["_mon_initialize","ThreadSafe","ThreadSafe.html#method-i-_mon_initialize","()",""],["_mon_initialize","ThreadSafe","ThreadSafe.html#method-i-_mon_initialize",null,""],["_set","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-_set","(key, value)",""],["add","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-add","(x)","<p>Adds the given value.\n"],["allocate","ThreadSafe","ThreadSafe.html#method-c-allocate",null,""],["allocate","ThreadSafe","ThreadSafe.html#method-c-allocate","()",""],["attempt_compute","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-attempt_compute","(key, hash, current_table, i, node, node_hash)",""],["attempt_get_and_set","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-attempt_get_and_set","(key, value, hash, current_table, i, node, node_hash)",""],["attempt_internal_compute_if_absent","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-attempt_internal_compute_if_absent","(key, hash, current_table, i, node, node_hash)",""],["attempt_internal_replace","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-attempt_internal_replace","(key, expected_old_value, hash, current_table, i, node, node_hash)",""],["attr_volatile","ThreadSafe::Util::Volatile","ThreadSafe/Util/Volatile.html#method-i-attr_volatile","(*attr_names)","<p>Provides <code>volatile</code> (in the JVM&#39;s sense) attribute accessors\nimplemented atop of the +AtomicReference+s. …\n"],["cas","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-cas","(i, old_value, new_value)",""],["cas_base_computed","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-cas_base_computed","()",""],["cas_computed","ThreadSafe::Util::Striped64::Cell","ThreadSafe/Util/Striped64/Cell.html#method-i-cas_computed","()",""],["cas_new_node","ThreadSafe::AtomicReferenceCacheBackend::Table","ThreadSafe/AtomicReferenceCacheBackend/Table.html#method-i-cas_new_node","(i, hash, key, value)",""],["cheap_broadcast","ThreadSafe::Util::CheapLockable","ThreadSafe/Util/CheapLockable.html#method-i-cheap_broadcast","()",""],["cheap_synchronize","ThreadSafe::Util::CheapLockable","ThreadSafe/Util/CheapLockable.html#method-i-cheap_synchronize","()","<p>Making use of the Rubinius&#39; ability to lock via object headers to avoid\nthe overhead of the extra …\n"],["cheap_wait","ThreadSafe::Util::CheapLockable","ThreadSafe/Util/CheapLockable.html#method-i-cheap_wait","()",""],["check_for_resize","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-check_for_resize","()","<p>If table is too small and not already resizing, creates next table and\ntransfers bins. Rechecks occupancy …\n"],["clear","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-clear","()","<p>Implementation for clear. Steps through each bin, removing all nodes.\n"],["clear","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-clear","()",""],["clear","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-clear","()",""],["clear","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-clear","()",""],["compare_and_set","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-compare_and_set","(i, old_value, new_value)",""],["compute","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-compute","(key)",""],["compute","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-compute","(key)",""],["compute","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-compute","(key)",""],["compute","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-compute","(key)",""],["compute_if_absent","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-compute_if_absent","(key)",""],["compute_if_absent","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-compute_if_absent","(key)",""],["compute_if_absent","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-compute_if_absent","(key)",""],["compute_if_absent","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-compute_if_absent","(key)",""],["compute_if_present","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-compute_if_present","(key)",""],["compute_if_present","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-compute_if_present","(key)",""],["compute_if_present","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-compute_if_present","(key)",""],["compute_if_present","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-compute_if_present","(key)",""],["const_missing","ThreadSafe","ThreadSafe.html#method-c-const_missing","(name)","<p>@private\n"],["decrement","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-decrement","()",""],["decrement_size","ThreadSafe","ThreadSafe.html#method-i-decrement_size","(by = 1)",""],["decrement_size","ThreadSafe","ThreadSafe.html#method-i-decrement_size",null,""],["delete","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-delete","(key)",""],["delete","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-delete","(key)",""],["delete","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-delete","(key)",""],["delete","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-delete","(key)",""],["delete_node_at","ThreadSafe::AtomicReferenceCacheBackend::Table","ThreadSafe/AtomicReferenceCacheBackend/Table.html#method-i-delete_node_at","(i, node, predecessor_node)",""],["delete_pair","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-delete_pair","(key, value)",""],["delete_pair","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-delete_pair","(key, value)",""],["delete_pair","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-delete_pair","(key, value)",""],["delete_pair","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-delete_pair","(key, value)",""],["dupped_backend","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-dupped_backend","()",""],["dupped_backend","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-dupped_backend","()",""],["each","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-each","()",""],["each_key","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-each_key","()",""],["each_pair","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-each_pair","()",""],["each_pair","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-each_pair","()",""],["each_value","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-each_value","()",""],["empty?","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-empty-3F","()",""],["empty?","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-empty-3F","()",""],["expand_table_unless_stale","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-expand_table_unless_stale","(current_cells)",""],["fetch","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-fetch","(key, default_value = NULL)",""],["fetch_or_store","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-fetch_or_store","(key, default_value = NULL)",""],["find_value_in_node_list","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-find_value_in_node_list","(node, key, hash, pure_hash)",""],["force_aquire_lock","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-force_aquire_lock","(table, i)",""],["free?","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-free-3F","()",""],["get","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-get","(key)",""],["get","ThreadSafe::Util::XorShiftRandom","ThreadSafe/Util/XorShiftRandom.html#method-i-get","()","<p>Generates an initial non-zero positive <code>Fixnum</code> via\n<code>Kernel.rand</code>.\n"],["get_and_set","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-get_and_set","(key, value)",""],["get_and_set","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-get_and_set","(key, value)",""],["get_and_set","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-get_and_set","(key, value)",""],["get_and_set","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-get_and_set","(key, value)",""],["get_or_default","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-get_or_default","(key, else_value = nil)",""],["get_or_default","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-get_or_default","(key, default_value)",""],["get_or_default","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-get_or_default","(key, default_value)",""],["hash_code","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-hash_code","()","<p>A thread-local hash code accessor. The code is initially random, but may be\nset to a different value …\n"],["hash_code=","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-hash_code-3D","(hash)",""],["hash_to_index","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-i-hash_to_index","(hash)",""],["increment","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-increment","()",""],["increment_size","ThreadSafe","ThreadSafe.html#method-i-increment_size",null,""],["increment_size","ThreadSafe","ThreadSafe.html#method-i-increment_size","()",""],["index","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-index","(value)",""],["initialize_copy","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-initialize_copy","(other)",""],["initialize_copy","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-initialize_copy","(other)",""],["initialize_copy","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-initialize_copy","(other)",""],["initialize_table","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-initialize_table","()","<p>Initializes table, using the size recorded in <code>size_control</code>.\n"],["internal_compute","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-internal_compute","(key, &block)",""],["internal_replace","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-internal_replace","(key, expected_old_value = NULL, &block)","<p>Internal versions of the insertion methods, each a little more complicated\nthan the last. All have the …\n"],["internal_reset","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-internal_reset","(initial_value)","<p>Sets base and all <code>cells</code> to the given value.\n"],["key","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-key","(value)",""],["key?","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-key-3F","(key)",""],["key?","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-key-3F","(key)",""],["key?","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-key-3F","(key)",""],["key?","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-key-3F","(key)",""],["key_hash","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-key_hash","(key)",""],["keys","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-keys","()",""],["lock_and_clean_up_reverse_forwarders","ThreadSafe","ThreadSafe.html#method-i-lock_and_clean_up_reverse_forwarders","(old_table, old_table_size, new_table, i, forwarder)",""],["lock_and_clean_up_reverse_forwarders","ThreadSafe","ThreadSafe.html#method-i-lock_and_clean_up_reverse_forwarders",null,""],["locked?","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-locked-3F","()",""],["locked_hash?","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-c-locked_hash-3F","(hash)",""],["marshal_dump","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-marshal_dump","()",""],["marshal_load","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-marshal_load","(hash)",""],["matches?","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-matches-3F","(key, hash)",""],["merge_pair","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-merge_pair","(key, value)",""],["merge_pair","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-merge_pair","(key, value)",""],["merge_pair","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-merge_pair","(key, value)",""],["merge_pair","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-merge_pair","(key, value)",""],["method_missing","SynchronizedDelegator","SynchronizedDelegator.html#method-i-method_missing","(method, *args, &block)",""],["new","SynchronizedDelegator","SynchronizedDelegator.html#method-c-new","(obj)",""],["new","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-c-new","(options = nil)",""],["new","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-c-new","(hash, key, value, next_node = nil)",""],["new","ThreadSafe::Cache","ThreadSafe/Cache.html#method-c-new","(options = nil, &block)",""],["new","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-c-new","(options = nil)","<p>WARNING: all public methods of the class must operate on the @backend\ndirectly without calling each other. …\n"],["new","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-c-new","(size)",""],["new","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-c-new","()",""],["new","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-c-new","(size)",""],["next_in_size_table","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-i-next_in_size_table","()",""],["pair?","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-pair-3F","(key, expected_value)",""],["populate_from","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-populate_from","(hash)",""],["pure_hash","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-pure_hash","()",""],["put_if_absent","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-put_if_absent","(key, value)",""],["raise_fetch_no_key","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-raise_fetch_no_key","()",""],["rebuild","ThreadSafe","ThreadSafe.html#method-i-rebuild",null,""],["rebuild","ThreadSafe","ThreadSafe.html#method-i-rebuild","(table)","<p>Moves and/or copies the nodes in each bin to new table. See above for\nexplanation.\n"],["replace_if_exists","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-replace_if_exists","(key, new_value)",""],["replace_if_exists","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-replace_if_exists","(key, new_value)",""],["replace_if_exists","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-replace_if_exists","(key, new_value)",""],["replace_if_exists","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-replace_if_exists","(key, new_value)",""],["replace_pair","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-replace_pair","(key, old_value, new_value)",""],["replace_pair","ThreadSafe::MriCacheBackend","ThreadSafe/MriCacheBackend.html#method-i-replace_pair","(key, old_value, new_value)",""],["replace_pair","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-replace_pair","(key, old_value, new_value)",""],["replace_pair","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-replace_pair","(key, old_value, new_value)",""],["reset","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-reset","()",""],["retry_update","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-retry_update","(x, hash_code, was_uncontended)","<p>Handles cases of updates involving initialization, resizing, creating new\nCells, and/or contention.  …\n"],["setup","SynchronizedDelegator","SynchronizedDelegator.html#method-i-setup","()",""],["size","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-size","()",""],["size","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-size","()",""],["size","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-size","()",""],["size","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-size","()",""],["size","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-size","()",""],["split_bin","ThreadSafe","ThreadSafe.html#method-i-split_bin","(new_table, i, node, node_hash)",""],["split_bin","ThreadSafe","ThreadSafe.html#method-i-split_bin",null,""],["split_old_bin","ThreadSafe","ThreadSafe.html#method-i-split_old_bin",null,""],["split_old_bin","ThreadSafe","ThreadSafe.html#method-i-split_old_bin","(table, new_table, i, node, node_hash, forwarder)","<p>Splits a normal bin with list headed by e into lo and hi parts; installs in\ngiven table.\n"],["store_computed_value","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-store_computed_value","(key, new_value)",""],["sum","ThreadSafe::Util::Adder","ThreadSafe/Util/Adder.html#method-i-sum","()","<p>Returns the current sum.  The returned value is <em>NOT</em> an atomic\nsnapshot: Invocation in the absence of …\n"],["table_size_for","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-table_size_for","(entry_count)","<p>Returns a power of two table size for the given desired capacity.\n"],["teardown","SynchronizedDelegator","SynchronizedDelegator.html#method-i-teardown","()",""],["try_await_lock","ThreadSafe::AtomicReferenceCacheBackend","ThreadSafe/AtomicReferenceCacheBackend.html#method-i-try_await_lock","(current_table, i, node)",""],["try_await_lock","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-try_await_lock","(table, i)","<p>Spins a while if <code>LOCKED</code> bit set and this node is the first of\nits bin, and then sets <code>WAITING</code> bits on …\n"],["try_in_busy","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-try_in_busy","()",""],["try_in_resize_lock","ThreadSafe","ThreadSafe.html#method-i-try_in_resize_lock",null,""],["try_in_resize_lock","ThreadSafe","ThreadSafe.html#method-i-try_in_resize_lock","(current_table, size_ctrl)",""],["try_initialize_cells","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-try_initialize_cells","(x, hash)",""],["try_lock_via_hash","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-try_lock_via_hash","(node_hash = hash)",""],["try_lock_via_hash","ThreadSafe::AtomicReferenceCacheBackend::Table","ThreadSafe/AtomicReferenceCacheBackend/Table.html#method-i-try_lock_via_hash","(i, node, node_hash)",""],["try_to_cas_in_computed","ThreadSafe::AtomicReferenceCacheBackend::Table","ThreadSafe/AtomicReferenceCacheBackend/Table.html#method-i-try_to_cas_in_computed","(i, hash, key)",""],["try_to_install_new_cell","ThreadSafe::Util::Striped64","ThreadSafe/Util/Striped64.html#method-i-try_to_install_new_cell","(new_cell, hash)",""],["unlock_via_hash","ThreadSafe::AtomicReferenceCacheBackend::Node","ThreadSafe/AtomicReferenceCacheBackend/Node.html#method-i-unlock_via_hash","(locked_hash, node_hash)",""],["validate_options_hash!","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-validate_options_hash-21","(options)",""],["value?","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-value-3F","(value)",""],["value?","ThreadSafe::NonConcurrentCacheBackend","ThreadSafe/NonConcurrentCacheBackend.html#method-i-value-3F","(value)",""],["value?","ThreadSafe::SynchronizedCacheBackend","ThreadSafe/SynchronizedCacheBackend.html#method-i-value-3F","(value)",""],["values","ThreadSafe::Cache","ThreadSafe/Cache.html#method-i-values","()",""],["volatile_get","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-volatile_get","(i)",""],["volatile_get_by_hash","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-i-volatile_get_by_hash","(hash)",""],["volatile_set","ThreadSafe::Util::VolatileTuple","ThreadSafe/Util/VolatileTuple.html#method-i-volatile_set","(i, value)",""],["volatile_set_by_hash","ThreadSafe::Util::PowerOfTwoTuple","ThreadSafe/Util/PowerOfTwoTuple.html#method-i-volatile_set_by_hash","(hash, value)",""],["xorshift","ThreadSafe::Util::XorShiftRandom","ThreadSafe/Util/XorShiftRandom.html#method-i-xorshift","(x)","<p>using the “yˆ=y&gt;&gt;a; yˆ=y&lt;&lt;b; yˆ=y&gt;&gt;c;” transform with the\n(a,b,c) tuple with …\n"]]}}