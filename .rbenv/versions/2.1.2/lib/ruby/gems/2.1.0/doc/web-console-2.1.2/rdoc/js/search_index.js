var search_data = {"index":{"searchIndex":["actiondispatch","exception","object","webconsole","activesupport","bindingtracer","evaluator","helper","jruby","fakejrubybinding","fakejrubybindingsarray","middleware","railtie","actioncontroller","actionview","request","mime","rubinius","internallocationfilter","session","template","context","whinyrequest","whitelist","[]()","acceptable_content_type?()","acceptable_content_type?()","binding_change_re()","binding_for_trace()","bindings()","bindings()","call()","callers()","change_stack_trace()","coerce_network_to_ipaddr()","console()","create_regular_or_whiny_request()","current_bindings()","eval()","eval()","eval()","filter()","find()","format_exception()","from_binding()","from_exception()","from_whitelited_ip?()","from_whitelited_ip?()","human_readable_ipaddr()","id_for_repl_session_stack_frame_change()","id_for_repl_session_update()","include?()","interpreted_mode?()","logger()","new()","new()","new()","new()","new()","new()","new()","normalize_networks()","of_caller()","only_on_error_page()","raise_exception_with_current_bindings()","render()","render_exception_with_web_console()","render_inlined_string()","render_javascript()","request()","respond_with_unavailable_session()","set_backtrace_with_binding_of_caller()","set_exception_bindings_trace_func()","store_into_memory()","switch_binding_to()","to_ary()","to_s()","update_re()","update_repl_session()","whine_unless()"],"longSearchIndex":["actiondispatch","exception","object","webconsole","webconsole::activesupport","webconsole::bindingtracer","webconsole::evaluator","webconsole::helper","webconsole::jruby","webconsole::jruby::fakejrubybinding","webconsole::jruby::fakejrubybindingsarray","webconsole::middleware","webconsole::railtie","webconsole::railtie::actioncontroller","webconsole::railtie::actionview","webconsole::request","webconsole::request::mime","webconsole::rubinius","webconsole::rubinius::internallocationfilter","webconsole::session","webconsole::template","webconsole::template::context","webconsole::whinyrequest","webconsole::whitelist","webconsole::jruby::fakejrubybindingsarray#[]()","webconsole::request#acceptable_content_type?()","webconsole::whinyrequest#acceptable_content_type?()","webconsole::middleware#binding_change_re()","webconsole::bindingtracer#binding_for_trace()","exception#bindings()","object#bindings()","webconsole::middleware#call()","object#callers()","webconsole::middleware#change_stack_trace()","webconsole::whitelist#coerce_network_to_ipaddr()","webconsole::helper#console()","webconsole::middleware#create_regular_or_whiny_request()","webconsole::rubinius::current_bindings()","webconsole::evaluator#eval()","webconsole::jruby::fakejrubybinding#eval()","webconsole::session#eval()","webconsole::rubinius::internallocationfilter#filter()","webconsole::session::find()","webconsole::evaluator#format_exception()","webconsole::session::from_binding()","webconsole::session::from_exception()","webconsole::request#from_whitelited_ip?()","webconsole::whinyrequest#from_whitelited_ip?()","webconsole::whitelist#human_readable_ipaddr()","webconsole::middleware#id_for_repl_session_stack_frame_change()","webconsole::middleware#id_for_repl_session_update()","webconsole::whitelist#include?()","webconsole::jruby::interpreted_mode?()","webconsole::whinyrequest#logger()","webconsole::bindingtracer::new()","webconsole::evaluator::new()","webconsole::middleware::new()","webconsole::rubinius::internallocationfilter::new()","webconsole::session::new()","webconsole::template::new()","webconsole::whitelist::new()","webconsole::whitelist#normalize_networks()","object#of_caller()","webconsole::template::context#only_on_error_page()","object#raise_exception_with_current_bindings()","webconsole::template#render()","object#render_exception_with_web_console()","webconsole::template::context#render_inlined_string()","webconsole::template::context#render_javascript()","webconsole::whinyrequest#request()","webconsole::middleware#respond_with_unavailable_session()","exception#set_backtrace_with_binding_of_caller()","webconsole::jruby::set_exception_bindings_trace_func()","webconsole::session#store_into_memory()","webconsole::session#switch_binding_to()","webconsole::jruby::fakejrubybindingsarray#to_ary()","webconsole::whitelist#to_s()","webconsole::middleware#update_re()","webconsole::middleware#update_repl_session()","webconsole::whinyrequest#whine_unless()"],"info":[["ActionDispatch","","ActionDispatch.html","",""],["Exception","","Exception.html","",""],["Object","","Object.html","",""],["WebConsole","","WebConsole.html","",""],["WebConsole::ActiveSupport","","WebConsole/ActiveSupport.html","",""],["WebConsole::BindingTracer","","WebConsole/BindingTracer.html","",""],["WebConsole::Evaluator","","WebConsole/Evaluator.html","","<p>Simple Ruby code evaluator.\n<p>This class wraps a <code>Binding</code> object and evaluates code inside of\nit. The difference …\n"],["WebConsole::Helper","","WebConsole/Helper.html","",""],["WebConsole::JRuby","","WebConsole/JRuby.html","",""],["WebConsole::JRuby::FakeJRubyBinding","","WebConsole/JRuby/FakeJRubyBinding.html","","<p>A fake binding for JRuby in non interpreted mode.\n<p>It won&#39;t actually evaluate any code, rather it will …\n"],["WebConsole::JRuby::FakeJRubyBindingsArray","","WebConsole/JRuby/FakeJRubyBindingsArray.html","","<p>A fake array of FakeJRubyBinding objects.\n<p>It is used in Exception#bindings to make sure that when users …\n"],["WebConsole::Middleware","","WebConsole/Middleware.html","",""],["WebConsole::Railtie","","WebConsole/Railtie.html","",""],["WebConsole::Railtie::ActionController","","WebConsole/Railtie/ActionController.html","",""],["WebConsole::Railtie::ActionView","","WebConsole/Railtie/ActionView.html","",""],["WebConsole::Request","","WebConsole/Request.html","","<p>Web Console tailored request object.\n"],["WebConsole::Request::Mime","","WebConsole/Request/Mime.html","",""],["WebConsole::Rubinius","","WebConsole/Rubinius.html","",""],["WebConsole::Rubinius::InternalLocationFilter","","WebConsole/Rubinius/InternalLocationFilter.html","","<p>Filters internal Rubinius locations.\n<p>There are a couple of reasons why we wanna filter out the locations. …\n"],["WebConsole::Session","","WebConsole/Session.html","","<p>A session lets you persist wrap an <code>Evaluator</code> instance in\nmemory associated with multiple bindings.\n<p>Each …\n"],["WebConsole::Template","","WebConsole/Template.html","","<p>A facade that handles template rendering and composition.\n<p>It introduces template helpers to ease the inclusion …\n"],["WebConsole::Template::Context","","WebConsole/Template/Context.html","",""],["WebConsole::WhinyRequest","","WebConsole/WhinyRequest.html","","<p>Noisy wrapper around <code>Request</code>.\n<p>If any calls to <code>from_whitelisted_ip?</code> and\n<code>acceptable_content_type?</code> return …\n"],["WebConsole::Whitelist","","WebConsole/Whitelist.html","","<p>Whitelist of allowed networks that can access Web Console.\n<p>Networks are represented by standard IPAddr …\n"],["[]","WebConsole::JRuby::FakeJRubyBindingsArray","WebConsole/JRuby/FakeJRubyBindingsArray.html#method-i-5B-5D","(*)",""],["acceptable_content_type?","WebConsole::Request","WebConsole/Request.html#method-i-acceptable_content_type-3F","()","<p>Returns whether the request is from an acceptable content type.\n<p>We can render a console for HTML and  …\n"],["acceptable_content_type?","WebConsole::WhinyRequest","WebConsole/WhinyRequest.html#method-i-acceptable_content_type-3F","()",""],["binding_change_re","WebConsole::Middleware","WebConsole/Middleware.html#method-i-binding_change_re","()",""],["binding_for_trace","WebConsole::BindingTracer","WebConsole/BindingTracer.html#method-i-binding_for_trace","(trace)",""],["bindings","Exception","Exception.html#method-i-bindings","()","<p>The bindings in which the exception originated in.\n"],["bindings","Object","Object.html#method-i-bindings","()",""],["call","WebConsole::Middleware","WebConsole/Middleware.html#method-i-call","(env)",""],["callers","Object","Object.html#method-i-callers","()",""],["change_stack_trace","WebConsole::Middleware","WebConsole/Middleware.html#method-i-change_stack_trace","(id, params)",""],["coerce_network_to_ipaddr","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-coerce_network_to_ipaddr","(network)",""],["console","WebConsole::Helper","WebConsole/Helper.html#method-i-console","(binding = nil)","<p>Communicates with the middleware to render a console in a\n<code>binding</code>.\n<p>If <code>bidning</code> isn&#39;t explicitly given, …\n"],["create_regular_or_whiny_request","WebConsole::Middleware","WebConsole/Middleware.html#method-i-create_regular_or_whiny_request","(env)",""],["current_bindings","WebConsole::Rubinius","WebConsole/Rubinius.html#method-c-current_bindings","()","<p>Gets the current bindings for all available Ruby frames.\n<p>Filters the internal Rubinius and WebConsole …\n"],["eval","WebConsole::Evaluator","WebConsole/Evaluator.html#method-i-eval","(input)",""],["eval","WebConsole::JRuby::FakeJRubyBinding","WebConsole/JRuby/FakeJRubyBinding.html#method-i-eval","(*)",""],["eval","WebConsole::Session","WebConsole/Session.html#method-i-eval","(input)","<p>Evaluate <code>input</code> on the current Evaluator associated binding.\n<p>Returns a string of the Evaluator output. …\n"],["filter","WebConsole::Rubinius::InternalLocationFilter","WebConsole/Rubinius/InternalLocationFilter.html#method-i-filter","()",""],["find","WebConsole::Session","WebConsole/Session.html#method-c-find","(id)","<p>Finds a persisted session in memory by its id.\n<p>Returns a persisted session if found in memory. Raises …\n"],["format_exception","WebConsole::Evaluator","WebConsole/Evaluator.html#method-i-format_exception","(exc)",""],["from_binding","WebConsole::Session","WebConsole/Session.html#method-c-from_binding","(binding)","<p>Create a Session from a single binding.\n"],["from_exception","WebConsole::Session","WebConsole/Session.html#method-c-from_exception","(exc)","<p>Create a Session from an exception.\n"],["from_whitelited_ip?","WebConsole::Request","WebConsole/Request.html#method-i-from_whitelited_ip-3F","()","<p>Returns whether a request came from a whitelisted IP.\n<p>For a request to hit Web Console features, it needs …\n"],["from_whitelited_ip?","WebConsole::WhinyRequest","WebConsole/WhinyRequest.html#method-i-from_whitelited_ip-3F","()",""],["human_readable_ipaddr","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-human_readable_ipaddr","(ipaddr)",""],["id_for_repl_session_stack_frame_change","WebConsole::Middleware","WebConsole/Middleware.html#method-i-id_for_repl_session_stack_frame_change","(request)",""],["id_for_repl_session_update","WebConsole::Middleware","WebConsole/Middleware.html#method-i-id_for_repl_session_update","(request)",""],["include?","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-include-3F","(network)",""],["interpreted_mode?","WebConsole::JRuby","WebConsole/JRuby.html#method-c-interpreted_mode-3F","()","<p>Returns whether JRuby is ran in interpreted mode.\n"],["logger","WebConsole::WhinyRequest","WebConsole/WhinyRequest.html#method-i-logger","()",""],["new","WebConsole::BindingTracer","WebConsole/BindingTracer.html#method-c-new","(exception)",""],["new","WebConsole::Evaluator","WebConsole/Evaluator.html#method-c-new","(binding = TOPLEVEL_BINDING)",""],["new","WebConsole::Middleware","WebConsole/Middleware.html#method-c-new","(app, options = {})",""],["new","WebConsole::Rubinius::InternalLocationFilter","WebConsole/Rubinius/InternalLocationFilter.html#method-c-new","(locations)",""],["new","WebConsole::Session","WebConsole/Session.html#method-c-new","(bindings)",""],["new","WebConsole::Template","WebConsole/Template.html#method-c-new","(env, session)",""],["new","WebConsole::Whitelist","WebConsole/Whitelist.html#method-c-new","(networks = nil)",""],["normalize_networks","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-normalize_networks","(networks)",""],["of_caller","Object","Object.html#method-i-of_caller","(*)",""],["only_on_error_page","WebConsole::Template::Context","WebConsole/Template/Context.html#method-i-only_on_error_page","(*args)","<p>Execute a block only on error pages.\n<p>The error pages are special, because they are the only pages that …\n"],["raise_exception_with_current_bindings","Object","Object.html#method-i-raise_exception_with_current_bindings","(exc)",""],["render","WebConsole::Template","WebConsole/Template.html#method-i-render","(template)","<p>Render a template (inferred from <code>template_paths</code>) as a plain\nstring.\n"],["render_exception_with_web_console","Object","Object.html#method-i-render_exception_with_web_console","(env, exception)",""],["render_inlined_string","WebConsole::Template::Context","WebConsole/Template/Context.html#method-i-render_inlined_string","(template)","<p>Render inlined string to be used inside of JavaScript code.\n<p>The inlined string is returned as an actual …\n"],["render_javascript","WebConsole::Template::Context","WebConsole/Template/Context.html#method-i-render_javascript","(template)","<p>Render JavaScript inside a script tag and a closure.\n<p>This one lets write JavaScript that will automatically …\n"],["request","WebConsole::WhinyRequest","WebConsole/WhinyRequest.html#method-i-request","()",""],["respond_with_unavailable_session","WebConsole::Middleware","WebConsole/Middleware.html#method-i-respond_with_unavailable_session","(id)",""],["set_backtrace_with_binding_of_caller","Exception","Exception.html#method-i-set_backtrace_with_binding_of_caller","(*args)","<p>CRuby calls #set_backtrace every time it raises an exception. Overriding it\nto assign the #bindings. …\n"],["set_exception_bindings_trace_func","WebConsole::JRuby","WebConsole/JRuby.html#method-c-set_exception_bindings_trace_func","()","<p>A proc to be used in Kernel#set_trace_func.\n<p>It sets Exception#bindings for an error with all the bindings …\n"],["store_into_memory","WebConsole::Session","WebConsole/Session.html#method-i-store_into_memory","()",""],["switch_binding_to","WebConsole::Session","WebConsole/Session.html#method-i-switch_binding_to","(index)","<p>Switches the current binding to the one at specified <code>index</code>.\n<p>Returns nothing.\n"],["to_ary","WebConsole::JRuby::FakeJRubyBindingsArray","WebConsole/JRuby/FakeJRubyBindingsArray.html#method-i-to_ary","()","<p>For Kernel#Array and other implicit conversion API. JRuby expects it to\nreturn an object that is_a? an …\n"],["to_s","WebConsole::Whitelist","WebConsole/Whitelist.html#method-i-to_s","()",""],["update_re","WebConsole::Middleware","WebConsole/Middleware.html#method-i-update_re","()",""],["update_repl_session","WebConsole::Middleware","WebConsole/Middleware.html#method-i-update_repl_session","(id, params)",""],["whine_unless","WebConsole::WhinyRequest","WebConsole/WhinyRequest.html#method-i-whine_unless","(condition)",""]]}}