### 基本設定 ###
# {{{
# エスケープキー設定
escape ^Tt
# Onlyのキー
bind q only
# 設定ファイル読み込み
bind ^t eval 'source ~/.screenrc' 'echo "source ~/.screenrc"'
# スクロール行数
defscrollback 100000
# autodetachの設定
autodetach on
# message設定
  # Time (second) to wait new message
  msgminwait 0
  # Time (second) to show message
  msgwait 5
# 検索設定
ignorecase on
# デフォルトのshell設定
shell /usr/local/bin/zsh
# vimのバッファを消す
altscreen on
# その他設定
defutf8 on
defencoding utf8
encoding utf8 utf8
startup_message off
vbell off
defmousetrack on
termcapinfo xterm* ti@:te@
hardstatus alwayslastline "[%02c] %`%-w%{=b bw}%n %t%{-}%+w"
wrap on
# }}}

### 色の設定 ###
# {{{
defbce on
attrcolor b ".I"
truecolor on
term xterm-256color
# }}}

### window操作 ###
# {{{
# windowの移動
bind ^n eval 'next'
bind ^p eval 'prev'
bind ^e eval 'command -c window' 'echo Move window'
bind ^n eval 'command -c next'
bind ^p eval 'command -c prev'
# bind -c window n eval 'next'
# bind -c window p eval 'prev'
bind -c window ^n eval 'command -c window' 'next'
bind -c window ^p eval 'command -c window' 'prev'
bind -c window ^q eval 'command -c window'
# windowのリサイズ
bind r eval 'command -c resize' 'echo "Resize window"'
bind ^r eval 'command -c resize' 'echo "Resize window"'
bind -c resize h eval 'command -c resize' 'resize -h -1'
bind -c resize l eval 'command -c resize' 'resize -h +1'
bind -c resize j eval 'command -c resize' 'resize -v +1'
bind -c resize k eval 'command -c resize' 'resize -v -1'
bind -c resize ^h eval 'command -c resize' 'resize -h -1'
bind -c resize ^l eval 'command -c resize' 'resize -h +1'
bind -c resize ^j eval 'command -c resize' 'resize -v +1'
bind -c resize ^k eval 'command -c resize' 'resize -v -1'
# windowのkill
bind x kill
# Layout
  # Layoutコマンド
  bind ^w eval 'command -c layout' 'layout show'
  bind -c layout ^w eval 'command -c layout' 'layout show'
  # Layoutの作成/削除
  bind -c layout c eval 'command -c layout' 'layout new' 'layout show'
  bind -c layout x eval 'command -c layout' 'layout remove' 'layout show'
  # Layoutのタイトルと番号入力
  bind -c layout T colon 'layout title '
  bind -c layout N colon 'layout number '
  # Layoutの移動
  bind -c layout n eval 'layout next' 'layout show'
  bind -c layout p eval 'layout prev' 'layout show'
  bind -c layout ^N eval 'command -c layout' 'layout next' 'layout show'
  bind -c layout ^P eval 'command -c layout' 'layout prev' 'layout show'
  # Layoutの番号選択
  bind -c layout 0 eval 'command -c layout' 'layout select 0' 'layout show'
  bind -c layout 1 eval 'command -c layout' 'layout select 1' 'layout show'
  bind -c layout 2 eval 'command -c layout' 'layout select 2' 'layout show'
  bind -c layout 3 eval 'command -c layout' 'layout select 3' 'layout show'
  bind -c layout 4 eval 'command -c layout' 'layout select 4' 'layout show'
  bind -c layout 5 eval 'command -c layout' 'layout select 5' 'layout show'
  bind -c layout 6 eval 'command -c layout' 'layout select 6' 'layout show'
  bind -c layout 7 eval 'command -c layout' 'layout select 7' 'layout show'
  bind -c layout 8 eval 'command -c layout' 'layout select 8' 'layout show'
  bind -c layout 9 eval 'command -c layout' 'layout select 9' 'layout show'
  # Layoutの初期化
  bind -c layout i eval 'screen' 'screen' 'screen' 'source $HOME/.screen/all.layout'
  bind -c layout ^i eval 'screen' 'screen' 'screen' 'source $HOME/.screen/all.layout'
  # Layoutのリセット
  bind -c layout r eval 'source $HOME/.screen/all.layout'
  bind -c layout ^r eval 'source $HOME/.screen/all.layout'
  # Layoutの適用
  bind -c layout m eval 'command -c layoutm' 'echo "0 only, l 4-windows, 2 3-win_1-top, 3 3-win_1-top, 4 monitor (1 top, 3 small bottoms), 5 split, 6 vsplit, "'
  bind -c layoutm 0 eval 'source $HOME/.screen/only.layout'
  bind -c layoutm 1 eval 'source $HOME/.screen/4-windows.layout'
  bind -c layoutm 2 eval 'source $HOME/.screen/3-win_1-top.layout'
  bind -c layoutm 3 eval 'source $HOME/.screen/3-win_1-left.layout'
  bind -c layoutm 4 eval 'source $HOME/.screen/monitor.layout'
  bind -c layoutm 5 eval 'source $HOME/.screen/split.layout'
  bind -c layoutm 6 eval 'source $HOME/.screen/vsplit.layout'
  # Layoutの保存
  bind -c layout s eval 'command -c layouts' 'layout show'
  bind -c layouts 0 eval 'layout save 0' 'echo "save to 0"'
  bind -c layouts 1 eval 'layout save 1' 'echo "save to 1"'
  bind -c layouts 2 eval 'layout save 2' 'echo "save to 2"'
  bind -c layouts 3 eval 'layout save 3' 'echo "save to 3"'
  bind -c layouts 4 eval 'layout save 4' 'echo "save to 4"'
  bind -c layouts 5 eval 'layout save 5' 'echo "save to 5"'
  bind -c layouts 6 eval 'layout save 6' 'echo "save to 6"'
  bind -c layouts 7 eval 'layout save 7' 'echo "save to 7"'
  bind -c layouts 8 eval 'layout save 8' 'echo "save to 8"'
  bind -c layouts 9 eval 'layout save 9' 'echo "save to 9"'
# }}}

### focus操作 ###
# {{{
bind h  eval    'focus left'
bind j  eval    'focus down'
bind k  eval    'focus up'
bind l  eval    'focus right'
bind ^h eval    'focus left'
bind ^? eval    'focus left' # Delete (Backspace)
bind -k kb eval 'command -c move' 'focus left' # Delete (Backspace)
bind ^j eval    'focus down'
bind \015  eval 'focus down' # Enter
bind ^k eval    'focus up'
bind ^l eval    'focus right'
# }}}

### multi_clipboard設定 ###
# {{{
# Screen exchange file
bufferfile "$SCREENEXCHANGE" # SCREENEXCHANGE must be set in .bashrc !!!

# Overwrite keys in copy mode
bindkey -m ' ' eval 'stuff \040' 'exec !!! multi_clipboard -I'
bindkey -m Y eval 'stuff Y' 'exec !!! multi_clipboard -I'
bindkey -m W eval 'stuff W' 'exec !!! multi_clipboard -I'

# Selection mode
# C-a a : default is meta (Send the command character (C-a) to window.)
# C-a C-a : default is other (Toggle the window displayed previously.)
# bind a eval 'command -c mc' 'exec multi_clipboard -S'
# bind ^a eval 'command -c mc' 'exec multi_clipboard -S'
bind a screen -t multi_clipboard /bin/sh -c "if type multi_clipboard >/dev/null 2>&1;then multi_clipboard -W;fi"
bind ^a screen -t multi_clipboard /bin/sh -c "if type multi_clipboard >/dev/null 2>&1;then multi_clipboard -W;fi"

# Next
bind -c mc n eval 'command -c mc' 'exec multi_clipboard -S -n'
bind -c mc ^n eval 'command -c mc' 'exec multi_clipboard -S -n'

# Previous
bind -c mc p eval 'command -c mc' 'exec multi_clipboard -S -p'
bind -c mc ^p eval 'command -c mc' 'exec multi_clipboard -S -p'

# Quit
bind -c mc q eval 'exec multi_clipboard -S -q'
bind -c mc ^q eval 'exec multi_clipboard -S -q'

# Choose and Quit
bind -c mc ' ' eval 'exec multi_clipboard -S -s'

# Launch selection window
# C-a q : default is xon (Send a control-q to the current window.)
bind q screen -t multi_clipboard -p - multi_clipboard -W

# OS clipboard
bind A eval 'exec /bin/sh -c "if type multi_clipboard >/dev/null 2>&1;then multi_clipboard -x;fi"' 'echo "copied to OS clipboard"'
}}}
